var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"\u003d StardyTogether"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W11-B4/main[image:https://travis-ci.org/CS2103JAN2018-W11-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/yeggasd/main[image:https://ci.appveyor.com/api/projects/status/kc7eo8888cc960u0?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://app.codacy.com/app/yeggasd/main[image:https://api.codacy.com/project/badge/Grade/81c0e706007944e881b2290412d87325[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"* This is a desktop Address Book application for students studying in NUS (National University of Singapore)."},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"* Manage the contacts of your friends in University, keep track of your friends\u0027 Birthdays, find the location of your lecture venues!"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"* Share useful information with your friends who are taking the same modules and find a common studying time!"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"* StardyTogether has a GUI (Graphic User Interface) but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"* Source code is from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Caijun7":6,"-":31}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d StardyTogether - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team W11-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* Stardy Together (ST) is for *NUS Students* who prefer to use a *desktop app* for managing NUS friends\u0027 contacts."},{"lineNumber":21,"author":{"gitID":"-"},"content":"* More importantly, ST is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":22,"author":{"gitID":"-"},"content":"* If you can type fast, ST can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":23,"author":{"gitID":"-"},"content":"* This guide provides a list of features that are available on ST and their usage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"* Interested? Jump to the next section, \u003c\u003cQuick Start\u003e\u003e, to get started. Enjoy!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Download the latest `StardyTogether.jar` link:{repoURL}/releases[here]."},{"lineNumber":35,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your StardyTogether."},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/010195` : adds a contact named `John Doe` to StardyTogether."},{"lineNumber":46,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Refer to the next section, \u003c\u003cFeatures\u003e\u003e, for details of each command, or refer to \u003c\u003cCommand Summary\u003e\u003e for the summary of all the commands."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"Adds a person to StardyTogether. +"},{"lineNumber":70,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY [t/TAG]...`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":73,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":77,"author":{"gitID":"-"},"content":"Birthday must be in DDMMYY format"},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/010195`"},{"lineNumber":83,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 b/121212 t/criminal`"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a command alias: `alias` (since v1.1)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Creates customized aliases for any valid command. +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Format: `alias [COMMAND] [ALIAS]`"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `alias history hist`"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `alias find f`"},{"lineNumber":94,"author":{"gitID":"-"},"content":"* `alias alias al`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Removing a currently existing alias: `unalias` (since v1.3)"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Removes a previously created alias. +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Format: `unalias [CURRENT_ALIAS]`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `unalias hist`"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Shows a list of all persons in StardyTogether. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Edits an existing person in StardyTogether. +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]...`"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"****"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":117,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":119,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":121,"author":{"gitID":"-"},"content":"****"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":128,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"****"},{"lineNumber":136,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"****"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":147,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons taking that module: `module` (coming in v1.4)"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"Finds persons who is taking the module as specified. +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Format: `module MODULE_CODE`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `CS2010` will match `cs2010`"},{"lineNumber":157,"author":{"gitID":"-"},"content":"* Only full module codes will be matched e.g. `2010` will not match `CS2010`"},{"lineNumber":158,"author":{"gitID":"-"},"content":"* Persons taking the module will be returned."},{"lineNumber":159,"author":{"gitID":"-"},"content":"****"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"* `module CS2010` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Returns all persons having CS2010 in their modules"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Removal of password: `nopassword` (since v1.3)"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Removes the password of the application. +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Format: `nopassword`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing a collated birthday list: `birthdays` (since v1.3)"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Displays a list that contains all the birthdays of all contacts ordered by date +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Or display a notification of the birthdays today +"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Format: `birthdays [ADDITIONAL_PARAMETER]`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"****"},{"lineNumber":178,"author":{"gitID":"-"},"content":"* There is an optional field of [ADDITIONAL_PARAMETER]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"* You can input `todays` in that field to show a notification of the birthdays today instead"},{"lineNumber":180,"author":{"gitID":"-"},"content":"****"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `birthdays` +"},{"lineNumber":185,"author":{"gitID":"-"},"content":"Displays a list of all birthdays"},{"lineNumber":186,"author":{"gitID":"-"},"content":"* `birthdays today` +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Displays a window with the birthdays today"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing common time slots in timetable: `free` (coming in v2.0)"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Displays the common free time of two people in StardyTogether. +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Format: `free p/[PERSON1] p/[PERSON2]`"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"****"},{"lineNumber":195,"author":{"gitID":"-"},"content":"* Only full names will be matched e.g. `Han` will not match `Han Tan`"},{"lineNumber":196,"author":{"gitID":"-"},"content":"* Overlap of the two persons\u0027 timetables will be displayed."},{"lineNumber":197,"author":{"gitID":"-"},"content":"****"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* `free p/John Doe p/Han Tan` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Displays the combined timetable for John Doe and Han Tan."},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Deletes the specified person from StardyTogether. +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"****"},{"lineNumber":210,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":213,"author":{"gitID":"-"},"content":"****"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"Deletes the 2nd person in StardyTogether."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"****"},{"lineNumber":230,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":233,"author":{"gitID":"-"},"content":"****"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"Selects the 2nd person in StardyTogether."},{"lineNumber":240,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing data : `import` (since v1.1)"},{"lineNumber":245,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Imports an encrypted StardyTogether instance from filepath to the existing StardyTogether application. Persons, Tags, and Aliases that are not in your StardyTogether will be added. +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"Format: `import FILEPATH PASSWORD`"},{"lineNumber":248,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":249,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":250,"author":{"gitID":"-"},"content":"* Imports an instance of StardyTogether from the specified `FILEPATH`."},{"lineNumber":251,"author":{"gitID":"-"},"content":"* Decrypt that instance using the `PASSWORD` provided."},{"lineNumber":252,"author":{"gitID":"-"},"content":"* The filepath refers to the filepath where the instance file is stored."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* The instance file *must be in XML file format* after decryption."},{"lineNumber":254,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":255,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":257,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"* `import data/addressBook.xml testpassword` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Imports `addressBook.xml` file at data folder using \"testpassword\" as the password."},{"lineNumber":260,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":261,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Exporting data : `export` (coming in v1.4)"},{"lineNumber":262,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":263,"author":{"gitID":"Caijun7"},"content":"Exports the current list of the existing StardyTogether application with password encryption to the specified filepath"},{"lineNumber":264,"author":{"gitID":"Caijun7"},"content":"Format: `export FILEPATH PASSWORD`"},{"lineNumber":265,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":266,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":267,"author":{"gitID":"Caijun7"},"content":"* Exports an instance of StardyTogether to the specified `FILEPATH`."},{"lineNumber":268,"author":{"gitID":"Caijun7"},"content":"* Encrypt that instance using the `PASSWORD` provided."},{"lineNumber":269,"author":{"gitID":"Caijun7"},"content":"* The filepath refers to the filepath where the instance file will be stored."},{"lineNumber":270,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":271,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":272,"author":{"gitID":"Caijun7"},"content":"Example:"},{"lineNumber":273,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":274,"author":{"gitID":"Caijun7"},"content":"* `export data/addressBook.xml testpassword` +"},{"lineNumber":275,"author":{"gitID":"Caijun7"},"content":"Exports the current list of StardyTogether application to the `addressBook.xml` file at data folder using \"testpassword\" as the password for encryption."},{"lineNumber":276,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Vacant study rooms finder : `vacant` (since in v1.3)"},{"lineNumber":278,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"Displays a list of rooms in the specified building and whether each room is vacant or not, in blocks of 1 hours. +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Format: `vacant BUILDING`"},{"lineNumber":281,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":282,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":283,"author":{"gitID":"-"},"content":"* Finds vacant study rooms in the specified `BUILDING`."},{"lineNumber":284,"author":{"gitID":"Caijun7"},"content":"* The building must be in NUS venue format, e.g. `COM1`, `S17`, `E2`"},{"lineNumber":285,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":286,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":287,"author":{"gitID":"Caijun7"},"content":"Examples:"},{"lineNumber":288,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"* `vacant COM1` +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"Finds the vacancy status of study rooms in COM1 building."},{"lineNumber":291,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"Restores the StardyTogether instance to the state before the previous _undoable_ command was executed. +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":310,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the StardyTogether\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":311,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":322,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":327,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":337,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":338,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":345,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":350,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"Clears all entries from StardyTogether. +"},{"lineNumber":355,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":360,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"StardyTogether data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":365,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files : `password` (since v1.2)"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"Changes the password used to encrypt the StardyTogether. +"},{"lineNumber":371,"author":{"gitID":"-"},"content":"Format: `password PASSWORD`"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"****"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Encrypts StardyTogether using the specified PASSWORD."},{"lineNumber":375,"author":{"gitID":"-"},"content":"* Passwords are case-sensitive."},{"lineNumber":376,"author":{"gitID":"-"},"content":"* The password string can only contain characters in the UTF-8 format."},{"lineNumber":377,"author":{"gitID":"-"},"content":"****"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `password test` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Encrypts `addressbook.xml` with \"test\" as the key."},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"*A*:"},{"lineNumber":390,"author":{"gitID":"-"},"content":"*Method 1*"},{"lineNumber":391,"author":{"gitID":"-"},"content":"Replaces the other computer\u0027s data completely"},{"lineNumber":392,"author":{"gitID":"-"},"content":"****"},{"lineNumber":393,"author":{"gitID":"-"},"content":".  In the folder that `StardyTogether.jar` is in, find the `data` folder"},{"lineNumber":394,"author":{"gitID":"-"},"content":".  Copy the `addressbook.xml` storage file inside"},{"lineNumber":395,"author":{"gitID":"-"},"content":".  Transfer that file to the other computer"},{"lineNumber":396,"author":{"gitID":"-"},"content":".  Place it in the `data` folder of `StardyTogether.jar`, on the other computer"},{"lineNumber":397,"author":{"gitID":"-"},"content":"****"},{"lineNumber":398,"author":{"gitID":"-"},"content":"*Method 2*"},{"lineNumber":399,"author":{"gitID":"-"},"content":"Merges the contacts of both computers"},{"lineNumber":400,"author":{"gitID":"-"},"content":"****"},{"lineNumber":401,"author":{"gitID":"-"},"content":".  In the folder that `StardyTogether.jar` is in, find the `data` folder"},{"lineNumber":402,"author":{"gitID":"-"},"content":".  Copy the `addressbook.xml` storage file inside"},{"lineNumber":403,"author":{"gitID":"-"},"content":".  Transfer that file to the other computer"},{"lineNumber":404,"author":{"gitID":"-"},"content":".  Rename that file to avoid overwriting the existing `addressbook.xml`"},{"lineNumber":405,"author":{"gitID":"-"},"content":".  Place it in the `data` folder of `StardyTogether.jar`, on the other computer"},{"lineNumber":406,"author":{"gitID":"-"},"content":".  Type `import [fileName]` into the command box, where [fileName] is the new name from Step 4"},{"lineNumber":407,"author":{"gitID":"-"},"content":".  Press Enter"},{"lineNumber":408,"author":{"gitID":"-"},"content":"****"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY [t/TAG]...` +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/010195 t/friend t/colleague`"},{"lineNumber":415,"author":{"gitID":"-"},"content":"* *Alias* `alias [COMMAND] [ALIAS]` +"},{"lineNumber":416,"author":{"gitID":"-"},"content":"e.g. `alias history hist`"},{"lineNumber":417,"author":{"gitID":"-"},"content":"* *Birthday List*: `birthdays`"},{"lineNumber":418,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":419,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":421,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]...` +"},{"lineNumber":422,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":423,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":425,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":426,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":427,"author":{"gitID":"Caijun7"},"content":"* *Import* : `import FILEPATH PASSWORD` +"},{"lineNumber":428,"author":{"gitID":"Caijun7"},"content":"e.g.`import data/addressBook.xml testpassword`"},{"lineNumber":429,"author":{"gitID":"Caijun7"},"content":"* *Export* : `Export FILEPATH PASSWORD` +"},{"lineNumber":430,"author":{"gitID":"Caijun7"},"content":"e.g.`Export data/addressBook.xml testpassword`"},{"lineNumber":431,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":432,"author":{"gitID":"-"},"content":"* *Password* : `password PASSWORD` +"},{"lineNumber":433,"author":{"gitID":"-"},"content":"e.g. `password test`"},{"lineNumber":434,"author":{"gitID":"-"},"content":"* *Remove Password* : `nopassword`"},{"lineNumber":435,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":436,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":438,"author":{"gitID":"-"},"content":"* *Unalias* `unalias [CURRENT_ALIAS]` +"},{"lineNumber":439,"author":{"gitID":"-"},"content":"e.g. `unalias hist`"},{"lineNumber":440,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":441,"author":{"gitID":"-"},"content":"* *Vacant* : `vacant BUILDING` +"},{"lineNumber":442,"author":{"gitID":"-"},"content":"e.g. `vacant COM1`"}],"authorContributionMap":{"Caijun7":36,"-":406}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d StardyTogether - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W11-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":"StardyTogether is a command line application which provides students a way to manage their contacts."},{"lineNumber":19,"author":{"gitID":"-"},"content":"It is customized for students in the National University of Singapore (NUS) which allows them to find vacant rooms within NUS and also to track their timetable."},{"lineNumber":20,"author":{"gitID":"-"},"content":"This documentation provides information that will not only help you get started as a StardyTogether contributor, but that you\u0027ll find useful to refer to even if you are already an experienced contributor."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":45,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":52,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":57,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W11-B4/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W11-B4/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":97,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":105,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":137,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":189,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":192,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":193,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":194,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":205,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":220,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":251,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":252,"author":{"gitID":"-"},"content":"----"},{"lineNumber":253,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":262,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"----"},{"lineNumber":264,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":301,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":310,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":331,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":340,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":350,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":353,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":364,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// tag::customizedalias[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Customized Alias feature"},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"image::LogicComponentAliasSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How alias list is maintained"},{"lineNumber":377,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Create an `UniqueAliasList` in the `alias` model"},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Pros: Reduce coupling between `Alias` and other commands. This design follows the Open Closed Principle where a command is open to extension and closed to modification."},{"lineNumber":381,"author":{"gitID":"-"},"content":"** Cons: More difficult to implement as need to design an instance of a `UniqueAliasList`."},{"lineNumber":382,"author":{"gitID":"-"},"content":"* **Alternative 2:** Create a HashMap of `Alias` in each command class"},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Pros: Faster to implement as each command class only needs to include a HashMap that stores all the aliases tagged to the command."},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Cons: High coupling between `Alias` and other commands and the HashMaps of every command needs to be iterated through to find to find the aliased command."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How alias is stored"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store as `XmlAdaptedAlias` and save to `addressbook.xml`"},{"lineNumber":389,"author":{"gitID":"-"},"content":"** Pros: Reduces files where data need to be stored, as all the user saved data is in one file."},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Cons: Need to design a section in `addressbook.xml` for saving alias data with the other data like person data."},{"lineNumber":391,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store in `UserPrefsStorage`"},{"lineNumber":392,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Cons: Affects Import command, to import `UserPrefsStorage` as well, than just importing `addressbook.xml`"},{"lineNumber":394,"author":{"gitID":"-"},"content":"// end::customizedalias[]"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Data Encryption"},{"lineNumber":398,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"We are using `java.crypto.cipher` and `java.security.key` package for the encryption of the data. The `SecurityUtil` class is used to provide the `SHA-1` hashing and `AES` encryption/decryption required."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"Using a given password, it is first hashed using `SHA-1` to be used as the `AES` key."},{"lineNumber":403,"author":{"gitID":"-"},"content":"The first 128 bits of the digest created by the `SHA-1` hash is extracted."},{"lineNumber":404,"author":{"gitID":"-"},"content":"This is required as `AES` requires its key to be 128 bits long."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* The encryption can be done simply by using `SecurityUtil.encrypt()` which will encrypt the addressbook.xml."},{"lineNumber":407,"author":{"gitID":"-"},"content":"* The decryption can be done simply by using `SecurityUtil.decrypt()` which will decrypt the addressbook.xml."},{"lineNumber":408,"author":{"gitID":"-"},"content":"* Currently, decryption/encryption is done in `XmlAddressBookStorage` class before/after `readAddressBook` and `saveAddressBook`."},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"A default password is used if the user do not set a password."},{"lineNumber":411,"author":{"gitID":"-"},"content":"Users can change their password using the command `password`. +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"The sequence diagram shows how the `ModelManager` updates the password:"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"image::PasswordSdForModel.png[width\u003d\"800\"]"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"The 128 bit password used to encrypt `addressbook.xml` is saved in the address book to ensure that the password is not lost after every reset of the application."},{"lineNumber":417,"author":{"gitID":"-"},"content":"This is secure as even if a malicious user were to somehow get a copy of the 128 bit password, they would still need to use a computationally unfeasible pre-image attack."},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to generate the AES key"},{"lineNumber":423,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Generating the key from a password"},{"lineNumber":424,"author":{"gitID":"-"},"content":"** Pros: Users are able to key in their own passwords"},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Cons: Default password needs to be provided which may make it as insecure as before if users do not change it."},{"lineNumber":426,"author":{"gitID":"-"},"content":"* **Alternative 2:** Generating the key within the code into a file for user to share."},{"lineNumber":427,"author":{"gitID":"-"},"content":"** Pros: It would be guaranteed to be more secure than using our own generated key."},{"lineNumber":428,"author":{"gitID":"-"},"content":"    This is because keys generated by `java.crypto.KeyGenerator` have their algorithms reviewed by many experts in the area."},{"lineNumber":429,"author":{"gitID":"-"},"content":"** Cons: This would require a file to be carried by the user to decrypt their address book which makes it very inconvenient for the user."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to encrypt and decrypt file"},{"lineNumber":432,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Encryption and Decryption done in `XmlAddressBookStorage` class"},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Pros: Easy and clear to understand implementation where file is encrypted and decrypted before and after `readAddressBook` and `saveAddressBook`."},{"lineNumber":434,"author":{"gitID":"-"},"content":"** Cons: `addressbook.xml` is in plain text longer than is required."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"* **Alternative 2:**  Encryption and Decryption done where needed in `XmlUtil` and `XmlFileStorage`"},{"lineNumber":437,"author":{"gitID":"-"},"content":"** Pros: `addressbook.xml` is exposed minimally."},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Cons: Increase coupling of more classes and makes the implementation harder to understand."},{"lineNumber":439,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to save the password"},{"lineNumber":442,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save in `addressbook.xml`"},{"lineNumber":443,"author":{"gitID":"-"},"content":"** Pros: The password is not lost after every reload of the application."},{"lineNumber":444,"author":{"gitID":"-"},"content":"** Cons: Plaintext of `addressbook.xml` contains the 128 bit `AES` key used."},{"lineNumber":445,"author":{"gitID":"-"},"content":"However, this is still secure as even if a malicious user were to somehow get a copy of the 128 bit password, they would still need to use a computationally unfeasible pre-image attack."},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"* **Alternative 2: Password not saved"},{"lineNumber":448,"author":{"gitID":"-"},"content":"** Pros: No chance of password being compromised."},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Cons: Password reset after each reload of application."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Import AddressBook feature"},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"Caijun7"},"content":"The import AddressBook mechanism is facilitated by `XmlSerializableAddressBook`, which resides inside `Storage`. It allows the imported XML file to be converted into AddressBook format."},{"lineNumber":455,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":456,"author":{"gitID":"Caijun7"},"content":"The imported AddressBook must be a XML file that follows `XmlAdaptedPerson`, `XmlAdaptedTag`, and `XmlAdaptedAlias` format."},{"lineNumber":457,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":458,"author":{"gitID":"Caijun7"},"content":"`Person`,`Tag`, and `Alias` from imported AddressBook that are not a duplicate of existing `Person`, `Tag`, and `Alias` in the user\u0027s AddressBook will be added."},{"lineNumber":459,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":460,"author":{"gitID":"Caijun7"},"content":"The following sequence diagram shows how the import operation works:"},{"lineNumber":461,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":462,"author":{"gitID":"Caijun7"},"content":"image::ImportCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Imported AddressBook file format"},{"lineNumber":467,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":468,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Uses the same XML file format as `XmlSerializableAddressBook`"},{"lineNumber":469,"author":{"gitID":"Caijun7"},"content":"** Pros: Same file format as saved AddressBook, users can transfer AddressBook easily without the need to indicate file format."},{"lineNumber":470,"author":{"gitID":"Caijun7"},"content":"** Cons: Imported AddressBook must be in XML file format that follows `XmlAdaptedPerson`, `XmlAdaptedTag`, and `XmlAdaptedAlias` format."},{"lineNumber":471,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Uses CSV file format"},{"lineNumber":472,"author":{"gitID":"Caijun7"},"content":"** Pros: CSV file format is widely used and is able to transfer between different applications (eg. Microsoft Excel)."},{"lineNumber":473,"author":{"gitID":"Caijun7"},"content":"** Cons: Different file format as saved AddressBook, implementation of converting file type from XML to CSV is needed."},{"lineNumber":474,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":475,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How import command executes"},{"lineNumber":476,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":477,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Adds all `Person`,`Tag`, and `Alias` from imported AddressBook that are not a duplicate of existing `Person`, `Tag`, and `Alias` to the user\u0027s AddressBook."},{"lineNumber":478,"author":{"gitID":"Caijun7"},"content":"** Pros: User does not need to indicate which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":479,"author":{"gitID":"Caijun7"},"content":"** Cons: User is not able to select which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":480,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Adds selected `Person`,`Tag`, and `Alias` from imported AddressBook that are not a duplicate of existing `Person`, `Tag`, and `Alias` to the user\u0027s AddressBook."},{"lineNumber":481,"author":{"gitID":"Caijun7"},"content":"** Pros: User is able to select which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":482,"author":{"gitID":"Caijun7"},"content":"** Cons: User needs to indicate which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":483,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Birthdays feature"},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":486,"author":{"gitID":"-"},"content":"Birthdays Command uses the existing Events system and sends an event."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"image::LogicComponentBirthdaysSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"The UI component will then receive the event and handle the data."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"image::UiComponentBirthdayListSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How the BirthdayList UI component obtains and parses its data"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"* **Alternative 1**: Let UI component handle the parsing of UniquePersonList obtained from Event"},{"lineNumber":499,"author":{"gitID":"-"},"content":"** Pros: Isolated and independent within BirthdayList UI component. Less overhead."},{"lineNumber":500,"author":{"gitID":"-"},"content":"** Cons: Not intuitive to new developers as parsing of data is not expected in UI."},{"lineNumber":501,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice)**: Let Birthdays do the parsing of UniquePersonList obtained from Model"},{"lineNumber":502,"author":{"gitID":"-"},"content":"** Pros: More modularity."},{"lineNumber":503,"author":{"gitID":"-"},"content":"** Cons: Not apparent in usage by User. Functionality remains the same but Birthdays command becomes more cluttered."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How User can open Birthday List"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"* **Alternative 1**: Manual command \"birthdays\" or \"birthdays today\""},{"lineNumber":508,"author":{"gitID":"-"},"content":"** Pros: User can control when to view the birthdays."},{"lineNumber":509,"author":{"gitID":"-"},"content":"** Cons: Not very user-friendly. Additional parameter cannot be shortened."},{"lineNumber":510,"author":{"gitID":"-"},"content":"* ** Alternative 2 (current choice)**: Notification at the start of app if a birthday is occurring today"},{"lineNumber":511,"author":{"gitID":"-"},"content":"** Pros: User can be reminded immediately and need not type the command."},{"lineNumber":512,"author":{"gitID":"-"},"content":"** Cons: Currently, StardyTogether does not have settings to switch on/off the feature. User may find it irritating."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How User inputs the Birthday parameter in Person class"},{"lineNumber":515,"author":{"gitID":"-"},"content":"* ** Alternative 1 (Current choice)**: Fixed format as DDMMYYYY"},{"lineNumber":516,"author":{"gitID":"-"},"content":"** Pros: Less room for errors."},{"lineNumber":517,"author":{"gitID":"-"},"content":"** Cons: User may not like the DDMMYYYY format."},{"lineNumber":518,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use Natural Language Processing"},{"lineNumber":519,"author":{"gitID":"-"},"content":"** Pros: Users can enter their birthday in their preferred format."},{"lineNumber":520,"author":{"gitID":"-"},"content":"** Cons: External API will be used. May introduce unforeseen bugs."},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":527,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":528,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":533,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":534,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":535,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":552,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":565,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":566,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":567,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":570,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":580,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":585,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":605,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":606,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":607,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":608,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":609,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":610,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":612,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":613,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":617,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":620,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":637,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":644,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":645,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":646,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":651,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":652,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":655,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":661,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":662,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":663,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":665,"author":{"gitID":"Caijun7"},"content":"* is a student in National University of Singapore"},{"lineNumber":666,"author":{"gitID":"Caijun7"},"content":"* has many friends in the same course"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"Caijun7"},"content":"*Value proposition*: share useful information with their friends who are taking the same modules and find a common studying time"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"*Feature Contribution*"},{"lineNumber":671,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"45%,\u003c33%,\u003c33%\",options\u003d\"header\",]"},{"lineNumber":672,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":673,"author":{"gitID":"-"},"content":"|Name |Minor Enhancement |Major Enhancement"},{"lineNumber":674,"author":{"gitID":"-"},"content":"|Lee Yong Ler | Adding of `TimeTable` class and into the `Person` class. This allows user to enter their time table into the address book, making it easy for them to know their time table.|Data encryption system to allow the `addressbook.xml` to be encrypted when not in use. A `password` command will also be added for user to key in their own password. This ensure that the privacy of users are respected and information in the address book is confidential. NUS students would be able to store sensitive information like time table without fear of them leaking."},{"lineNumber":675,"author":{"gitID":"Caijun7"},"content":"|Loh Cai Jun | Implementing Model and Storage component of Vacant study rooms finder feature to help user to find vacant study rooms nearby. | Importing and exporting AddressBook feature to allow user to transfer selected data to other users, transfer to different computers, store and restore backup of AddressBook easily."},{"lineNumber":676,"author":{"gitID":"-"},"content":"|Ong Jing Yin | Designing UI for finding vacant venues feature. UI will display a table of timings for the requested location, with information about whether the venue is vacant or not |Customized alias to allow users to set their own short cuts or intuitive naming for existing commands, to cater to their own preference."},{"lineNumber":677,"author":{"gitID":"-"},"content":"|Wayne Neo| In charge of Model and Logic for Timetable. User can enter their timetable and compare their timetables to find common slots for easy \u0027stardying\u0027 together| Birthdays system helps User to keep track of their friend\u0027s birthdays and remind them promptly if its their birthday today"},{"lineNumber":678,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":686,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":687,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":688,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |search friends who have taken or are taking similar modules |know who I can group with or approach for help"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |find my friend’s timetables |find common studying time with them"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |list my friends\u0027 birthdays |plan ahead in time for their birthdays"},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |be notified of birthdays today |wish them happy birthday"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"Caijun7"},"content":"|`* * *` |student with friends |export contacts taking similar module to another friend |let my friend know who is taking similar modules"},{"lineNumber":699,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"|`* * *` |busy student |have short forms of commands |type more quickly"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"|`* * *` |busy student |have my customized short forms of commands |type even quicker and in my own style"},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"|`* * *` |busy student |be able to remove my customized short forms |reuse keys"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"|`* * *` |user who is concerned about privacy |have my data encrypted |ensure that no one can access my data without my permission"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"|`* * *` |user who is concerned about privacy |change the password used |security is not compromised"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"|`* * *` |student who studies in school |be able to find rooms that I can study in |save time finding rooms"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"|`* * *`|user| be able to transfer data between computers |  share my data with others and change computers seamlessly"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"|`* * *`|user who is concerned about privacy| be able to transfer encrypted data |share my data in its encrypted form"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"|`* * *`|user with many friends| track the birthdays of my friends | not miss a friend\u0027s birthday"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"|`* * *`|user with many friends| see all my friend\u0027s birthday in a list | know who\u0027s birthday is upcoming"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"|`* *` |user who is lazy |be able to leave my address book unencrypted | read it without opening the application"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"|`* *`|power user| be able to auto complete commands| I can use the application faster"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":733,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":738,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":748,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":749,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":750,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":751,"author":{"gitID":"-"},"content":"+"},{"lineNumber":752,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":757,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":758,"author":{"gitID":"-"},"content":"+"},{"lineNumber":759,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":762,"author":{"gitID":"-"},"content":"+"},{"lineNumber":763,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":764,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":766,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":769,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find venue"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"1.  User requests to find an available venue"},{"lineNumber":774,"author":{"gitID":"-"},"content":"2.  AddressBook prompts user to input a faculty"},{"lineNumber":775,"author":{"gitID":"-"},"content":"3.  User requests venues near this faculty"},{"lineNumber":776,"author":{"gitID":"-"},"content":"4.  AddressBook prints out a list of available venues near the specified faculty"},{"lineNumber":777,"author":{"gitID":"-"},"content":"+"},{"lineNumber":778,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"* 2a. No location is available"},{"lineNumber":784,"author":{"gitID":"-"},"content":"+"},{"lineNumber":785,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":786,"author":{"gitID":"-"},"content":"** 2a1. AddressBook displays the empty result"},{"lineNumber":787,"author":{"gitID":"-"},"content":"+"},{"lineNumber":788,"author":{"gitID":"-"},"content":"Use case resumes at step 2"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"* 3a. The given location is invalid."},{"lineNumber":791,"author":{"gitID":"-"},"content":"+"},{"lineNumber":792,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":793,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":794,"author":{"gitID":"-"},"content":"+"},{"lineNumber":795,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"* 4a. AddressBook cannot retrieve the information online"},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":800,"author":{"gitID":"-"},"content":"** 4a1. AddressBook shows an error message"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** 4a2. AddressBook attempts to reconnect"},{"lineNumber":802,"author":{"gitID":"-"},"content":"** 4a3. If problem persists, AddressBook directs User to troubleshooting"},{"lineNumber":803,"author":{"gitID":"-"},"content":"+"},{"lineNumber":804,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":812,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":813,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":814,"author":{"gitID":"-"},"content":".  Address book must be able to be picked up with 2 hours of usage."},{"lineNumber":815,"author":{"gitID":"-"},"content":".  Color Scheme must be pleasing to the eyes."},{"lineNumber":816,"author":{"gitID":"-"},"content":".  User guide must be clear and concise."},{"lineNumber":817,"author":{"gitID":"-"},"content":".  Basic features must be intuitive to use."},{"lineNumber":818,"author":{"gitID":"Caijun7"},"content":".  Should respond to user within 3 seconds."},{"lineNumber":819,"author":{"gitID":"Caijun7"},"content":".  Should work in both 32-bit and 64-bit environments."},{"lineNumber":820,"author":{"gitID":"Caijun7"},"content":".  Should be usable by a new user who has not used command line interface before."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":825,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":828,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":831,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":834,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":843,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":848,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":851,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":856,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":863,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":864,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":869,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":870,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":879,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":880,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":881,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":882,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":883,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":884,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":".. Test case: Delete `addressbook.xml` +"},{"lineNumber":893,"author":{"gitID":"-"},"content":"   Expected: Application opens with an address book with dummy data."},{"lineNumber":894,"author":{"gitID":"-"},"content":".. Test case: Corrupt `addressbook.xml` by editing it +"},{"lineNumber":895,"author":{"gitID":"-"},"content":"   Expected: Application opens with an address book with dummy data."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Caijun7":37,"-":860}},{"path":"src/test/java/seedu/address/ui/PasswordBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PasswordBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordCorrectEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyJsonVenueInformation;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class PasswordBoxTest extends GuiUnitTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String CORRECT_PASSWORD \u003d \"test\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String WRONG_PASSWORD \u003d \"wrong\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/PasswordBoxTest/\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfPasswordBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfPasswordBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private PasswordBoxHandle passwordBoxHandle;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Storage storageManager \u003d setUpStorage();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(storageManager.readAddressBook(new Password(CORRECT_PASSWORD)).get());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        PasswordBox commandBox \u003d new PasswordBox(storageManager, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        passwordBoxHandle \u003d new PasswordBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                PasswordBoxHandle.PASSWORD_INPUT_FIELD_ID));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        defaultStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(passwordBoxHandle.getStyleClass());"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        errorStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(defaultStyleOfPasswordBox);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        errorStyleOfPasswordBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private String getTestFilePath(String fileName) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return TEST_DATA_FOLDER + fileName;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Storage setUpStorage() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTestFilePath("},{"lineNumber":63,"author":{"gitID":"-"},"content":"                                                                            \"encryptedAddressBook.xml\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTestFilePath(\"prefs\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ReadOnlyJsonVenueInformation venueInformationStorage \u003d new ReadOnlyJsonVenueInformation(\"vi\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void passwordBox_startingWithWrongPassword() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertBehaviorForWrongPassword();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void passwordBox_startingWithCorrectPassword() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertBehaviorForCorrectPassword();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void passwordBox_handleKeyPress() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Use a wrong password, then verifies that \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the text remains resets \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertBehaviorForWrongPassword() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Enters the correct password, then verifies that \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *      - the event {@code PasswordCorrectEvent} is raised."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void assertBehaviorForCorrectPassword() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        passwordBoxHandle.run(CORRECT_PASSWORD);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PasswordCorrectEvent);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":2,"-":109}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    private ImportCommandParser parser \u003d new ImportCommandParser();"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    public void parse_validArgs_returnsImportCommand() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"validString test\", new ImportCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_oneArg_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"validString\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ImportCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":16,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/PasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * outside of the PasswordCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * same path through the PasswordCommand, and therefore we test only one of them."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PasswordCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PasswordCommandParser parser \u003d new PasswordCommandParser();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsParseCommand() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new PasswordCommand(\"1\"));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                PasswordCommand.INVALID_PASSWORD, PasswordCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":3,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/UnaliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_FIND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_HISTORY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST_COMMAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class UnaliasCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void constructor_nullAlias_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        new UnaliasCommand(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_unaliasRemovedByModel_removeSuccessful() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStubAcceptingUnaliasAdded modelStub \u003d new ModelStubAcceptingUnaliasAdded();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String validUnalias \u003d VALID_ALIAS_LIST;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Alias validUnaliasAlias \u003d new AliasBuilder().withCommand(VALID_ALIAS_LIST_COMMAND)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .withAlias(VALID_ALIAS_LIST).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArrayList\u003cAlias\u003e expectedAliasesList \u003d new ArrayList\u003cAlias\u003e();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getUnaliasCommand(validUnalias, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(String.format(UnaliasCommand.MESSAGE_SUCCESS, validUnaliasAlias), commandResult.feedbackToUser);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(expectedAliasesList, modelStub.aliases);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_unaliasRemovedByModel_removeFailure() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ModelStubAcceptingUnaliasAdded modelStub \u003d new ModelStubAcceptingUnaliasAdded();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String invalidUnalias \u003d VALID_ALIAS_FIND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expectMessage(UnaliasCommand.MESSAGE_UNKNOWN_UNALIAS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        getUnaliasCommand(invalidUnalias, modelStub).execute();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UnaliasCommand listUnaliasCommand \u003d new UnaliasCommand(VALID_ALIAS_LIST);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        UnaliasCommand historyUnaliasCommand \u003d new UnaliasCommand(VALID_ALIAS_HISTORY);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertTrue(listUnaliasCommand.equals(listUnaliasCommand));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UnaliasCommand listUnaliasCommandCopy \u003d new UnaliasCommand(VALID_ALIAS_LIST);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(listUnaliasCommand.equals(listUnaliasCommandCopy));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(listUnaliasCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(listUnaliasCommand \u003d\u003d null);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // different unalias -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertFalse(listUnaliasCommand.equals(historyUnaliasCommand));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Generates a new UnaliasCommand with the details of the given alias."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private UnaliasCommand getUnaliasCommand(String unalias, Model model) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        UnaliasCommand command \u003d new UnaliasCommand(unalias);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public void updatePassword(byte[] password)  {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the alias being removed."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingUnaliasAdded extends ModelStub {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        private final ArrayList\u003cAlias\u003e aliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void removeAlias(String unalias) throws AliasNotFoundException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            aliases.add(new Alias(VALID_ALIAS_LIST_COMMAND, VALID_ALIAS_LIST));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            requireNonNull(unalias);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            boolean isRemove \u003d false;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            for (int i \u003d 0; i \u003c aliases.size(); i++) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                if (aliases.get(i).getAlias().equals(unalias)) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                    aliases.remove(aliases.get(i));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                    isRemove \u003d true;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                    break;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"            if (!isRemove) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                throw new AliasNotFoundException();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":8,"-":209}},{"path":"src/test/java/seedu/address/logic/commands/AliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMAND_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ADD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AliasCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void constructor_nullAlias_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        new AliasCommand(null);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_aliasAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Alias validAlias \u003d new AliasBuilder().build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAliasCommand(validAlias, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AliasCommand.MESSAGE_SUCCESS, validAlias), commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validAlias), modelStub.aliasesAdded);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void execute_duplicateAlias_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAliasException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Alias validAlias \u003d new AliasBuilder().build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AliasCommand.MESSAGE_DUPLICATE_ALIAS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        getAliasCommand(validAlias, modelStub).execute();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_aliasWordAlias_failure() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        //test alias word to be a command word failure"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        List\u003cString\u003e commands \u003d AliasCommand.getCommands();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c commands.size(); i++) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            for (int j \u003d 0; j \u003c commands.size(); j++) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                thrown.expect(CommandException.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                Alias invalidAlias \u003d new Alias(commands.get(i), commands.get(j));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                getAliasCommand(invalidAlias, modelStub).execute();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void execute_commandWordAlias_failure() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        //test invalid command word with valid alias word failure"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Alias invalidAlias \u003d new Alias(INVALID_COMMAND_DESC, VALID_ALIAS_ADD);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        getAliasCommand(invalidAlias, modelStub).execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Alias edit \u003d new AliasBuilder().withCommand(\"Edit\").build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Alias exit \u003d new AliasBuilder().withCommand(\"Exit\").build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        AliasCommand editAliasCommand \u003d new AliasCommand(edit);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        AliasCommand exitAliasCommand \u003d new AliasCommand(exit);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(editAliasCommand.equals(editAliasCommand));"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AliasCommand editAliasCommandCopy \u003d new AliasCommand(edit);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(editAliasCommand.equals(editAliasCommandCopy));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(editAliasCommand.equals(1));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertFalse(editAliasCommand \u003d\u003d null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // different alias -\u003e returns false"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertFalse(editAliasCommand.equals(exitAliasCommand));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Generates a new AliasCommand with the details of the given alias."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private AliasCommand getAliasCommand(Alias alias, Model model) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AliasCommand command \u003d new AliasCommand(alias);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void updatePassword(byte[] password)  {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"            return null;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateAliasException extends ModelStub {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new DuplicateAliasException();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the alias being added."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingAliasAdded extends ModelStub {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        private final ArrayList\u003cAlias\u003e aliasesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            requireNonNull(alias);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            aliasesAdded.add(alias);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":8,"-":236}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"01011995\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"02021993\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"12345b\"; // \u0027b\u0027 not allowed in birthday"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_ADD \u003d \"add1\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_ALIAS \u003d \"alias1\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_CLEAR_COMMAND \u003d ClearCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_CLEAR \u003d \"clear1\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_DELETE_COMMAND \u003d DeleteCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_DELETE \u003d \"delete1\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_EDIT \u003d \"edit1\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_EXIT \u003d \"exit1\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_FIND \u003d \"find1\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_HELP_COMMAND \u003d HelpCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_HELP \u003d \"help1\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_HISTORY \u003d \"history1\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_IMPORT \u003d \"import1\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_LIST_COMMAND \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_LIST \u003d \"list1\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_REDO \u003d \"redo1\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_SELECT \u003d \"select1\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_UNDO \u003d \"undo1\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String VALID_ALIAS_NUMBER \u003d \"9\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_ADD \u003d AddCommand.COMMAND_WORD + \" \" + VALID_ALIAS_ADD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_ALIAS \u003d AliasCommand.COMMAND_WORD + \" \" + VALID_ALIAS_ALIAS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_CLEAR \u003d ClearCommand.COMMAND_WORD + \" \" + VALID_ALIAS_CLEAR;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_DELETE \u003d DeleteCommand.COMMAND_WORD + \" \" + VALID_ALIAS_DELETE;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_EDIT \u003d EditCommand.COMMAND_WORD + \" \" + VALID_ALIAS_EDIT;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_EXIT \u003d ExitCommand.COMMAND_WORD + \" \" + VALID_ALIAS_EXIT;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_FIND \u003d FindCommand.COMMAND_WORD + \" \" + VALID_ALIAS_FIND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_HELP \u003d HelpCommand.COMMAND_WORD + \" \" + VALID_ALIAS_HELP;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_HISTORY \u003d HistoryCommand.COMMAND_WORD + \" \" + VALID_ALIAS_HISTORY;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_IMPORT \u003d ImportCommand.COMMAND_WORD + \" \" + VALID_ALIAS_IMPORT;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_LIST \u003d ListCommand.COMMAND_WORD + \" \" + VALID_ALIAS_LIST;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_REDO \u003d RedoCommand.COMMAND_WORD + \" \" + VALID_ALIAS_REDO;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_SELECT \u003d SelectCommand.COMMAND_WORD + \" \" + VALID_ALIAS_SELECT;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String ALIAS_DESC_UNDO \u003d UndoCommand.COMMAND_WORD + \" \" + VALID_ALIAS_UNDO;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String INVALID_ALIAS \u003d \"alias!\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String INVALID_ALIAS_DESC \u003d INVALID_ALIAS + \" \" + VALID_ALIAS_ALIAS;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String INVALID_COMMAND_DESC \u003d \"invalid\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String VALID_BUILDING_1 \u003d \"COM1\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String VALID_BUILDING_2 \u003d \"S1\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String VALID_BUILDING_3 \u003d \"ERC\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String INVALID_BUILDING_1 \u003d \"ERC*\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String INVALID_BUILDING_2 \u003d \"COM1 COM2\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String INVALID_BUILDING_3 \u003d \"Building\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static final String VALID_UNALIAS \u003d VALID_ALIAS_ADD;"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String INVALID_UNALIAS_DESC \u003d \"alias!\";"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":213}},{"path":"src/test/java/seedu/address/logic/commands/BirthdaysCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.BirthdaysCommand.SHOWING_BIRTHDAY_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.BirthdaysCommand.SHOWING_BIRTHDAY_NOTIFICATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayListEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayNotificationEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BirthdaysCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_emptyBirthdays_birthdaysFailure() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        new BirthdaysCommand(false).execute();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_birthdaysWithoutToday_birthdaysSuccess() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        CommandResult result \u003d prepareCommand(false, model).execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(SHOWING_BIRTHDAY_MESSAGE, result.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof BirthdayListEvent);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_birthdaysWithToday_birthdaysSuccess() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult result \u003d prepareCommand(true, model).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(SHOWING_BIRTHDAY_NOTIFICATION, result.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof BirthdayNotificationEvent);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private BirthdaysCommand prepareCommand(boolean today, Model model) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        BirthdaysCommand command \u003d new BirthdaysCommand(today);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand \u003d\u003d null);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void updatePassword(byte[] password)  {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void importAddressBook(String filepath, byte[] password) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":11,"-":197}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":" * {@code ImportCommand}."},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandTest {"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/ImportCommandTest/\");"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAliceAndBenson \u003d new AddressBookBuilder().withPerson(ALICE)"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"            .withPerson(BENSON).build();"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    private final ImportCommand standardCommand \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    public void execute_validFileImportIntoEmptyAddressBook_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    public void execute_validFileImportIntoNonEmptyAddressBook_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_encryptedAddressBook_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String encryptedFile \u003d TEST_DATA_FOLDER + \"encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ImportCommand importCommand \u003d prepareCommand(encryptedFile, model, TEST_PASSWORD);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        importCommand.executeUndoableCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SecurityUtil.encrypt(encryptedFile, TEST_PASSWORD);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(model.getAddressBook(), addressBookWithAliceAndBenson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void execute_wrongPasswordEncryptedAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String encryptedFile \u003d TEST_DATA_FOLDER + \"encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ImportCommand importCommand \u003d prepareCommand(encryptedFile, model, TEST_PASSWORD + \"1\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        importCommand.executeUndoableCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonExistentFileImportIntoAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        String nonExistentFile \u003d TEST_DATA_FOLDER + \"nonExistentFile.xml\";"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(nonExistentFile, model);"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, ImportCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    public void execute_invalidFileFormatImportIntoAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        String invalidFileFormat \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(invalidFileFormat, model);"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, ImportCommand.MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"    public void execute_importDuplicateAddressBook_noChange() throws Exception {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    public void execute_importDuplicatePerson_noChange() throws Exception {"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_validAddressBookFile_success() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"        // import -\u003e address book imported"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        importCommand.execute();"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"        undoRedoStack.push(importCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts address book back to previous state and filtered person list to show all persons"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"        // redo -\u003e address book imported again"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_invalidAddressBookFile_failure() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"        // execution failed -\u003e importCommand not pushed into undoRedoStack"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, importCommand.MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_nonExistentAddressBookFile_failure() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"nonExistentAddressBook.xml\";"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"        // execution failed -\u003e importCommand not pushed into undoRedoStack"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, importCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"        ImportCommand commandWithSameValues \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":185,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(new ImportCommand(TEST_DATA_FILE_ALICE_BENSON, TEST_PASSWORD)));"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentAddressBook_false() {"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(prepareCommand(TEST_DATA_FILE_ALICE, model)));"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Returns a {@code ImportCommand} with the parameter {@code filepath} with password as TEST_PASSWORD."},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    private ImportCommand prepareCommand(String filepath, Model model) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        return prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Returns a {@code ImportCommand} with the parameter {@code filepath} and {@code password}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private ImportCommand prepareCommand(String filepath, Model model, String password) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        ImportCommand importCommand \u003d new ImportCommand(filepath, password);"},{"lineNumber":224,"author":{"gitID":"Caijun7"},"content":"        importCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":225,"author":{"gitID":"Caijun7"},"content":"        return importCommand;"},{"lineNumber":226,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":228,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":129,"-":99}},{"path":"src/test/java/seedu/address/logic/commands/VacantCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_3;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_1;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_2;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class VacantCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor_nullBuilding_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        new VacantCommand(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_validBuildingRetrieval_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingBuilding();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Building validBuilding \u003d new Building(VALID_BUILDING_1);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getVacantCommand(validBuilding, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(String.format(VacantCommand.MESSAGE_SUCCESS, validBuilding), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_invalidBuildingRetrieval_failure() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingBuilding();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Building validBuilding \u003d new Building(INVALID_BUILDING_3);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getVacantCommand(validBuilding, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Building validBuildingOne \u003d new Building(VALID_BUILDING_1);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Building validBuildingTwo \u003d new Building(VALID_BUILDING_2);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        VacantCommand oneVacantCommand \u003d new VacantCommand(validBuildingOne);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(validBuildingOne.equals(validBuildingOne));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        VacantCommand validBuildingOneCopy \u003d new VacantCommand(validBuildingOne);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(oneVacantCommand.equals(validBuildingOneCopy));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(validBuildingOne.equals(1));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(validBuildingOne \u003d\u003d null);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different vacant -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(validBuildingOne.equals(validBuildingTwo));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Generates a new VacantCommand with the details of the given building"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private VacantCommand getVacantCommand(Building building, Model model) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        VacantCommand command \u003d new VacantCommand(building);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void updatePassword(byte[] password)  {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the building being requested."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingBuilding extends ModelStub {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        private ArrayList\u003cArrayList\u003cString\u003e\u003e roomsSchedule \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"            if (!Building.isValidBuilding(building)) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                throw new BuildingNotFoundException();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            ArrayList\u003cString\u003e rooms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            rooms.add(\"room\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            roomsSchedule.add(rooms);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return roomsSchedule;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":4,"-":200}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        ReadOnlyJsonVenueInformation venueInformationStorage \u003d new ReadOnlyJsonVenueInformation(\"vi\");"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void addressBookEncryptedReadSaveWithPassword() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":79,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Password testPassword \u003d new Password(TEST_PASSWORD);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        original.updatePassword(testPassword);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(testPassword).get();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void addressBookEncryptedReadSaveWithFilePath() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":91,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":92,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":94,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Password testPassword \u003d new Password(TEST_PASSWORD);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        original.updatePassword(testPassword);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(storageManager.getAddressBookFilePath(),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                                                                        testPassword).get();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"                                             new ReadOnlyJsonVenueInformation(\"dummy\"));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":4,"-":132}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                                                                            throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath), password);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void readAddressBookWithPassword_invalidAndValidPersonAddressBook_throwDataConversionException()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void readAddressBookWithPassword_wrongPassword_throwWrongPasswordException() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String filePath \u003d \"TempEncryptedAddressBook.xml\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        File file \u003d new File(TEST_DATA_FOLDER + filePath);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        SecurityUtil.encrypt(file, SecurityUtil.hashPassword(\"wrongPassword\"));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        readAddressBook(filePath, new Password(\"test\"));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void readAndSaveEncryptedAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        original.updatePassword(new Password(\"test\"));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password(\"test\")).get();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password(\"test\")).get();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(new Password(\"test\")).get(); //file path not specified"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void saveAddressBook_changedPassword_success() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        original.updatePassword(new Password(\"test\"));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        original.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password("},{"lineNumber":166,"author":{"gitID":"-"},"content":"                                        SecurityUtil.hashPassword(\"new\"),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                                        SecurityUtil.hashPassword(TEST_PASSWORD))).get();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_invalidFileFormat_throwDataConversionException() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_nonExistentFile_fileNotFoundException() throws Exception {"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER + \"nonExistentAddressBook.xml\";"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_validFile_success() throws Exception {"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER + \"validAddressBook.xml\";"},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"        // Import file into existing address book"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"        AddressBook expected \u003d original;"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"        expected.importPerson(ALICE);"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        expected.importPerson(BENSON);"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"        assertEquals(original, expected);"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be any encryption for the file.\", wpe);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":26,"-":203}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagNotInUsed_addressBookUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"                .withPerson(BOB).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        assertEquals(modelManagerCopy, modelManager);"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"                .withPerson(BOB).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModelManager \u003d new ModelManager(expectedAddressBook, userPrefs);"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedModelManager, modelManager);"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":38,"-":67}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withPerson(BOB).build();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagNotInUsed_addressBookUnchanged() throws Exception {"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        addressBookWithAmyAndBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyAndBob);"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"        addressBookWithAmyAndBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyAndBob);"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void createdWithPassword_passwordChanged_passwordChanged() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBook(\"new\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Password expectedPassword \u003d new Password(\"new\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(expectedPassword, addressBookUpdatedPassword.getPassword());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void updatePasswordWithClass_passwordChanged_passwordUpdated() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"test\").build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        addressBookUpdatedPassword.updatePassword(new Password(\"new\"));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"new\").build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedPassword);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void updatePasswordWithBytes_passwordChanged_passwordUpdated() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"test\").build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        addressBookUpdatedPassword.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        addressBookUpdatedPassword.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"new\").build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedPassword);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cAlias\u003e aliases \u003d FXCollections.observableArrayList();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private final Password password \u003d new Password(\"test\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAlias\u003e getAliasList() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return aliases;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void resetAliasList() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Password getPassword() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return password;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":36,"-":139}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_VENUEINFORMATION_FILE \u003d \"/json/venueinformation.json\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String appTitle \u003d \"Address App\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":72}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":61,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFileFromResource("},{"lineNumber":90,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        InputStream inputStream;"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"            inputStream \u003d JsonUtil.class.getResourceAsStream(filePath);"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"            if (inputStream \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Json file \"  + filePath + \" not found\");"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                return Optional.empty();"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            T jsonFile;"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"            BufferedReader streamReader \u003d new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"            StringBuilder responseStrBuilder \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"            String inputStr;"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"            while ((inputStr \u003d streamReader.readLine()) !\u003d null) {"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"                responseStrBuilder.append(inputStr);"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            jsonFile \u003d fromJsonString(responseStrBuilder.toString(), classOfObjectToDeserialize);"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"            return Optional.of(jsonFile);"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException e) {"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"            throw new DataConversionException(e);"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":169,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":170,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":29,"-":152}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (UniqueAliasList.contains(commandWord)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            commandWord \u003d UniqueAliasList.getCommandFromAlias(commandWord);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case AliasCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new AliasCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case UnaliasCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new UnaliasCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case VacantCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new VacantCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case PasswordCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new PasswordCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case BirthdaysCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return new BirthdaysCommandParser().parse(arguments);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case RemovePasswordCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new RemovePasswordCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":4,"-":120}},{"path":"src/main/java/seedu/address/logic/parser/VacantCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new VacantCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class VacantCommandParser implements Parser\u003cVacantCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"     * Parses the given {@code String} of arguments in the context of the VacantCommand"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     * and returns a VacantCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public VacantCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        args \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        int length;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String[] buildingName \u003d args.split(\"\\\\s+\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (\"\".equals(args) || \"\\\\s+\".equals(args)) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            length \u003d 0;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            length \u003d buildingName.length;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (length !\u003d 1) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, VacantCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Building building \u003d ParserUtil.parseBuilding(buildingName[0]);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return new VacantCommand(building);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":2,"-":39}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":" * Parses input arguments and creates a new ImportCommand object"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String SPLIT_TOKEN \u003d \" \";"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (splitArgs.length !\u003d 2) {"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new ImportCommand(splitArgs[0], splitArgs[1]);"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":17,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/VacantCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.VenueTableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":" * Retrieves all vacant rooms in a given building"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class VacantCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"vacant\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds vacant study rooms in a building \\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: [BUILDING_NAME]\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" COM1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"List of rooms in building successfully retrieved.\";"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_INVALID_BUILDING \u003d"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"            \"Building is not in the list of NUS Buildings given below: \\n\""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"            + Arrays.toString(Building.NUS_BUILDINGS);"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_CORRUPTED_VENUE_INFORMATION_FILE \u003d"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"            \"Unable to read from venueinformation.json, file is corrupted. Please re-download the file.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Building building;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     * Creates a VacantCommand to retrieve all vacant rooms in a given building"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public VacantCommand(Building building) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(building);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.building \u003d building;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"            ArrayList\u003cArrayList\u003cString\u003e\u003e allRoomsSchedule \u003d model.retrieveAllRoomsSchedule(building);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            ObservableList\u003cArrayList\u003cString\u003e\u003e schedule \u003d FXCollections.observableArrayList(allRoomsSchedule);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new VenueTableEvent(schedule));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (BuildingNotFoundException e) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_INVALID_BUILDING);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        } catch (CorruptedVenueInformationException e) {"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_CORRUPTED_VENUE_INFORMATION_FILE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof VacantCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 building.equals(((VacantCommand) other).building));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/PasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Adds a password to the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PasswordCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"password\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the password used for en. \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: password PASSWORD\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \"test\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String INVALID_PASSWORD \u003d \"Password cannot be blank!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password updated.\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String password;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates an PasswordCommand to add the specified password"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public PasswordCommand(String password) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.password \u003d password;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        byte[] hashedPassword \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        model.updatePassword(hashedPassword);"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || (other instanceof PasswordCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                \u0026\u0026 password.equals(((PasswordCommand) other).password));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/RemovePasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Removes password from the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class RemovePasswordCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"nopassword\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password removed.\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        model.updatePassword(null);"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":17}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, ReadOnlyVenueInformation {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException;"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":9,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" * Imports an address book to the existing address book."},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports an address book \""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"            + \"from filepath to the existing address book. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: FILEPATH PASSWORD\\n\""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"FILEPATH \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"PASSWORD\";"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Persons and tags from Addressbook file successfully imported.\";"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Addressbook file is not found.\";"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_DATA_CONVERSION_ERROR \u003d \"Addressbook file found is not in correct \""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"            + \"format.\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PASSWORD_WRONG \u003d \"Password wrong for Addressbook file.\";"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    private final String filepath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final byte[] password;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"     * Creates an ImportCommand to import the specified {@code AddressBook} from filepath to"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     * current {@code AddressBook}"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ImportCommand(String filepath, String password) {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.password \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            model.importAddressBook(filepath, password);"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_PASSWORD_WRONG);"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 filepath.equals(((ImportCommand) other).filepath));"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":38,"-":30}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                                                                WrongPasswordException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password) throws DataConversionException, IOException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            WrongPasswordException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath, password);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                                                                                 IOException, WrongPasswordException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        SecurityUtil.decrypt(file);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(file);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        SecurityUtil.encrypt(file);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (password.getPassword() !\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                SecurityUtil.decrypt(file, password.getPassword());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            } catch (WrongPasswordException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                logger.info(\"Current Password don\u0027t work, trying previous password.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                SecurityUtil.decrypt(file, password.getPrevPassword());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(file);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (password.getPassword() !\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            SecurityUtil.encrypt(file, password.getPassword());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"     * Imports the specified {@code AddressBook} from the filepath to the current {@code AddressBook}."},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"     * @param filePath      location of the specified AddressBook. Cannot be null"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"     * @param addressBook   current existing AddressBook"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     * @return              modified AddressBook"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public AddressBook importAddressBook(String filePath, AddressBook addressBook, byte[] password)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"            throw new FileNotFoundException();"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        SecurityUtil.decrypt(new File(filePath), password);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"            return xmlAddressBook.addToAddressBook(addressBook);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Password password \u003d addressBook.getPassword();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (password.getPassword() !\u003d null) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                SecurityUtil.decrypt(file, password.getPassword());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            } catch (WrongPasswordException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                logger.info(\"Current Password don\u0027t work, trying previous password.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                SecurityUtil.decrypt(file, password.getPrevPassword());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (password.getPassword() !\u003d null) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            SecurityUtil.encrypt(file, password.getPassword());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":11,"-":166}},{"path":"src/main/java/seedu/address/storage/ReadOnlyVenueInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" * Represents a storage for {@link seedu.address.model.building.Room}."},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"public interface ReadOnlyVenueInformation {"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"     * Returns the file path of the VenueInformation data file."},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    String getVenueInformationFilePath();"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"     * Returns VenueInformation data from storage."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":19,"-":10}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    private ReadOnlyVenueInformation venueInformationStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"                          ReadOnlyVenueInformation venueInformationStorage) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        this.venueInformationStorage \u003d venueInformationStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(addressBookStorage.getAddressBookFilePath(), password);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath, password);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to backup data file: \");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            logger.severe(\"Unable to save due to wrong password. Should not happen.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(wpe));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d VenueInformation methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    public String getVenueInformationFilePath() {"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.getVenueInformationFilePath();"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException {"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.readVenueInformation();"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException {"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.readBuildingsAndRoomsInformation();"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":24,"-":119}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAlias\u003e aliases;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private XmlAdaptedPassword password;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        aliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        password \u003d new XmlAdaptedPassword();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        aliases.addAll(src.getAliasList().stream().map(XmlAdaptedAlias::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        password \u003d new XmlAdaptedPassword(src.getPassword());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAlias a : aliases) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            addressBook.addAlias(a.toModelType());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.updatePassword(password.toModelType());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     * Adds {@code person}s and {@code tag}s from this addressbook into the existing {@code AddressBook}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    public AddressBook addToAddressBook(AddressBook addressBook) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"            addressBook.importTag(t.toModelType());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"            addressBook.importPerson(p.toModelType());"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAlias a : aliases) {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"            addressBook.importAlias(a.toModelType());"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        return addressBook;"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 aliases.equals(otherAb.aliases)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 password.equals(otherAb.password);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":11,"-":94}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayNotificationEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyJsonVenueInformation;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyVenueInformation;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.PasswordUiManager;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private boolean passwordChanged;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        ReadOnlyVenueInformation venueInformationStorage \u003d"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"                new ReadOnlyJsonVenueInformation(config.DEFAULT_VENUEINFORMATION_FILE);"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        initVenueInformation(venueInformationStorage);"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            passwordChanged \u003d true;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":150,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":178,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":"     * Initialize {@code nusVenues} and {@code nusBuildingsAndRooms} using the file at"},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"     * {@code storage}\u0027s venue information file path"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"    private void initVenueInformation(ReadOnlyVenueInformation storage) {"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"        String venueInformationFilePath \u003d storage.getVenueInformationFilePath();"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":"        logger.info(\"Using venueInformation file : \" + venueInformationFilePath);"},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"            Optional\u003cBuilding\u003e buildingOptional \u003d storage.readBuildingsAndRoomsInformation();"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"            Building building \u003d buildingOptional.orElseThrow(() -\u003e new DataConversionException(new IOException()));"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"            Building.setNusBuildingsAndRooms(building.getBuildingsAndRooms());"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"            Optional\u003cRoom\u003e roomOptional \u003d storage.readVenueInformation();"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"            Room room \u003d roomOptional.orElseThrow(() -\u003e new DataConversionException(new IOException()));"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"            Room.setNusVenues(room.getNusRooms());"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"        } catch (DataConversionException de) {"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"UserPrefs file at \" + venueInformationFilePath + \" is not in the correct format.\");"},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Problem while reading from the file at \" + venueInformationFilePath);"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        if (passwordChanged) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            PasswordUiManager pw \u003d new PasswordUiManager(storage, model, ui);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            pw.start(primaryStage);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            ui.start(primaryStage);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            autoOpenBirthdayNotification();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Helper method to open birthday notification"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Called after UI is called"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void autoOpenBirthdayNotification() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        if (model !\u003d null) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new BirthdayNotificationEvent(BirthdaysCommand"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                    .parseBirthdaysForNotification(model.getAddressBook().getPersonList(), currentDate), currentDate));"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":31,"-":238}},{"path":"src/main/java/seedu/address/model/alias/UniqueAliasList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of aliases that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Alias#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueAliasList {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static HashMap\u003cString, String\u003e hashList \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObservableList\u003cAlias\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs empty AliasList."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public UniqueAliasList() {}"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Alias as the given argument."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean contains(String toCheck) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return hashList.containsKey(toCheck);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the command of the alias."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static String getCommandFromAlias(String alias) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireNonNull(alias);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return hashList.get(alias);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     * Adds an Alias to the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicateAliasException if the Alias to add is a duplicate of an existing Alias in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static void add(Alias toAdd) throws DuplicateAliasException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (contains(toAdd.getAlias())) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new DuplicateAliasException();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        hashList.put(toAdd.getAlias(), toAdd.getCommand());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Removes an Alias from the list."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws AliasNotFoundException if the Alias to remove is a does not exist in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void remove(String toRemove) throws AliasNotFoundException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new AliasNotFoundException();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        hashList.remove(toRemove);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"     * Imports an Alias to the list if the Alias is not a duplicate of an existing Alias in the list."},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    public void importAlias(Alias toAdd) {"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!contains(toAdd.getAlias())) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            hashList.put(toAdd.getAlias(), toAdd.getCommand());"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts HashMap into an observable list"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void convertToList() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (String key : hashList.keySet()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            Alias newAlias \u003d new Alias(hashList.get(key), key);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            internalList.add(newAlias);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Getter for Observable list"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAlias\u003e getAliasObservableList() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        convertToList();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return internalList;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Replaces the Aliases in this list with those in the argument alias list."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void setAliases(Set\u003cAlias\u003e aliases) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireAllNonNull(aliases);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        internalList.setAll(aliases);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Clears hashList, for clear command."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void resetHashmap() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        hashList.clear();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAlias\u003e asObservableList() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":9,"-":117}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     * Adds a person to the list if the person is not a duplicate of an existing person in the list"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    public void importPerson(Person toAdd) {"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        if (!contains(toAdd)) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            internalList.add(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":8,"-":122}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Birthday birthday;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    public Birthday getBirthday() {"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        return birthday;"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, birthday, tags);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .append(\" Birthday: \")"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .append(getBirthday())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":3,"-":106}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"     * Adds a Tag to the list if the Tag is not a duplicate of an existing Tag in the list"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    public void importTag(Tag toAdd) {"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        if (!contains(toAdd)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            internalList.add(toAdd);"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":10,"-":144}},{"path":"src/main/java/seedu/address/storage/ReadOnlyJsonVenueInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":" * A class to access VenueInformation stored in the hard disk as a json file"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"public class ReadOnlyJsonVenueInformation implements ReadOnlyVenueInformation {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public ReadOnlyJsonVenueInformation(String filePath) {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public String getVenueInformationFilePath() {"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        return filePath;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        return readVenueInformation(filePath);"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"     * Converts Json file into HashMap of NUS Rooms"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"     * @param venueInformationFilePath location of the data. Cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation(String venueInformationFilePath) throws DataConversionException {"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        return JsonUtil.readJsonFileFromResource(venueInformationFilePath, Room.class);"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException {"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        return readBuildingsAndRoomsInformation(filePath);"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"     * Converts Json file into HashMap of NUS Buildings and Rooms"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"     * @param buildingsAndRoomsInformationFilePath location of the data. Cannot be null."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation(String buildingsAndRoomsInformationFilePath)"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        return JsonUtil.readJsonFileFromResource(buildingsAndRoomsInformationFilePath, Building.class);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":46,"-":10}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueAliasList aliases;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Password password;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        aliases \u003d new UniqueAliasList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        password \u003d new Password();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(String password) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setAliases(Set\u003cAlias\u003e aliases) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.aliases.setAliases(aliases);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setAliases(new HashSet\u003c\u003e(newData.getAliasList()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        updatePassword(newData.getPassword());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"     * Imports a person to the address book."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    public void importPerson(Person p) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        persons.importPerson(person);"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    //// command-level operations"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Adds an alias to the address book."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @throws DuplicateAliasException if an equivalent alias already exists."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        aliases.add(alias);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"    public void importAlias(Alias alias) {"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"        aliases.importAlias(alias);"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"        removeUnusedTags();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"     * Removes all {@code tag}s that are not used by any {@code person} in this {@code AddressBook}."},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"    private void removeUnusedTags() {"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"                .map(Person::getTags)"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"                .flatMap(Set::stream)"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":193,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getBirthday(),"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                correctTagReferences);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    public void importTag(Tag t) {"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"        tags.importTag(t);"},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":219,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"Caijun7"},"content":"    * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":221,"author":{"gitID":"Caijun7"},"content":"    * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":222,"author":{"gitID":"Caijun7"},"content":"    */"},{"lineNumber":223,"author":{"gitID":"Caijun7"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":224,"author":{"gitID":"Caijun7"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":225,"author":{"gitID":"Caijun7"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":226,"author":{"gitID":"Caijun7"},"content":"            return;"},{"lineNumber":227,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"Caijun7"},"content":"        Person newPerson \u003d"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                        person.getBirthday(), newTags);"},{"lineNumber":231,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":232,"author":{"gitID":"Caijun7"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":233,"author":{"gitID":"Caijun7"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":234,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":235,"author":{"gitID":"Caijun7"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":236,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":239,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"Caijun7"},"content":"    * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":241,"author":{"gitID":"Caijun7"},"content":"    */"},{"lineNumber":242,"author":{"gitID":"Caijun7"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":243,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":244,"author":{"gitID":"Caijun7"},"content":"            for (Person person : persons) {"},{"lineNumber":245,"author":{"gitID":"Caijun7"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":246,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"Caijun7"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":248,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"Impossible exception: person is obtained from the address book.\");"},{"lineNumber":249,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":257,"author":{"gitID":"-"},"content":"                + password + \" password\";"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAlias\u003e getAliasList() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        return aliases.getAliasObservableList();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    public void resetAliasList() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        aliases.resetHashmap();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public Password getPassword() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        return password;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Updates the password of this {@code AddressBook}."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @param newPassword  will be the new password."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    public void updatePassword (byte[] newPassword) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        password.updatePassword(newPassword);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * Updates the password of this {@code AddressBook}."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * @param newPassword  will be the new password."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public void updatePassword (Password newPassword) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        password.updatePassword(newPassword);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":305,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":307,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":308,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.password.equals(((AddressBook) other).password);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        aliases.remove(toRemove);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":58,"-":262}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Adds the given alias */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void addAlias(Alias alias) throws DuplicateAliasException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    /** Returns rooms for the given building */"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building) throws BuildingNotFoundException,"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"                                                                            CorruptedVenueInformationException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"     * Remove {@code tag} from all {@code person}s in the {@code AddressBook}."},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"     * @param tag"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     * Imports specified {@code AddressBook} from filepath to current {@code AddressBook}"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            WrongPasswordException;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Updates the password with the given password."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void updatePassword(byte[] password);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Removes alias given the alias string to remove."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    void removeAlias(String toRemove) throws AliasNotFoundException;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":16,"-":71}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":33,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this(addressBook, new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.updatePassword(newData.getPassword());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public synchronized void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.addAlias(alias);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building) throws BuildingNotFoundException,"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"                                                                                CorruptedVenueInformationException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Building.isValidBuilding(building)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new BuildingNotFoundException();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        return building.retrieveAllRoomsSchedule();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void updatePassword(byte[] password) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        addressBook.updatePassword(password);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        addressBook.removeAlias(toRemove);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"     * Imports the specified {@code AddressBook} from the filepath to the current {@code AddressBook}."},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBook \u003d new XmlAddressBookStorage(filepath);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        xmlAddressBook.importAddressBook(filepath, this.addressBook, password);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":19,"-":164}},{"path":"src/main/java/seedu/address/model/building/exceptions/CorruptedVenueInformationException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":" * Signals that some data in venueinformation.json file is corrupted"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"public class CorruptedVenueInformationException extends Exception {"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"    public CorruptedVenueInformationException() {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"        super(\"Unable to read from venueinformation.json, file is corrupted. Please re-download the file.\");"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":10}},{"path":"src/main/java/seedu/address/model/building/exceptions/InvalidWeekScheduleException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":" * Signals that week schedule is in incorrect format"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"public class InvalidWeekScheduleException extends Exception {"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"    public InvalidWeekScheduleException() {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"        super(\"Week Schedule is in incorrect format, venueinformation.json file is corrupted.\");"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":10}},{"path":"src/main/java/seedu/address/model/building/exceptions/InvalidWeekDayScheduleException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":" * Signals that weekday schedule is in incorrect format"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"public class InvalidWeekDayScheduleException extends Exception {"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"    public InvalidWeekDayScheduleException() {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"        super(\"Weekday Schedule is in incorrect format, venueinformation.json file is corrupted.\");"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":10}},{"path":"src/main/java/seedu/address/model/building/Room.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" * Represents a Room in National University of Singapore."},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"public class Room {"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_ROOM_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"            \"Room names can take any values, and it should not be blank\";"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    public static final String ROOM_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Room.class);"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"     * Represents all rooms in National University of Singapore"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, Week\u003e nusVenues \u003d null;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    private final String roomName;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, Week\u003e nusRooms;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private Week week \u003d null;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     * Uses a private {@code Room} constructor for Jackson JSON API to instantiate an object"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private Room() {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d \"\";"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"     * Constructs a {@code Room}."},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"     * @param roomName A valid room name."},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    public Room(String roomName) {"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(roomName);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidRoom(roomName), MESSAGE_ROOM_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid room name."},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    private static boolean isValidRoom(String test) {"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        return test.matches(ROOM_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    public static HashMap\u003cString, Week\u003e getNusVenues() {"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        return nusVenues;"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    public static void setNusVenues(HashMap\u003cString, Week\u003e nusVenues) {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        Room.nusVenues \u003d nusVenues;"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, Week\u003e getNusRooms() {"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        return nusRooms;"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    public void setNusRooms(HashMap\u003cString, Week\u003e nusRooms) {"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        this.nusRooms \u003d nusRooms;"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    public Week getWeek() {"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        return week;"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    public void setWeek(Week week) {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        this.week \u003d week;"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDaySchedule() throws CorruptedVenueInformationException {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        initializeWeek();"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e schedules \u003d week.retrieveWeekDaySchedule();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        schedules.add(0, roomName);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return schedules;"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"     * Initialize the {@code Week} schedule of the room"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the NUS Venues format is not as expected."},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    public void initializeWeek() throws CorruptedVenueInformationException {"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        if (nusVenues \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"NUS Venues is null, venueinformation.json file is corrupted.\");"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        week \u003d nusVenues.get(roomName);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        if (week \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"            logger.warning(roomName + \" data is null, venueinformation.json file is corrupted.\");"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        week.setRoomName(roomName);"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Room // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 roomName.equals(((Room) other).roomName)); // state check"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        return roomName.hashCode();"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":125,"-":11}},{"path":"src/main/java/seedu/address/model/building/Week.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.TimeZone;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekScheduleException;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" * Represents a Week schedule of a Room in National University of Singapore."},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"public class Week {"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    public static final int NUMBER_OF_DAYS \u003d 6;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public static final int SUNDAY \u003d -1;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Week.class);"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int NUMBER_OF_CLASSES \u003d 13;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cWeekDay\u003e weekSchedule \u003d null;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    private int weekday;"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cWeekDay\u003e getWeekSchedule() {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        return weekSchedule;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public void setWeekSchedule(ArrayList\u003cWeekDay\u003e weekSchedule) {"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        this.weekSchedule \u003d weekSchedule;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public void setRoomName(String roomName) {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    public int getWeekday() {"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        return weekday;"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    public void setWeekday(int weekday) {"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d weekday;"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDaySchedule() throws CorruptedVenueInformationException {"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"            isValidWeekSchedule();"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"            weekday \u003d getDayOfWeek();"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"            if (weekday \u003d\u003d SUNDAY) {"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"                return getNoClassSchedule();"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"            WeekDay weekDay \u003d initializeWeekDay();"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"            return weekDay.retrieveWeekDayRoomSchedule();"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        } catch (InvalidWeekScheduleException e) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"     * Checks for null instance in week schedule list"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     * @throws InvalidWeekScheduleException if the week schedule format is not as expected."},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public boolean isValidWeekSchedule() throws InvalidWeekScheduleException {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        if (weekSchedule \u003d\u003d null) {"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Week Schedule is null, venueinformation.json file is corrupted.\");"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekScheduleException();"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        if (weekSchedule.size() !\u003d NUMBER_OF_DAYS) {"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Week Schedule has incorrect data, venueinformation.json file is corrupted.\");"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekScheduleException();"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        return true;"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     * Gets the current weekday, weekday starts from Monday which is 0, which is offset by 2 from calendar API"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    private int getDayOfWeek() {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        calendar.setTimeZone(TimeZone.getTimeZone(\"Asia/Singapore\"));"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        int day \u003d calendar.get(Calendar.DAY_OF_WEEK);"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        return day - 2;"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    private WeekDay initializeWeekDay() {"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        WeekDay weekDay \u003d weekSchedule.get(weekday);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        weekDay.setRoomName(roomName);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        return weekDay;"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cString\u003e getNoClassSchedule() {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e noClassSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c NUMBER_OF_CLASSES; i++) {"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"            noClassSchedule.add(\"vacant\");"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        return noClassSchedule;"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        return roomName + \"Week Schedule\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Week // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 weekSchedule.equals(((Week) other).weekSchedule)); // state check"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        return weekSchedule.hashCode();"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":123,"-":6}},{"path":"src/main/java/seedu/address/model/building/exceptions/BuildingNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":" * Signals that the operation is unable to find the specified building."},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class BuildingNotFoundException extends CommandException {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public BuildingNotFoundException() {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"        super(\"Building is not in the list of NUS Buildings given below: \\n\""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"                + Arrays.toString(Building.NUS_BUILDINGS));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":11,"-":5}},{"path":"src/main/java/seedu/address/model/building/Building.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" * Represents a Building in National University of Singapore."},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBuilding(String)}"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"public class Building {"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_BUILDING_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"            \"Building names should only contain alphanumeric characters and it should not be blank\";"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    public static final String BUILDING_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"     * Represents an array of Buildings in National University of Singapore"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static final String[] NUS_BUILDINGS \u003d {"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        \"AS1\", \"AS2\", \"AS3\", \"AS4\", \"AS5\", \"AS6\", \"AS7\", \"AS8\", \"COM1\", \"COM2\", \"I3\", \"BIZ1\", \"BIZ2\","},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        \"SDE\", \"S1\", \"S1A\", \"S2\", \"S3\", \"S4\", \"S4A\", \"S5\", \"S8\", \"S11\", \"S12\", \"S13\", \"S14\", \"S16\","},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        \"S17\", \"E1\", \"E2\", \"E2A\", \"E3\", \"E3A\", \"E4\", \"E4A\", \"E5\", \"EA\", \"ERC\", \"UTSRC\", \"LT\""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    };"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Building.class);"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms \u003d null;"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private final String buildingName;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms;"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"     * Uses a private {@code Building} constructor for Jackson JSON API to instantiate an object"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    private Building() {"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        buildingName \u003d \"\";"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     * Constructs a {@code Building}."},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     * @param buildingName A valid building name."},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    public Building(String buildingName) {"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(buildingName);"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidBuilding(buildingName), MESSAGE_BUILDING_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        this.buildingName \u003d buildingName;"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid building name."},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    public static boolean isValidBuilding(String test) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return test.matches(BUILDING_VALIDATION_REGEX);"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid building name."},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static boolean isValidBuilding(Building test) {"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        for (String building : NUS_BUILDINGS) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            if (building.equals(test.buildingName)) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e getNusBuildingsAndRooms() {"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        return nusBuildingsAndRooms;"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    public static void setNusBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms) {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        Building.nusBuildingsAndRooms \u003d nusBuildingsAndRooms;"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    public String getBuildingName() {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        return buildingName;"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getBuildingsAndRooms() {"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        return buildingsAndRooms;"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    public void setBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms) {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        this.buildingsAndRooms \u003d buildingsAndRooms;"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"     * Retrieves weekday schedule of all {@code Room}s in the {@code Building} in an ArrayList of ArrayList"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule() throws CorruptedVenueInformationException {"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e allRoomsSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e allRoomsInBuilding \u003d retrieveAllRoomsInBuilding();"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        for (String roomName : allRoomsInBuilding) {"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"            Room room \u003d new Room(roomName);"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            ArrayList\u003cString\u003e weekDayRoomSchedule \u003d room.retrieveWeekDaySchedule();"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            allRoomsSchedule.add(weekDayRoomSchedule);"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        return allRoomsSchedule;"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"     * Retrieves all {@code Room}s in the {@code Building} in an ArrayList"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the NUS Buildings and Rooms format is not as expected."},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveAllRoomsInBuilding() throws CorruptedVenueInformationException {"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidBuilding(this));"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"        if (nusBuildingsAndRooms \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"NUS buildings and rooms is null, venueinformation.json file is corrupted.\");"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"        return nusBuildingsAndRooms.get(buildingName);"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        return buildingName;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Building // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 buildingName.equals(((Building) other).buildingName)); // state check"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"        return buildingName.hashCode();"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":132,"-":13}},{"path":"src/main/java/seedu/address/model/building/WeekDay.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekDayScheduleException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":" * Represents a WeekDay schedule of a Room in National University of Singapore."},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"public class WeekDay {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    public static final int NUMBER_OF_CLASSES \u003d 13;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(WeekDay.class);"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final int START_TIME \u003d 800;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int END_TIME \u003d 2000;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private static final int FOUR_DIGIT_24_HOUR_FORMAT \u003d 1000;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    private static final int ONE_HOUR_IN_24_HOUR_FORMAT \u003d 100;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, String\u003e weekDaySchedule \u003d null;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    private String weekday;"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, String\u003e getWeekDaySchedule() {"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        return weekDaySchedule;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    public void setWeekDaySchedule(HashMap\u003cString, String\u003e weekDaySchedule) {"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        this.weekDaySchedule \u003d weekDaySchedule;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    public void setRoomName(String roomName) {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    public String getWeekday() {"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        return weekday;"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    public void setWeekday(String weekday) {"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d weekday;"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the weekday schedule format is not as expected."},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDayRoomSchedule() throws CorruptedVenueInformationException {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"            isValidWeekDaySchedule();"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"            ArrayList\u003cString\u003e weekDayScheduleList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"            int time \u003d START_TIME;"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"            while (time \u003c\u003d END_TIME) {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"                String timeString \u003d \"\" + time;"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"                if (time \u003c FOUR_DIGIT_24_HOUR_FORMAT) {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"                    timeString \u003d \"0\" + time;"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"                }"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"                String roomStatus \u003d this.weekDaySchedule.get(timeString);"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"                weekDayScheduleList.add(roomStatus);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"                time \u003d incrementOneHour(time);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"            return weekDayScheduleList;"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        } catch (InvalidWeekDayScheduleException e) {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"     * Checks for null instance in week day schedule hash map"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     * @throws InvalidWeekDayScheduleException if the weekday schedule format is not as expected."},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    public boolean isValidWeekDaySchedule() throws InvalidWeekDayScheduleException {"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        if (weekDaySchedule \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Weekday Schedule is null, venueinformation.json file is corrupted.\");"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekDayScheduleException();"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        int time \u003d START_TIME;"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        while (time \u003c\u003d END_TIME) {"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"            String timeString \u003d \"\" + time;"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"            if (time \u003c FOUR_DIGIT_24_HOUR_FORMAT) {"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"                timeString \u003d \"0\" + time;"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"            String roomStatus \u003d this.weekDaySchedule.get(timeString);"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"            if (roomStatus \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Weekday Schedule contains some null data, venueinformation.json file is corrupted.\");"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                throw new InvalidWeekDayScheduleException();"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            if (!\"vacant\".equals(roomStatus) \u0026\u0026 !\"occupied\".equals(roomStatus)) {"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Weekday Schedule contains some incorrect data, \""},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"                        + \"venueinformation.json file is corrupted.\");"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"                throw new InvalidWeekDayScheduleException();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"            time \u003d incrementOneHour(time);"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        return true;"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"     * Increments the time in 24 hour format by one hour"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    private int incrementOneHour(int time) {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        int timeAfterHalfHour \u003d time + ONE_HOUR_IN_24_HOUR_FORMAT;"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        return timeAfterHalfHour;"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"        return roomName + \" \" + weekday + \" Schedule\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof WeekDay // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 weekDaySchedule.equals(((WeekDay) other).weekDaySchedule)); // state check"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"        return weekDaySchedule.hashCode();"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":128,"-":7}}]
