var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"Imdb was developed by team W15 B2 of CS2103T in AY1718 Semester 2. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"\u003d\u003d\u003d Chew Xing Kai"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":"image::cxingkai.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":"{empty} [https://github.com/cxingkai[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":"Responsibilities: Model"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Kai Yong"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"image::Kyholmes.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"{empty}[http://github.com/[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Ng Hung Siang"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"image::nhs.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":"{empty}[http://github.com/nhs-work[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":"Responsibilities: Logic"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Kelvin Ting"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"image::ktingit.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"{empty}[http://github.com/ktingit[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"Responsibilities: Storage"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Kyholmes":5,"ktingit":4,"-":27,"cxingkai":5,"nhs-work":4}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W15-B2[image:https://travis-ci.org/CS2103JAN2018-W15-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"* This is a electronic health records application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"* It is a Java application intended for private clinics with multiple branches to better manage their records efficiently"},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"* It is hoped that with the usage of this application, medical negligence due to the mismanagement of records can be avoided"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":27,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":28,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"ktingit":3,"-":27}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class SampleDataTest extends ImdbSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    protected Imdb getInitialData() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        Patient[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        //assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"-":43}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ktingit"},"content":"\u003d Integrated Medical DataBase - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"Integrated Medical DataBase (Imdb) is an application for the management of health records digitally."},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"Of note is the fact that Imdb is *optimized for those who prefer to work with a Command Line Interface* (CLI)"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":"while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"This makes it perfect for doctors or staff who can type faster than they can navigate with a mouse."},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"If you are a medical staff who can type fast, Imdb can get your patient management tasks done faster than traditional pen and paper or even normal GUI apps."},{"lineNumber":25,"author":{"gitID":"ktingit"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":".  Copy the file to the folder you want to use as the home folder for your Imdb."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Imdb."},{"lineNumber":47,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"* Items in square brackets are optional e.g `n/NAME [c/CONDITION]` can be used as `n/John Doe c/peanuts` or as `n/John Doe`."},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[c/CONDITION]...` can be used as `{nbsp}` (i.e. 0 times), `c/peanuts`, `c/G6PD c/aspirin` etc."},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `help` or `h`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Logging into the system: `login` or `lg` [since v1.2]"},{"lineNumber":69,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"Logs the user into the Imdb, given a matching username and password."},{"lineNumber":71,"author":{"gitID":"cxingkai"},"content":"Format: `login USERNAME PASSWORD` or `lg USERNAME PASSWORD`"},{"lineNumber":72,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Adding a patient: `add` or `a`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"Adds a patient to the Imdb +"},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":"Format: `add n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS dob/DOB b/BLOOD TYPE [c/CONDITION]...` or"},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"        `a n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS dob/DOB b/BLOOD TYPE [c/CONDITION]...`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"A patient can have any number of conditions (including 0)"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"ktingit"},"content":"* `add n/John Doe ic/S1234567A p/98765432 e/johnd@example.com a/John street, block 123, #01-01, dob/01/01/1991 b/A-`"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"* `a n/Betsy Crowe ic/NRIC c/peanuts e/betsycrowe@example.com a/Newgate Prison p/1234567 dob/12/12/1992 b/B+ c/aspirin`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Listing all patients : `list` or `ls`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"Shows a list of all patients in the Imdb. +"},{"lineNumber":90,"author":{"gitID":"cxingkai"},"content":"Format: `list` or `ls`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Editing a patient : `edit` or `e`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"Edits an existing patient in the Imdb. +"},{"lineNumber":95,"author":{"gitID":"ktingit"},"content":"Format: `edit INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [dob/DOB] [b/BLOOD TYPE][c/CONDITION]...` or"},{"lineNumber":96,"author":{"gitID":"ktingit"},"content":"        `e INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [dob/DOB] [b/BLOOD TYPE] [c/CONDITION]...`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"****"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the last patient listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":100,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":101,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"* When editing conditions, the existing conditions of the patient will be removed i.e adding of conditions is not cumulative."},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"* You can remove all the patient\u0027s conditions by typing `c/` without specifying any conditions after it."},{"lineNumber":104,"author":{"gitID":"-"},"content":"****"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":110,"author":{"gitID":"ktingit"},"content":"* `e 2 n/Betsy Crower c/` +"},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing conditions."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Locating patients by name: `find` or `f`"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"Finds patients whose names contain any of the given keywords. +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"****"},{"lineNumber":119,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `f Betsy Tim John` +"},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"Returns any patient having names `Betsy`, `Tim`, or `John`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Deleting a patient : `delete` or `d` or `rm`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Kyholmes"},"content":"Deletes the specified patient from the Imdb. +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Format: `delete INDEX` or `d`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"* Deletes the patient at the specified `INDEX`."},{"lineNumber":140,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":148,"author":{"gitID":"Kyholmes"},"content":"Deletes the 2nd patient in the Imdb."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"`d 1` +"},{"lineNumber":151,"author":{"gitID":"Kyholmes"},"content":"Deletes the 1st patient in the results of the `find` command."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Selecting a patient : `select` or `s`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"Kyholmes"},"content":"Selects the patient identified by the index number used in the last patient listing. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Format: `select INDEX` or `s INDEX`"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"Kyholmes"},"content":"* Selects the patient and loads the Google search page the patient at the specified `INDEX`."},{"lineNumber":160,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":168,"author":{"gitID":"Kyholmes"},"content":"Selects the 2nd patient in the Imdb."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"`s 1` +"},{"lineNumber":171,"author":{"gitID":"Kyholmes"},"content":"Selects the 1st patient in the results of the `find` command."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Editing remarks for a patient : `remark` or `rk` [since v1.2]"},{"lineNumber":174,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":175,"author":{"gitID":"Kyholmes"},"content":"Edits the remark for a patient specified by the index number used in the last patient listing. +"},{"lineNumber":176,"author":{"gitID":"nhs-work"},"content":"Format: `remark INDEX r/[REMARK]` or `rk INDEX r/[REMARK]`"},{"lineNumber":177,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":178,"author":{"gitID":"nhs-work"},"content":"****"},{"lineNumber":179,"author":{"gitID":"nhs-work"},"content":"* Selects the patient at the specified `INDEX` and edits the remarks for that patient."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":182,"author":{"gitID":"-"},"content":"****"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":187,"author":{"gitID":"nhs-work"},"content":"`remark 1 r/Likes to drink coffee.` +"},{"lineNumber":188,"author":{"gitID":"Kyholmes"},"content":"Edits the remark for the first patient to Likes to drink coffee."},{"lineNumber":189,"author":{"gitID":"nhs-work"},"content":"* `find Betsy` +"},{"lineNumber":190,"author":{"gitID":"nhs-work"},"content":"`remark 1 r/` +"},{"lineNumber":191,"author":{"gitID":"Kyholmes"},"content":"Removes the remark for the first patient."},{"lineNumber":192,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":193,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Viewing the medical records for a patient : record [coming in v1.4]"},{"lineNumber":194,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":195,"author":{"gitID":"nhs-work"},"content":"Views all the medical records for a patient specified by the index number used in the last patient listing. +"},{"lineNumber":196,"author":{"gitID":"nhs-work"},"content":"Format: record INDEX"},{"lineNumber":197,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":198,"author":{"gitID":"nhs-work"},"content":"**"},{"lineNumber":199,"author":{"gitID":"nhs-work"},"content":"* Selects the person at the specified `INDEX` and displays all the medical records for that patient."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":202,"author":{"gitID":"nhs-work"},"content":"**"},{"lineNumber":203,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":204,"author":{"gitID":"nhs-work"},"content":"Examples:"},{"lineNumber":205,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":206,"author":{"gitID":"nhs-work"},"content":"* list +"},{"lineNumber":207,"author":{"gitID":"nhs-work"},"content":"record 1 +"},{"lineNumber":208,"author":{"gitID":"nhs-work"},"content":"Displays all the medical records for the first person in the result of the list command."},{"lineNumber":209,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":210,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Editing the medical records for a patient : record [coming in v1.4]"},{"lineNumber":211,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":212,"author":{"gitID":"nhs-work"},"content":"Edits the medical records for a patient specified by the index number used in the last patient listing. +"},{"lineNumber":213,"author":{"gitID":"nhs-work"},"content":"Format: record INDEX d/[DATE] s/[SYMPTOMS] i/[ILLNESS] t/[TREATMENT] r/[REMARKS]"},{"lineNumber":214,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":215,"author":{"gitID":"nhs-work"},"content":"**"},{"lineNumber":216,"author":{"gitID":"nhs-work"},"content":"* Selects the person at the specified `INDEX` and edits the medical records for that patient."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":219,"author":{"gitID":"nhs-work"},"content":"**"},{"lineNumber":220,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":221,"author":{"gitID":"nhs-work"},"content":"Examples:"},{"lineNumber":222,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":223,"author":{"gitID":"nhs-work"},"content":"* list +"},{"lineNumber":224,"author":{"gitID":"nhs-work"},"content":"record 1 d/19 March 2018 s/Runny nose, Headache i/Flu t/Zyrtec +"},{"lineNumber":225,"author":{"gitID":"nhs-work"},"content":"Edits the record for the first person to Date:19 March 2018 Symptoms:Runny nose, Headache"},{"lineNumber":226,"author":{"gitID":"nhs-work"},"content":"Illness:Flu Treatment:Zyrtec`."},{"lineNumber":227,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":228,"author":{"gitID":"cxingkai"},"content":"\u003d\u003d\u003d Printing a patient\u0027s formatted medical records : `print` [coming in v1.4]"},{"lineNumber":229,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":230,"author":{"gitID":"cxingkai"},"content":"Formats and prints out a patient\u0027s medical records. +"},{"lineNumber":231,"author":{"gitID":"cxingkai"},"content":"Format: `print INDEX`"},{"lineNumber":232,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":233,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Add patient into visiting queue with patient name: `addq` [since v1.2]"},{"lineNumber":234,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":235,"author":{"gitID":"Kyholmes"},"content":"Add patient into visiting queue (registration)."},{"lineNumber":236,"author":{"gitID":"Kyholmes"},"content":"Format: `addq PATIENT_NAME` or `aq PATIENT_NAME`"},{"lineNumber":237,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":238,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":239,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":240,"author":{"gitID":"Kyholmes"},"content":"* `addq Betsy` +"},{"lineNumber":241,"author":{"gitID":"Kyholmes"},"content":"Betsy will be added at the back of the visiting queue."},{"lineNumber":242,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":243,"author":{"gitID":"ktingit"},"content":"* `aq John` +"},{"lineNumber":244,"author":{"gitID":"Kyholmes"},"content":"John will be added at the back of the visiting queue."},{"lineNumber":245,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":246,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Remove patient into visiting queue with patient name: `removeq` [since v1.2]"},{"lineNumber":247,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":248,"author":{"gitID":"Kyholmes"},"content":"Remove the first patient from the visiting queue (check-out)."},{"lineNumber":249,"author":{"gitID":"Kyholmes"},"content":"Format: `removeq` or `rq`"},{"lineNumber":250,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":251,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":252,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":253,"author":{"gitID":"Kyholmes"},"content":"* `removeq Betsy` +"},{"lineNumber":254,"author":{"gitID":"Kyholmes"},"content":"Betsy will be removed if she is the first patient in the queue."},{"lineNumber":255,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":256,"author":{"gitID":"ktingit"},"content":"* `rq John` +"},{"lineNumber":257,"author":{"gitID":"Kyholmes"},"content":"John will be removed if he is the first patient in the queue."},{"lineNumber":258,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":259,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Add condition to an existing patient: `addc` [coming in v1.3]"},{"lineNumber":260,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":261,"author":{"gitID":"ktingit"},"content":"Adds a medical condition to an existing patient."},{"lineNumber":262,"author":{"gitID":"ktingit"},"content":"Format: `addc` or `ac`"},{"lineNumber":263,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":264,"author":{"gitID":"ktingit"},"content":"Examples:"},{"lineNumber":265,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":266,"author":{"gitID":"ktingit"},"content":"* `addc Betsy aspirin` +"},{"lineNumber":267,"author":{"gitID":"ktingit"},"content":"Aspirin will be added to the list of conditions that Betsy has."},{"lineNumber":268,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":269,"author":{"gitID":"ktingit"},"content":"* `ac John asthma` +"},{"lineNumber":270,"author":{"gitID":"ktingit"},"content":"Asthma will be added to the list of conditions that John has."},{"lineNumber":271,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":272,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d View certain details only: `filter` [coming in v1.3]"},{"lineNumber":273,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":274,"author":{"gitID":"ktingit"},"content":"Switches between showing personal details only, medical information only."},{"lineNumber":275,"author":{"gitID":"ktingit"},"content":"Format: `filter` or `fil`"},{"lineNumber":276,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":277,"author":{"gitID":"ktingit"},"content":"Examples:"},{"lineNumber":278,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":279,"author":{"gitID":"ktingit"},"content":"* `filter Betsy p` +"},{"lineNumber":280,"author":{"gitID":"ktingit"},"content":"Displays only the personal details of Betsy."},{"lineNumber":281,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":282,"author":{"gitID":"ktingit"},"content":"* `fil John m` +"},{"lineNumber":283,"author":{"gitID":"ktingit"},"content":"Displays only the medical information of John."},{"lineNumber":284,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":285,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Remove condition of an existing patient: `removec` [coming in v1.4]"},{"lineNumber":286,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":287,"author":{"gitID":"ktingit"},"content":"Adds a medical condition to an existing patient."},{"lineNumber":288,"author":{"gitID":"ktingit"},"content":"Format: `removec` or `rc`"},{"lineNumber":289,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":290,"author":{"gitID":"ktingit"},"content":"Examples:"},{"lineNumber":291,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":292,"author":{"gitID":"ktingit"},"content":"* `removec Betsy aspirin` +"},{"lineNumber":293,"author":{"gitID":"ktingit"},"content":"Aspirin will be removed from the list of conditions that Betsy has."},{"lineNumber":294,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":295,"author":{"gitID":"ktingit"},"content":"* `rc John asthma` +"},{"lineNumber":296,"author":{"gitID":"ktingit"},"content":"Asthma will be removed from the list of conditions that John has."},{"lineNumber":297,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `hi`"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"Format: `history` or `hi`"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":304,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":305,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":306,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"ktingit"},"content":"// tag::undoredo[]"},{"lineNumber":309,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u` or `z`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"Kyholmes"},"content":"Restores the Imdb to the state before the previous _undoable_ command was executed. +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"Format: `undo` or `u`"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":315,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":316,"author":{"gitID":"Kyholmes"},"content":"Undoable commands: those commands that modify the Imdb\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":322,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":327,"author":{"gitID":"-"},"content":"`u` +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":333,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r` or `y`"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":338,"author":{"gitID":"-"},"content":"Format: `redo` or `r`"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":352,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"`r` (reapplies the `delete 1` command) +"},{"lineNumber":355,"author":{"gitID":"-"},"content":"`r` (reapplies the `clear` command) +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d View medical appointments by patient name: `viewappt` [coming in v1.3]"},{"lineNumber":359,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":360,"author":{"gitID":"Kyholmes"},"content":"Shows a list of medical appointments of the patient."},{"lineNumber":361,"author":{"gitID":"Kyholmes"},"content":"Format: `viewappt PATIENT_NAME` or `va PATIENT_NAME`"},{"lineNumber":362,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":363,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":364,"author":{"gitID":"Kyholmes"},"content":"* `viewappt Betsy` +"},{"lineNumber":365,"author":{"gitID":"Kyholmes"},"content":"List of medical appointments made by Betsy."},{"lineNumber":366,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":367,"author":{"gitID":"Kyholmes"},"content":"* `va John` +"},{"lineNumber":368,"author":{"gitID":"Kyholmes"},"content":"List of medical appointments made by John."},{"lineNumber":369,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":370,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Delete a medical appointment by patient name and appointment index number: `delappt` [coming in v1.3]"},{"lineNumber":371,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":372,"author":{"gitID":"Kyholmes"},"content":"Delete a medical appointment of the patient."},{"lineNumber":373,"author":{"gitID":"Kyholmes"},"content":"Format: `delappt PATIENT_NAME APPOINTMENT_INDEX_NO` or `da PATIENT_NAME APPOINTMENT_INDEX_NO`"},{"lineNumber":374,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":375,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":376,"author":{"gitID":"Kyholmes"},"content":"* `delappt Betsy 2` +"},{"lineNumber":377,"author":{"gitID":"Kyholmes"},"content":"Delete a medical appointment of Betsy with index number 2."},{"lineNumber":378,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":379,"author":{"gitID":"Kyholmes"},"content":"* `da John 1` +"},{"lineNumber":380,"author":{"gitID":"Kyholmes"},"content":"Delete a medical appointment of John with index number 1."},{"lineNumber":381,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":382,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d View medical appointments by date: `viewappt` [coming in v1.4]"},{"lineNumber":383,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":384,"author":{"gitID":"Kyholmes"},"content":"Shows a list of medical appointments of a particular date."},{"lineNumber":385,"author":{"gitID":"Kyholmes"},"content":"Format: `viewappt DATE` or `va DATE`"},{"lineNumber":386,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":387,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":388,"author":{"gitID":"Kyholmes"},"content":"* `viewappt 19/3/2018` +"},{"lineNumber":389,"author":{"gitID":"Kyholmes"},"content":"List of medical appointments on 19/3/2018."},{"lineNumber":390,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":391,"author":{"gitID":"Kyholmes"},"content":"* `va 23/3/2019` +"},{"lineNumber":392,"author":{"gitID":"Kyholmes"},"content":"List of medical appointments on 23/3/2018."},{"lineNumber":393,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":394,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d Add a medical appointment with: `addappt` [coming in v1.4]"},{"lineNumber":395,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":396,"author":{"gitID":"Kyholmes"},"content":"Add a medical appointment with patient name, date, time."},{"lineNumber":397,"author":{"gitID":"Kyholmes"},"content":"Format: `addappt PATIENT_NAME DATE TIME` or `aa PATIENT_NAME DATE TIME`"},{"lineNumber":398,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":399,"author":{"gitID":"Kyholmes"},"content":"Examples:"},{"lineNumber":400,"author":{"gitID":"Kyholmes"},"content":"* `addappt Betsy 19/3/2018 1000` +"},{"lineNumber":401,"author":{"gitID":"Kyholmes"},"content":"Add a medical appointment for Betsy on 19/3/2018 at 10am."},{"lineNumber":402,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":403,"author":{"gitID":"Kyholmes"},"content":"* `aa John 23/3/2019 1430` +"},{"lineNumber":404,"author":{"gitID":"Kyholmes"},"content":"Add a medical appointment for John on 23/3/2018 at 2:30pm."},{"lineNumber":405,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"Kyholmes"},"content":"Clears all entries from the Imdb. +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"Format: `clear` or `c`"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit` or `x`"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"Format: `exit` or `x`"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"Kyholmes"},"content":"Imdb data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"ktingit"},"content":"// tag::dataencryption[]"},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"ktingit"},"content":"Data encryption will be implemented in v2.0 to improve security and ensure confidentiality of patients\u0027 information."},{"lineNumber":425,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"ktingit"},"content":"// tag::centraliseddatabase[]"},{"lineNumber":428,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Centralised database `[coming in v2.0]`"},{"lineNumber":429,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":430,"author":{"gitID":"Kyholmes"},"content":"Imdb will be able to switch from standalone mode to server/client mode in v2.0 to centralise the database at the server in the main branch."},{"lineNumber":431,"author":{"gitID":"ktingit"},"content":"// end::centraliseddatabase[]"},{"lineNumber":432,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":433,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Attaching and viewing the X-ray scans for a patient `[coming in v2.0]`"},{"lineNumber":434,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":435,"author":{"gitID":"nhs-work"},"content":"Imdb will be able to attach images(X-ray scans) to a patient and retrieve the images for viewing."},{"lineNumber":436,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":437,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Viewing the schedule for a patient across all specialists `[coming in v2.0]`"},{"lineNumber":438,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":439,"author":{"gitID":"nhs-work"},"content":"Imdb will be able to view the schedule for a patient across all specialists so that medical staff can arrange non-conflicting appoinments."},{"lineNumber":440,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":441,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Search for drug information from a drug information website `[coming in v2.0]`"},{"lineNumber":442,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":443,"author":{"gitID":"nhs-work"},"content":"Imdb will be able to search for relevant drug information from an official website so that doctors will not administer the wrong drug."},{"lineNumber":444,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":448,"author":{"gitID":"Kyholmes"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Imdb folder."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"ktingit"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [c/CONDITION]...` +"},{"lineNumber":453,"author":{"gitID":"ktingit"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 c/peanuts c/aspirin`"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":455,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":456,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":457,"author":{"gitID":"ktingit"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [c/CONDITION]...` +"},{"lineNumber":458,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":459,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":460,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":461,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":462,"author":{"gitID":"cxingkai"},"content":"* *Login* : `login USERNAME PASSWORD`"},{"lineNumber":463,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":464,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":465,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":466,"author":{"gitID":"nhs-work"},"content":"* *Remark* : `remark INDEX r/[REMARK]` +"},{"lineNumber":467,"author":{"gitID":"nhs-work"},"content":"e.g.`remark 1 r/Likes to drink coffee.`"},{"lineNumber":468,"author":{"gitID":"Kyholmes"},"content":"* *View Appointment* : `viewappt`"},{"lineNumber":469,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":470,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":471,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d Command Alias Summary"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"ktingit"},"content":"* *Add* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [c/CONDITION]...`"},{"lineNumber":476,"author":{"gitID":"ktingit"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 c/peanuts c/aspirin`"},{"lineNumber":477,"author":{"gitID":"-"},"content":"* *Clear* : `c`"},{"lineNumber":478,"author":{"gitID":"nhs-work"},"content":"* *Delete* : `d INDEX` or `rm INDEX` +"},{"lineNumber":479,"author":{"gitID":"-"},"content":"e.g. `d 3`"},{"lineNumber":480,"author":{"gitID":"ktingit"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [c/CONDITION]...` +"},{"lineNumber":481,"author":{"gitID":"-"},"content":"e.g. `e 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":482,"author":{"gitID":"-"},"content":"* *Find* : `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":483,"author":{"gitID":"-"},"content":"e.g. `f James Jake`"},{"lineNumber":484,"author":{"gitID":"cxingkai"},"content":"* *List* : `ls`"},{"lineNumber":485,"author":{"gitID":"cxingkai"},"content":"* *Login* : `lg USERNAME PASSWORD`"},{"lineNumber":486,"author":{"gitID":"-"},"content":"* *Help* : `h`"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* *Select* : `s INDEX` +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"e.g.`s 2`"},{"lineNumber":489,"author":{"gitID":"nhs-work"},"content":"* *Remark* : `rk INDEX r/[REMARK]` +"},{"lineNumber":490,"author":{"gitID":"nhs-work"},"content":"e.g.`rk 1 r/Likes to drink coffee.`"},{"lineNumber":491,"author":{"gitID":"Kyholmes"},"content":"* *View Appointment* : `va`"},{"lineNumber":492,"author":{"gitID":"-"},"content":"* *History* : `hi`"},{"lineNumber":493,"author":{"gitID":"nhs-work"},"content":"* *Undo* : `u` or `z`"},{"lineNumber":494,"author":{"gitID":"nhs-work"},"content":"* *Redo* : `r` or `y`"}],"authorContributionMap":{"Kyholmes":109,"ktingit":74,"-":237,"cxingkai":12,"nhs-work":62}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"public class ClearCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        /* Case: selects first card in patient list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filters the patient list before clearing -\u003e entire address book cleared */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":11,"-":90,"cxingkai":2}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyImdb\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":2,"-":71}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"public class HelpCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":35,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"        assertListMatching(getPersonListPanel(), getModel().getVisitingQueue());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":3,"-":91,"cxingkai":3}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.AMY;"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.CARL;"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.HOON;"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.IDA;"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":53,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":63,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientUtil;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"public class AddCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":76,"author":{"gitID":"cxingkai"},"content":"        // LoginManager.logout();"},{"lineNumber":77,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":83,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        Patient toAdd \u003d AMY;"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + NRIC_DESC_AMY + \"  \""},{"lineNumber":86,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_AMY + \" \""},{"lineNumber":87,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + DOB_DESC_AMY + \"   \""},{"lineNumber":88,"author":{"gitID":"ktingit"},"content":"                + BLOODTYPE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient with all fields same as another patient in the address book except name -\u003e added */"},{"lineNumber":103,"author":{"gitID":"ktingit"},"content":"        toAdd \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_AMY)"},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"ktingit"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDob(VALID_DOB_AMY)"},{"lineNumber":106,"author":{"gitID":"ktingit"},"content":"                .withBloodType(VALID_BLOODTYPE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + NRIC_DESC_AMY"},{"lineNumber":108,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_AMY + BLOODTYPE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient with all fields same as another patient in the address book except phone -\u003e added */"},{"lineNumber":113,"author":{"gitID":"ktingit"},"content":"        toAdd \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":114,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"ktingit"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDob(VALID_DOB_AMY).withBloodType(VALID_BLOODTYPE_AMY)"},{"lineNumber":116,"author":{"gitID":"ktingit"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_AMY + BLOODTYPE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient with all fields same as another patient in the address book except email -\u003e added */"},{"lineNumber":123,"author":{"gitID":"ktingit"},"content":"        toAdd \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":124,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":125,"author":{"gitID":"ktingit"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDob(VALID_DOB_AMY).withBloodType(VALID_BLOODTYPE_AMY)"},{"lineNumber":126,"author":{"gitID":"ktingit"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":127,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_AMY + BLOODTYPE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient with all fields same as another patient in the address book except address -\u003e added */"},{"lineNumber":133,"author":{"gitID":"ktingit"},"content":"        toAdd \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":134,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":135,"author":{"gitID":"ktingit"},"content":"                .withAddress(VALID_ADDRESS_BOB).withDob(VALID_DOB_AMY).withBloodType(VALID_BLOODTYPE_AMY)"},{"lineNumber":136,"author":{"gitID":"ktingit"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":137,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":138,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_AMY + BLOODTYPE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient with tags, command with parameters in random order -\u003e added */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + NRIC_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a patient, missing tags -\u003e added */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filters the patient list before adding -\u003e added */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"Kyholmes"},"content":"        /* ------------------------ Perform add operation while a patient card is selected -------------------------- */"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Kyholmes"},"content":"        /* Case: selects first card in the patient list, add a patient -\u003e added, card selection remains unchanged */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a duplicate patient -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"Kyholmes"},"content":"        command \u003d PatientUtil.getAddCommand(HOON);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"Kyholmes"},"content":"        /* Case: add a duplicate patient except with different tags -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"Kyholmes"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPatients#ALICE"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":177,"author":{"gitID":"Kyholmes"},"content":"        // Imdb#addPerson(Patient)"},{"lineNumber":178,"author":{"gitID":"Kyholmes"},"content":"        command \u003d PatientUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":183,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"ktingit"},"content":"        /* Case: missing nric -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"ktingit"},"content":"        /* Case: missing dob -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"ktingit"},"content":"        /* Case: missing blood type -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":213,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DOB_DESC_AMY;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":217,"author":{"gitID":"Kyholmes"},"content":"        command \u003d \"adds \" + PatientUtil.getPersonDetails(toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":221,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":222,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"ktingit"},"content":"        /* Case: invalid nric -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_NRIC_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":227,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":228,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":231,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":232,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":236,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":237,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":241,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":242,"author":{"gitID":"ktingit"},"content":"                + INVALID_ADDRESS_DESC + DOB_DESC_AMY + BLOODTYPE_DESC_AMY;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"ktingit"},"content":"        /* Case: invalid dob -\u003e rejected */"},{"lineNumber":246,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":247,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + INVALID_DOB_DESC + BLOODTYPE_DESC_AMY;"},{"lineNumber":248,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(command, DateOfBirth.MESSAGE_DOB_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":250,"author":{"gitID":"ktingit"},"content":"        /* Case: invalid blood type -\u003e rejected */"},{"lineNumber":251,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":252,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + INVALID_BLOODTYPE_DESC;"},{"lineNumber":253,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(command, BloodType.MESSAGE_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":256,"author":{"gitID":"ktingit"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":257,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"Kyholmes"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PatientListPanel} equal to the corresponding components in"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":273,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"Kyholmes"},"content":"    private void assertCommandSuccess(Patient toAdd) {"},{"lineNumber":277,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(PatientUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"Kyholmes"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Patient)}. Executes {@code command}"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":283,"author":{"gitID":"Kyholmes"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Patient)"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"Kyholmes"},"content":"    private void assertCommandSuccess(String command, Patient toAdd) {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":289,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException dpe) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"Kyholmes"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Patient)} except asserts that"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"Kyholmes"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PatientListPanel} equal to the corresponding components in"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"Kyholmes"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Patient)"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":309,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":310,"author":{"gitID":"Kyholmes"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":318,"author":{"gitID":"Kyholmes"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PatientListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":321,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":330,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":52,"ktingit":91,"-":187,"cxingkai":3}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"public class DeleteCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        /* Case: delete the first patient in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        Patient deletedPatient \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPatient);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        /* Case: delete the last patient in the list -\u003e deleted */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        /* Case: undo deleting the last patient in the list -\u003e last patient restored */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        /* Case: redo deleting the last patient in the list -\u003e last patient deleted again */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"        /* Case: delete the middle patient in the list -\u003e deleted */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, delete index within bounds of address book and patient list -\u003e deleted */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, delete index within bounds of address book but out of bounds of patient list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"        int invalidIndex \u003d getModel().getImdb().getPersonList().size();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"        /* --------------------- Performing delete operation while a patient card is selected ----------------------- */"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        /* Case: delete the selected patient -\u003e patient list panel selects the patient before the deleted patient */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"        deletedPatient \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPatient);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"                getModel().getImdb().getPersonList().size() + 1);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"     * Removes the {@code Patient} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"     * @return the removed patient"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"    private Patient removePerson(Model model, Index index) {"},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"        Patient targetPatient \u003d getPerson(model, index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"            model.deletePerson(targetPatient);"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        } catch (PatientNotFoundException pnfe) {"},{"lineNumber":126,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"targetPatient is retrieved from model.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Kyholmes"},"content":"        return targetPatient;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"Kyholmes"},"content":"     * Deletes the patient at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"        Patient deletedPatient \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPatient);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":142,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":155,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":165,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":173,"author":{"gitID":"Kyholmes"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":179,"author":{"gitID":"Kyholmes"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":190,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":39,"-":161,"cxingkai":2}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"public class SelectCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":24,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        /* Case: select the first card in the patient list, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        /* Case: select the last card in the patient list -\u003e selected */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        /* Case: select the middle card in the patient list -\u003e selected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, select index within bounds of address book but out of bounds of patient list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        int invalidIndex \u003d getModel().getImdb().getPersonList().size();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, select index within bounds of address book and patient list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":92,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":"     * {@code expectedSelectedCardIndex} of the selected patient.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PatientListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":120,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"Kyholmes"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"Kyholmes"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PatientListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":144,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":153,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":20,"-":133,"cxingkai":3}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    private static final Predicate\u003cPatient\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    public static void setFilteredList(Model model, List\u003cPatient\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"        Optional\u003cPredicate\u003cPatient\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    public static void setFilteredList(Model model, Patient... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * Returns a predicate that evaluates to true if this {@code Patient} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    private static Predicate\u003cPatient\u003e getPredicateMatching(Patient other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":7,"-":32}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"public class ErrorDialogGuiTest extends ImdbSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":33}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_SUCCESS \u003d"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"            new NewResultAvailableEvent(\"Success\", false);"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_ERROR \u003d"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"            new NewResultAvailableEvent(\"Error\", true);"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cString\u003e messageDefaultStyleClasses;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cString\u003e messageErrorStyleClasses;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":36,"content":"        //@@author yamgent-reused"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        messageDefaultStyleClasses \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        messageErrorStyleClasses \u003d new ArrayList\u003c\u003e(messageDefaultStyleClasses);"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"        messageErrorStyleClasses.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(messageDefaultStyleClasses, resultDisplayHandle.getStyleClass());"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"        //new results received"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        assertResultDisplay(NEW_RESULT_EVENT_SUCCESS);"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        assertResultDisplay(NEW_RESULT_EVENT_ERROR);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":56,"content":"    //@@author yamgent-reused"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"     * check if the event message and message text color is same as the expected one"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"     * @param event"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        postNow(event);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isError ? messageErrorStyleClasses : messageDefaultStyleClasses;"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Kyholmes":35,"-":34}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BENSON;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.CARL;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.DANIEL;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"public class FindCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        /* Case: repeat previous find command where patient list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient where patient list is not displaying the patient we are finding -\u003e 1 patient found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 patient found */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(getModel().getImdb().getPersonList().contains(BENSON));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient in address book, keyword is same as name but of different case -\u003e 1 patient found */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient not in address book -\u003e 0 persons found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find phone number of patient in address book -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find address of patient in address book -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find email of patient in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find tags of patient in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find while a patient is selected -\u003e selected card deselected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"Kyholmes"},"content":"        //assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"Kyholmes"},"content":"        /* Case: find patient in empty address book -\u003e 0 persons found */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":164,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":167,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":171,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":183,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":186,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":194,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":26,"-":169,"cxingkai":2}},{"path":"src/test/java/systemtests/ImdbSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.ui.StatusBarFooter.RECORD_NUMBER_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.TypicalPatients;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":" * A system test class for Imdb, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"public abstract class ImdbSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cString\u003e resultDisplayDefaultStyle;"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cString\u003e resultDisplayErrorStyle;"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"content":"        //@@author yamgent-reused"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"        resultDisplayDefaultStyle \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"        resultDisplayErrorStyle \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        resultDisplayErrorStyle.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"    protected Imdb getInitialData() {"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"        return TypicalPatients.getTypicalAddressBook();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"    public PatientListPanelHandle getPersonListPanel() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":142,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(getModel().getImdb().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":162,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getImdb().getPersonList().size());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"Kyholmes"},"content":"     * Selects the patient at {@code index} of the displayed list."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":169,"author":{"gitID":"Kyholmes"},"content":"        //executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":170,"author":{"gitID":"Kyholmes"},"content":"        //assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":177,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(0, getModel().getImdb().getPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":182,"author":{"gitID":"Kyholmes"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same patient objects as {@code expectedModel}"},{"lineNumber":183,"author":{"gitID":"Kyholmes"},"content":"     * and the patient list panel displays the persons in the model correctly."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":190,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedModel.getImdb(), testApp.readStorageAddressBook());"},{"lineNumber":191,"author":{"gitID":"Kyholmes"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getVisitingQueue());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"Kyholmes"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PatientListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":203,"author":{"gitID":"Kyholmes"},"content":"        statusBarFooterHandle.rememberRecordNumber();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":209,"author":{"gitID":"Kyholmes"},"content":"     * of the previously selected patient."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the patient in the patient list panel at"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":221,"author":{"gitID":"Kyholmes"},"content":"     * @see PatientListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the browser\u0027s url and the selected card in the patient list panel remain unchanged."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":239,"author":{"gitID":"Kyholmes"},"content":"     * @see PatientListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"Kyholmes"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":251,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(resultDisplayDefaultStyle, getResultDisplay().getStyleClass());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"Kyholmes"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":259,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(resultDisplayErrorStyle, getResultDisplay().getStyleClass());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":269,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(handle.isRecordNumberChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":274,"author":{"gitID":"Kyholmes"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and record number remains the same."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":282,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(handle.isRecordNumberChanged());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":292,"author":{"gitID":"Kyholmes"},"content":"            assertListMatching(getPersonListPanel(), getModel().getVisitingQueue());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":296,"author":{"gitID":"Kyholmes"},"content":"            assertEquals(String.format(RECORD_NUMBER_STATUS, getModel().getImdb().getUniquePatientQueue().size()),"},{"lineNumber":297,"author":{"gitID":"Kyholmes"},"content":"                    getStatusBarFooter().getRecordNumber());"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"content":"    //@@author yamgent-reused"},{"lineNumber":304,"author":{"gitID":"Kyholmes"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":305,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the timing of sync status was changed and record number was changed to match total number of"},{"lineNumber":307,"author":{"gitID":"Kyholmes"},"content":"     * records in the address book"},{"lineNumber":308,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"Kyholmes"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":311,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":315,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":316,"author":{"gitID":"Kyholmes"},"content":"        final int totalRecords \u003d testApp.getModel().getImdb().getUniquePatientQueue().size();"},{"lineNumber":317,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(String.format(RECORD_NUMBER_STATUS, totalRecords), statusBarFooterHandle.getRecordNumber());"},{"lineNumber":318,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":319,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(statusBarFooterHandle.isSaveLocationChanged());"},{"lineNumber":320,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":324,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Kyholmes":61,"-":265}},{"path":"src/test/java/seedu/address/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" * A GUI unit test class for Imdb."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":37}},{"path":"src/test/java/seedu/address/ui/PatientListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientCardHandle;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"public class PatientListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    private static final ObservableList\u003cPatient\u003e TYPICAL_PATIENTS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    private PatientListPanelHandle patientListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        PatientListPanel patientListPanel \u003d new PatientListPanel(TYPICAL_PATIENTS);"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        uiPartRule.setUiPart(patientListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        patientListPanelHandle \u003d new PatientListPanelHandle(getChildNode(patientListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"                PatientListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PATIENTS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"            patientListPanelHandle.navigateToCard(TYPICAL_PATIENTS.get(i));"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"            Patient expectedPatient \u003d TYPICAL_PATIENTS.get(i);"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"            PatientCardHandle actualCard \u003d patientListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"            assertCardDisplaysPerson(expectedPatient, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"        PatientCardHandle expectedCard \u003d patientListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        PatientCardHandle selectedCard \u003d patientListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":18,"-":40}},{"path":"src/test/java/seedu/address/ui/PatientCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientCardHandle;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class PatientCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"        Patient patientWithNoTags \u003d new PatientBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"        PatientCard patientCard \u003d new PatientCard(patientWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"        uiPartRule.setUiPart(patientCard);"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"        assertCardDisplay(patientCard, patientWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        Patient patientWithTags \u003d new PatientBuilder().build();"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"        patientCard \u003d new PatientCard(patientWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"        uiPartRule.setUiPart(patientCard);"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        assertCardDisplay(patientCard, patientWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d new PatientBuilder().build();"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        PatientCard patientCard \u003d new PatientCard(patient, 0);"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        // same patient, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        PatientCard copy \u003d new PatientCard(patient, 0);"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(patientCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(patientCard.equals(patientCard));"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(patientCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(patientCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        // different patient, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"        Patient differentPatient \u003d new PatientBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(patientCard.equals(new PatientCard(differentPatient, 0)));"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        // same patient, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(patientCard.equals(new PatientCard(patient, 1)));"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that {@code patientCard} displays the details of {@code expectedPatient} correctly and matches"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"    private void assertCardDisplay(PatientCard patientCard, Patient expectedPatient, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        PatientCardHandle patientCardHandle \u003d new PatientCardHandle(patientCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", patientCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"        // verify patient details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        assertCardDisplaysPerson(expectedPatient, patientCardHandle);"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":63,"-":9}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ktingit"},"content":"\u003d Integrated Medical DataBase - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"Kyholmes"},"content":".  The command execution can affect the `Model` (e.g. adding a patient) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"Kyholmes"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th patient in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"Kyholmes"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new patient."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"Kyholmes"},"content":"The user now decides that adding the patient was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"Kyholmes"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"nhs-work"},"content":"// tag::remark[]"},{"lineNumber":362,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d Edit remarks feature"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"nhs-work"},"content":"The edit remarks mechanism is facilitated by a `RemarkCommand`."},{"lineNumber":366,"author":{"gitID":"nhs-work"},"content":"It supports editing the remarks of a `Patient` to match the user input. `RemarkCommand` inherits from `UndoableCommand` as well."},{"lineNumber":367,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":368,"author":{"gitID":"nhs-work"},"content":"The edit remarks mechanism functions like that of the `Edit`. It searches for the patient to be edited based on the index provided"},{"lineNumber":369,"author":{"gitID":"nhs-work"},"content":"by the user. It then creates a new patient with the same attributes as the patient to be edited, changing the remarks attribute to"},{"lineNumber":370,"author":{"gitID":"nhs-work"},"content":"match the user input. The `RemarkCommand` then calls for the utility method updatePerson under `Model`, to replace the patient to be"},{"lineNumber":371,"author":{"gitID":"nhs-work"},"content":"edited with the edited patient."},{"lineNumber":372,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":373,"author":{"gitID":"nhs-work"},"content":"Suppose that the user has just launched the application. The current list is shown in Figure 3.2.1.1. below."},{"lineNumber":374,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":375,"author":{"gitID":"nhs-work"},"content":"image::Figure 3.2.1.1.PNG[width\u003d\"800\"]"},{"lineNumber":376,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":377,"author":{"gitID":"nhs-work"},"content":"The user now decides to edit the remarks of the first person in the list."},{"lineNumber":378,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":379,"author":{"gitID":"nhs-work"},"content":"`RemarkCommand` will search for the first person in the list and store it as the person to be edited as shown in Figure 3.2.1.2. below."},{"lineNumber":380,"author":{"gitID":"nhs-work"},"content":"`RemarkCommand` will then create a new patient with the same attributes as the patient to be edited, except the remarks attribute"},{"lineNumber":381,"author":{"gitID":"nhs-work"},"content":"which will be based on the user input. This new patient will be stored as the edited patient as shown in Figure 3.2.1.2. below."},{"lineNumber":382,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":383,"author":{"gitID":"nhs-work"},"content":"image::Figure 3.2.1.2.PNG[width\u003d\"800\"]"},{"lineNumber":384,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":385,"author":{"gitID":"nhs-work"},"content":"`RemarkCommand` will finally call the for the utility method updatePerson under `Model`, to replace the patient to be edited with the edited patient,"},{"lineNumber":386,"author":{"gitID":"nhs-work"},"content":"the new list will be as shown in Figure 3.2.1.2. below."},{"lineNumber":387,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":388,"author":{"gitID":"nhs-work"},"content":"image::Figure 3.2.1.3.PNG[width\u003d\"650\"]"},{"lineNumber":389,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"nhs-work"},"content":"The following is an exploration of possible alternative implementations, the various aspects of"},{"lineNumber":393,"author":{"gitID":"nhs-work"},"content":"each implementation and the pros and cons of each implementation:"},{"lineNumber":394,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":395,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `RemarkCommand`"},{"lineNumber":396,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":397,"author":{"gitID":"nhs-work"},"content":"* **Alternative 1 (current choice):** Create a duplicate `Patient` and utilise updatePerson to edit the remarks"},{"lineNumber":398,"author":{"gitID":"nhs-work"},"content":"** Pros: Will be easy to implement due to existing utility methods."},{"lineNumber":399,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":400,"author":{"gitID":"nhs-work"},"content":"* **Alternative 2:** Create a public method in `Remark` for updating the remark which will be called by `Patient`"},{"lineNumber":401,"author":{"gitID":"nhs-work"},"content":"** Pros: Will use less memory (no need to create new patient object)."},{"lineNumber":402,"author":{"gitID":"nhs-work"},"content":"** Cons: Will require public access to `Remark` stored in `Patient` (possible security concerns)."},{"lineNumber":403,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":404,"author":{"gitID":"nhs-work"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the remark command"},{"lineNumber":405,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":406,"author":{"gitID":"nhs-work"},"content":"* **Alternative 1 (current choice):** Create a `Remark` that is stored in `Patient`"},{"lineNumber":407,"author":{"gitID":"nhs-work"},"content":"** Pros: Will be easy to understand for new developers as it follows existing structures."},{"lineNumber":408,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":409,"author":{"gitID":"nhs-work"},"content":"* **Alternative 2:** Create a String that is stored in `Patient`"},{"lineNumber":410,"author":{"gitID":"nhs-work"},"content":"** Pros: Will use less memory (no need to create new remark object)."},{"lineNumber":411,"author":{"gitID":"nhs-work"},"content":"** Cons: Will require a method in Patient to update and verify validity of remark. Violates Single Responsibility Principle and Separation of Concerns as `Patient` now needs to do two * different things."},{"lineNumber":412,"author":{"gitID":"nhs-work"},"content":"// end::remark[]"},{"lineNumber":413,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":414,"author":{"gitID":"Kyholmes"},"content":"// tag::addqremoveq[]"},{"lineNumber":415,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Patient Visting Queue (waiting list for registration)"},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"Kyholmes"},"content":"The patient visiting queue mechanism is facilitated by `UniquePatientVisitingQueue`, `AddPatientQueueCommand` and `RemovePatientQueueCommand`."},{"lineNumber":419,"author":{"gitID":"Kyholmes"},"content":"It supports adding and removing a patient from the visiting queue. `AddPatientQueueCommand` and `RemovePatientQueueCommand` inherit from `Command`."},{"lineNumber":420,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":421,"author":{"gitID":"Kyholmes"},"content":"The add patient into visiting queue mechanism functions like that of the `Add` but with patient name only. It searches for the patient to be added based on the patient name provided"},{"lineNumber":422,"author":{"gitID":"Kyholmes"},"content":"by the user. If the patient already exist in the system then the patient will be added into the visiting queue. The `AddPatientQueueCommand` then calls for the utility method addPatientToQueue under `Model`, to update the visiting queue and trigger a ImdbChangedEvent to UI to update PatientListPanel."},{"lineNumber":423,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":424,"author":{"gitID":"Kyholmes"},"content":"Suppose that the user has just launched the application and login as medical staffs. The empty queue is shown in figure below."},{"lineNumber":425,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":426,"author":{"gitID":"Kyholmes"},"content":"image::emptyVisitQueue.png[width\u003d\"400\"]"},{"lineNumber":427,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":428,"author":{"gitID":"Kyholmes"},"content":"The user now decides to add a patient into the queues."},{"lineNumber":429,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":430,"author":{"gitID":"Kyholmes"},"content":"`AddPatientQueueCommand` will search for the patient in the patient list. If the patient is found in the list, `AddPatientQueueCommand` will finally call the for the utility method addPatientToQueue under `Model`, to add the patient into the visit queue,"},{"lineNumber":431,"author":{"gitID":"Kyholmes"},"content":"the new list will be as shown in figure below."},{"lineNumber":432,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":433,"author":{"gitID":"Kyholmes"},"content":"image::patientInQueue.png[width\u003d\"400\"]"},{"lineNumber":434,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":435,"author":{"gitID":"Kyholmes"},"content":"The remove patient from visiting queue mechanism functions like that of the `Delete` but without any parameters. It removes the first patient of the queue. The `RemovePatientQueueCommand` then calls for the utility method removePatientFromQueue under `Model`, to update the visiting queue and trigger a ImdbChangedEvent to UI to update PatientListPanel."},{"lineNumber":436,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":437,"author":{"gitID":"Kyholmes"},"content":"Suppose that the queue contains patients as shown in figure below."},{"lineNumber":438,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":439,"author":{"gitID":"Kyholmes"},"content":"image::patientsInQueue.png[width\u003d\"400\"]"},{"lineNumber":440,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":441,"author":{"gitID":"Kyholmes"},"content":"The user now decides to remove the first patient from the queues."},{"lineNumber":442,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":443,"author":{"gitID":"Kyholmes"},"content":"`RemovePatientQueueCommand` will finally call the for the utility method removePatientFromQueue under `Model`, to remove the patient from the visit queue,"},{"lineNumber":444,"author":{"gitID":"Kyholmes"},"content":"the new list will be as shown in figure below."},{"lineNumber":445,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":446,"author":{"gitID":"Kyholmes"},"content":"image::patientInQueueRemoveState.png[width\u003d\"400\"]"},{"lineNumber":447,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"nhs-work"},"content":"The following is an exploration of possible alternative implementations, the various aspects of"},{"lineNumber":451,"author":{"gitID":"nhs-work"},"content":"each implementation and the pros and cons of each implementation:"},{"lineNumber":452,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":453,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the AddPatientQueue and RemovePatientQueue command"},{"lineNumber":454,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":455,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 1 (current choice):** Using LinkedList as queue to store patients"},{"lineNumber":456,"author":{"gitID":"nhs-work"},"content":"** Pros: Will be easy to implement due to existing utility methods."},{"lineNumber":457,"author":{"gitID":"Kyholmes"},"content":"** Cons: May have utility limitation."},{"lineNumber":458,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 2:** Create a data structure class like linked list to store patient in a queue"},{"lineNumber":459,"author":{"gitID":"Kyholmes"},"content":"** Pros: Can customise functionalities of the data structure."},{"lineNumber":460,"author":{"gitID":"Kyholmes"},"content":"** Cons: Will require time and more knowledge to do."},{"lineNumber":461,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":462,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddPatientQueueCommand`"},{"lineNumber":463,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":464,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 1 (current choice):** Patient will only added at the back of the list"},{"lineNumber":465,"author":{"gitID":"Kyholmes"},"content":"** Pros: Easy to implement."},{"lineNumber":466,"author":{"gitID":"Kyholmes"},"content":"** Cons: User cannot add patient in the position they want in the queue."},{"lineNumber":467,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 2:** Patient can be added in any position in the queue"},{"lineNumber":468,"author":{"gitID":"Kyholmes"},"content":"** Pros: Improve the functionality of AddPatientQueue command."},{"lineNumber":469,"author":{"gitID":"Kyholmes"},"content":"** Cons: Will require another implentation to add patient in the specified position in the queue."},{"lineNumber":470,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":471,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `RemovePatientQueueCommand`"},{"lineNumber":472,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":473,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 1 (current choice):** Patient will only removed from the top of the list"},{"lineNumber":474,"author":{"gitID":"Kyholmes"},"content":"** Pros: Easy to implement."},{"lineNumber":475,"author":{"gitID":"Kyholmes"},"content":"** Cons: User cannot remove a patient in a certain position."},{"lineNumber":476,"author":{"gitID":"Kyholmes"},"content":"* **Alternative 2:** Patient can be removed from the queue no matter which position the patient is in the queue"},{"lineNumber":477,"author":{"gitID":"Kyholmes"},"content":"** Pros: Improve the functionality of RemovePatientQueue command."},{"lineNumber":478,"author":{"gitID":"Kyholmes"},"content":"** Cons: Will require another implentation to remove patient in the specified position from the queue."},{"lineNumber":479,"author":{"gitID":"Kyholmes"},"content":"// end::addqremoveq"},{"lineNumber":480,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":481,"author":{"gitID":"ktingit"},"content":"// tag::morefields[]"},{"lineNumber":482,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Implement more fields for the patient information feature"},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"ktingit"},"content":"The additional detail fields added is managed by the `AddCommand` and `EditCommand`."},{"lineNumber":486,"author":{"gitID":"ktingit"},"content":"They are included as fields to be filled in when adding a new `Patient` or when editing an existing `Patient`."},{"lineNumber":487,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":488,"author":{"gitID":"ktingit"},"content":"Both `AddCommand` and `EditCommand` have been modified to accept new inputs corresponding with the new fields implemented."},{"lineNumber":489,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":490,"author":{"gitID":"ktingit"},"content":"Suppose that the user has just launched the application. The current list is shown in Figure 3.3.1.1. below."},{"lineNumber":491,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":492,"author":{"gitID":"ktingit"},"content":"image::Figure3-3-1-1.png[width\u003d\"800\"]"},{"lineNumber":493,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":494,"author":{"gitID":"ktingit"},"content":"The user now decides to edit the blood type of the first person in the list."},{"lineNumber":495,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":496,"author":{"gitID":"ktingit"},"content":"`EditCommand` will search for the first person in the list and store it as the person to be edited as shown in Figure 3.3.1.2. below."},{"lineNumber":497,"author":{"gitID":"ktingit"},"content":"`EditCommand` will then create a new patient with the same attributes as the patient to be edited, except the remarks attribute"},{"lineNumber":498,"author":{"gitID":"ktingit"},"content":"which will be based on the user input. This new patient will be stored as the edited patient as shown in Figure 3.3.1.2. below."},{"lineNumber":499,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":500,"author":{"gitID":"ktingit"},"content":"image::Figure3-3-1-2.png[width\u003d\"800\"]"},{"lineNumber":501,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":502,"author":{"gitID":"ktingit"},"content":"`EditCommand` will finally call the for the utility method updatePerson under `Model`, to replace the patient to be edited with the edited patient,"},{"lineNumber":503,"author":{"gitID":"ktingit"},"content":"the new list will be as shown in Figure 3.3.1.2. below."},{"lineNumber":504,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":505,"author":{"gitID":"ktingit"},"content":"image::Figure3-3-1-3.png[width\u003d\"650\"]"},{"lineNumber":506,"author":{"gitID":"ktingit"},"content":"// end::morefields[]"},{"lineNumber":507,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":508,"author":{"gitID":"cxingkai"},"content":"// tag::login[]"},{"lineNumber":509,"author":{"gitID":"cxingkai"},"content":"\u003d\u003d\u003d Login System"},{"lineNumber":510,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":511,"author":{"gitID":"cxingkai"},"content":"The action of logging into IMDB is facilitated by `LoginCommand` and the static class `LoginManager`, which also contains a static attribute of class `LoginState`."},{"lineNumber":512,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":513,"author":{"gitID":"cxingkai"},"content":"`LoginCommand` takes in username and password input from the user, then calls the static class `LoginManager` to authenticate the given username and password, meaning that it will check through a csv file of correct usernames and passwords. If the given username and password are found in that file, then the value stored in `LoginState` will be changed to reflect the role of the user who logged in (doctor or medical staff)."},{"lineNumber":514,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":515,"author":{"gitID":"cxingkai"},"content":"If `LoginState` shows that no user is currently logged in, certain commands that access the database such as `AddCommand` and `ListCommand` will throw an exception telling the user to log in. Once logged in, the user can perform those commands."},{"lineNumber":516,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":517,"author":{"gitID":"cxingkai"},"content":"There is no need for a logout command, since `ExitCommand` can be used to exit the application, and when the application is opened again, `LoginState` will be reset."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"nhs-work"},"content":"The following is an exploration of possible alternative implementations, the various aspects of"},{"lineNumber":522,"author":{"gitID":"nhs-work"},"content":"each implementation and the pros and cons of each implementation:"},{"lineNumber":523,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":524,"author":{"gitID":"cxingkai"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `LoginState`"},{"lineNumber":525,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":526,"author":{"gitID":"cxingkai"},"content":"* **Alternative 1 (current choice):** Use a static `LoginManager` class with a static `LoginState` attribute"},{"lineNumber":527,"author":{"gitID":"cxingkai"},"content":"** Pros: The methods of `LoginManager` can be called anywhere, and its stored `LoginState` attribute will not be changed except through the authenticate method."},{"lineNumber":528,"author":{"gitID":"cxingkai"},"content":"** Cons: Need to implement as a final class with a private constructor, since Java does not support public static classes."},{"lineNumber":529,"author":{"gitID":"cxingkai"},"content":"* **Alternative 2:** Store a login state in LoginCommand"},{"lineNumber":530,"author":{"gitID":"cxingkai"},"content":"** Pros: Can store login state as an int instead of an object instance."},{"lineNumber":531,"author":{"gitID":"cxingkai"},"content":"** Cons: Will require a method in LoginCommand to update login state and verify username and password. Violates Single Responsibility Principle and Separation of Concerns as `LoginCommand` now needs to do two different things. Also, there is a need to somehow pass the login state to ImdbParser."},{"lineNumber":532,"author":{"gitID":"cxingkai"},"content":"// end::login[]"},{"lineNumber":533,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":547,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":552,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":553,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":554,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":571,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":586,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":589,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":599,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":624,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":625,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":626,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":627,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":628,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":629,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":631,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":632,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":636,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":639,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":656,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":663,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":664,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":665,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":670,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":674,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":689,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"Kyholmes"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all patients in the list."},{"lineNumber":697,"author":{"gitID":"-"},"content":"+"},{"lineNumber":698,"author":{"gitID":"-"},"content":"****"},{"lineNumber":699,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":700,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":701,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":702,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":707,"author":{"gitID":"-"},"content":"****"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":715,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":718,"author":{"gitID":"-"},"content":"+"},{"lineNumber":719,"author":{"gitID":"-"},"content":"****"},{"lineNumber":720,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":723,"author":{"gitID":"Kyholmes"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a patient, and link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`] allows you to update the tags."},{"lineNumber":724,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":725,"author":{"gitID":"Kyholmes"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each patient, and remove the `tag` from each patient."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":728,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":729,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":730,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":731,"author":{"gitID":"-"},"content":"****"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"Kyholmes"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last patient in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"Kyholmes"},"content":". Use different colors for different tags inside patient cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":742,"author":{"gitID":"-"},"content":"+"},{"lineNumber":743,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":744,"author":{"gitID":"-"},"content":"+"},{"lineNumber":745,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":746,"author":{"gitID":"-"},"content":"+"},{"lineNumber":747,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":748,"author":{"gitID":"-"},"content":"+"},{"lineNumber":749,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":751,"author":{"gitID":"-"},"content":"****"},{"lineNumber":752,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":753,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":755,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":756,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":757,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":758,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":759,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":760,"author":{"gitID":"-"},"content":"****"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":763,"author":{"gitID":"-"},"content":"+"},{"lineNumber":764,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":766,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":767,"author":{"gitID":"-"},"content":"+"},{"lineNumber":768,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":769,"author":{"gitID":"-"},"content":"+"},{"lineNumber":770,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"****"},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":774,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":775,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":779,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":780,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":781,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":783,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":784,"author":{"gitID":"-"},"content":"****"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":787,"author":{"gitID":"-"},"content":"+"},{"lineNumber":788,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":790,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":791,"author":{"gitID":"-"},"content":"+"},{"lineNumber":792,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":793,"author":{"gitID":"-"},"content":"+"},{"lineNumber":794,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":796,"author":{"gitID":"-"},"content":"****"},{"lineNumber":797,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":798,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":799,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":800,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":801,"author":{"gitID":"Kyholmes"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of patients when the application just started."},{"lineNumber":802,"author":{"gitID":"Kyholmes"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of patients whenever there are new changes to the addressbook."},{"lineNumber":803,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":804,"author":{"gitID":"Kyholmes"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of patients status bar."},{"lineNumber":805,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":806,"author":{"gitID":"-"},"content":"****"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":814,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":817,"author":{"gitID":"-"},"content":"+"},{"lineNumber":818,"author":{"gitID":"-"},"content":"****"},{"lineNumber":819,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":821,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":822,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":823,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":824,"author":{"gitID":"-"},"content":"****"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":834,"author":{"gitID":"Kyholmes"},"content":"Edits the remark for a patient specified in the `INDEX`. +"},{"lineNumber":835,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":840,"author":{"gitID":"Kyholmes"},"content":"Edits the remark for the first patient to `Likes to drink coffee.`"},{"lineNumber":841,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":842,"author":{"gitID":"Kyholmes"},"content":"Removes the remark for the first patient."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":847,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":852,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":857,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":860,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":865,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":866,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":871,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":872,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":873,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":876,"author":{"gitID":"Kyholmes"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each patient later."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":881,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":888,"author":{"gitID":"Kyholmes"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"Kyholmes"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/patient/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":893,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":900,"author":{"gitID":"Kyholmes"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`]."},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"Kyholmes"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`]."},{"lineNumber":905,"author":{"gitID":"Kyholmes"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the patient will be created without a remark)."},{"lineNumber":906,"author":{"gitID":"Kyholmes"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `Imdb.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":909,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"Kyholmes"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsImdb.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":920,"author":{"gitID":"Kyholmes"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/patient/Person.java[`Person`]."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"Kyholmes"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the patient that it is currently building."},{"lineNumber":925,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":928,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":939,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"Kyholmes"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a patient."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":954,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"Kyholmes"},"content":"* private clinics that have multiple branches"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"Kyholmes"},"content":"*Value proposition*: resolve the issue of possible medical negligence due to failure to take pre-existing medical conditions into account, and also make the practitioners\u0027 lives much more easier by knowing patients\u0027 records from a glance"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"Kyholmes"},"content":"*Feature contribution*:"},{"lineNumber":963,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":964,"author":{"gitID":"cxingkai"},"content":"* *Xing Kai*:"},{"lineNumber":965,"author":{"gitID":"ktingit"},"content":"** Major Feature:"},{"lineNumber":966,"author":{"gitID":"cxingkai"},"content":"*** Implement a Login System"},{"lineNumber":967,"author":{"gitID":"cxingkai"},"content":"**** Only medical staff and doctors with IMDB accounts can acccess patient\u0027s information"},{"lineNumber":968,"author":{"gitID":"ktingit"},"content":"** Minor Feature:"},{"lineNumber":969,"author":{"gitID":"cxingkai"},"content":"*** Print formatted medical records of patient"},{"lineNumber":970,"author":{"gitID":"ktingit"},"content":"**** Can be easily shown to patients when explaining their condition"},{"lineNumber":971,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":972,"author":{"gitID":"Kyholmes"},"content":"* *Kai Yong*:"},{"lineNumber":973,"author":{"gitID":"ktingit"},"content":"** Major Feature:"},{"lineNumber":974,"author":{"gitID":"Kyholmes"},"content":"*** Maintain a waiting list of patients (Visiting queue)"},{"lineNumber":975,"author":{"gitID":"ktingit"},"content":"**** Medical staff and doctor can have easy access basic information and medical profile of next patient in the queue."},{"lineNumber":976,"author":{"gitID":"ktingit"},"content":"** Minor Feature:"},{"lineNumber":977,"author":{"gitID":"Kyholmes"},"content":"*** Maintain patient appointments"},{"lineNumber":978,"author":{"gitID":"Kyholmes"},"content":"**** This is a typical features for most of the medical systems."},{"lineNumber":979,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":980,"author":{"gitID":"nhs-work"},"content":"* *Ng Hung Siang*:"},{"lineNumber":981,"author":{"gitID":"ktingit"},"content":"** Major Feature:"},{"lineNumber":982,"author":{"gitID":"nhs-work"},"content":"*** Keep the records of each visit of a patient"},{"lineNumber":983,"author":{"gitID":"nhs-work"},"content":"**** Doctors can monitor the symptoms/condition and treatment of a patient."},{"lineNumber":984,"author":{"gitID":"ktingit"},"content":"** Minor Feature:"},{"lineNumber":985,"author":{"gitID":"nhs-work"},"content":"*** Key in patient specific instructions/remarks that do not fit into existing fields"},{"lineNumber":986,"author":{"gitID":"nhs-work"},"content":"**** Medical staff and doctors can record patient specific information."},{"lineNumber":987,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":988,"author":{"gitID":"ktingit"},"content":"* *Kelvin Ting*:"},{"lineNumber":989,"author":{"gitID":"ktingit"},"content":"** Major Feature:"},{"lineNumber":990,"author":{"gitID":"ktingit"},"content":"*** Manage patient details and health profile"},{"lineNumber":991,"author":{"gitID":"ktingit"},"content":"**** Medical staff can update patient details and information easily."},{"lineNumber":992,"author":{"gitID":"ktingit"},"content":"** Minor Feature:"},{"lineNumber":993,"author":{"gitID":"ktingit"},"content":"*** Filter that switches between showing personal details only, medical information only."},{"lineNumber":994,"author":{"gitID":"ktingit"},"content":"**** Medical staff and doctors can reduce clutter on the screen and only see what is needed."},{"lineNumber":995,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":996,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":998,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1004,"author":{"gitID":"Kyholmes"},"content":"|Priority |As a ... |I want to ... |So that..."},{"lineNumber":1005,"author":{"gitID":"ktingit"},"content":"|`* * *` |medical staff |maintain a waiting list of patients(scheduler)|I can have easy access to the current patient\u0027s information"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"ktingit"},"content":"|`* * *` |doctor |record health profile (chronic conditions and allergies) of the patient|-"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"ktingit"},"content":"|`* * *` |doctor |keep records of each visit of the patient |symptoms/condition of patient can be analysed and monitored"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"Kyholmes"},"content":"|`* * *` |medical staff |ensure that all patient\u0027s records are secure with a login system |patients know that their medical information is kept confidential"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"Kyholmes"},"content":"|`* *` |medical staff |update patient details such as phone number |I can contact the patient"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"Kyholmes"},"content":"|`* *` |medical staff |search for patient\u0027s schedule and add new medical appointment |the patient can be directed to the correct doctor at the right time"},{"lineNumber":1016,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1017,"author":{"gitID":"Kyholmes"},"content":"|`* *` |medical staff |key in patient specific instructions/remarks that do not fit into details |patient specific information can be recorded"},{"lineNumber":1018,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1019,"author":{"gitID":"ktingit"},"content":"|`* *` |doctor |print out a formatted medical record |it can be shown to the patient when explaining their condition"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"Kyholmes"},"content":"(For all use cases below, the *System* is the `Imdb` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1029,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Use case: Update record of patient\u0027s visit"},{"lineNumber":1030,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1031,"author":{"gitID":"ktingit"},"content":"Precondition: User is logged in"},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"Kyholmes"},"content":"1.  User requests to update patient’s record of visit"},{"lineNumber":1036,"author":{"gitID":"Kyholmes"},"content":"2.  User inputs NRIC of patient, date and time of visit and additional remarks"},{"lineNumber":1037,"author":{"gitID":"Kyholmes"},"content":"3.  Imdb shows a success message"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1039,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1044,"author":{"gitID":"Kyholmes"},"content":"* 2a. The patient does not exist"},{"lineNumber":1045,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1046,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1047,"author":{"gitID":"Kyholmes"},"content":"** 2a1. Imdb detects that the patient does not exist"},{"lineNumber":1048,"author":{"gitID":"Kyholmes"},"content":"** 2a2. Imdb shows an error message"},{"lineNumber":1049,"author":{"gitID":"Kyholmes"},"content":"** 2a3. Imdb requests for user to input NRIC of patient"},{"lineNumber":1050,"author":{"gitID":"Kyholmes"},"content":"** 2a4. User inputs NRIC of patient"},{"lineNumber":1051,"author":{"gitID":"Kyholmes"},"content":"** Steps 2a1-2a4 are repeated until the patient exists"},{"lineNumber":1052,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1053,"author":{"gitID":"Kyholmes"},"content":"Use case resumes from step 3"},{"lineNumber":1054,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1055,"author":{"gitID":"Kyholmes"},"content":"[discrete]"},{"lineNumber":1056,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Use case: Login to access the system"},{"lineNumber":1057,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1058,"author":{"gitID":"Kyholmes"},"content":"*MSS*"},{"lineNumber":1059,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1060,"author":{"gitID":"Kyholmes"},"content":"1.  User requests to login to system"},{"lineNumber":1061,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input username and password"},{"lineNumber":1062,"author":{"gitID":"Kyholmes"},"content":"3.  User inputs username and password"},{"lineNumber":1063,"author":{"gitID":"Kyholmes"},"content":"4.  Imdb shows a success message"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1065,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"Kyholmes"},"content":"*Extensions*"},{"lineNumber":1068,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1069,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1070,"author":{"gitID":"ktingit"},"content":"* 3a. Username and password do not match"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1073,"author":{"gitID":"Kyholmes"},"content":"** 3a1. Imdb shows an error message"},{"lineNumber":1074,"author":{"gitID":"Kyholmes"},"content":"** 3a2. Imdb requests user to input username and password"},{"lineNumber":1075,"author":{"gitID":"Kyholmes"},"content":"** 3a3. User inputs username and password"},{"lineNumber":1076,"author":{"gitID":"Kyholmes"},"content":"** Steps 3a1-3a3 are repeated until username and password match"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1078,"author":{"gitID":"ktingit"},"content":"Use case resumes at step 4"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"Kyholmes"},"content":"[discrete]"},{"lineNumber":1081,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Use case: Update patient details"},{"lineNumber":1082,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1083,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in"},{"lineNumber":1084,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1085,"author":{"gitID":"Kyholmes"},"content":"*MSS*"},{"lineNumber":1086,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1087,"author":{"gitID":"Kyholmes"},"content":"1.  User requests to update patient details"},{"lineNumber":1088,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input NRIC of the patient and details that need to be edited"},{"lineNumber":1089,"author":{"gitID":"Kyholmes"},"content":"3.  User inputs NRIC and patient detail that need to be edited"},{"lineNumber":1090,"author":{"gitID":"Kyholmes"},"content":"4.  Imdb shows a success message and display the patient details"},{"lineNumber":1091,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1092,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1093,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1094,"author":{"gitID":"Kyholmes"},"content":"*Extensions*"},{"lineNumber":1095,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1096,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1097,"author":{"gitID":"ktingit"},"content":"* 3a. Patient cannot be found in the system"},{"lineNumber":1098,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1099,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1100,"author":{"gitID":"Kyholmes"},"content":"** 3a1. Imdb shows an error message"},{"lineNumber":1101,"author":{"gitID":"Kyholmes"},"content":"** 3a2. Imdb requests user to input NRIC and patient detail that need to be edited"},{"lineNumber":1102,"author":{"gitID":"Kyholmes"},"content":"** 3a3. User inputs NRIC and patient detail that need to be edited"},{"lineNumber":1103,"author":{"gitID":"Kyholmes"},"content":"** Steps 3a1-3a3 are repeated until the inputs are valid"},{"lineNumber":1104,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1105,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 4"},{"lineNumber":1106,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1107,"author":{"gitID":"ktingit"},"content":"* 3b. Input format is incorrect"},{"lineNumber":1108,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1109,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1110,"author":{"gitID":"Kyholmes"},"content":"** 3b1. Imdb shows an error message"},{"lineNumber":1111,"author":{"gitID":"Kyholmes"},"content":"** 3b2. Imdb requests user to input NRIC and patient detail that need to be edited"},{"lineNumber":1112,"author":{"gitID":"Kyholmes"},"content":"** 3b3. User inputs NRIC and patient detail that need to be edited"},{"lineNumber":1113,"author":{"gitID":"ktingit"},"content":"** Steps 3b1-3b3 are repeated until the inputs are valid"},{"lineNumber":1114,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 4"},{"lineNumber":1116,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1117,"author":{"gitID":"Kyholmes"},"content":"[discrete]"},{"lineNumber":1118,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Use case: Record health profile of the patient"},{"lineNumber":1119,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1120,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in"},{"lineNumber":1121,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1122,"author":{"gitID":"Kyholmes"},"content":"*MSS*"},{"lineNumber":1123,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1124,"author":{"gitID":"Kyholmes"},"content":"1.  User request to view health profile of the patient"},{"lineNumber":1125,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb request user to input NRIC of patient"},{"lineNumber":1126,"author":{"gitID":"Kyholmes"},"content":"3.  User inputs NRIC of patient"},{"lineNumber":1127,"author":{"gitID":"Kyholmes"},"content":"4.  Imdb display health profile of the patient"},{"lineNumber":1128,"author":{"gitID":"Kyholmes"},"content":"5.  User inputs details that need to be updated in health profile of the patient"},{"lineNumber":1129,"author":{"gitID":"Kyholmes"},"content":"6.  Imdb shows a success message and display the patient details"},{"lineNumber":1130,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1131,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1132,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1133,"author":{"gitID":"Kyholmes"},"content":"*Extensions*"},{"lineNumber":1134,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1135,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1136,"author":{"gitID":"ktingit"},"content":"* 3a. Patient cannot be found in the system"},{"lineNumber":1137,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1139,"author":{"gitID":"Kyholmes"},"content":"** 3a1. Imdb shows an error message"},{"lineNumber":1140,"author":{"gitID":"Kyholmes"},"content":"** 3a2. Imdb requests user to input NRIC"},{"lineNumber":1141,"author":{"gitID":"Kyholmes"},"content":"** 3a3. User inputs NRIC"},{"lineNumber":1142,"author":{"gitID":"Kyholmes"},"content":"** Steps 3a1-3a3 are repeated until the inputs are valid"},{"lineNumber":1143,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1144,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 4"},{"lineNumber":1145,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1146,"author":{"gitID":"ktingit"},"content":"* 5a. Input format is incorrect"},{"lineNumber":1147,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1148,"author":{"gitID":"Kyholmes"},"content":"[none]"},{"lineNumber":1149,"author":{"gitID":"Kyholmes"},"content":"** 5a1. Imdb shows an error message"},{"lineNumber":1150,"author":{"gitID":"Kyholmes"},"content":"** 5a2. Imdb requests user to input details that need to be edited"},{"lineNumber":1151,"author":{"gitID":"Kyholmes"},"content":"** 5a3. User inputs details that need to be edited"},{"lineNumber":1152,"author":{"gitID":"ktingit"},"content":"** Steps 5a1-5a3 are repeated until the inputs are valid"},{"lineNumber":1153,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1154,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 6"},{"lineNumber":1155,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1156,"author":{"gitID":"ktingit"},"content":"[discrete]"},{"lineNumber":1157,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Use case: Add remarks to a patient"},{"lineNumber":1158,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1159,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in"},{"lineNumber":1160,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1161,"author":{"gitID":"ktingit"},"content":"*MSS*"},{"lineNumber":1162,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1163,"author":{"gitID":"ktingit"},"content":"1.  User requests to add remarks to a patient"},{"lineNumber":1164,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input NRIC of the patient and the remarks"},{"lineNumber":1165,"author":{"gitID":"ktingit"},"content":"3.  User inputs NRIC and the remarks"},{"lineNumber":1166,"author":{"gitID":"Kyholmes"},"content":"4.  Imdb shows a success message and displays the added remarks"},{"lineNumber":1167,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1168,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1169,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1170,"author":{"gitID":"ktingit"},"content":"*Extensions*"},{"lineNumber":1171,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1172,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1173,"author":{"gitID":"ktingit"},"content":"* 3a. Patient cannot be found in the system"},{"lineNumber":1174,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1176,"author":{"gitID":"Kyholmes"},"content":"** 3a1. Imdb shows an error message"},{"lineNumber":1177,"author":{"gitID":"Kyholmes"},"content":"** 3a2. Imdb requests user to input NRIC and remarks"},{"lineNumber":1178,"author":{"gitID":"ktingit"},"content":"** 3a3. User inputs NRIC and remarks"},{"lineNumber":1179,"author":{"gitID":"Kyholmes"},"content":"** Steps 3a1-3a3 are repeated until the inputs are valid"},{"lineNumber":1180,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1181,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 4"},{"lineNumber":1182,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1183,"author":{"gitID":"ktingit"},"content":"* 3b. Input format is incorrect"},{"lineNumber":1184,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1185,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1186,"author":{"gitID":"Kyholmes"},"content":"** 3b1. Imdb shows an error message"},{"lineNumber":1187,"author":{"gitID":"Kyholmes"},"content":"** 3b2. Imdb requests user to input NRIC and remarks"},{"lineNumber":1188,"author":{"gitID":"ktingit"},"content":"** 3b3. User inputs NRIC and remarks"},{"lineNumber":1189,"author":{"gitID":"Kyholmes"},"content":"** Steps 3b1-3b3 are repeated until the inputs are valid."},{"lineNumber":1190,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1191,"author":{"gitID":"ktingit"},"content":"Use case resumes from step 4"},{"lineNumber":1192,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1193,"author":{"gitID":"ktingit"},"content":"[discrete]"},{"lineNumber":1194,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Use case: Retrieve patient schedule"},{"lineNumber":1195,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1196,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in"},{"lineNumber":1197,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1198,"author":{"gitID":"ktingit"},"content":"*MSS*"},{"lineNumber":1199,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1200,"author":{"gitID":"ktingit"},"content":"1.  User requests to search for schedule"},{"lineNumber":1201,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input NRIC of the patient"},{"lineNumber":1202,"author":{"gitID":"Kyholmes"},"content":"3.  Imdb displays schedule of patient"},{"lineNumber":1203,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1205,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1206,"author":{"gitID":"ktingit"},"content":"*Extensions*"},{"lineNumber":1207,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1208,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1209,"author":{"gitID":"ktingit"},"content":"* 2a. Patient cannot be found in the system"},{"lineNumber":1210,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1211,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1212,"author":{"gitID":"Kyholmes"},"content":"** 2a1. Imdb shows an error message"},{"lineNumber":1213,"author":{"gitID":"Kyholmes"},"content":"** 2a2. Imdb requests user to input NRIC"},{"lineNumber":1214,"author":{"gitID":"ktingit"},"content":"** 2a3. User inputs NRIC"},{"lineNumber":1215,"author":{"gitID":"ktingit"},"content":"** Steps 2a1-2a3 are repeated until the inputs are valid"},{"lineNumber":1216,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"Kyholmes"},"content":"Use case resumes from step 3"},{"lineNumber":1218,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1219,"author":{"gitID":"ktingit"},"content":"* 2b. Input format is incorrect"},{"lineNumber":1220,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1221,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1222,"author":{"gitID":"Kyholmes"},"content":"** 2b1. Imdb shows an error message"},{"lineNumber":1223,"author":{"gitID":"Kyholmes"},"content":"** 2b2. Imdb requests user to input NRIC"},{"lineNumber":1224,"author":{"gitID":"ktingit"},"content":"** 2b3. User inputs NRIC"},{"lineNumber":1225,"author":{"gitID":"ktingit"},"content":"** Steps 2b1-2b3 are repeated until the inputs are valid"},{"lineNumber":1226,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1227,"author":{"gitID":"Kyholmes"},"content":"Use case resumes from step 3"},{"lineNumber":1228,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1229,"author":{"gitID":"Kyholmes"},"content":"[discrete]"},{"lineNumber":1230,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Use case: Filter displayed patient details"},{"lineNumber":1231,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1232,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in, patient details are on screen"},{"lineNumber":1233,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1234,"author":{"gitID":"ktingit"},"content":"*MSS*"},{"lineNumber":1235,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1236,"author":{"gitID":"ktingit"},"content":"1.  User requests to use a filter"},{"lineNumber":1237,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input filter number"},{"lineNumber":1238,"author":{"gitID":"Kyholmes"},"content":"3.  Imdb displays filtered patient details only"},{"lineNumber":1239,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1240,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1241,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1242,"author":{"gitID":"ktingit"},"content":"*Extensions*"},{"lineNumber":1243,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1244,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1245,"author":{"gitID":"ktingit"},"content":"* 2a. Filter number does not exist"},{"lineNumber":1246,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1247,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1248,"author":{"gitID":"Kyholmes"},"content":"** 2a1. Imdb shows an error message"},{"lineNumber":1249,"author":{"gitID":"Kyholmes"},"content":"** 2a2. Imdb requests user to input filter number"},{"lineNumber":1250,"author":{"gitID":"ktingit"},"content":"** 2a3. User inputs filter number"},{"lineNumber":1251,"author":{"gitID":"ktingit"},"content":"** Steps 2a1-2a3 are repeated until the inputs are valid"},{"lineNumber":1252,"author":{"gitID":"Kyholmes"},"content":"+"},{"lineNumber":1253,"author":{"gitID":"Kyholmes"},"content":"Use case resumes from step 3"},{"lineNumber":1254,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1255,"author":{"gitID":"Kyholmes"},"content":"[discrete]"},{"lineNumber":1256,"author":{"gitID":"ktingit"},"content":"\u003d\u003d\u003d Use case: Export patient records for printing"},{"lineNumber":1257,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1258,"author":{"gitID":"ktingit"},"content":"Preconditions: User is logged in"},{"lineNumber":1259,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1260,"author":{"gitID":"ktingit"},"content":"*MSS*"},{"lineNumber":1261,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1262,"author":{"gitID":"ktingit"},"content":"1.  User requests to print patient records"},{"lineNumber":1263,"author":{"gitID":"Kyholmes"},"content":"2.  Imdb requests user to input NRIC of the patient"},{"lineNumber":1264,"author":{"gitID":"Kyholmes"},"content":"3.  Imdb exports a formatted record of the patient that can be printed"},{"lineNumber":1265,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1266,"author":{"gitID":"ktingit"},"content":"Use case ends"},{"lineNumber":1267,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1268,"author":{"gitID":"ktingit"},"content":"*Extensions*"},{"lineNumber":1269,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1270,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1271,"author":{"gitID":"ktingit"},"content":"* 2a. Patient cannot be found in the system"},{"lineNumber":1272,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1273,"author":{"gitID":"ktingit"},"content":"[none]"},{"lineNumber":1274,"author":{"gitID":"Kyholmes"},"content":"** 2a1. Imdb shows an error message"},{"lineNumber":1275,"author":{"gitID":"Kyholmes"},"content":"** 2a2. Imdb requests user to input NRIC"},{"lineNumber":1276,"author":{"gitID":"ktingit"},"content":"** 2a3. User inputs NRIC"},{"lineNumber":1277,"author":{"gitID":"ktingit"},"content":"** Steps 2a1-2a3 are repeated until the inputs are valid"},{"lineNumber":1278,"author":{"gitID":"ktingit"},"content":"+"},{"lineNumber":1279,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1285,"author":{"gitID":"Kyholmes"},"content":".  UI should be simple and easy to navigate."},{"lineNumber":1286,"author":{"gitID":"Kyholmes"},"content":".  Queries should be processed within 3 seconds."},{"lineNumber":1287,"author":{"gitID":"Kyholmes"},"content":".  Commands should be intuitive and simple."},{"lineNumber":1288,"author":{"gitID":"Kyholmes"},"content":".  System should be secure."},{"lineNumber":1289,"author":{"gitID":"Kyholmes"},"content":".  System should only be accessed by medical staff and doctor"},{"lineNumber":1290,"author":{"gitID":"Kyholmes"},"content":".  All records are stored in a centralised database"},{"lineNumber":1291,"author":{"gitID":"Kyholmes"},"content":".  The data stored in the database must be compatible with previous versions of the database"},{"lineNumber":1292,"author":{"gitID":"Kyholmes"},"content":".  Database must not be used to store personal information that has no medical purpose"},{"lineNumber":1293,"author":{"gitID":"Kyholmes"},"content":".  Database should be able to exported"},{"lineNumber":1294,"author":{"gitID":"Kyholmes"},"content":".  Should work on both 32 and 64 bit platforms"},{"lineNumber":1295,"author":{"gitID":"Kyholmes"},"content":".  Should handle errors gracefully and give helpful error messages"},{"lineNumber":1296,"author":{"gitID":"Kyholmes"},"content":".  Should be operable by a non-technical user without much difficulty"},{"lineNumber":1297,"author":{"gitID":"Kyholmes"},"content":".  Should be able to work in offline mode in case of emergencies"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"Kyholmes"},"content":"[[health-profile]] Health Profile::"},{"lineNumber":1307,"author":{"gitID":"Kyholmes"},"content":"A record which stores allergies and chronic conditions of the patient"},{"lineNumber":1308,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":1309,"author":{"gitID":"Kyholmes"},"content":"[[medical-records]] Medical Records::"},{"lineNumber":1310,"author":{"gitID":"Kyholmes"},"content":"Documentation of all consultations and treatments"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1322,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1327,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1342,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1348,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"Kyholmes"},"content":"\u003d\u003d\u003d Deleting a patient"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"Kyholmes"},"content":". Deleting a patient while all patients are listed"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"Kyholmes"},"content":".. Prerequisites: List all patients using the `list` command. Multiple patients in the list."},{"lineNumber":1358,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1360,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1361,"author":{"gitID":"Kyholmes"},"content":"   Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1362,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Kyholmes":249,"ktingit":156,"-":880,"nhs-work":64,"cxingkai":24}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientCardHandle;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import guitests.guihandles.PatientListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    public static void assertCardEquals(PatientCardHandle expectedCard, PatientCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedCard.getNric(), actualCard.getNric());"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedCard.getDob(), actualCard.getDob());"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedCard.getBloodType(), actualCard.getBloodType());"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"content":"        //@@author yamgent-reused"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        //Reused from https://github.com/se-edu/addressbook-level4/pull/798/files"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"            assertEquals(expectedCard.getTagColors(tag), actualCard.getTagColors(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPatient}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"    public static void assertCardDisplaysPerson(Patient expectedPatient, PatientCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedPatient.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedPatient.getNric().value, actualCard.getNric());"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedPatient.getPhone().value, actualCard.getPhone());"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedPatient.getEmail().value, actualCard.getEmail());"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedPatient.getAddress().value, actualCard.getAddress());"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedPatient.getDob().value, actualCard.getDob());"},{"lineNumber":47,"author":{"gitID":"ktingit"},"content":"        assertEquals(expectedPatient.getBloodType().value, actualCard.getBloodType());"},{"lineNumber":48,"author":{"gitID":"nhs-work"},"content":"        assertEquals(expectedPatient.getRemark().value, actualCard.getRemark());"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedPatient.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the list in {@code patientListPanelHandle} displays the details of {@code patients} correctly and"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"    public static void assertListMatching(PatientListPanelHandle patientListPanelHandle, Patient... patients) {"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"        for (int i \u003d 0; i \u003c patients.length; i++) {"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"            assertCardDisplaysPerson(patients[i], patientListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"     * Asserts that the list in {@code patientListPanelHandle} displays the details of {@code patients} correctly and"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"    public static void assertListMatching(PatientListPanelHandle patientListPanelHandle, List\u003cPatient\u003e patients) {"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"        assertListMatching(patientListPanelHandle, patients.toArray(new Patient[0]));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"     * Asserts the size of the list in {@code patientListPanelHandle} equals to {@code size}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"    public static void assertListSize(PatientListPanelHandle patientListPanelHandle, int size) {"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        int numberOfPeople \u003d patientListPanelHandle.getListSize();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Kyholmes":25,"ktingit":6,"-":52,"nhs-work":1}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.ui.PatientPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    private PatientPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"        selectionChangedEventStub \u003d new PatientPanelSelectionChangedEvent(new PatientCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        // associated web page of a patient"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":43}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.AMY;"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":46,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"public class EditCommandSystemTest extends ImdbSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":"                + NRIC_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + \" \""},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"                + BLOODTYPE_DESC_BOB + \"  \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":79,"author":{"gitID":"ktingit"},"content":"        Patient editedPatient \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDob(VALID_DOB_BOB)"},{"lineNumber":82,"author":{"gitID":"ktingit"},"content":"                .withBloodType(VALID_BLOODTYPE_BOB)"},{"lineNumber":83,"author":{"gitID":"ktingit"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(command, index, editedPatient);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        /* Case: undo editing the last patient in the list -\u003e last patient restored */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        /* Case: redo editing the last patient in the list -\u003e last patient edited again */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPatient);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"        /* Case: edit a patient with new values same as existing values -\u003e edited */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":106,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"Kyholmes"},"content":"        editedPatient \u003d new PatientBuilder(patientToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(command, index, editedPatient);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"        editedPatient \u003d new PatientBuilder(patientToEdit).withTags().build();"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(command, index, editedPatient);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, edit index within bounds of address book and patient list -\u003e edited */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":123,"author":{"gitID":"Kyholmes"},"content":"        patientToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"        editedPatient \u003d new PatientBuilder(patientToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(command, index, editedPatient);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Kyholmes"},"content":"        /* Case: filtered patient list, edit index within bounds of address book but out of bounds of patient list"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"        int invalidIndex \u003d getModel().getImdb().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Kyholmes"},"content":"        /* --------------------- Performing edit operation while a patient card is selected ------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        /* Case: selects first card in the patient list, edit a patient -\u003e edited, card selection remains unchanged but"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":143,"author":{"gitID":"ktingit"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + NRIC_DESC_AMY"},{"lineNumber":144,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":147,"author":{"gitID":"Kyholmes"},"content":"        // browser\u0027s url is updated to reflect the new patient\u0027s name"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"ktingit"},"content":"                        + INVALID_NAME_DESC,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":180,"author":{"gitID":"ktingit"},"content":"                        + INVALID_PHONE_DESC,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":185,"author":{"gitID":"ktingit"},"content":"                        + INVALID_EMAIL_DESC,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":190,"author":{"gitID":"ktingit"},"content":"                        + INVALID_ADDRESS_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"ktingit"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":195,"author":{"gitID":"ktingit"},"content":"                        + INVALID_TAG_DESC,"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"Kyholmes"},"content":"        /* Case: edit a patient with new values same as another patient\u0027s values -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"Kyholmes"},"content":"        executeCommand(PatientUtil.getAddCommand(BOB));"},{"lineNumber":200,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(getModel().getImdb().getPersonList().contains(BOB));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":203,"author":{"gitID":"ktingit"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"Kyholmes"},"content":"        /* Case: edit a patient with new values same as another patient\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"ktingit"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":211,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"Kyholmes"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Patient, Index)} except that"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":219,"author":{"gitID":"Kyholmes"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Patient, Index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"Kyholmes"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Patient editedPatient) {"},{"lineNumber":222,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(command, toEdit, editedPatient, null);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"Kyholmes"},"content":"     * 2. Asserts that the model related components are updated to reflect the patient at index {@code toEdit} being"},{"lineNumber":229,"author":{"gitID":"Kyholmes"},"content":"     * updated to values specified {@code editedPatient}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"Kyholmes"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Patient editedPatient,"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":238,"author":{"gitID":"Kyholmes"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPatient);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":240,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException | PatientNotFoundException e) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":242,"author":{"gitID":"Kyholmes"},"content":"                    \"editedPatient is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":246,"author":{"gitID":"Kyholmes"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPatient), expectedSelectedCardIndex);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":268,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":270,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":277,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":279,"author":{"gitID":"Kyholmes"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":294,"author":{"gitID":"Kyholmes"},"content":"     * {@code ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"Kyholmes"},"content":"     * @see ImdbSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":303,"author":{"gitID":"Kyholmes"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":55,"ktingit":36,"-":213,"cxingkai":2}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.storage.XmlSerializableImdb;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    protected Supplier\u003cReadOnlyImdb\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"    public TestApp(Supplier\u003cReadOnlyImdb\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"            createDataFileWithData(new XmlSerializableImdb(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"    public Imdb readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"            return new Imdb(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"Data is not in the Imdb format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        Model copy \u003d new ModelManager((model.getImdb()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":10,"-":113}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.storage.XmlAdaptedPatient;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.storage.XmlSerializableImdb;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.ImdbBuilder;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validImdb.xml\");"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPatientField.xml\");"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPatientField.xml\");"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPatient.xml\");"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempImdb.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_NRIC \u003d \"S1234567A\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_DOB \u003d \"10/10/1991\";"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_BLOODTYPE \u003d \"B+\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        XmlUtil.getDataFromFile(null, Imdb.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, Imdb.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, Imdb.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"        Imdb dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableImdb.class).toModelType();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPatientWithRootElement.class);"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient expectedPerson \u003d new XmlAdaptedPatient("},{"lineNumber":86,"author":{"gitID":"ktingit"},"content":"                VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPatientWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient expectedPerson \u003d new XmlAdaptedPatient("},{"lineNumber":95,"author":{"gitID":"ktingit"},"content":"                VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DOB,"},{"lineNumber":96,"author":{"gitID":"ktingit"},"content":"                VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"                VALID_PERSON_FILE, XmlAdaptedPatientWithRootElement.class);"},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient expectedPerson \u003d new XmlAdaptedPatient("},{"lineNumber":105,"author":{"gitID":"ktingit"},"content":"                VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DOB,"},{"lineNumber":106,"author":{"gitID":"ktingit"},"content":"                VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"        XmlUtil.saveDataToFile(null, new Imdb());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new Imdb());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb dataToWrite \u003d new XmlSerializableImdb(new Imdb());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":133,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableImdb.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"Kyholmes"},"content":"        ImdbBuilder builder \u003d new ImdbBuilder(new Imdb());"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        dataToWrite \u003d new XmlSerializableImdb("},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"                builder.withPerson(new PatientBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":141,"author":{"gitID":"Kyholmes"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableImdb.class);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"Kyholmes"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPatient}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"Kyholmes"},"content":"    @XmlRootElement(name \u003d \"patient\")"},{"lineNumber":150,"author":{"gitID":"Kyholmes"},"content":"    private static class XmlAdaptedPatientWithRootElement extends XmlAdaptedPatient {}"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":34,"ktingit":8,"-":109}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.ui.StatusBarFooter.RECORD_NUMBER_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.ImdbBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    private static final ImdbChangedEvent EVENT_STUB \u003d new ImdbChangedEvent("},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"            new ImdbBuilder().withPerson(ALICE).build());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_PERSONS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"                String.format(RECORD_NUMBER_STATUS, INITIAL_TOTAL_PERSONS));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"                String.format(RECORD_NUMBER_STATUS, EVENT_STUB.data.getUniquePatientQueue().size()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"content":"    //@@author yamgent-reused"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"                                        String expectedTotalRecordStatus) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedTotalRecordStatus, statusBarFooterHandle.getRecordNumber());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Kyholmes":16,"-":68}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":123,"cxingkai":1}},{"path":"src/test/java/seedu/address/logic/parser/RemovePatientQueueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.RemovePatientQueueCommand;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public class RemovePatientQueueCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    private RemovePatientQueueCommandParser parser \u003d new RemovePatientQueueCommandParser();"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    public void parse_emptyArg_returnsRemovePatientQueueCommand() {"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"        assertParseSuccess(parser, \"\", new RemovePatientQueueCommand());"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    public void parse_validArgs_returnsRemovePatientQueueCommand() throws IllegalValueException {"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        assertParseSuccess(parser, \"1\", new RemovePatientQueueCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public void parse_invalidArgsNegativeValue_throwsParserException() {"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"                RemovePatientQueueCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    public void parse_invalidArgsAlphaValue_throwsParserException() {"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"                RemovePatientQueueCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":36,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"public class LoginCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"cxingkai"},"content":"        assertParseFailure(parser, \"     \", String.format("},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"                MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":"        assertParseFailure(parser, TEST_USERNAME, String.format("},{"lineNumber":26,"author":{"gitID":"cxingkai"},"content":"                MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"        assertParseFailure(parser, TEST_USERNAME + \" \" + TEST_PASSWORD + \" \" + TEST_USERNAME,"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":"    public void parse_validArgs_returnsLoginCommand() {"},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":"        LoginCommand expectedLoginCommand \u003d new LoginCommand(TEST_USERNAME, TEST_PASSWORD);"},{"lineNumber":35,"author":{"gitID":"cxingkai"},"content":"        assertParseSuccess(parser, TEST_USERNAME + \" \" + TEST_PASSWORD, expectedLoginCommand);"},{"lineNumber":36,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":37,"author":{"gitID":"cxingkai"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":38,"author":{"gitID":"cxingkai"},"content":"        assertParseSuccess(parser,"},{"lineNumber":39,"author":{"gitID":"cxingkai"},"content":"                \" \\n \" + TEST_USERNAME + \" \\n \\t \" + TEST_PASSWORD + \"  \\t\", expectedLoginCommand);"},{"lineNumber":40,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"-":12,"cxingkai":29}},{"path":"src/test/java/seedu/address/logic/parser/ImdbParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_USERNAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.AddPatientQueueCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.RemovePatientQueueCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.ViewAppointmentCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientUtil;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"public class ImdbParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    private final ImdbParser parser \u003d new ImdbParser();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":54,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d new PatientBuilder().build();"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new AddCommand(patient), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_addCommandAlias() throws Exception {"},{"lineNumber":62,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d new PatientBuilder().build();"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommandAlias(patient));"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new AddCommand(patient), command);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":70,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_clearCommandAlias() throws Exception {"},{"lineNumber":77,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":84,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_deleteCommandAlias1() throws Exception {"},{"lineNumber":92,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitID":"nhs-work"},"content":"                DeleteCommand.COMMAND_ALIAS1 + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_deleteCommandAlias2() throws Exception {"},{"lineNumber":100,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":102,"author":{"gitID":"nhs-work"},"content":"                DeleteCommand.COMMAND_ALIAS2 + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":108,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d new PatientBuilder().build();"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getPersonDetails(patient));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_editCommandAlias() throws Exception {"},{"lineNumber":118,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d new PatientBuilder().build();"},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getPersonDetails(patient));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_exitCommandAlias() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":140,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":143,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_findCommandAlias() throws Exception {"},{"lineNumber":149,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":152,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_helpCommandAlias() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_historyCommandAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":196,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_listCommandAlias() throws Exception {"},{"lineNumber":203,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"cxingkai"},"content":"    public void parseCommand_loginCommandWord_returnsLoginCommand() throws Exception {"},{"lineNumber":210,"author":{"gitID":"cxingkai"},"content":"        LoginManager.logout();"},{"lineNumber":211,"author":{"gitID":"cxingkai"},"content":"        assertTrue(parser.parseCommand(LoginCommand.COMMAND_WORD + \" \" + TEST_USERNAME + \" \""},{"lineNumber":212,"author":{"gitID":"cxingkai"},"content":"                + TEST_PASSWORD) instanceof LoginCommand);"},{"lineNumber":213,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":215,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"cxingkai"},"content":"    public void parseCommand_loginCommandAlias_returnsLoginCommand() throws Exception {"},{"lineNumber":217,"author":{"gitID":"cxingkai"},"content":"        LoginManager.logout();"},{"lineNumber":218,"author":{"gitID":"cxingkai"},"content":"        assertTrue(parser.parseCommand(LoginCommand.COMMAND_ALIAS + \" \" + TEST_USERNAME + \" \""},{"lineNumber":219,"author":{"gitID":"cxingkai"},"content":"                + TEST_PASSWORD) instanceof LoginCommand);"},{"lineNumber":220,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":224,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":226,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void parseCommand_selectCommandAlias() throws Exception {"},{"lineNumber":232,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":234,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":240,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand1() throws Exception {"},{"lineNumber":247,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":248,"author":{"gitID":"nhs-work"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS1) instanceof RedoCommand);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand2() throws Exception {"},{"lineNumber":254,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":255,"author":{"gitID":"nhs-work"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS2) instanceof RedoCommand);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":261,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand1() throws Exception {"},{"lineNumber":268,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":269,"author":{"gitID":"nhs-work"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS1) instanceof UndoCommand);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"nhs-work"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand2() throws Exception {"},{"lineNumber":275,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":276,"author":{"gitID":"nhs-work"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS2) instanceof UndoCommand);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"nhs-work"},"content":"    public void remarkCommand_returnsRemarkCommand() throws Exception {"},{"lineNumber":282,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":283,"author":{"gitID":"nhs-work"},"content":"        assertTrue(parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":284,"author":{"gitID":"nhs-work"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"r/ Is very clever\") instanceof RemarkCommand);"},{"lineNumber":285,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":286,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":288,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_viewAppointment() throws Exception {"},{"lineNumber":290,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":291,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_WORD) instanceof ViewAppointmentCommand);"},{"lineNumber":292,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_WORD + \" 3\") instanceof ViewAppointmentCommand);"},{"lineNumber":293,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":295,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":296,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_viewAppointmentCommandAlias() throws Exception {"},{"lineNumber":297,"author":{"gitID":"cxingkai"},"content":"        LoginManager.authenticate(\"alice\", \"password123\");"},{"lineNumber":298,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_ALIAS) instanceof ViewAppointmentCommand);"},{"lineNumber":299,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_ALIAS + \" 3\") instanceof ViewAppointmentCommand);"},{"lineNumber":300,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":302,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":303,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_addPatientQueue() throws Exception {"},{"lineNumber":304,"author":{"gitID":"Kyholmes"},"content":"        LoginManager.authenticate(\"bob\", \"password456\");"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":306,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand command \u003d (AddPatientQueueCommand) parser.parseCommand("},{"lineNumber":307,"author":{"gitID":"Kyholmes"},"content":"                AddPatientQueueCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":308,"author":{"gitID":"Kyholmes"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":309,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new AddPatientQueueCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":310,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":312,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_addPatientQueueAlias() throws Exception {"},{"lineNumber":314,"author":{"gitID":"Kyholmes"},"content":"        LoginManager.authenticate(\"bob\", \"password456\");"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":316,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand command \u003d (AddPatientQueueCommand) parser.parseCommand("},{"lineNumber":317,"author":{"gitID":"Kyholmes"},"content":"                AddPatientQueueCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":318,"author":{"gitID":"Kyholmes"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":319,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new AddPatientQueueCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":320,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":322,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_removePatientQueue() throws Exception {"},{"lineNumber":324,"author":{"gitID":"Kyholmes"},"content":"        LoginManager.authenticate(\"bob\", \"password456\");"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":326,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand command \u003d (RemovePatientQueueCommand) parser.parseCommand("},{"lineNumber":327,"author":{"gitID":"Kyholmes"},"content":"                RemovePatientQueueCommand.COMMAND_WORD);"},{"lineNumber":328,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new RemovePatientQueueCommand(), command);"},{"lineNumber":329,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":331,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":332,"author":{"gitID":"Kyholmes"},"content":"    public void parseCommand_removePatientQueueAlias() throws Exception {"},{"lineNumber":333,"author":{"gitID":"Kyholmes"},"content":"        LoginManager.authenticate(\"bob\", \"password456\");"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":335,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand command \u003d (RemovePatientQueueCommand) parser.parseCommand("},{"lineNumber":336,"author":{"gitID":"Kyholmes"},"content":"                RemovePatientQueueCommand.COMMAND_ALIAS);"},{"lineNumber":337,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(new RemovePatientQueueCommand(), command);"},{"lineNumber":338,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":67,"-":224,"cxingkai":42,"nhs-work":20}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":206}},{"path":"src/test/java/seedu/address/logic/parser/AddPatientQueueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.AddPatientQueueCommand;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class AddPatientQueueCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    private AddPatientQueueCommandParser parser \u003d new AddPatientQueueCommandParser();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"                AddPatientQueueCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public void parse_validArgs_returnsAddPatientQueueCommand() {"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand expectedCommand \u003d new AddPatientQueueCommand("},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"                new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\")));"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"        assertParseSuccess(parser, \"Alice\", expectedCommand);"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        assertParseSuccess(parser, \"\\n Alice \\n\", expectedCommand);"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":18,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"-":242}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"},{"lineNumber":35,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":53,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":54,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":57,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":"        Patient expectedPatient \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":69,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitID":"ktingit"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitID":"ktingit"},"content":"                .withDob(VALID_DOB_BOB).withBloodType(VALID_BLOODTYPE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":74,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":75,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":84,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"        // multiple nrics - last nrics accepted"},{"lineNumber":86,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_AMY + NRIC_DESC_BOB"},{"lineNumber":87,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":92,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"ktingit"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":98,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":108,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":109,"author":{"gitID":"ktingit"},"content":"        // multiple DOB - last DOB accepted"},{"lineNumber":110,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_AMY + DOB_DESC_BOB + BLOODTYPE_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":114,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":115,"author":{"gitID":"ktingit"},"content":"        // multiple blood types - last blood type accepted"},{"lineNumber":116,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_AMY + BLOODTYPE_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatient));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":122,"author":{"gitID":"ktingit"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":123,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_BOB)"},{"lineNumber":124,"author":{"gitID":"ktingit"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDob(VALID_DOB_BOB)"},{"lineNumber":125,"author":{"gitID":"ktingit"},"content":"                .withBloodType(VALID_BLOODTYPE_BOB)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":127,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":128,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":130,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPatientMultipleTags));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":136,"author":{"gitID":"ktingit"},"content":"        Patient expectedPatient \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":137,"author":{"gitID":"ktingit"},"content":"                .withPhone(VALID_PHONE_AMY)"},{"lineNumber":138,"author":{"gitID":"ktingit"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDob(VALID_DOB_AMY)"},{"lineNumber":139,"author":{"gitID":"ktingit"},"content":"                .withBloodType(VALID_BLOODTYPE_AMY).withTags().build();"},{"lineNumber":140,"author":{"gitID":"ktingit"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":141,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_AMY + DOB_DESC_AMY + BLOODTYPE_DESC_AMY, new AddCommand(expectedPatient));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":149,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"ktingit"},"content":"                expectedMessage);"},{"lineNumber":152,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":153,"author":{"gitID":"ktingit"},"content":"        // missing nric prefix"},{"lineNumber":154,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":155,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":159,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":164,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":165,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":169,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":170,"author":{"gitID":"ktingit"},"content":"                        + VALID_ADDRESS_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":171,"author":{"gitID":"ktingit"},"content":"                expectedMessage);"},{"lineNumber":172,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":173,"author":{"gitID":"ktingit"},"content":"        // missing DOB prefix"},{"lineNumber":174,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":175,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + VALID_DOB_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":176,"author":{"gitID":"ktingit"},"content":"                expectedMessage);"},{"lineNumber":177,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":178,"author":{"gitID":"ktingit"},"content":"        // missing bloodtype prefix"},{"lineNumber":179,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":180,"author":{"gitID":"ktingit"},"content":"                        + ADDRESS_DESC_BOB + DOB_DESC_BOB + VALID_BLOODTYPE_BOB,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":184,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":185,"author":{"gitID":"ktingit"},"content":"                        + VALID_ADDRESS_BOB + VALID_DOB_BOB + VALID_BLOODTYPE_BOB,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":192,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":193,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":195,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":197,"author":{"gitID":"ktingit"},"content":"        // invalid nric"},{"lineNumber":198,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":200,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":201,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":204,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":207,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":210,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":211,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":212,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":213,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":216,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"ktingit"},"content":"                + INVALID_ADDRESS_DESC"},{"lineNumber":218,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":219,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":220,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":221,"author":{"gitID":"ktingit"},"content":"        // invalid DOB"},{"lineNumber":222,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":223,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":224,"author":{"gitID":"ktingit"},"content":"                + INVALID_DOB_DESC + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":225,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, DateOfBirth.MESSAGE_DOB_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":227,"author":{"gitID":"ktingit"},"content":"        // invalid blood type"},{"lineNumber":228,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":230,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + INVALID_BLOODTYPE_DESC + TAG_DESC_HUSBAND"},{"lineNumber":231,"author":{"gitID":"ktingit"},"content":"                + TAG_DESC_FRIEND, BloodType.MESSAGE_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":234,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":235,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB"},{"lineNumber":236,"author":{"gitID":"ktingit"},"content":"                + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + INVALID_TAG_DESC"},{"lineNumber":237,"author":{"gitID":"ktingit"},"content":"                + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":240,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":241,"author":{"gitID":"ktingit"},"content":"                        + INVALID_ADDRESS_DESC + DOB_DESC_BOB + BLOODTYPE_DESC_BOB,"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":245,"author":{"gitID":"ktingit"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":246,"author":{"gitID":"ktingit"},"content":"                        + EMAIL_DESC_BOB"},{"lineNumber":247,"author":{"gitID":"ktingit"},"content":"                + ADDRESS_DESC_BOB + DOB_DESC_BOB + BLOODTYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"ktingit":142,"-":102}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhs-work"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":10,"author":{"gitID":"nhs-work"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":12,"author":{"gitID":"nhs-work"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":15,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":19,"author":{"gitID":"nhs-work"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":53,"author":{"gitID":"nhs-work"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" r/Is friendly\";"},{"lineNumber":54,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":55,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, new Remark(\"Is friendly\"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhs-work":20,"-":39}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, patientToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.deletePerson(patientToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, patientToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.deletePerson(patientToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getImdb().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"        // delete -\u003e first patient deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        // redo -\u003e same first patient deleted again"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.deletePerson(patientToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"     * 1. Deletes a {@code Patient} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted patient in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"Kyholmes"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the patient object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"        // delete -\u003e deletes second patient in unfiltered patient list / first patient in filtered patient list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"Kyholmes"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.deletePerson(patientToDelete);"},{"lineNumber":146,"author":{"gitID":"Kyholmes"},"content":"        assertNotEquals(patientToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"Kyholmes"},"content":"        // redo -\u003e deletes same second patient in unfiltered patient list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":28,"-":166}},{"path":"src/test/java/seedu/address/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cxingkai"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":3,"author":{"gitID":"cxingkai"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.FAKE_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.MESSAGE_LOGIN_FAIL;"},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.MESSAGE_LOGIN_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_USERNAME;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":23,"author":{"gitID":"cxingkai"},"content":"public class LoginCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":"    public void execute_success_displaysSuccessMessage() {"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"        LoginManager.logout();"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"        LoginCommand commandSuccess \u003d new LoginCommand(TEST_USERNAME, TEST_PASSWORD);"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":"        assertCommandSuccess(commandSuccess, model, MESSAGE_LOGIN_SUCCESS + TEST_USERNAME, expectedModel);"},{"lineNumber":35,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":37,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"cxingkai"},"content":"    public void execute_fail_displaysFailMessage() throws Exception {"},{"lineNumber":39,"author":{"gitID":"cxingkai"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":40,"author":{"gitID":"cxingkai"},"content":"        thrown.expectMessage(MESSAGE_LOGIN_FAIL);"},{"lineNumber":41,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":42,"author":{"gitID":"cxingkai"},"content":"        LoginCommand expectFail \u003d new LoginCommand(TEST_USERNAME, FAKE_PASSWORD);"},{"lineNumber":43,"author":{"gitID":"cxingkai"},"content":"        expectFail.execute();"},{"lineNumber":44,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":46,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"cxingkai"},"content":"    public void equals() {"},{"lineNumber":48,"author":{"gitID":"cxingkai"},"content":"        LoginCommand aliceCorrectLogin \u003d new LoginCommand(\"alice\", \"password123\");"},{"lineNumber":49,"author":{"gitID":"cxingkai"},"content":"        LoginCommand aliceWrongLogin \u003d new LoginCommand(\"alice\", \"password456\");"},{"lineNumber":50,"author":{"gitID":"cxingkai"},"content":"        LoginCommand bobLogin \u003d new LoginCommand(\"bob\", \"password123\");"},{"lineNumber":51,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":52,"author":{"gitID":"cxingkai"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"cxingkai"},"content":"        assertTrue(aliceCorrectLogin.equals(aliceCorrectLogin));"},{"lineNumber":54,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":55,"author":{"gitID":"cxingkai"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"cxingkai"},"content":"        LoginCommand aliceCorrectLoginCopy \u003d new LoginCommand(\"alice\", \"password123\");"},{"lineNumber":57,"author":{"gitID":"cxingkai"},"content":"        assertTrue(aliceCorrectLogin.equals(aliceCorrectLoginCopy));"},{"lineNumber":58,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":59,"author":{"gitID":"cxingkai"},"content":"        // different types -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"cxingkai"},"content":"        assertFalse(aliceCorrectLogin.equals(1));"},{"lineNumber":61,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":62,"author":{"gitID":"cxingkai"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"cxingkai"},"content":"        assertFalse(aliceCorrectLogin.equals(null));"},{"lineNumber":64,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":65,"author":{"gitID":"cxingkai"},"content":"        // different values -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"cxingkai"},"content":"        assertFalse(aliceCorrectLogin.equals(aliceWrongLogin));"},{"lineNumber":67,"author":{"gitID":"cxingkai"},"content":"        assertFalse(aliceCorrectLogin.equals(bobLogin));"},{"lineNumber":68,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"cxingkai":57,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/ViewAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"public class ViewAppointmentCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    private ViewAppointmentCommand viewAppointmentCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"        expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        viewAppointmentCommand \u003d new ViewAppointmentCommand();"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"        viewAppointmentCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    public void execute_listIsNotFiltered_showSameList() {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(viewAppointmentCommand, model, ViewAppointmentCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":13,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":2,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPatient).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPatient);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        Patient lastPatient \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        PatientBuilder personInList \u003d new PatientBuilder(lastPatient);"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPatient);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.updatePerson(lastPatient, editedPatient);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPatient);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPatient);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":"        Patient firstPatient \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPatient).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"        // edit patient in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"        Patient patientInList \u003d model.getImdb().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"                new EditPersonDescriptorBuilder(patientInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getImdb().getPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();"},{"lineNumber":159,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPatient).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":162,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Kyholmes"},"content":"        // edit -\u003e first patient edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"Kyholmes"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"Kyholmes"},"content":"        // redo -\u003e same first patient edited again"},{"lineNumber":172,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"Kyholmes"},"content":"     * 1. Edits a {@code Patient} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"Kyholmes"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited patient in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"Kyholmes"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the patient object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"Kyholmes"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();"},{"lineNumber":206,"author":{"gitID":"Kyholmes"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPatient).build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":208,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":211,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"Kyholmes"},"content":"        // edit -\u003e edits second patient in unfiltered patient list / first patient in filtered patient list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"Kyholmes"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":220,"author":{"gitID":"Kyholmes"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), patientToEdit);"},{"lineNumber":221,"author":{"gitID":"Kyholmes"},"content":"        // redo -\u003e edits same second patient in unfiltered patient list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":49,"-":213}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"public class EditPatientDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientQueueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.TypicalPatients;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"public class AddPatientQueueCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    public void constructor_nullObject_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        new AddPatientQueueCommand(null);"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand addQueueFirstCommand \u003d new AddPatientQueueCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand addQueueSecondCommand \u003d new AddPatientQueueCommand(secondPredicate);"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(addQueueFirstCommand.equals(addQueueFirstCommand));"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"        // same values -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand addQueueFirstCommandCopy \u003d new AddPatientQueueCommand(firstPredicate);"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(addQueueFirstCommand.equals(addQueueFirstCommandCopy));"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(addQueueFirstCommand.equals(1));"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(addQueueFirstCommand.equals(null));"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(addQueueFirstCommand.equals(addQueueSecondCommand));"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"    public void execute_zeroKeywords_noPersonFound() throws Exception {"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand command \u003d prepareCommand(\" \");"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"        thrown.expectMessage(AddPatientQueueCommand.MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        command.execute();"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"    public void execute_patientExist_addSuccessful() throws Exception {"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand command \u003d prepareCommand(\"fiona\");"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(String.format(AddPatientQueueCommand.MESSAGE_SUCCESS, TypicalPatients.FIONA.getName()),"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"    public void execute_duplicatePatient_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        prepareForDuplicatePatient();"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand duplicateCommand \u003d prepareCommand(\"fiona\");"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        thrown.expectMessage(AddPatientQueueCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"        duplicateCommand.execute();"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"     * Parses {@code userInput} into a {@code AddPatientQueueCommand}."},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"    private AddPatientQueueCommand prepareCommand(String userInput) {"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand command \u003d"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"                new AddPatientQueueCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"    private void prepareForDuplicatePatient() throws Exception {"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        AddPatientQueueCommand duplicateCommand \u003d prepareCommand(\"fiona\");"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        duplicateCommand.execute();"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":96,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        Patient validPatient \u003d new PatientBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        Model expectedModel \u003d new ModelManager(model.getImdb(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"        expectedModel.addPerson(validPatient);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        assertCommandSuccess(prepareCommand(validPatient, model), model,"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        Patient patientInList \u003d model.getImdb().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        assertCommandFailure(prepareCommand(patientInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code patient} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    private AddCommand prepareCommand(Patient patient, Model model) {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        AddCommand command \u003d new AddCommand(patient);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":13,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhs-work"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":3,"author":{"gitID":"nhs-work"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"nhs-work"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"nhs-work"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":7,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":12,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":32,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"public class RemarkCommandTest {"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"nhs-work"},"content":"    public void execute_addRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"nhs-work"},"content":"        Patient toEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"nhs-work"},"content":"        Patient editedPatient \u003d new PatientBuilder(toEdit).withRemark(\"test\").build();"},{"lineNumber":50,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"test\"));"},{"lineNumber":51,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":52,"author":{"gitID":"nhs-work"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_SUCCESS, editedPatient);"},{"lineNumber":53,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":54,"author":{"gitID":"nhs-work"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"nhs-work"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"},{"lineNumber":56,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":57,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":60,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"nhs-work"},"content":"    public void execute_deleteRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"nhs-work"},"content":"        Patient toEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"nhs-work"},"content":"        Patient editedPatient \u003d new PatientBuilder(toEdit).withRemark(\"\").build();"},{"lineNumber":64,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"},{"lineNumber":65,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":66,"author":{"gitID":"nhs-work"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_REMOVE_SUCCESS, editedPatient);"},{"lineNumber":67,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":68,"author":{"gitID":"nhs-work"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"nhs-work"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"},{"lineNumber":70,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":71,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":74,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"nhs-work"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"nhs-work"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":77,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":78,"author":{"gitID":"nhs-work"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"nhs-work"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withRemark(\"test\").build();"},{"lineNumber":80,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"test\"));"},{"lineNumber":81,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":82,"author":{"gitID":"nhs-work"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_SUCCESS, editedPatient);"},{"lineNumber":83,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":84,"author":{"gitID":"nhs-work"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"nhs-work"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"},{"lineNumber":86,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":87,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":90,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"nhs-work"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":92,"author":{"gitID":"nhs-work"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":93,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, new Remark(\"test\"));"},{"lineNumber":94,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":95,"author":{"gitID":"nhs-work"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":98,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"nhs-work"},"content":"     * Edit remarks of filtered list where index is larger than size of filtered list,"},{"lineNumber":100,"author":{"gitID":"nhs-work"},"content":"     * but smaller than size of address book"},{"lineNumber":101,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"nhs-work"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":104,"author":{"gitID":"nhs-work"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"nhs-work"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":106,"author":{"gitID":"nhs-work"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":107,"author":{"gitID":"nhs-work"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getImdb().getPersonList().size());"},{"lineNumber":108,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":109,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, new Remark(\"test\"));"},{"lineNumber":110,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":111,"author":{"gitID":"nhs-work"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":114,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"nhs-work"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":116,"author":{"gitID":"nhs-work"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":117,"author":{"gitID":"nhs-work"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":118,"author":{"gitID":"nhs-work"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":119,"author":{"gitID":"nhs-work"},"content":"        Patient patientToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"test\"));"},{"lineNumber":121,"author":{"gitID":"nhs-work"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":122,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":123,"author":{"gitID":"nhs-work"},"content":"        // edit -\u003e first patient edited"},{"lineNumber":124,"author":{"gitID":"nhs-work"},"content":"        remarkCommand.execute();"},{"lineNumber":125,"author":{"gitID":"nhs-work"},"content":"        Patient editedPatient \u003d remarkCommand.getEdited();"},{"lineNumber":126,"author":{"gitID":"nhs-work"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":127,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":128,"author":{"gitID":"nhs-work"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":129,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":130,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":131,"author":{"gitID":"nhs-work"},"content":"        // redo -\u003e same first patient edited again"},{"lineNumber":132,"author":{"gitID":"nhs-work"},"content":"        expectedModel.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":133,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":134,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":136,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"nhs-work"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":138,"author":{"gitID":"nhs-work"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":139,"author":{"gitID":"nhs-work"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"nhs-work"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":141,"author":{"gitID":"nhs-work"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":142,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, new Remark(\"test\"));"},{"lineNumber":143,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":144,"author":{"gitID":"nhs-work"},"content":"        // execution failed -\u003e remarkCommand not pushed into undoRedoStack"},{"lineNumber":145,"author":{"gitID":"nhs-work"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":147,"author":{"gitID":"nhs-work"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":148,"author":{"gitID":"nhs-work"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":149,"author":{"gitID":"nhs-work"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":150,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":152,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"nhs-work"},"content":"     * 1. Edits a {@code Patient} from a filtered list."},{"lineNumber":154,"author":{"gitID":"nhs-work"},"content":"     * 2. Undo the edit."},{"lineNumber":155,"author":{"gitID":"nhs-work"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited patient in the"},{"lineNumber":156,"author":{"gitID":"nhs-work"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":157,"author":{"gitID":"nhs-work"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the patient object regardless of indexing."},{"lineNumber":158,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"nhs-work"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":161,"author":{"gitID":"nhs-work"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":162,"author":{"gitID":"nhs-work"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"nhs-work"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"test\"));"},{"lineNumber":165,"author":{"gitID":"nhs-work"},"content":"        Model expectedModel \u003d new ModelManager(new Imdb(model.getImdb()), new UserPrefs());"},{"lineNumber":166,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":167,"author":{"gitID":"nhs-work"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":168,"author":{"gitID":"nhs-work"},"content":"        Patient patientToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":169,"author":{"gitID":"nhs-work"},"content":"        // remark -\u003e edits the remarks of the second patient in unfiltered patient list"},{"lineNumber":170,"author":{"gitID":"nhs-work"},"content":"        // / first patient in filtered patient list"},{"lineNumber":171,"author":{"gitID":"nhs-work"},"content":"        remarkCommand.execute();"},{"lineNumber":172,"author":{"gitID":"nhs-work"},"content":"        Patient editedPatient \u003d remarkCommand.getEdited();"},{"lineNumber":173,"author":{"gitID":"nhs-work"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":174,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":175,"author":{"gitID":"nhs-work"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered patient list to show all persons"},{"lineNumber":176,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":178,"author":{"gitID":"nhs-work"},"content":"        expectedModel.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":179,"author":{"gitID":"nhs-work"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), patientToEdit);"},{"lineNumber":180,"author":{"gitID":"nhs-work"},"content":"        // redo -\u003e edits same second patient in unfiltered patient list"},{"lineNumber":181,"author":{"gitID":"nhs-work"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":182,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":184,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"nhs-work"},"content":"    public void equals() throws Exception {"},{"lineNumber":186,"author":{"gitID":"nhs-work"},"content":"        final RemarkCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":187,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":188,"author":{"gitID":"nhs-work"},"content":"        // same values -\u003e returns true"},{"lineNumber":189,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":190,"author":{"gitID":"nhs-work"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":191,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":192,"author":{"gitID":"nhs-work"},"content":"        // same object -\u003e returns true"},{"lineNumber":193,"author":{"gitID":"nhs-work"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":194,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":195,"author":{"gitID":"nhs-work"},"content":"        // null -\u003e returns false"},{"lineNumber":196,"author":{"gitID":"nhs-work"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":197,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":198,"author":{"gitID":"nhs-work"},"content":"        // different types -\u003e returns false"},{"lineNumber":199,"author":{"gitID":"nhs-work"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":200,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":201,"author":{"gitID":"nhs-work"},"content":"        // different index -\u003e returns false"},{"lineNumber":202,"author":{"gitID":"nhs-work"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":203,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":204,"author":{"gitID":"nhs-work"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":205,"author":{"gitID":"nhs-work"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":206,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":208,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"nhs-work"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":210,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"nhs-work"},"content":"    private RemarkCommand prepareCommand(Index index, Remark remark) {"},{"lineNumber":212,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, remark);"},{"lineNumber":213,"author":{"gitID":"nhs-work"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":214,"author":{"gitID":"nhs-work"},"content":"        return remarkCommand;"},{"lineNumber":215,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":217,"author":{"gitID":"nhs-work"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"nhs-work":198,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S1234567A\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_DOB_AMY \u003d \"10/10/1991\";"},{"lineNumber":47,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_DOB_BOB \u003d \"11/11/1991\";"},{"lineNumber":48,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_BLOODTYPE_AMY \u003d \"B+\";"},{"lineNumber":49,"author":{"gitID":"ktingit"},"content":"    public static final String VALID_BLOODTYPE_BOB \u003d \"A\";"},{"lineNumber":50,"author":{"gitID":"nhs-work"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Monthly blood test\";"},{"lineNumber":51,"author":{"gitID":"nhs-work"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Weekly checkup\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":54,"author":{"gitID":"cxingkai"},"content":"    public static final String UNUSED_TAG \u003d \"UNUSED\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":58,"author":{"gitID":"ktingit"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":66,"author":{"gitID":"ktingit"},"content":"    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DOB + VALID_DOB_AMY;"},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DOB + VALID_DOB_BOB;"},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":"    public static final String BLOODTYPE_DESC_AMY \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_AMY;"},{"lineNumber":69,"author":{"gitID":"ktingit"},"content":"    public static final String BLOODTYPE_DESC_BOB \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_BOB;"},{"lineNumber":70,"author":{"gitID":"nhs-work"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"},{"lineNumber":71,"author":{"gitID":"nhs-work"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"S1234567@\"; // \u0027@\u0027 not allowed in nrics"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"0l/0l/l99l\"; // \u0027l\u0027 not allowed for DOBs"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"    public static final String INVALID_BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + \"A1\"; // \u00271\u0027 not allowed in blood types"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"     * - the address book and the filtered patient list in the {@code actualModel} remain unchanged"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"        Imdb expectedImdb \u003d new Imdb(actualModel.getImdb());"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":132,"author":{"gitID":"Kyholmes"},"content":"            assertEquals(expectedImdb, actualModel.getImdb());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":145,"author":{"gitID":"Kyholmes"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"Kyholmes"},"content":"     * Deletes the first patient in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":155,"author":{"gitID":"Kyholmes"},"content":"        Patient firstPatient \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"Kyholmes"},"content":"            model.deletePerson(firstPatient);"},{"lineNumber":158,"author":{"gitID":"Kyholmes"},"content":"        } catch (PatientNotFoundException pnfe) {"},{"lineNumber":159,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"Patient in filtered list must exist in model.\", pnfe);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"ktingit":18,"-":140,"nhs-work":5,"cxingkai":1}},{"path":"src/test/java/seedu/address/logic/commands/RemovePatientQueueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.TypicalPatients;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"public class RemovePatientQueueCommandTest {"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public void execute_emptyQueue_throwsCommandException() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand removeEmptyQueueCommand \u003d prepareEmptyQueueCommand();"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        thrown.expectMessage(RemovePatientQueueCommand.MESSAGE_PERSON_NOT_FOUND_QUEUE);"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        removeEmptyQueueCommand.execute();"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"    public void execute_patientExist_removeSuccessful() throws CommandException, DuplicatePatientException {"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand command \u003d prepreCommand();"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(String.format(RemovePatientQueueCommand.MESSAGE_REMOVE_SUCCESS,"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"                TypicalPatients.FIONA.getName().toString()), commandResult.feedbackToUser);"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"    private RemovePatientQueueCommand prepareEmptyQueueCommand() {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand command \u003d new RemovePatientQueueCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"     * Parses {@code userInput} into a {@code RemovePatientQueueCommand}."},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    private RemovePatientQueueCommand prepreCommand() throws DuplicatePatientException {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        model.addPatientToQueue(TypicalPatients.FIONA);"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        RemovePatientQueueCommand command \u003d new RemovePatientQueueCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":39,"-":15,"nhs-work":2}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"     * Deletes the first patient in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"            Patient patientToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"                model.deletePerson(patientToDelete);"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"            } catch (PatientNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"                fail(\"Impossible: patientToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":8,"-":60}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getImdb().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":3,"-":138}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        Patient validPatient \u003d new PatientBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPatient, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        Patient validPatient \u003d new PatientBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        getAddCommandForPerson(validPatient, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"     * Generates a new AddCommand with the details of the given patient."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    private AddCommand getAddCommandForPerson(Patient patient, Model model) {"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        AddCommand command \u003d new AddCommand(patient);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        public void addPerson(Patient patient) throws DuplicatePatientException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":105,"author":{"gitID":"cxingkai"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"cxingkai"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"        public void resetData(ReadOnlyImdb newData) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":"        public ReadOnlyImdb getImdb() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"        public void deletePerson(Patient target) throws PatientNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"Kyholmes"},"content":"        public void updatePerson(Patient target, Patient editedPatient)"},{"lineNumber":128,"author":{"gitID":"Kyholmes"},"content":"                throws DuplicatePatientException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Kyholmes"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPersonList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"        public void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":143,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"Kyholmes"},"content":"        public void addPatientToQueue(Patient patient) throws DuplicatePatientException {"},{"lineNumber":145,"author":{"gitID":"Kyholmes"},"content":"            //update later"},{"lineNumber":146,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":148,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"Kyholmes"},"content":"        public Patient removePatientFromQueue() {"},{"lineNumber":150,"author":{"gitID":"Kyholmes"},"content":"            //update later"},{"lineNumber":151,"author":{"gitID":"Kyholmes"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"Kyholmes"},"content":"        public ObservableList\u003cPatient\u003e getVisitingQueue() {"},{"lineNumber":156,"author":{"gitID":"Kyholmes"},"content":"            return null;    //update later"},{"lineNumber":157,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":159,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"Kyholmes"},"content":"        public Patient getPatientFromList(Predicate\u003cPatient\u003e predicate) {"},{"lineNumber":161,"author":{"gitID":"Kyholmes"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"Kyholmes"},"content":"     * A Model stub that always throw a DuplicatePatientException when trying to add a patient."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"Kyholmes"},"content":"        public void addPerson(Patient patient) throws DuplicatePatientException {"},{"lineNumber":171,"author":{"gitID":"Kyholmes"},"content":"            throw new DuplicatePatientException();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"Kyholmes"},"content":"        public ReadOnlyImdb getImdb() {"},{"lineNumber":176,"author":{"gitID":"Kyholmes"},"content":"            return new Imdb();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"Kyholmes"},"content":"     * A Model stub that always accept the patient being added."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":184,"author":{"gitID":"Kyholmes"},"content":"        final ArrayList\u003cPatient\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"Kyholmes"},"content":"        public void addPerson(Patient patient) throws DuplicatePatientException {"},{"lineNumber":188,"author":{"gitID":"Kyholmes"},"content":"            requireNonNull(patient);"},{"lineNumber":189,"author":{"gitID":"Kyholmes"},"content":"            personsAdded.add(patient);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"Kyholmes"},"content":"        public ReadOnlyImdb getImdb() {"},{"lineNumber":194,"author":{"gitID":"Kyholmes"},"content":"            return new Imdb();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":59,"-":134,"cxingkai":5}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.CARL;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ELLE;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.FIONA;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"     *     - the {@code FilteredList\u003cPatient\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"     *     - the {@code Imdb} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPatient\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        Imdb expectedImdb \u003d new Imdb(model.getImdb());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(expectedImdb, model.getImdb());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":13,"-":85}},{"path":"src/test/java/seedu/address/storage/XmlImdbStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.HOON;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.IDA;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"public class XmlImdbStorageTest {"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlImdbStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    private java.util.Optional\u003cReadOnlyImdb\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        return new XmlImdbStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"        readAddressBook(\"NotXmlFormatImdb.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        readAddressBook(\"invalidPatientImdb.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"        readAddressBook(\"invalidAndValidPatientImdb.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"        Imdb original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"        XmlImdbStorage xmlAddressBookStorage \u003d new XmlImdbStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        ReadOnlyImdb readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"ktingit"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"ktingit"},"content":"    public void readAndBackupAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"        String backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":105,"author":{"gitID":"Kyholmes"},"content":"        Imdb original \u003d getTypicalAddressBook();"},{"lineNumber":106,"author":{"gitID":"Kyholmes"},"content":"        XmlImdbStorage xmlAddressBookStorage \u003d new XmlImdbStorage(filePath);"},{"lineNumber":107,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":108,"author":{"gitID":"ktingit"},"content":"        //Backup in new file and read back"},{"lineNumber":109,"author":{"gitID":"ktingit"},"content":"        xmlAddressBookStorage.backupAddressBook(original);"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"        ReadOnlyImdb readBack \u003d xmlAddressBookStorage.readAddressBook(backupFilePath).get();"},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(readBack));"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":116,"author":{"gitID":"ktingit"},"content":"        xmlAddressBookStorage.backupAddressBook(original);"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(backupFilePath).get();"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(readBack));"},{"lineNumber":119,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":120,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"ktingit"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"ktingit"},"content":"    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":131,"author":{"gitID":"ktingit"},"content":"        backupAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":132,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"    private void saveAddressBook(ReadOnlyImdb addressBook, String filePath) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"            new XmlImdbStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"ktingit"},"content":"     * Backups {@code addressBook} at the specified {@code filePath}."},{"lineNumber":147,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"Kyholmes"},"content":"    private void backupAddressBook(ReadOnlyImdb addressBook, String filePath) {"},{"lineNumber":149,"author":{"gitID":"ktingit"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"Kyholmes"},"content":"            new XmlImdbStorage(filePath).backupAddressBook(addressBook);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":159,"author":{"gitID":"Kyholmes"},"content":"        saveAddressBook(new Imdb(), null);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":29,"ktingit":20,"-":113}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        XmlImdbStorage addressBookStorage \u003d new XmlImdbStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"         * {@link XmlImdbStorage} class."},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlImdbStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        Imdb original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        ReadOnlyImdb retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(original, new Imdb(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"        Storage storage \u003d new StorageManager(new XmlImdbStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        storage.handleAddressBookChangedEvent(new ImdbChangedEvent(new Imdb()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"    class XmlImdbStorageExceptionThrowingStub extends XmlImdbStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        public XmlImdbStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"        public void saveAddressBook(ReadOnlyImdb addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":15,"-":86}},{"path":"src/test/java/seedu/address/logic/LoginManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.FAKE_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.LoginCommand.TEST_USERNAME;"},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"public class LoginManagerTest {"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"    public void authenticate_correctPassword_returnTrue() {"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"        LoginManager.logout();"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":"        boolean expectSuccess \u003d LoginManager.authenticate(TEST_USERNAME, TEST_PASSWORD);"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"        int loginState \u003d LoginManager.getUserState();"},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":19,"author":{"gitID":"cxingkai"},"content":"        assertEquals(expectSuccess, true);"},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"        assertEquals(loginState, LoginManager.DOCTOR_LOGIN);"},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":23,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"cxingkai"},"content":"    public void authenticate_wrongPassword_returnFalse() {"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":"        LoginManager.logout();"},{"lineNumber":26,"author":{"gitID":"cxingkai"},"content":"        boolean expectFail \u003d LoginManager.authenticate(TEST_USERNAME, FAKE_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"        int loginState \u003d LoginManager.getUserState();"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":"        assertEquals(expectFail, false);"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":"        System.out.println(loginState);"},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"        assertEquals(loginState, LoginManager.NO_USER);"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"-":3,"cxingkai":30}},{"path":"src/test/java/seedu/address/model/UniquePatientVisitingQueueTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"public class UniquePatientVisitingQueueTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    private Patient samplePatient \u003d new PatientBuilder().build();"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    private UniquePatientVisitingQueue queueToTest \u003d new UniquePatientVisitingQueue();"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public void execute_addPatient_addSuccessful() throws Exception {"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        UniquePatientVisitingQueue anotherQueue \u003d new UniquePatientVisitingQueue();"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"        anotherQueue.add(samplePatient);"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.add(samplePatient);"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(anotherQueue, queueToTest);"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    public void execute_removePatient_removeSuccessful() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        UniquePatientVisitingQueue anotherQueue \u003d new UniquePatientVisitingQueue();"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        anotherQueue.add(samplePatient);"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.add(samplePatient);"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.removePatient();"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        anotherQueue.removePatient();"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(anotherQueue, queueToTest);"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"    public void execute_duplicatePatient_throwsDuplicateException() throws Exception {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.add(samplePatient);"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(DuplicatePatientException.class);"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.add(samplePatient);"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"    public void execute_addNullObject_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.add(null);"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"    public void execute_removeEmptyQueue_throwsNoSuchElementException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(PatientNotFoundException.class);"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        queueToTest.removePatient();"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        UniquePatientVisitingQueue uniquePatientQueue \u003d new UniquePatientVisitingQueue();"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        uniquePatientQueue.asObservableList().remove(0);"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":65,"-":3}},{"path":"src/test/java/seedu/address/model/patient/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":40}},{"path":"src/test/java/seedu/address/model/patient/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":40}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPatientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.storage.XmlAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"public class XmlAdaptedPatientTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"ktingit"},"content":"    private static final String INVALID_NRIC \u003d \"S1234567@\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"    private static final String INVALID_DOB \u003d \"l0/l0/l99l\";"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"    private static final String INVALID_BLOODTYPE \u003d \"A1\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_DOB \u003d BENSON.getDob().toString();"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    private static final String VALID_BLOODTYPE \u003d BENSON.getBloodType().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(BENSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":53,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":54,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":62,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":70,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, INVALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":79,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":87,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":88,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, null, VALID_EMAIL,"},{"lineNumber":96,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":105,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, null,"},{"lineNumber":113,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":121,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":122,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":129,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":130,"author":{"gitID":"ktingit"},"content":"                null, VALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"ktingit"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"ktingit"},"content":"    public void toModelType_invalidDob_throwsIllegalValueException() {"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":138,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":139,"author":{"gitID":"ktingit"},"content":"                        INVALID_DOB, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d DateOfBirth.MESSAGE_DOB_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"    public void toModelType_nullDob_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":147,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, null, VALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":148,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"ktingit"},"content":"    public void toModelType_invalidBloodType_throwsIllegalValueException() {"},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":155,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":156,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, INVALID_BLOODTYPE, VALID_TAGS);"},{"lineNumber":157,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d BloodType.MESSAGE_BLOODTYPE_CONSTRAINTS;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"ktingit"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {"},{"lineNumber":163,"author":{"gitID":"ktingit"},"content":"        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":164,"author":{"gitID":"ktingit"},"content":"                VALID_ADDRESS, VALID_DOB, null, VALID_TAGS);"},{"lineNumber":165,"author":{"gitID":"ktingit"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BloodType.class.getSimpleName());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":173,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient person \u003d"},{"lineNumber":174,"author":{"gitID":"ktingit"},"content":"                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":175,"author":{"gitID":"ktingit"},"content":"                        VALID_DOB, VALID_BLOODTYPE, invalidTags);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"ktingit":53,"-":110}},{"path":"src/test/java/seedu/address/storage/XmlSerializableImdbTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.TypicalPatients;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"public class XmlSerializableImdbTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableImdbTest/\");"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPatientImdb.xml\");"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPatientImdb.xml\");"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagImdb.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"                XmlSerializableImdb.class);"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        Imdb imdbFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        Imdb typicalPersonsImdb \u003d TypicalPatients.getTypicalAddressBook();"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(imdbFromFile, typicalPersonsImdb);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"                XmlSerializableImdb.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"                XmlSerializableImdb.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"-":35}},{"path":"src/test/java/seedu/address/model/ImdbTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.UNUSED_TAG;"},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.AMY;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BOB;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.ImdbBuilder;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"public class ImdbTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"    private final Imdb imdb \u003d new Imdb();"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    private final Imdb imdbWithAmyAndBob \u003d"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"            new ImdbBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(Collections.emptyList(), imdb.getPersonList());"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(Collections.emptyList(), imdb.getTagList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"cxingkai"},"content":"    public void removeTag_unusedTag_addressBookUnchanged() {"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        imdbWithAmyAndBob.removeTag(new Tag(UNUSED_TAG));"},{"lineNumber":48,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        Imdb expectedImdb \u003d new ImdbBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":50,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(imdbWithAmyAndBob, expectedImdb);"},{"lineNumber":52,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":53,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":55,"author":{"gitID":"cxingkai"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"cxingkai"},"content":"    public void removeTag_multiplePersonsTag_tagRemoved() {"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        imdbWithAmyAndBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":58,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        Patient amyWithoutFriendTag \u003d new PatientBuilder(AMY).build();"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        Patient bobWithoutFriendTag \u003d new PatientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        Imdb expectedImdb \u003d new ImdbBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":62,"author":{"gitID":"cxingkai"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":63,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(imdbWithAmyAndBob, expectedImdb);"},{"lineNumber":65,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        imdb.resetData(null);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        Imdb newData \u003d getTypicalAddressBook();"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"        imdb.resetData(newData);"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        assertEquals(newData, imdb);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        ImdbStub newData \u003d new ImdbStub(newPatients, newTags);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        imdb.resetData(newData);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        imdb.getPersonList().remove(0);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        imdb.getTagList().remove(0);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"    public void getVisitingQueue_modifyQueue_throwsUnsupportedOperationException() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":106,"author":{"gitID":"Kyholmes"},"content":"        imdb.getUniquePatientQueue().remove(0);"},{"lineNumber":107,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"     * A stub ReadOnlyImdb whose patients and tags lists can violate interface constraints."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"    private static class ImdbStub implements ReadOnlyImdb {"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":"        private final ObservableList\u003cPatient\u003e visitingQueue \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"        ImdbStub(Collection\u003cPatient\u003e patients, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"            this.patients.setAll(patients);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        public ObservableList\u003cPatient\u003e getPersonList() {"},{"lineNumber":126,"author":{"gitID":"Kyholmes"},"content":"            return patients;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":134,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"Kyholmes"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":136,"author":{"gitID":"Kyholmes"},"content":"            return appointments;"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"Kyholmes"},"content":"        public ObservableList\u003cPatient\u003e getUniquePatientQueue() {"},{"lineNumber":141,"author":{"gitID":"Kyholmes"},"content":"            return visitingQueue;"},{"lineNumber":142,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":56,"-":72,"cxingkai":17}},{"path":"src/test/java/seedu/address/model/patient/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":36}},{"path":"src/test/java/seedu/address/model/patient/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":"public class RemarkTest {"},{"lineNumber":9,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":10,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":"    public void isValidRemark() {"},{"lineNumber":12,"author":{"gitID":"nhs-work"},"content":"        // valid remarks"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"        assertTrue(Remark.isValidRemark(\"test\"));"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"        assertTrue(Remark.isValidRemark(\"Shows up weekly for medication\")); // long remark"},{"lineNumber":15,"author":{"gitID":"nhs-work"},"content":"        assertTrue(Remark.isValidRemark(\"a\")); // one character"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":18,"author":{"gitID":"nhs-work"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"nhs-work"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":"        Remark remark \u003d new Remark(\"test\");"},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":22,"author":{"gitID":"nhs-work"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"nhs-work"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":24,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":"        // same value -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"        Remark remark2 \u003d new Remark(\"test\");"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"        assertTrue(remark.equals(remark2));"},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"        // different value -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"        Remark remark3 \u003d new Remark(\"not test\");"},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":"        assertFalse(remark.equals(remark3));"},{"lineNumber":32,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"        // different objects -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":"        assertFalse(remark.equals(362));"},{"lineNumber":35,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":36,"author":{"gitID":"nhs-work"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"nhs-work"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":38,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nhs-work"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":6,"nhs-work":32}},{"path":"src/test/java/seedu/address/model/patient/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":61}},{"path":"src/test/java/seedu/address/model/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"        UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":8,"-":11}},{"path":"src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.PatientBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        // different patient -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":10,"-":65}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.ALICE;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.testutil.TypicalPatients.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.testutil.ImdbBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    public void getVisitingQueue_modifyQueue_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        modelManager.getVisitingQueue().remove(0);"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        Imdb imdb \u003d new ImdbBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        Imdb differentImdb \u003d new Imdb();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        ModelManager modelManager \u003d new ModelManager(imdb, userPrefs);"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(imdb, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"        // different Imdb -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentImdb, userPrefs)));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        assertFalse(modelManager.equals(new ModelManager(imdb, userPrefs)));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        assertTrue(modelManager.equals(new ModelManager(imdb, differentUserPrefs)));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":17,"-":55}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code patient}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    public EditPersonDescriptorBuilder(Patient patient) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"        descriptor.setName(patient.getName());"},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"        descriptor.setNric(patient.getNric());"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        descriptor.setPhone(patient.getPhone());"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        descriptor.setEmail(patient.getEmail());"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        descriptor.setAddress(patient.getAddress());"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"        descriptor.setDob(patient.getDob());"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"        descriptor.setBloodType(patient.getBloodType());"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        descriptor.setTags(patient.getTags());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":12,"ktingit":3,"-":75}},{"path":"src/test/java/seedu/address/model/UniquePatientListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.UniquePatientList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"public class UniquePatientListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"        UniquePatientList uniquePatientList \u003d new UniquePatientList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"        uniquePatientList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"-":15}},{"path":"src/test/java/seedu/address/testutil/ImdbBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":" *     {@code Imdb ab \u003d new ImdbBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class ImdbBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    private Imdb imdb;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    public ImdbBuilder() {"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"        imdb \u003d new Imdb();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    public ImdbBuilder(Imdb imdb) {"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        this.imdb \u003d imdb;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"     * Adds a new {@code Patient} to the {@code Imdb} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    public ImdbBuilder withPerson(Patient patient) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"            imdb.addPerson(patient);"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException dpe) {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"            throw new IllegalArgumentException(\"patient is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code Imdb} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"    public ImdbBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"            imdb.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    public Imdb build() {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        return imdb;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":20,"-":33}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * Returns the middle index of the patient in the {@code model}\u0027s patient list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        return Index.fromOneBased(model.getImdb().getPersonList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"     * Returns the last index of the patient in the {@code model}\u0027s patient list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        return Index.fromOneBased(model.getImdb().getPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"    public static Patient getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        return model.getImdb().getPersonList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":8,"-":46}},{"path":"src/test/java/seedu/address/testutil/TypicalPatients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"public class TypicalPatients {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"            .withTags(\"friends\")"},{"lineNumber":37,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S1234567A\")"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"A\")"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"            .withDob(\"11/11/1991\")"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"            .build();"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S7654321B\")"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"B-\")"},{"lineNumber":47,"author":{"gitID":"ktingit"},"content":"            .withDob(\"10/10/1990\").build();"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":49,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":50,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S5671234C\")"},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"A+\")"},{"lineNumber":52,"author":{"gitID":"ktingit"},"content":"            .withDob(\"09/09/1989\").build();"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":54,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":55,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S3456712D\")"},{"lineNumber":56,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"B+\")"},{"lineNumber":57,"author":{"gitID":"ktingit"},"content":"            .withDob(\"08/08/1988\").build();"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S5673412E\")"},{"lineNumber":61,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"O\")"},{"lineNumber":62,"author":{"gitID":"ktingit"},"content":"            .withDob(\"07/07/1987\").build();"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":64,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":65,"author":{"gitID":"ktingit"},"content":"            .withNric(\"S1234512F\")"},{"lineNumber":66,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"O+\")"},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"            .withDob(\"06/06/1986\").build();"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":69,"author":{"gitID":"nhs-work"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":70,"author":{"gitID":"ktingit"},"content":"            .withRemark(\"Comes for checkup every Tuesday\").withNric(\"S1234567A\")"},{"lineNumber":71,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"B+\")"},{"lineNumber":72,"author":{"gitID":"ktingit"},"content":"            .withDob(\"11/11/1991\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withNric(\"S1234567A\")"},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"B+\")"},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"            .withDob(\"10/10/1991\").build();"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withNric(\"S1234567A\")"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"            .withBloodType(\"B+\")"},{"lineNumber":82,"author":{"gitID":"ktingit"},"content":"            .withDob(\"10/10/1991\").build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":86,"author":{"gitID":"ktingit"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDob(VALID_DOB_AMY)"},{"lineNumber":87,"author":{"gitID":"ktingit"},"content":"            .withBloodType(VALID_BLOODTYPE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"ktingit"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":89,"author":{"gitID":"ktingit"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDob(VALID_DOB_BOB)"},{"lineNumber":90,"author":{"gitID":"ktingit"},"content":"            .withBloodType(VALID_BLOODTYPE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"    private TypicalPatients() {} // prevents instantiation"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"     * Returns an {@code Imdb} with all the typical persons."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"    public static Imdb getTypicalAddressBook() {"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        Imdb ab \u003d new Imdb();"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        for (Patient patient : getTypicalPersons()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"                ab.addPerson(patient);"},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"            } catch (DuplicatePatientException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"    public static List\u003cPatient\u003e getTypicalPersons() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":23,"ktingit":46,"-":44,"nhs-work":1}},{"path":"src/test/java/seedu/address/testutil/PatientUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":5,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":" * A utility class for Patient."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"public class PatientUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"     * Returns an add command string for adding the {@code patient}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    public static String getAddCommand(Patient patient) {"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(patient);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     * Returns an add command string (using add command alias) for adding the {@code patient}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    public static String getAddCommandAlias(Patient patient) {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(patient);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    public static String getPersonDetails(Patient patient) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"        sb.append(PREFIX_NRIC + patient.getNric().value + \" \");"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"        sb.append(PREFIX_DOB + patient.getDob().value + \" \");"},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"        sb.append(PREFIX_BLOODTYPE + patient.getBloodType().value + \" \");"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        patient.getTags().stream().forEach("},{"lineNumber":47,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"ktingit":6,"-":29}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":" * A utility class containing a list of {@code Appointment} objects to be userd in tests."},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class TypicalAppointments {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment ALICE \u003d new AppointmentBuilder().withPatientName(\"Alice Pauline\")"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-04-28 9:30\").build();"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment BENSON \u003d new AppointmentBuilder().withPatientName(\"Benson Meier\")"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-03-28 17:00\").build();"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment CARL \u003d new AppointmentBuilder().withPatientName(\"Carl Kurz\")"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-04-18 11:00\").build();"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment DANIEL \u003d new AppointmentBuilder().withPatientName(\"Daniel Meier\")"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-03-21 19:30\").build();"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment ELLE \u003d new AppointmentBuilder().withPatientName(\"Elle Meyer\")"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-04-01 20:00\").build();"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment FIONA \u003d new AppointmentBuilder().withPatientName(\"Fiona Kunz\")"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-03-18 9:30\").build();"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public static final Appointment GEORGE \u003d new AppointmentBuilder().withPatientName(\"George Best\")"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"            .withDateTime(\"2018-04-28 14:00\").build();"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    private TypicalAppointments() {}"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * Returns an {@code Imdb} with all the typical appointments."},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    public static Imdb getTypicalAddressBook() {"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        Imdb ab \u003d new Imdb();"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        for (Appointment appointment : getTypicalAppointment()) {"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"            try {"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"                ab.addAppointment(appointment);"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"            } catch (UniqueAppointmentList.DuplicatedAppointmentException e) {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"        return ab;"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointment() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":46,"-":7}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":25,"content":"    //@@author yamgent-reused"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     * Returns a list of style classes in the result display"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Kyholmes":10,"-":22}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"public class AppointmentBuilder {"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"    public static final String DEFAULT_PATIENT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"    public static final String DEFAULT_DATE_TIME \u003d \"2018-04-08 10:30\";"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"    private String patientName;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"    private String dateTime;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"    public AppointmentBuilder() {"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"        patientName \u003d DEFAULT_PATIENT_NAME;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"        dateTime \u003d DEFAULT_DATE_TIME;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"        patientName \u003d appointmentToCopy.getPatientName();"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        dateTime \u003d appointmentToCopy.getAppointmentDateTime();"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code patientName} of the {@code Appointment} that we are building."},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    public AppointmentBuilder withPatientName(String name) {"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        this.patientName \u003d name;"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        return this;"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code dateTime} of the {@code Appointment} that we are building."},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    public AppointmentBuilder withDateTime(String dateTime) {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"    public Appointment build() {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        return new Appointment(patientName, dateTime);"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":45}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"    private final PatientListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"        personListPanel \u003d new PatientListPanelHandle(getChildNode(PatientListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public PatientListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":3,"-":48}},{"path":"src/test/java/seedu/address/testutil/PatientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":11,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":" * A utility class to help with building Patient objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"public class PatientBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"    public static final String DEFAULT_NRIC \u003d \"S1234567A\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"    public static final String DEFAULT_DOB \u003d \"11/11/1991\";"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"A\";"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"    private Nric nric;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"    private DateOfBirth dob;"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    private BloodType bloodType;"},{"lineNumber":40,"author":{"gitID":"nhs-work"},"content":"    private Remark remark;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":49,"author":{"gitID":"ktingit"},"content":"        dob \u003d new DateOfBirth(DEFAULT_DOB);"},{"lineNumber":50,"author":{"gitID":"ktingit"},"content":"        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);"},{"lineNumber":51,"author":{"gitID":"nhs-work"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder(Patient patientToCopy) {"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        name \u003d patientToCopy.getName();"},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"        nric \u003d patientToCopy.getNric();"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        phone \u003d patientToCopy.getPhone();"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        email \u003d patientToCopy.getEmail();"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        address \u003d patientToCopy.getAddress();"},{"lineNumber":64,"author":{"gitID":"ktingit"},"content":"        dob \u003d patientToCopy.getDob();"},{"lineNumber":65,"author":{"gitID":"ktingit"},"content":"        bloodType \u003d patientToCopy.getBloodType();"},{"lineNumber":66,"author":{"gitID":"nhs-work"},"content":"        remark \u003d patientToCopy.getRemark();"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder withName(String name) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"ktingit"},"content":"     * Sets the {@code Nric} of the {@code Patient} that we are building."},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"    public PatientBuilder withNric(String nric) {"},{"lineNumber":82,"author":{"gitID":"ktingit"},"content":"        this.nric \u003d new Nric(nric);"},{"lineNumber":83,"author":{"gitID":"ktingit"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder withTags(String ... tags) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder withAddress(String address) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"ktingit"},"content":"     * Sets the {@code DOB} of the {@code Patient} that we are building."},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"ktingit"},"content":"    public PatientBuilder withDob(String dob) {"},{"lineNumber":106,"author":{"gitID":"ktingit"},"content":"        this.dob \u003d new DateOfBirth(dob);"},{"lineNumber":107,"author":{"gitID":"ktingit"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":110,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"ktingit"},"content":"     * Sets the {@code BloodType} of the {@code Patient} that we are building."},{"lineNumber":112,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"ktingit"},"content":"    public PatientBuilder withBloodType(String bloodType) {"},{"lineNumber":114,"author":{"gitID":"ktingit"},"content":"        this.bloodType \u003d new BloodType(bloodType);"},{"lineNumber":115,"author":{"gitID":"ktingit"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder withPhone(String phone) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"Kyholmes"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Kyholmes"},"content":"    public PatientBuilder withEmail(String email) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"nhs-work"},"content":"     * Sets the {@code Remark} of the {@code Patient} that we are building."},{"lineNumber":136,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"nhs-work"},"content":"    public PatientBuilder withRemark(String remark) {"},{"lineNumber":138,"author":{"gitID":"nhs-work"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":139,"author":{"gitID":"nhs-work"},"content":"        return this;"},{"lineNumber":140,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":142,"author":{"gitID":"Kyholmes"},"content":"    public Patient build() {"},{"lineNumber":143,"author":{"gitID":"ktingit"},"content":"        return new Patient(name, nric, phone, email, address, dob, bloodType, remark, tags);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":26,"ktingit":40,"-":67,"nhs-work":13}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    private static final String SAVE_RECORD_NUMBER_ID \u003d \"#recordNumberStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    private final StatusBar recordNumberNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private String lastRememberedRecordNumber;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        this.recordNumberNode \u003d getChildNode(SAVE_RECORD_NUMBER_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"     * Returns the text of the record number portion of the status bar."},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    public String getRecordNumber() {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        return recordNumberNode.getText();"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"     * Remembers the number of record portion of the status bar"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"    public void rememberRecordNumber() {"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        lastRememberedRecordNumber \u003d getRecordNumber();"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the current record number is different from the value remembered by the most recent"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"     * {@code rememberRecordNumber()} call."},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"    public boolean isRecordNumberChanged() {"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"        return !lastRememberedRecordNumber.equals(getRecordNumber());"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":26,"-":72}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"Kyholmes"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":2,"-":149}},{"path":"src/test/java/guitests/guihandles/PatientCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" * Provides a handle to a patient card in the patient list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public class PatientCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"    private static final String NRIC_FIELD_ID \u003d \"#nric\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":18,"author":{"gitID":"ktingit"},"content":"    private static final String DOB_FIELD_ID \u003d \"#dob\";"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"    private static final String BLOODTYPE_FIELD_ID \u003d \"#bloodType\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":22,"author":{"gitID":"nhs-work"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"    private final Label nricLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"    private final Label dobLabel;"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"    private final Label bloodTypeLabel;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"    private final Label remarkLabel;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    public PatientCardHandle(Node cardNode) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"        this.nricLabel \u003d getChildNode(NRIC_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"        this.dobLabel \u003d getChildNode(DOB_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"        this.bloodTypeLabel \u003d getChildNode(BLOODTYPE_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"nhs-work"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"ktingit"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitID":"ktingit"},"content":"        return nameLabel.getText();"},{"lineNumber":63,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":65,"author":{"gitID":"ktingit"},"content":"    public String getNric() {"},{"lineNumber":66,"author":{"gitID":"ktingit"},"content":"        return nricLabel.getText();"},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"ktingit"},"content":"    public String getDob() {"},{"lineNumber":74,"author":{"gitID":"ktingit"},"content":"        return dobLabel.getText();"},{"lineNumber":75,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"    public String getBloodType() {"},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"        return bloodTypeLabel.getText();"},{"lineNumber":79,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"nhs-work"},"content":"    public String getRemark() {"},{"lineNumber":90,"author":{"gitID":"nhs-work"},"content":"        return remarkLabel.getText();"},{"lineNumber":91,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":100,"content":"    //@@author yamgent-reused"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/files"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"    public List\u003cString\u003e getTagColors(String tag) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":105,"author":{"gitID":"Kyholmes"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":106,"author":{"gitID":"Kyholmes"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":107,"author":{"gitID":"Kyholmes"},"content":"                .findFirst()"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Kyholmes":11,"ktingit":24,"-":67,"nhs-work":7}},{"path":"src/test/java/guitests/guihandles/PatientListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.ui.PatientCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" * Provides a handle for {@code PatientListPanel} containing the list of {@code PatientCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public class PatientListPanelHandle extends NodeHandle\u003cListView\u003cPatientCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    private Optional\u003cPatientCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    public PatientListPanelHandle(ListView\u003cPatientCard\u003e personListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(personListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"     * Returns a handle to the selected {@code PatientCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public PatientCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatientCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (personList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"Patient list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        return new PatientCardHandle(personList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatientCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"     * Navigates the listview to display and select the patient."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"    public void navigateToCard(Patient patient) {"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatientCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        Optional\u003cPatientCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.patient.equals(patient)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"            throw new IllegalArgumentException(\"Patient does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"     * Returns the patient card handle of a patient associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"    public PatientCardHandle getPersonCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).patient);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"     * Returns the {@code PatientCardHandle} of the specified {@code patient} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"    public PatientCardHandle getPersonCardHandle(Patient patient) {"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        Optional\u003cPatientCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"                .filter(card -\u003e card.patient.equals(patient))"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"                .map(card -\u003e new PatientCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Patient does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"     * Selects the {@code PatientCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"     * Remembers the selected {@code PatientCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the selected {@code PatientCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":31,"-":103}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.ui.PatientPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    private void loadPersonPage(Patient patient) {"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        loadPage(SEARCH_PAGE_URL + patient.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"    private void handlePersonPanelSelectionChangedEvent(PatientPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"        loadPersonPage(event.getNewSelection().patient);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"-":66}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public static final String RECORD_NUMBER_STATUS \u003d \"%d patient(s) in total\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"    private StatusBar recordNumberStatus;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"    public StatusBarFooter(String saveLocation, int recordNumber) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        setRecordNumberStatus(recordNumber);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"    private void setRecordNumberStatus(int recordNumber) {"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        Platform.runLater(() -\u003e this.recordNumberStatus.setText(String.format(RECORD_NUMBER_STATUS, recordNumber)));"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    public void handleAddressBookChangedEvent(ImdbChangedEvent abce) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"        setRecordNumberStatus(abce.data.getUniquePatientQueue().size());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":12,"-":85}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        setTextMessageColor(event.isError);"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"     * change text message color based on whether the message is an error message"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"     * @param isError"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    private void setTextMessageColor(boolean isError) {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        if (isError) {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"            resultDisplay.getStyleClass().add(ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"            resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":15,"-":42}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"    private PatientListPanel patientListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getPatientVisitingQueue());"},{"lineNumber":123,"author":{"gitID":"Kyholmes"},"content":"        personListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"content":"        //@@author yamgent-reused"},{"lineNumber":129,"author":{"gitID":"Kyholmes"},"content":"        //Reused from https://github.com/se-edu/addressbook-level4/pull/799/files with minor modifications"},{"lineNumber":130,"author":{"gitID":"Kyholmes"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"                logic.getPatientVisitingQueue().size());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"Kyholmes"},"content":"    public PatientListPanel getPatientListPanel() {"},{"lineNumber":188,"author":{"gitID":"Kyholmes"},"content":"        return this.patientListPanel;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Kyholmes":8,"-":191}},{"path":"src/main/java/seedu/address/ui/PatientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":" * An UI component that displays information of a {@code Patient}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Imdb level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    public final Patient patient;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"nhs-work"},"content":"    private Label remark;"},{"lineNumber":42,"author":{"gitID":"nhs-work"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"    private Label nric;"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"    private Label dob;"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"ktingit"},"content":"    private Label bloodType;"},{"lineNumber":48,"author":{"gitID":"ktingit"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"    public PatientCard(Patient patient, int displayedIndex) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        this.patient \u003d patient;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        name.setText(patient.getName().fullName);"},{"lineNumber":56,"author":{"gitID":"ktingit"},"content":"        nric.setText(patient.getNric().value);"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        phone.setText(patient.getPhone().value);"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"        address.setText(patient.getAddress().value);"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"        dob.setText(patient.getDob().value);"},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"        bloodType.setText(patient.getBloodType().value);"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        email.setText(patient.getEmail().value);"},{"lineNumber":62,"author":{"gitID":"nhs-work"},"content":"        remark.setText(patient.getRemark().value);"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        initTagLabels(patient);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        if (!(other instanceof PatientCard)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        PatientCard card \u003d (PatientCard) other;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 patient.equals(card.patient);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"     * create tag labels for patient, change tag color based on the hex string"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"     * @param patient"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"    private void initTagLabels(Patient patient) {"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        //Solution below adopted from https://assylias.wordpress.com/2013/12/08/383/ and"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        //https://www.javaworld.com/article/2074537/core-java/tostring--"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"        //hexadecimal-representation-of-identity-hash-codes.html"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"        for (Tag tag : patient.getTags()) {"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"            newLabel.setStyle(\"-fx-background-color: #\" + convertHashCodeToHexString(tag.tagName));"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"    private static String convertHashCodeToHexString(String tagName) {"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"        return Integer.toHexString(tagName.hashCode());"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":35,"ktingit":9,"-":56,"nhs-work":3}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":12}},{"path":"src/main/java/seedu/address/ui/PatientListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.ui.PatientPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    private ListView\u003cPatientCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        setConnections(patientList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    private void setConnections(ObservableList\u003cPatient\u003e patientList) {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        ObservableList\u003cPatientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"                patientList, (person) -\u003e new PatientCard(person, patientList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"                        logger.fine(\"Selection in patient list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"                        raise(new PatientPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"     * Scrolls to the {@code PatientCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PatientCard}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"    class PersonListViewCell extends ListCell\u003cPatientCard\u003e {"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        protected void updateItem(PatientCard person, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"    @Subscribe"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    public void handleAddressBookChangedEvent(ImdbChangedEvent abce) {"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        setConnections(abce.data.getUniquePatientQueue());"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":22,"-":71}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"-":17}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getFilteredPersonList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    /** Returns a visiting queue */"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getPatientVisitingQueue();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":25}},{"path":"src/main/java/seedu/address/commons/events/model/ImdbChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"/** Indicates the Imdb in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"public class ImdbChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"    public final ReadOnlyImdb data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"    public ImdbChangedEvent(ReadOnlyImdb data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":14}},{"path":"src/main/java/seedu/address/commons/events/ui/PatientPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.ui.PatientCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" * Represents a selection change in the Patient List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"public class PatientPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"    private final PatientCard newSelection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    public PatientPanelSelectionChangedEvent(PatientCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    public PatientCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":20,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":21,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":42,"author":{"gitID":"ktingit"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"                        PREFIX_DOB, PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"                PREFIX_NRIC, PREFIX_DOB, PREFIX_BLOODTYPE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":52,"author":{"gitID":"ktingit"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":56,"author":{"gitID":"ktingit"},"content":"            DateOfBirth dob \u003d ParserUtil.parseDob(argMultimap.getValue(PREFIX_DOB)).get();"},{"lineNumber":57,"author":{"gitID":"ktingit"},"content":"            BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE)).get();"},{"lineNumber":58,"author":{"gitID":"nhs-work"},"content":"            Remark remark \u003d new Remark(\"\"); //add command does not allow for adding of remarks"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"ktingit"},"content":"            Patient patient \u003d new Patient(name, nric, phone, email, address, dob, bloodType, remark, tagList);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"            return new AddCommand(patient);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"ktingit":14,"-":55,"nhs-work":2}},{"path":"src/main/java/seedu/address/logic/LoginManager.java","lines":[{"lineNumber":1,"author":{"gitID":"cxingkai"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":3,"author":{"gitID":"cxingkai"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":7,"author":{"gitID":"cxingkai"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":" * LoginManager class to store login state and handle login attempts"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":" */"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":"public final class LoginManager {"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"    public static final int NO_USER \u003d 0;"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":"    public static final int DOCTOR_LOGIN \u003d 1;"},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":"    public static final int MEDICAL_STAFF_LOGIN \u003d 2;"},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"    private static LoginState currLoginState \u003d new LoginState(NO_USER);"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":"    private static String passwordPath \u003d \"data/passwords.csv\";"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":"    private LoginManager() {"},{"lineNumber":19,"author":{"gitID":"cxingkai"},"content":"        currLoginState \u003d new LoginState(NO_USER);"},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":"    public static int getUserState() {"},{"lineNumber":23,"author":{"gitID":"cxingkai"},"content":"        return currLoginState.getState();"},{"lineNumber":24,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":26,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"     * Utility function for tests"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":"    public static void logout() {"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":"        currLoginState.updateState(NO_USER);"},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":"     * Check if username and password match and are in the passwords list."},{"lineNumber":35,"author":{"gitID":"cxingkai"},"content":"     * Login state will be updated."},{"lineNumber":36,"author":{"gitID":"cxingkai"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"cxingkai"},"content":"    public static boolean authenticate (String username, String password) {"},{"lineNumber":38,"author":{"gitID":"cxingkai"},"content":"        boolean match \u003d false;"},{"lineNumber":39,"author":{"gitID":"cxingkai"},"content":"        int loginStateIndex \u003d 0;"},{"lineNumber":40,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":41,"author":{"gitID":"cxingkai"},"content":"        File file \u003d new File(passwordPath);"},{"lineNumber":42,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":43,"author":{"gitID":"cxingkai"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"cxingkai"},"content":"            Scanner inputStream \u003d new Scanner(file);"},{"lineNumber":45,"author":{"gitID":"cxingkai"},"content":"            inputStream.useDelimiter(\",\");"},{"lineNumber":46,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":47,"author":{"gitID":"cxingkai"},"content":"            while (inputStream.hasNext()) {"},{"lineNumber":48,"author":{"gitID":"cxingkai"},"content":"                String fileUsername \u003d inputStream.next();"},{"lineNumber":49,"author":{"gitID":"cxingkai"},"content":"                String filePassword \u003d inputStream.next();"},{"lineNumber":50,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":51,"author":{"gitID":"cxingkai"},"content":"                if (username.equals(fileUsername) \u0026\u0026 password.equals(filePassword)) {"},{"lineNumber":52,"author":{"gitID":"cxingkai"},"content":"                    int role \u003d Integer.parseInt(inputStream.next());"},{"lineNumber":53,"author":{"gitID":"cxingkai"},"content":"                    loginStateIndex \u003d role;"},{"lineNumber":54,"author":{"gitID":"cxingkai"},"content":"                    match \u003d true;"},{"lineNumber":55,"author":{"gitID":"cxingkai"},"content":"                    break;"},{"lineNumber":56,"author":{"gitID":"cxingkai"},"content":"                }"},{"lineNumber":57,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":58,"author":{"gitID":"cxingkai"},"content":"                inputStream.nextLine();"},{"lineNumber":59,"author":{"gitID":"cxingkai"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"cxingkai"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":61,"author":{"gitID":"cxingkai"},"content":"            e.printStackTrace();"},{"lineNumber":62,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":64,"author":{"gitID":"cxingkai"},"content":"        if (match) {"},{"lineNumber":65,"author":{"gitID":"cxingkai"},"content":"            currLoginState.updateState(loginStateIndex);"},{"lineNumber":66,"author":{"gitID":"cxingkai"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":69,"author":{"gitID":"cxingkai"},"content":"        return false;"},{"lineNumber":70,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"cxingkai":71}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"    public static final Prefix PREFIX_DOB \u003d new Prefix(\"dob/\");"},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"b/\");"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"c/\");"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ktingit":4,"-":14,"nhs-work":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":18,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code String nric} into a {@code Nric}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"ktingit"},"content":"     * @throws IllegalValueException if the given {@code nric} is invalid."},{"lineNumber":78,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"ktingit"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"        requireNonNull(nric);"},{"lineNumber":81,"author":{"gitID":"ktingit"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":82,"author":{"gitID":"ktingit"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":83,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":86,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":88,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNric\u003e} if {@code nric} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"ktingit"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"ktingit"},"content":"        requireNonNull(nric);"},{"lineNumber":94,"author":{"gitID":"ktingit"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code String dob} into an {@code Dob}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"ktingit"},"content":"     * @throws IllegalValueException if the given {@code dob} is invalid."},{"lineNumber":150,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"ktingit"},"content":"    public static DateOfBirth parseDob(String dob) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"ktingit"},"content":"        requireNonNull(dob);"},{"lineNumber":153,"author":{"gitID":"ktingit"},"content":"        String trimmedDob \u003d dob.trim();"},{"lineNumber":154,"author":{"gitID":"ktingit"},"content":"        if (!DateOfBirth.isValidDob(trimmedDob)) {"},{"lineNumber":155,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(DateOfBirth.MESSAGE_DOB_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"ktingit"},"content":"        return new DateOfBirth(trimmedDob);"},{"lineNumber":158,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":160,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code Optional\u003cString\u003e dob} into an {@code Optional\u003cDateOfBirth\u003e} if {@code dob} is present."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"ktingit"},"content":"    public static Optional\u003cDateOfBirth\u003e parseDob(Optional\u003cString\u003e dob) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"ktingit"},"content":"        requireNonNull(dob);"},{"lineNumber":166,"author":{"gitID":"ktingit"},"content":"        return dob.isPresent() ? Optional.of(parseDob(dob.get())) : Optional.empty();"},{"lineNumber":167,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":169,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code String bloodType} into an {@code BloodType}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"ktingit"},"content":"     * @throws IllegalValueException if the given {@code bloodType} is invalid."},{"lineNumber":174,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"ktingit"},"content":"    public static BloodType parseBloodType(String bloodType) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"ktingit"},"content":"        requireNonNull(bloodType);"},{"lineNumber":177,"author":{"gitID":"ktingit"},"content":"        String trimmedBloodType \u003d bloodType.trim();"},{"lineNumber":178,"author":{"gitID":"ktingit"},"content":"        if (!BloodType.isValidBloodType(trimmedBloodType)) {"},{"lineNumber":179,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"ktingit"},"content":"        return new BloodType(trimmedBloodType);"},{"lineNumber":182,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":184,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"ktingit"},"content":"     * Parses a {@code Optional\u003cString\u003e bloodType} into an {@code Optional\u003cBloodType\u003e} if {@code bloodType} is present."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"ktingit"},"content":"    public static Optional\u003cBloodType\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"ktingit"},"content":"        requireNonNull(bloodType);"},{"lineNumber":190,"author":{"gitID":"ktingit"},"content":"        return bloodType.isPresent() ? Optional.of(parseBloodType(bloodType.get())) : Optional.empty();"},{"lineNumber":191,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":193,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"nhs-work"},"content":"     * Parses a {@code String remark}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"nhs-work"},"content":"    public static String parseRemark(String remark) {"},{"lineNumber":200,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(remark);"},{"lineNumber":201,"author":{"gitID":"nhs-work"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":202,"author":{"gitID":"nhs-work"},"content":"        return trimmedRemark;"},{"lineNumber":203,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":205,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"nhs-work"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cString\u003e}."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"nhs-work"},"content":"    public static Optional\u003cString\u003e parseRemark(Optional\u003cString\u003e remark) {"},{"lineNumber":210,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(remark);"},{"lineNumber":211,"author":{"gitID":"nhs-work"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":212,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"ktingit":63,"-":182,"nhs-work":15}},{"path":"src/main/java/seedu/address/logic/parser/ImdbParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.AddPatientQueueCommand;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":23,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.RemovePatientQueueCommand;"},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.ViewAppointmentCommand;"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"public class ImdbParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"cxingkai"},"content":"        int state \u003d LoginManager.getUserState();"},{"lineNumber":51,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":59,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":60,"author":{"gitID":"cxingkai"},"content":"        if (state \u003d\u003d LoginManager.NO_USER) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"cxingkai"},"content":"                return new LoginCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":83,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"cxingkai"},"content":"                return new LoginCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":88,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":92,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":96,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_ALIAS:"},{"lineNumber":99,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":100,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":104,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":108,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"            case DeleteCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":112,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":113,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":114,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS1:"},{"lineNumber":115,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":116,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":117,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":118,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS2:"},{"lineNumber":119,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":120,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":124,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":127,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":128,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":132,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_ALIAS:"},{"lineNumber":135,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":136,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":140,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":144,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"            case UndoCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":148,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":150,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS1:"},{"lineNumber":151,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":152,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":154,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS2:"},{"lineNumber":155,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":156,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"            case RedoCommand.COMMAND_WORD:"},{"lineNumber":159,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":160,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":162,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS1:"},{"lineNumber":163,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":164,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":166,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS2:"},{"lineNumber":167,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":168,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_WORD:"},{"lineNumber":171,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":172,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":173,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":174,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":175,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":176,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":177,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":178,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_WORD:"},{"lineNumber":179,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":180,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":181,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":182,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":183,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":184,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":185,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":186,"author":{"gitID":"Kyholmes"},"content":"            case AddPatientQueueCommand.COMMAND_WORD:"},{"lineNumber":187,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":188,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":190,"author":{"gitID":"Kyholmes"},"content":"            case AddPatientQueueCommand.COMMAND_ALIAS:"},{"lineNumber":191,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":192,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":193,"author":{"gitID":"Kyholmes"},"content":"            case RemovePatientQueueCommand.COMMAND_WORD:"},{"lineNumber":194,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":195,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":196,"author":{"gitID":"Kyholmes"},"content":"            case RemovePatientQueueCommand.COMMAND_ALIAS:"},{"lineNumber":197,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(String.format(LoginCommand.MESSAGE_NOT_LOGGED_IN,"},{"lineNumber":198,"author":{"gitID":"cxingkai"},"content":"                        LoginCommand.MESSAGE_USAGE));"},{"lineNumber":199,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":200,"author":{"gitID":"cxingkai"},"content":"            default:"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":202,"author":{"gitID":"cxingkai"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"cxingkai"},"content":"        } else if (state \u003d\u003d LoginManager.DOCTOR_LOGIN) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            switch (commandWord) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_WORD:"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                return new AddCommandParser().parse(arguments);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_ALIAS:"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                return new AddCommandParser().parse(arguments);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_WORD:"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                return new EditCommandParser().parse(arguments);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_ALIAS:"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                return new EditCommandParser().parse(arguments);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_WORD:"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                return new SelectCommandParser().parse(arguments);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                return new SelectCommandParser().parse(arguments);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"            case DeleteCommand.COMMAND_WORD:"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS1:"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS2:"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_WORD:"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                return new ClearCommand();"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                return new ClearCommand();"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_WORD:"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                return new FindCommandParser().parse(arguments);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_ALIAS:"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                return new FindCommandParser().parse(arguments);"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_WORD:"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                return new ListCommand();"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_ALIAS:"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                return new ListCommand();"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_WORD:"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_WORD:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_WORD:"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_WORD:"},{"lineNumber":269,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(LoginCommand.MESSAGE_ALREADY_LOGGED_IN);"},{"lineNumber":270,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":271,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_ALIAS:"},{"lineNumber":272,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(LoginCommand.MESSAGE_ALREADY_LOGGED_IN);"},{"lineNumber":273,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"            case UndoCommand.COMMAND_WORD:"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS1:"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS2:"},{"lineNumber":281,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"            case RedoCommand.COMMAND_WORD:"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS1:"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS2:"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_WORD:"},{"lineNumber":293,"author":{"gitID":"nhs-work"},"content":"                return new RemarkCommandParser().parse(arguments);"},{"lineNumber":294,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":295,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":296,"author":{"gitID":"nhs-work"},"content":"                return new RemarkCommandParser().parse(arguments);"},{"lineNumber":297,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":298,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_WORD:"},{"lineNumber":299,"author":{"gitID":"Kyholmes"},"content":"                return new ViewAppointmentCommand();"},{"lineNumber":300,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":301,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":302,"author":{"gitID":"Kyholmes"},"content":"                return new ViewAppointmentCommand();"},{"lineNumber":303,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"            default:"},{"lineNumber":305,"author":{"gitID":"-"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":307,"author":{"gitID":"cxingkai"},"content":"        } else if (state \u003d\u003d LoginManager.MEDICAL_STAFF_LOGIN) {"},{"lineNumber":308,"author":{"gitID":"cxingkai"},"content":"            switch (commandWord) {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_WORD:"},{"lineNumber":310,"author":{"gitID":"-"},"content":"                return new AddCommandParser().parse(arguments);"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"            case AddCommand.COMMAND_ALIAS:"},{"lineNumber":313,"author":{"gitID":"-"},"content":"                return new AddCommandParser().parse(arguments);"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_WORD:"},{"lineNumber":316,"author":{"gitID":"-"},"content":"                return new EditCommandParser().parse(arguments);"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"            case EditCommand.COMMAND_ALIAS:"},{"lineNumber":319,"author":{"gitID":"-"},"content":"                return new EditCommandParser().parse(arguments);"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_WORD:"},{"lineNumber":322,"author":{"gitID":"-"},"content":"                return new SelectCommandParser().parse(arguments);"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"            case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":325,"author":{"gitID":"-"},"content":"                return new SelectCommandParser().parse(arguments);"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"            case DeleteCommand.COMMAND_WORD:"},{"lineNumber":328,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS1:"},{"lineNumber":331,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"nhs-work"},"content":"            case DeleteCommand.COMMAND_ALIAS2:"},{"lineNumber":334,"author":{"gitID":"-"},"content":"                return new DeleteCommandParser().parse(arguments);"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_WORD:"},{"lineNumber":337,"author":{"gitID":"-"},"content":"                return new ClearCommand();"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"            case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":340,"author":{"gitID":"-"},"content":"                return new ClearCommand();"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_WORD:"},{"lineNumber":343,"author":{"gitID":"-"},"content":"                return new FindCommandParser().parse(arguments);"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"            case FindCommand.COMMAND_ALIAS:"},{"lineNumber":346,"author":{"gitID":"-"},"content":"                return new FindCommandParser().parse(arguments);"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_WORD:"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                return new ListCommand();"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"            case ListCommand.COMMAND_ALIAS:"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                return new ListCommand();"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_WORD:"},{"lineNumber":355,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"            case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":358,"author":{"gitID":"-"},"content":"                return new HistoryCommand();"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_WORD:"},{"lineNumber":361,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":364,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_WORD:"},{"lineNumber":367,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"            case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":370,"author":{"gitID":"-"},"content":"                return new HelpCommand();"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_WORD:"},{"lineNumber":373,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(LoginCommand.MESSAGE_ALREADY_LOGGED_IN);"},{"lineNumber":374,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":375,"author":{"gitID":"cxingkai"},"content":"            case LoginCommand.COMMAND_ALIAS:"},{"lineNumber":376,"author":{"gitID":"cxingkai"},"content":"                throw new ParseException(LoginCommand.MESSAGE_ALREADY_LOGGED_IN);"},{"lineNumber":377,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"            case UndoCommand.COMMAND_WORD:"},{"lineNumber":379,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS1:"},{"lineNumber":382,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"nhs-work"},"content":"            case UndoCommand.COMMAND_ALIAS2:"},{"lineNumber":385,"author":{"gitID":"-"},"content":"                return new UndoCommand();"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"            case RedoCommand.COMMAND_WORD:"},{"lineNumber":388,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS1:"},{"lineNumber":391,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"nhs-work"},"content":"            case RedoCommand.COMMAND_ALIAS2:"},{"lineNumber":394,"author":{"gitID":"-"},"content":"                return new RedoCommand();"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_WORD:"},{"lineNumber":397,"author":{"gitID":"nhs-work"},"content":"                return new RemarkCommandParser().parse(arguments);"},{"lineNumber":398,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":399,"author":{"gitID":"nhs-work"},"content":"            case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":400,"author":{"gitID":"nhs-work"},"content":"                return new RemarkCommandParser().parse(arguments);"},{"lineNumber":401,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":402,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_WORD:"},{"lineNumber":403,"author":{"gitID":"Kyholmes"},"content":"                return new ViewAppointmentCommand();"},{"lineNumber":404,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":405,"author":{"gitID":"Kyholmes"},"content":"            case ViewAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":406,"author":{"gitID":"Kyholmes"},"content":"                return new ViewAppointmentCommand();"},{"lineNumber":407,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":408,"author":{"gitID":"Kyholmes"},"content":"            case AddPatientQueueCommand.COMMAND_WORD:"},{"lineNumber":409,"author":{"gitID":"Kyholmes"},"content":"                return new AddPatientQueueCommandParser().parse(arguments);"},{"lineNumber":410,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":411,"author":{"gitID":"Kyholmes"},"content":"            case AddPatientQueueCommand.COMMAND_ALIAS:"},{"lineNumber":412,"author":{"gitID":"Kyholmes"},"content":"                return new AddPatientQueueCommandParser().parse(arguments);"},{"lineNumber":413,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":414,"author":{"gitID":"Kyholmes"},"content":"            case RemovePatientQueueCommand.COMMAND_WORD:"},{"lineNumber":415,"author":{"gitID":"Kyholmes"},"content":"                return new RemovePatientQueueCommandParser().parse(arguments);"},{"lineNumber":416,"author":{"gitID":"Kyholmes"},"content":"            case RemovePatientQueueCommand.COMMAND_ALIAS:"},{"lineNumber":417,"author":{"gitID":"Kyholmes"},"content":"                return new RemovePatientQueueCommandParser().parse(arguments);"},{"lineNumber":418,"author":{"gitID":"-"},"content":"            default:"},{"lineNumber":419,"author":{"gitID":"-"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":420,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":421,"author":{"gitID":"cxingkai"},"content":"        } else {"},{"lineNumber":422,"author":{"gitID":"cxingkai"},"content":"            // should never get here, this is just for bug detection"},{"lineNumber":423,"author":{"gitID":"cxingkai"},"content":"            throw new ParseException(\"Invalid State!\");"},{"lineNumber":424,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":425,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":426,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":34,"-":243,"cxingkai":101,"nhs-work":48}},{"path":"src/main/java/seedu/address/logic/parser/RemovePatientQueueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.RemovePatientQueueCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" * Parses input arguments and creates a new RemovePatientQueueCommand object"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public class RemovePatientQueueCommandParser implements Parser\u003cRemovePatientQueueCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"     * Parses the given {@code String} of arguments in the context of the RemovePatientQueueCommand"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"     * and returns an RemovePatientQueueCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    public RemovePatientQueueCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        if (args.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"            return new RemovePatientQueueCommand();"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"            return new RemovePatientQueueCommand(index);"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"                    RemovePatientQueueCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":32,"-":3}},{"path":"src/main/java/seedu/address/logic/LoginState.java","lines":[{"lineNumber":1,"author":{"gitID":"cxingkai"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":3,"author":{"gitID":"cxingkai"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":" * Stores login state"},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":" */"},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"public class LoginState {"},{"lineNumber":7,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":"    private int state;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":"    LoginState(int state) {"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"        this.state \u003d state;"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"    public void updateState(int newState) {"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"        this.state \u003d newState;"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":"    public int getState() {"},{"lineNumber":19,"author":{"gitID":"cxingkai"},"content":"        return state;"},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"cxingkai":21}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":" */"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":"    public static final int USERNAME_INDEX \u003d 0;"},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":"    public static final int PASSWORD_INDEX \u003d 1;"},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"    public static final String SPACE_REGEX \u003d \"\\\\s+\";"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"cxingkai"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPACE_REGEX);"},{"lineNumber":24,"author":{"gitID":"cxingkai"},"content":"        if (splitArgs.length !\u003d 2) {"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"cxingkai"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":"        String username \u003d splitArgs[USERNAME_INDEX];"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":"        String password \u003d splitArgs[PASSWORD_INDEX];"},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"        return new LoginCommand(username, password);"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"-":7,"cxingkai":26}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"    public static final String COMMAND_ALIAS \u003d \"ls\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"cxingkai":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" * Deletes a patient identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS1 \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS2 \u003d \"rm\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"            + \": Deletes the patient identified by the index number used in the last patient listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Patient: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    private Patient patientToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(patientToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"            model.deletePerson(patientToDelete);"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        } catch (PatientNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"The target patient cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, patientToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 Objects.equals(this.patientToDelete, ((DeleteCommand) other).patientToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":14,"-":53,"nhs-work":2}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhs-work"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":7,"author":{"gitID":"nhs-work"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"nhs-work"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"        System.out.println(argMultimap.getPreamble());"},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":32,"author":{"gitID":"nhs-work"},"content":"        if (!argMultimap.getValue(PREFIX_REMARK).isPresent()"},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"nhs-work"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"nhs-work"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"nhs-work"},"content":"            String remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":39,"author":{"gitID":"nhs-work"},"content":"            return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":42,"author":{"gitID":"nhs-work"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":46,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"nhs-work"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"nhs-work"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"nhs-work"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"nhs-work"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":54,"author":{"gitID":"nhs-work"},"content":"}"}],"authorContributionMap":{"nhs-work":38,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"                        PREFIX_DOB, PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"ktingit"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).ifPresent(editPersonDescriptor::setNric);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"ktingit"},"content":"            ParserUtil.parseDob(argMultimap.getValue(PREFIX_DOB)).ifPresent(editPersonDescriptor::setDob);"},{"lineNumber":58,"author":{"gitID":"ktingit"},"content":"            ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE))"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"                    .ifPresent(editPersonDescriptor::setBloodType);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ktingit":9,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/AddPatientQueueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.commands.AddPatientQueueCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":" * Parses input arguments and creates a new AddPatientQueueCommand object"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"public class AddPatientQueueCommandParser implements Parser\u003cAddPatientQueueCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientQueueCommandParser"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"     * and returns an AddPatientQueueCommandParser object for execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public AddPatientQueueCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"                   String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientQueueCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s\");"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"        return new AddPatientQueueCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":36,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":38,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"nhs-work"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":40,"author":{"gitID":"nhs-work"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":41,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"nhs-work"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":43,"author":{"gitID":"nhs-work"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":44,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":32,"-":4,"nhs-work":9}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"        model.resetData(new Imdb());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":" * Adds a patient to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"            + PREFIX_DOB + \"DOB \""},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD TYPE \""},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"            + \"[\" + PREFIX_TAG + \"CONDITION]...\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"            + PREFIX_TAG + \"peanuts \""},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"            + PREFIX_TAG + \"G6PD\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the address book\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"    private final Patient toAdd;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     * Creates an AddCommand to add the specified {@code Patient}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"    public AddCommand(Patient patient) {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(patient);"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        toAdd \u003d patient;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":12,"ktingit":9,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS1 \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS2 \u003d \"y\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"nhs-work":2}},{"path":"src/main/java/seedu/address/logic/commands/RemovePatientQueueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"nhs-work"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":" * Remove patient from visiting queue (checkout)"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"public class RemovePatientQueueCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_WORD \u003d \"removeq\";"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_ALIAS \u003d \"rq\";"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a patient from the visiting queue.\""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"            + \"QUEUE INDEX NO\";"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_REMOVE_SUCCESS \u003d \"%1$s is removed from the waiting list\";"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND_QUEUE \u003d \"Waiting list is empty\";"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private final Index targetIndex;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    private Patient patientToRemove;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public RemovePatientQueueCommand() {"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"        this.targetIndex \u003d null;"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    public RemovePatientQueueCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToRemove \u003d null;"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"            patientToRemove \u003d model.removePatientFromQueue();"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"            return new CommandResult(String.format(MESSAGE_REMOVE_SUCCESS, patientToRemove.getName().toString()));"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        } catch (PatientNotFoundException e) {"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND_QUEUE);"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        return other \u003d\u003d this"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof RemovePatientQueueCommand);"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":44,"nhs-work":1,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"cxingkai"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":3,"author":{"gitID":"cxingkai"},"content":"import seedu.address.logic.LoginManager;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":6,"author":{"gitID":"cxingkai"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"cxingkai"},"content":" * Allows user to login to the system"},{"lineNumber":8,"author":{"gitID":"cxingkai"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"public class LoginCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"cxingkai"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":11,"author":{"gitID":"cxingkai"},"content":"    public static final String COMMAND_ALIAS \u003d \"lg\";"},{"lineNumber":12,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":13,"author":{"gitID":"cxingkai"},"content":"    public static final String MESSAGE_ALREADY_LOGGED_IN \u003d \"Already logged in\";"},{"lineNumber":14,"author":{"gitID":"cxingkai"},"content":"    public static final String MESSAGE_LOGIN_SUCCESS \u003d \"Successfully logged in as \";"},{"lineNumber":15,"author":{"gitID":"cxingkai"},"content":"    public static final String MESSAGE_LOGIN_FAIL \u003d \"Wrong username and password! Please try again.\";"},{"lineNumber":16,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":17,"author":{"gitID":"cxingkai"},"content":"    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"Not logged in!\\n%1$s\";"},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows user to login to the system \""},{"lineNumber":19,"author":{"gitID":"cxingkai"},"content":"            + \"given the correct username and password.\\n\""},{"lineNumber":20,"author":{"gitID":"cxingkai"},"content":"            + \"Parameters: USERNAME PASSWORD\\n\""},{"lineNumber":21,"author":{"gitID":"cxingkai"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice password123\";"},{"lineNumber":22,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":23,"author":{"gitID":"cxingkai"},"content":"    public static final String TEST_USERNAME \u003d \"alice\";"},{"lineNumber":24,"author":{"gitID":"cxingkai"},"content":"    public static final String TEST_PASSWORD \u003d \"password123\";"},{"lineNumber":25,"author":{"gitID":"cxingkai"},"content":"    public static final String FAKE_PASSWORD \u003d \"fake_password\";"},{"lineNumber":26,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":27,"author":{"gitID":"cxingkai"},"content":"    private final String username;"},{"lineNumber":28,"author":{"gitID":"cxingkai"},"content":"    private final String password;"},{"lineNumber":29,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":30,"author":{"gitID":"cxingkai"},"content":"    public LoginCommand(String username, String password) {"},{"lineNumber":31,"author":{"gitID":"cxingkai"},"content":"        this.username \u003d username;"},{"lineNumber":32,"author":{"gitID":"cxingkai"},"content":"        this.password \u003d password;"},{"lineNumber":33,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"cxingkai"},"content":"        if (LoginManager.authenticate(username, password)) {"},{"lineNumber":38,"author":{"gitID":"cxingkai"},"content":"            return new CommandResult(MESSAGE_LOGIN_SUCCESS + username);"},{"lineNumber":39,"author":{"gitID":"cxingkai"},"content":"        } else {"},{"lineNumber":40,"author":{"gitID":"cxingkai"},"content":"            throw new CommandException(MESSAGE_LOGIN_FAIL);"},{"lineNumber":41,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":44,"author":{"gitID":"cxingkai"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"cxingkai"},"content":"    public boolean equals (Object other) {"},{"lineNumber":46,"author":{"gitID":"cxingkai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"cxingkai"},"content":"                || (other instanceof LoginCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"cxingkai"},"content":"                \u0026\u0026 username.equals(((LoginCommand) other).username)"},{"lineNumber":49,"author":{"gitID":"cxingkai"},"content":"                \u0026\u0026 password.equals(((LoginCommand) other).password));"},{"lineNumber":50,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cxingkai"},"content":"}"}],"authorContributionMap":{"cxingkai":48,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    private ReadOnlyImdb previousAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"        this.previousAddressBook \u003d new Imdb(model.getImdb());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * Reverts the Imdb to the state before this command"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * was executed and updates the filtered patient list to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"     * Executes the command and updates the filtered patient"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":7,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":" * Selects a patient identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"            + \": Selects the patient identified by the index number used in the last patient listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Patient: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":48}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/AddPatientQueueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" * Add patient to visiting queue (registration)"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public class AddPatientQueueCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_WORD \u003d \"addq\";"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_ALIAS \u003d \"aq\";"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient into vising queue. \""},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"            + \"NAME \";"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%1$s is registered in the waiting list\";"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already registered.\";"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"This patient cannot be found in the database.\";"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"     * Creates an AddCommand to add the specified {@code Patient}"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    public AddPatientQueueCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(predicate);"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        Patient patientFound \u003d model.getPatientFromList(predicate);"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        if (patientFound \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"            model.addPatientToQueue(patientFound);"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, patientFound.getName()));"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicateDataException e) {"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof AddPatientQueueCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 predicate.equals(((AddPatientQueueCommand) other).predicate));"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":51,"-":6,"nhs-work":3}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhs-work"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":3,"author":{"gitID":"nhs-work"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"nhs-work"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":7,"author":{"gitID":"nhs-work"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":9,"author":{"gitID":"nhs-work"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"nhs-work"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":18,"author":{"gitID":"nhs-work"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":" * Adds a patient to the address book."},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":" */"},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":23,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":24,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS \u003d \"rk\";"},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"            + \": Edits the remark for a patient specified in the INDEX. \""},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":"            + PREFIX_REMARK + \"Monthly blood test\";"},{"lineNumber":32,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"    public static final String MESSAGE_ADD_SUCCESS \u003d \"Added remark to: %1$s\";"},{"lineNumber":34,"author":{"gitID":"nhs-work"},"content":"    public static final String MESSAGE_REMOVE_SUCCESS \u003d \"Removed remark from: %1$s\";"},{"lineNumber":35,"author":{"gitID":"nhs-work"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the address book.\";"},{"lineNumber":36,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":37,"author":{"gitID":"nhs-work"},"content":"    private Patient patientToEdit;"},{"lineNumber":38,"author":{"gitID":"nhs-work"},"content":"    private Patient editedPatient;"},{"lineNumber":39,"author":{"gitID":"nhs-work"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"nhs-work"},"content":"    private final Remark remark;"},{"lineNumber":41,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":42,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"     * Creates an AddCommand to add the specified {@code Patient}"},{"lineNumber":44,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"nhs-work"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":46,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(remark);"},{"lineNumber":48,"author":{"gitID":"nhs-work"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitID":"nhs-work"},"content":"        this.remark \u003d remark;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"nhs-work"},"content":"        //throw new CommandException(\"Index: \" + index.getOneBased() + \" Remark: \" + remark);"},{"lineNumber":55,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(patientToEdit);"},{"lineNumber":56,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(editedPatient);"},{"lineNumber":57,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":58,"author":{"gitID":"nhs-work"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"nhs-work"},"content":"            model.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":60,"author":{"gitID":"nhs-work"},"content":"        } catch (DuplicatePatientException dpe) {"},{"lineNumber":61,"author":{"gitID":"nhs-work"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"nhs-work"},"content":"        } catch (PatientNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"nhs-work"},"content":"            throw new AssertionError(\"The target patient cannot be missing\");"},{"lineNumber":64,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"nhs-work"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":66,"author":{"gitID":"nhs-work"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));"},{"lineNumber":67,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":69,"author":{"gitID":"nhs-work"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"nhs-work"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"nhs-work"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":73,"author":{"gitID":"nhs-work"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"nhs-work"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":77,"author":{"gitID":"nhs-work"},"content":"        patientToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"nhs-work"},"content":"        editedPatient \u003d createEditedPerson(patientToEdit, remark);"},{"lineNumber":79,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":81,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"nhs-work"},"content":"     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"},{"lineNumber":83,"author":{"gitID":"nhs-work"},"content":"     * edited with the new remark."},{"lineNumber":84,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"nhs-work"},"content":"    private static Patient createEditedPerson(Patient patientToEdit, Remark remark) {"},{"lineNumber":86,"author":{"gitID":"nhs-work"},"content":"        assert patientToEdit !\u003d null;"},{"lineNumber":87,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":88,"author":{"gitID":"nhs-work"},"content":"        Remark updatedRemark \u003d remark;"},{"lineNumber":89,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":90,"author":{"gitID":"ktingit"},"content":"        return new Patient(patientToEdit.getName(), patientToEdit.getNric(), patientToEdit.getPhone(),"},{"lineNumber":91,"author":{"gitID":"ktingit"},"content":"                patientToEdit.getEmail(), patientToEdit.getAddress(), patientToEdit.getDob(),"},{"lineNumber":92,"author":{"gitID":"ktingit"},"content":"                patientToEdit.getBloodType(), updatedRemark, patientToEdit.getTags());"},{"lineNumber":93,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":95,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"nhs-work"},"content":"     * Generates the success message depending on whether a remark was modified or deleted from {@code patientToEdit}"},{"lineNumber":97,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"nhs-work"},"content":"    private String generateSuccessMessage(Patient editedPatient) {"},{"lineNumber":99,"author":{"gitID":"nhs-work"},"content":"        String message \u003d MESSAGE_ADD_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"nhs-work"},"content":"        if (remark.value.isEmpty()) {"},{"lineNumber":101,"author":{"gitID":"nhs-work"},"content":"            message \u003d MESSAGE_REMOVE_SUCCESS;"},{"lineNumber":102,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"nhs-work"},"content":"        return String.format(message, editedPatient);"},{"lineNumber":104,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":106,"author":{"gitID":"nhs-work"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"nhs-work"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"nhs-work"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitID":"nhs-work"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitID":"nhs-work"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":113,"author":{"gitID":"nhs-work"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"nhs-work"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":115,"author":{"gitID":"nhs-work"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"nhs-work"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":118,"author":{"gitID":"nhs-work"},"content":"        // state check"},{"lineNumber":119,"author":{"gitID":"nhs-work"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":120,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":121,"author":{"gitID":"nhs-work"},"content":"        return getIndex().equals(e.getIndex())"},{"lineNumber":122,"author":{"gitID":"nhs-work"},"content":"                \u0026\u0026 getRemark().equals(e.getRemark());"},{"lineNumber":123,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":125,"author":{"gitID":"nhs-work"},"content":"    public Index getIndex() {"},{"lineNumber":126,"author":{"gitID":"nhs-work"},"content":"        return index;"},{"lineNumber":127,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhs-work"},"content":"    public Remark getRemark() {"},{"lineNumber":129,"author":{"gitID":"nhs-work"},"content":"        return remark;"},{"lineNumber":130,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"nhs-work"},"content":"    public Patient getToEdit() {"},{"lineNumber":132,"author":{"gitID":"nhs-work"},"content":"        return patientToEdit;"},{"lineNumber":133,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"nhs-work"},"content":"    public Patient getEdited() {"},{"lineNumber":135,"author":{"gitID":"nhs-work"},"content":"        return editedPatient;"},{"lineNumber":136,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"nhs-work"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"ktingit":3,"nhs-work":123,"-":5}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.logic.parser.ImdbParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    private final ImdbParser imdbParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        imdbParser \u003d new ImdbParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"            Command command \u003d imdbParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPersonList() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getPatientVisitingQueue() {"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        return model.getVisitingQueue();"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":11,"-":51}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"public interface Storage extends ImdbStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    Optional\u003cReadOnlyImdb\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    void saveAddressBook(ReadOnlyImdb addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    void handleAddressBookChangedEvent(ImdbChangedEvent abce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":6,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":26,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":" * Edits the details of an existing patient in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"            + \"by the index number used in the last patient listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"ktingit"},"content":"            + \"[\" + PREFIX_DOB + \"DOB] \""},{"lineNumber":56,"author":{"gitID":"ktingit"},"content":"            + \"[\" + PREFIX_BLOODTYPE + \"BLOOD TYPE] \""},{"lineNumber":57,"author":{"gitID":"ktingit"},"content":"            + \"[\" + PREFIX_TAG + \"CONDITION]...\\n\""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Patient: %1$s\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the address book.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"    private Patient patientToEdit;"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"    private Patient editedPatient;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"     * @param index of the patient in the filtered patient list to edit"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"     * @param editPersonDescriptor details to edit the patient with"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"            model.updatePerson(patientToEdit, editedPatient);"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException dpe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        } catch (PatientNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"            throw new AssertionError(\"The target patient cannot be missing\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Kyholmes"},"content":"        patientToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"Kyholmes"},"content":"        editedPatient \u003d createEditedPerson(patientToEdit, editPersonDescriptor);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"    private static Patient createEditedPerson(Patient patientToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"        assert patientToEdit !\u003d null;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(patientToEdit.getName());"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(patientToEdit.getNric());"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(patientToEdit.getPhone());"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(patientToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(patientToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"ktingit"},"content":"        DateOfBirth updatedDob \u003d editPersonDescriptor.getDob().orElse(patientToEdit.getDob());"},{"lineNumber":122,"author":{"gitID":"ktingit"},"content":"        BloodType updatedBloodType \u003d editPersonDescriptor.getBloodType().orElse(patientToEdit.getBloodType());"},{"lineNumber":123,"author":{"gitID":"nhs-work"},"content":"        Remark updatedRemark \u003d patientToEdit.getRemark(); //edit command cannot change remarks"},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(patientToEdit.getTags());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"ktingit"},"content":"        return new Patient(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":127,"author":{"gitID":"ktingit"},"content":"                updatedDob, updatedBloodType, updatedRemark, updatedTags);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":146,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 Objects.equals(patientToEdit, e.patientToEdit);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Kyholmes"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will replace the"},{"lineNumber":151,"author":{"gitID":"Kyholmes"},"content":"     * corresponding field value of the patient."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":155,"author":{"gitID":"ktingit"},"content":"        private Nric nric;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":159,"author":{"gitID":"ktingit"},"content":"        private DateOfBirth dob;"},{"lineNumber":160,"author":{"gitID":"ktingit"},"content":"        private BloodType bloodType;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":168,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":171,"author":{"gitID":"ktingit"},"content":"            setNric(toCopy.nric);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":175,"author":{"gitID":"ktingit"},"content":"            setDob(toCopy.dob);"},{"lineNumber":176,"author":{"gitID":"ktingit"},"content":"            setBloodType(toCopy.bloodType);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":182,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"ktingit"},"content":"        public void setNric(Nric nric) {"},{"lineNumber":196,"author":{"gitID":"ktingit"},"content":"            this.nric \u003d nric;"},{"lineNumber":197,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":199,"author":{"gitID":"ktingit"},"content":"        public Optional\u003cNric\u003e getNric() {"},{"lineNumber":200,"author":{"gitID":"ktingit"},"content":"            return Optional.ofNullable(nric);"},{"lineNumber":201,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"ktingit"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":224,"author":{"gitID":"ktingit"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":225,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":227,"author":{"gitID":"ktingit"},"content":"        public void setDob(DateOfBirth dob) {"},{"lineNumber":228,"author":{"gitID":"ktingit"},"content":"            this.dob \u003d dob;"},{"lineNumber":229,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":231,"author":{"gitID":"ktingit"},"content":"        public Optional\u003cDateOfBirth\u003e getDob() {"},{"lineNumber":232,"author":{"gitID":"ktingit"},"content":"            return Optional.ofNullable(dob);"},{"lineNumber":233,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":235,"author":{"gitID":"ktingit"},"content":"        public void setBloodType(BloodType bloodType) {"},{"lineNumber":236,"author":{"gitID":"ktingit"},"content":"            this.bloodType \u003d bloodType;"},{"lineNumber":237,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":239,"author":{"gitID":"ktingit"},"content":"        public Optional\u003cBloodType\u003e getBloodType() {"},{"lineNumber":240,"author":{"gitID":"ktingit"},"content":"            return Optional.ofNullable(bloodType);"},{"lineNumber":241,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":246,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":247,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":255,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":256,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":280,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":35,"ktingit":49,"-":197,"nhs-work":2}},{"path":"src/main/java/seedu/address/logic/commands/ViewAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":" * List all the patient appointments"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"public class ViewAppointmentCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_WORD \u003d \"viewappt\";"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    public static final String COMMAND_ALIAS \u003d \"va\";"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patient appointments\";"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ViewAppointmentCommand.class);"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"        ObservableList\u003cAppointment\u003e appointmentList \u003d model.getImdb().getAppointmentList();"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        logger.info(\"--get appointment list---\");"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"        printOutAppointmentInLog(appointmentList);"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    private static void printOutAppointmentInLog(ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        appointments.forEach(appointment -\u003e {"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"            logger.info(appointment.getPatientName() + \", \" + appointment.getAppointmentDateTime() + \"\\n\");"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"        });"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":29,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS1 \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":"    public static final String COMMAND_ALIAS2 \u003d \"z\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"nhs-work":2}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":" * Manages storage of Imdb data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private ImdbStorage imdbStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public StorageManager(ImdbStorage imdbStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        this.imdbStorage \u003d imdbStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Imdb methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        return imdbStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"    public Optional\u003cReadOnlyImdb\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        return readAddressBook(imdbStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"    public Optional\u003cReadOnlyImdb\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        return imdbStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"    public void saveAddressBook(ReadOnlyImdb addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"        saveAddressBook(addressBook, imdbStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"    public void saveAddressBook(ReadOnlyImdb addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        imdbStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"    public void backupAddressBook(ReadOnlyImdb addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"        imdbStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"    public void handleAddressBookChangedEvent(ImdbChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":19,"ktingit":2,"-":75}},{"path":"src/main/java/seedu/address/storage/ImdbStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":" * Represents a storage for {@link Imdb}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"public interface ImdbStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"     * Returns Imdb data as a {@link ReadOnlyImdb}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    Optional\u003cReadOnlyImdb\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    Optional\u003cReadOnlyImdb\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * Saves the given {@link ReadOnlyImdb} to the storage."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"    void saveAddressBook(ReadOnlyImdb addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"     * @see #saveAddressBook(ReadOnlyImdb)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    void saveAddressBook(ReadOnlyImdb addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"    void backupAddressBook(ReadOnlyImdb addressBook) throws IOException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":12,"-":34}},{"path":"src/main/java/seedu/address/storage/XmlSerializableImdb.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" * An Immutable Imdb that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"@XmlRootElement(name \u003d \"imdb\")"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"public class XmlSerializableImdb {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cXmlAdaptedPatient\u003e patients;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     * Creates an empty XmlSerializableImdb."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    public XmlSerializableImdb() {"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        patients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"    public XmlSerializableImdb(ReadOnlyImdb src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        patients.addAll(src.getPersonList().stream().map(XmlAdaptedPatient::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new)"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"            .collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     * Converts this addressbook into the model\u0027s {@code Imdb} object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"     * {@code XmlAdaptedPatient} or {@code XmlAdaptedTag}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"    public Imdb toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        Imdb imdb \u003d new Imdb();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"            imdb.addTag(t.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        for (XmlAdaptedPatient p : patients) {"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"            imdb.addPerson(p.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        for (XmlAdaptedAppointment appt : appointments) {"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"            imdb.addAppointment(appt.toModelType());"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        return imdb;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        if (!(other instanceof XmlSerializableImdb)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb otherAb \u003d (XmlSerializableImdb) other;"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"        return patients.equals(otherAb.patients) \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":32,"-":51}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":" * JAXB-friendly version of the Patient."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"public class XmlAdaptedPatient {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":"    private String nric;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"    private String dob;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"    private String bloodType;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"nhs-work"},"content":"    private String remark;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"     * Constructs an XmlAdaptedPatient."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"    public XmlAdaptedPatient() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"     * Constructs an {@code XmlAdaptedPatient} with the given patient details."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"ktingit"},"content":"    public XmlAdaptedPatient(String name, String nric, String phone, String email, String address, String dob,"},{"lineNumber":60,"author":{"gitID":"ktingit"},"content":"                             String bloodType, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":62,"author":{"gitID":"ktingit"},"content":"        this.nric \u003d nric;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":66,"author":{"gitID":"ktingit"},"content":"        this.dob \u003d dob;"},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"     * Converts a given Patient into this class for JAXB use."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPatient"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"    public XmlAdaptedPatient(Patient source) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":80,"author":{"gitID":"ktingit"},"content":"        nric \u003d source.getNric().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":84,"author":{"gitID":"ktingit"},"content":"        dob \u003d source.getDob().value;"},{"lineNumber":85,"author":{"gitID":"ktingit"},"content":"        bloodType \u003d source.getBloodType().value;"},{"lineNumber":86,"author":{"gitID":"nhs-work"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"     * Converts this jaxb-friendly adapted patient object into the model\u0027s Patient object."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"    public Patient toModelType() throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"ktingit"},"content":"        if (this.nric \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"ktingit"},"content":"        if (!Nric.isValidNric(this.nric)) {"},{"lineNumber":116,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"ktingit"},"content":"        final Nric nric \u003d new Nric(this.nric);"},{"lineNumber":119,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"ktingit"},"content":"        if (this.dob \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":146,"author":{"gitID":"ktingit"},"content":"                    DateOfBirth.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"ktingit"},"content":"        if (!DateOfBirth.isValidDob(this.dob)) {"},{"lineNumber":149,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(DateOfBirth.MESSAGE_DOB_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"ktingit"},"content":"        final DateOfBirth dob \u003d new DateOfBirth(this.dob);"},{"lineNumber":152,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":153,"author":{"gitID":"ktingit"},"content":"        if (this.bloodType \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":155,"author":{"gitID":"ktingit"},"content":"                    BloodType.class.getSimpleName()));"},{"lineNumber":156,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"ktingit"},"content":"        if (!BloodType.isValidBloodType(this.bloodType)) {"},{"lineNumber":158,"author":{"gitID":"ktingit"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"ktingit"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"ktingit"},"content":"        final BloodType bloodType \u003d new BloodType(this.bloodType);"},{"lineNumber":161,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":162,"author":{"gitID":"nhs-work"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":163,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":165,"author":{"gitID":"ktingit"},"content":"        return new Patient(name, nric, phone, email, address, dob, bloodType, remark, tags);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"Kyholmes"},"content":"        if (!(other instanceof XmlAdaptedPatient)) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"Kyholmes"},"content":"        XmlAdaptedPatient otherPerson \u003d (XmlAdaptedPatient) other;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":180,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":184,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 Objects.equals(dob, otherPerson.dob)"},{"lineNumber":185,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 Objects.equals(bloodType, otherPerson.bloodType)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":19,"ktingit":44,"-":120,"nhs-work":5}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"    public static void saveDataToFile(File file, XmlSerializableImdb addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"    public static XmlSerializableImdb loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableImdb.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":3,"-":36}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":" * Patient appointment in Imdb"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":" * Gurantees: details are present and not null, field values are validated, immutable"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"public class Appointment {"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"    public static final int APPOINTMENT_DURATION \u003d 30;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"    private String appointmentDateTime;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"    private String patientName;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"    public Appointment(String patientName, String appointmentDateTime) {"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"        this.patientName \u003d patientName;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"        this.appointmentDateTime \u003d appointmentDateTime;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    public String getPatientName() {"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"        return this.patientName;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    public String getAppointmentDateTime() {"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"        return this.appointmentDateTime;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":24}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.storage.ImdbStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.storage.XmlImdbStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Imdb ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"        ImdbStorage imdbStorage \u003d new XmlImdbStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        storage \u003d new StorageManager(imdbStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"        Optional\u003cReadOnlyImdb\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        ReadOnlyImdb initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Imdb\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Imdb\");"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"            initialData \u003d new Imdb();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Imdb\");"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"            initialData \u003d new Imdb();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"Kyholmes"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Imdb\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"Kyholmes"},"content":"        logger.info(\"Starting Imdb \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"-":196}},{"path":"src/main/java/seedu/address/model/ReadOnlyImdb.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"public interface ReadOnlyImdb {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"     * Returns an unmodifiable view of the appointment list."},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"     * This list will not contain any duplicate appointment."},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"     * Returns an unmodifiable view of the patient queue."},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"     * This list will not contain any duplicate patient in the queue."},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getUniquePatientQueue();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":15,"-":21}},{"path":"src/main/java/seedu/address/storage/XmlImdbStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":" * A class to access Imdb data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"public class XmlImdbStorage implements ImdbStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlImdbStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    public XmlImdbStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"    public Optional\u003cReadOnlyImdb\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    public Optional\u003cReadOnlyImdb\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"            logger.info(\"Imdb file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        XmlSerializableImdb xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"ktingit"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"    public void backupAddressBook(ReadOnlyImdb addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"ktingit"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"    public void saveAddressBook(ReadOnlyImdb addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyImdb)}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"    public void saveAddressBook(ReadOnlyImdb addressBook, String filePath) throws IOException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableImdb(addressBook));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":14,"ktingit":4,"-":69}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.Imdb;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.ReadOnlyImdb;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Address;"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.BloodType;"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.DateOfBirth;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Email;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Name;"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"import seedu.address.model.patient.Nric;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Phone;"},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"import seedu.address.model.patient.Remark;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":" * Contains utility methods for populating {@code Imdb} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    public static Patient[] getSamplePersons() {"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"        return new Patient[] {"},{"lineNumber":26,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"Alex Yeoh\"), new Nric(\"S1234567A\"), new Phone(\"87438807\"),"},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"                    new Email(\"alexyeoh@example.com\"),"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new DateOfBirth(\"11/11/1991\"),"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"A\"), new Remark(\"\"), getTagSet(\"G6PD\")),"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Nric(\"S7654321B\"), new Phone(\"99272758\"),"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"                    new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new DateOfBirth(\"10/10/1990\"),"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"B-\"), new Remark(\"\"), getTagSet(\"aspirin\", \"asthma\")),"},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"Charlotte Oliveiro\"), new Nric(\"S5671234C\"), new Phone(\"93210283\"),"},{"lineNumber":35,"author":{"gitID":"ktingit"},"content":"                    new Email(\"charlotte@example.com\"),"},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new DateOfBirth(\"09/09/1989\"),"},{"lineNumber":37,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"A+\"), new Remark(\"\"), getTagSet(\"peanuts\")),"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"David Li\"), new Nric(\"S3456712D\"), new Phone(\"91031282\"),"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"                    new Email(\"lidavid@example.com\"),"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new DateOfBirth(\"08/08/1988\"),"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"B+\"), new Remark(\"\"), getTagSet(\"seafood\")),"},{"lineNumber":42,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Nric(\"S5673412E\"), new Phone(\"92492021\"),"},{"lineNumber":43,"author":{"gitID":"ktingit"},"content":"                    new Email(\"irfan@example.com\"),"},{"lineNumber":44,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new DateOfBirth(\"07/07/1987\"),"},{"lineNumber":45,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"O\"), new Remark(\"\"), getTagSet(\"ibuprofen\")),"},{"lineNumber":46,"author":{"gitID":"ktingit"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Nric(\"S1234512F\"), new Phone(\"92624417\"),"},{"lineNumber":47,"author":{"gitID":"ktingit"},"content":"                    new Email(\"royb@example.com\"),"},{"lineNumber":48,"author":{"gitID":"ktingit"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new DateOfBirth(\"06/06/1986\"),"},{"lineNumber":49,"author":{"gitID":"ktingit"},"content":"                    new BloodType(\"O+\"), new Remark(\"\"), getTagSet(\"paracetomol\"))"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"    public static ReadOnlyImdb getSampleAddressBook() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"            Imdb sampleAb \u003d new Imdb();"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"            for (Patient samplePatient : getSamplePersons()) {"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"                sampleAb.addPerson(samplePatient);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":16,"ktingit":27,"-":33,"nhs-work":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"        sb.append(\"\\nImdb name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":77}},{"path":"src/main/java/seedu/address/model/patient/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" * Represents a Patient\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if a given string is a valid patient phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":3,"-":50}},{"path":"src/main/java/seedu/address/model/patient/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" * Represents a Patient\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Patient emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"     * Returns if a given string is a valid patient email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"-":63}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":" * JAXB-friendly adapted version of the Appointment."},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"    @XmlElement"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"    private String patientName;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    @XmlElement"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"    private String dateTime;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"     * Constructs an XmlAdaptedAppointment"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"     * Constructs a {@code XmlAdaptedAppointment} with the given {@code patientName} and {@code dateTime}."},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public XmlAdaptedAppointment(String patientName, String dateTime) {"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"        this.patientName \u003d patientName;"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * converts a given Appointment into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"        this.patientName \u003d source.getPatientName();"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"        this.dateTime \u003d source.getAppointmentDateTime();"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        return new Appointment(patientName, dateTime);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        if (!(other instanceof  XmlAdaptedAppointment)) {"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"        return (patientName.equals(((XmlAdaptedAppointment) other).patientName)"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 dateTime.equals(((XmlAdaptedAppointment) other).dateTime));"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":43,"-":16}},{"path":"src/main/java/seedu/address/model/patient/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" * Represents a Patient\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"            \"Patient addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if a given string is a valid patient email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"-":54}},{"path":"src/main/java/seedu/address/model/patient/UniquePatientList.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"-"},"content":" *"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":" * @see Patient#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"public class UniquePatientList implements Iterable\u003cPatient\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the list contains an equivalent patient as the given argument."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    public boolean contains(Patient toCheck) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     * Adds a patient to the list."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if the patient to add is a duplicate of an existing patient in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"    public void add(Patient toAdd) throws DuplicatePatientException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"            throw new DuplicatePatientException();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"     * Replaces the patient {@code target} in the list with {@code editedPatient}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if the replacement is equivalent to another existing patient in the list."},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"    public void setPerson(Patient target, Patient editedPatient)"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"            throws DuplicatePatientException, PatientNotFoundException {"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(editedPatient);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"            throw new PatientNotFoundException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        if (!target.equals(editedPatient) \u0026\u0026 internalList.contains(editedPatient)) {"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"            throw new DuplicatePatientException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"        internalList.set(index, editedPatient);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"     * Removes the equivalent patient from the list."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if no such patient could be found in the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"    public boolean remove(Patient toRemove) throws PatientNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"            throw new PatientNotFoundException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"    public void setPersons(UniquePatientList replacement) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"    public void setPersons(List\u003cPatient\u003e patients) throws DuplicatePatientException {"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(patients);"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        final UniquePatientList replacement \u003d new UniquePatientList();"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"        for (final Patient patient : patients) {"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"            replacement.add(patient);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e asObservableList() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"    public Iterator\u003cPatient\u003e iterator() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof UniquePatientList // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePatientList) other).internalList));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":36,"-":82}},{"path":"src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":" * Signals that the operation is unable to find the specified patient."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"public class PatientNotFoundException extends Exception {}"}],"authorContributionMap":{"Kyholmes":3,"-":3}},{"path":"src/main/java/seedu/address/model/patient/Nric.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":" * Represents a Patient\u0027s NRIC in the address book."},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"public class Nric {"},{"lineNumber":11,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":12,"author":{"gitID":"ktingit"},"content":"    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"            \"Patient NRIC should only contain alphanumeric characters and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"     * The first character of the NRIC must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"    public static final String NRIC_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"},{"lineNumber":20,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":21,"author":{"gitID":"ktingit"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"     * Constructs a {@code Nric}."},{"lineNumber":25,"author":{"gitID":"ktingit"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"ktingit"},"content":"     * @param nric A valid NRIC."},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"    public Nric(String nric) {"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"        requireNonNull(nric);"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"        checkArgument(isValidNric(nric), MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"        this.value \u003d nric;"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ktingit"},"content":"     * Returns true if a given string is a valid patient NRIC."},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ktingit"},"content":"    public static boolean isValidNric(String test) {"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"        return test.matches(NRIC_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ktingit"},"content":"                || (other instanceof Nric // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 this.value.equals(((Nric) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"ktingit":36,"-":22}},{"path":"src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":" * Signals that the operation will result in duplicate Patient objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"public class DuplicatePatientException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"    public DuplicatePatientException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"-":8}},{"path":"src/main/java/seedu/address/model/patient/BloodType.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":" * Represents a Patient\u0027s blood type in the address book."},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"public class BloodType {"},{"lineNumber":11,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":12,"author":{"gitID":"ktingit"},"content":"    public static final String MESSAGE_BLOODTYPE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"            \"Patient blood types should only contain alphabets and punctuations, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"     * The first character of the blood type must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"    public static final String BLOODTYPE_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}\\\\p{Punct}]*\";"},{"lineNumber":20,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":21,"author":{"gitID":"ktingit"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"     * Constructs a {@code BloodType}."},{"lineNumber":25,"author":{"gitID":"ktingit"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"ktingit"},"content":"     * @param bloodType A valid blood type."},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"    public BloodType(String bloodType) {"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"        requireNonNull(bloodType);"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"        checkArgument(isValidBloodType(bloodType), MESSAGE_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"        this.value \u003d bloodType;"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ktingit"},"content":"     * Returns true if a given string is a valid patient blood type."},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ktingit"},"content":"    public static boolean isValidBloodType(String test) {"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"        return test.matches(BLOODTYPE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ktingit"},"content":"                || (other instanceof BloodType // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 this.value.equals(((BloodType) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"ktingit":36,"-":22}},{"path":"src/main/java/seedu/address/model/patient/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":" * Represents a Patient\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":"            \"Patient names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if a given string is a valid patient name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":4,"ktingit":1,"-":54}},{"path":"src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    public boolean test(Patient patient) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":5,"-":26}},{"path":"src/main/java/seedu/address/model/patient/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhs-work"},"content":" * Represents a Patient\u0027s remarks in the address book."},{"lineNumber":8,"author":{"gitID":"nhs-work"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":9,"author":{"gitID":"nhs-work"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhs-work"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":12,"author":{"gitID":"nhs-work"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"nhs-work"},"content":"            \"Patient remark can take any values\";"},{"lineNumber":14,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":15,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":16,"author":{"gitID":"nhs-work"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":18,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"nhs-work"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":20,"author":{"gitID":"nhs-work"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"nhs-work"},"content":"     * @param remark A valid remark."},{"lineNumber":22,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"nhs-work"},"content":"    public Remark(String remark) {"},{"lineNumber":24,"author":{"gitID":"nhs-work"},"content":"        requireNonNull(remark);"},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"nhs-work"},"content":"        this.value \u003d remark;"},{"lineNumber":27,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":29,"author":{"gitID":"nhs-work"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"nhs-work"},"content":"     * Returns true for all string values for remark."},{"lineNumber":31,"author":{"gitID":"nhs-work"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"nhs-work"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":33,"author":{"gitID":"nhs-work"},"content":"        return true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"nhs-work"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"nhs-work"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"-":23,"nhs-work":29}},{"path":"src/main/java/seedu/address/model/patient/Patient.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":" * Represents a Patient in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"public class Patient {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"    private final Nric nric;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"    private final DateOfBirth dob;"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"    private final BloodType bloodType;"},{"lineNumber":25,"author":{"gitID":"nhs-work"},"content":"    private final Remark remark;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"    public Patient(Name name, Nric nric, Phone phone, Email email, Address address,"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":"                   DateOfBirth dob, BloodType bloodType, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"        this.nric \u003d nric;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":"        this.dob \u003d dob;"},{"lineNumber":41,"author":{"gitID":"ktingit"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":42,"author":{"gitID":"nhs-work"},"content":"        this.remark \u003d remark;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"    public Nric getNric() {"},{"lineNumber":52,"author":{"gitID":"ktingit"},"content":"        return nric;"},{"lineNumber":53,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"ktingit"},"content":"    public DateOfBirth getDob() {"},{"lineNumber":68,"author":{"gitID":"ktingit"},"content":"        return dob;"},{"lineNumber":69,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":71,"author":{"gitID":"ktingit"},"content":"    public BloodType getBloodType() {"},{"lineNumber":72,"author":{"gitID":"ktingit"},"content":"        return bloodType;"},{"lineNumber":73,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":75,"author":{"gitID":"nhs-work"},"content":"    public Remark getRemark() {"},{"lineNumber":76,"author":{"gitID":"nhs-work"},"content":"        return remark;"},{"lineNumber":77,"author":{"gitID":"nhs-work"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"nhs-work"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"        if (!(other instanceof Patient)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"        Patient otherPatient \u003d (Patient) other;"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"        return otherPatient.getName().equals(this.getName())"},{"lineNumber":99,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 otherPatient.getNric().equals(this.getNric())"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 otherPatient.getPhone().equals(this.getPhone())"},{"lineNumber":101,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 otherPatient.getEmail().equals(this.getEmail())"},{"lineNumber":102,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 otherPatient.getAddress().equals(this.getAddress())"},{"lineNumber":103,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 otherPatient.getDob().equals(this.getDob())"},{"lineNumber":104,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 otherPatient.getBloodType().equals(this.getBloodType());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":110,"author":{"gitID":"ktingit"},"content":"        return Objects.hash(name, nric, phone, email, address, dob, bloodType, tags);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":117,"author":{"gitID":"ktingit"},"content":"                .append(\" Nric: \")"},{"lineNumber":118,"author":{"gitID":"ktingit"},"content":"                .append(getNric())"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":125,"author":{"gitID":"ktingit"},"content":"                .append(\" DOB: \")"},{"lineNumber":126,"author":{"gitID":"ktingit"},"content":"                .append(getDob())"},{"lineNumber":127,"author":{"gitID":"ktingit"},"content":"                .append(\" Blood Type: \")"},{"lineNumber":128,"author":{"gitID":"ktingit"},"content":"                .append(getBloodType())"},{"lineNumber":129,"author":{"gitID":"nhs-work"},"content":"                .append(\" Remark: \")"},{"lineNumber":130,"author":{"gitID":"nhs-work"},"content":"                .append(getRemark())"},{"lineNumber":131,"author":{"gitID":"ktingit"},"content":"                .append(\" Conditions: \");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":8,"ktingit":32,"-":88,"nhs-work":8}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ktingit"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Allergy or condition names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ktingit":1,"-":53}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.commons.events.model.ImdbChangedEvent;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":18,"author":{"gitID":"cxingkai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    private final Imdb imdb;"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    private final FilteredList\u003cPatient\u003e patientVisitingQueue;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"     * Initializes a ModelManager with the given Imdb and userPrefs."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"    public ModelManager(ReadOnlyImdb addressBook, UserPrefs userPrefs) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":"        this.imdb \u003d new Imdb(addressBook);"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.imdb.getPersonList());"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        patientVisitingQueue \u003d new FilteredList\u003c\u003e(this.imdb.getUniquePatientQueue());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"        this(new Imdb(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    public void resetData(ReadOnlyImdb newData) {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        imdb.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"    public ReadOnlyImdb getImdb() {"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"        return imdb;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        raise(new ImdbChangedEvent(imdb));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"    public synchronized void deletePerson(Patient target) throws PatientNotFoundException {"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        imdb.removePerson(target);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"    public synchronized void addPerson(Patient patient) throws DuplicatePatientException {"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"        imdb.addPerson(patient);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"    public void updatePerson(Patient target, Patient editedPatient)"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"            throws DuplicatePatientException, PatientNotFoundException {"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(target, editedPatient);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"        imdb.updatePerson(target, editedPatient);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"cxingkai"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"cxingkai"},"content":"     * Removes {@code tag} from all Persons"},{"lineNumber":90,"author":{"gitID":"cxingkai"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"cxingkai"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"        imdb.removeTag(tag);"},{"lineNumber":93,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Kyholmes"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"     * {@code Imdb}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPersonList() {"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"        return FXCollections.unmodifiableObservableList(filteredPatients);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"Kyholmes"},"content":"    public void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"        filteredPatients.setPredicate(predicate);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"    public Patient getPatientFromList(Predicate\u003cPatient\u003e predicate) {"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"        filteredPatients.setPredicate(predicate);"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"        if (filteredPatients.size() \u003e 0) {"},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"            return filteredPatients.get(0);"},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"Kyholmes"},"content":"        return null;"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"    public synchronized void addPatientToQueue(Patient patient) throws DuplicatePatientException {"},{"lineNumber":122,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(patient);"},{"lineNumber":123,"author":{"gitID":"Kyholmes"},"content":"        imdb.addPatientToQueue(patient);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":127,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Kyholmes"},"content":"    public synchronized Patient removePatientFromQueue() throws PatientNotFoundException {"},{"lineNumber":129,"author":{"gitID":"Kyholmes"},"content":"        Patient patientToRemove \u003d imdb.removePatientFromQueue();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":131,"author":{"gitID":"Kyholmes"},"content":"        return patientToRemove;"},{"lineNumber":132,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":134,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getVisitingQueue() {"},{"lineNumber":136,"author":{"gitID":"Kyholmes"},"content":"        return imdb.getUniquePatientQueue();"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":153,"author":{"gitID":"Kyholmes"},"content":"        return imdb.equals(other.imdb)"},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":61,"-":88,"cxingkai":8}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":9,"author":{"gitID":"cxingkai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"    void resetData(ReadOnlyImdb newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"    /** Returns the Imdb */"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    ReadOnlyImdb getImdb();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    /** Deletes the given patient. */"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"    void deletePerson(Patient target) throws PatientNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    /** Adds the given patient */"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"    void addPerson(Patient patient) throws DuplicatePatientException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if updating the patient\u0027s details causes the patient to be equivalent to"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"     *      another existing patient in the list."},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":"    void updatePerson(Patient target, Patient editedPatient)"},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"            throws DuplicatePatientException, PatientNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"cxingkai"},"content":"    /** Removes {@code tag} from all Persons */"},{"lineNumber":41,"author":{"gitID":"cxingkai"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":42,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    /** Returns an unmodifiable view of the filtered patient list */"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getFilteredPersonList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    void updateFilteredPersonList(Predicate\u003cPatient\u003e predicate);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"    /** Adds patient into visiting queue"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"     * @throws NullPointerException if {@code Patient} is null.*/"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"    void addPatientToQueue(Patient patient) throws DuplicatePatientException;"},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"    /** Remove a patient from the visiting queue*/"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":"    Patient removePatientFromQueue() throws PatientNotFoundException;"},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"    /** Get patient visiting queue*/"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"    ObservableList\u003cPatient\u003e getVisitingQueue();"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    /** Get Patient from the patient list */"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"    Patient getPatientFromList(Predicate\u003cPatient\u003e predicate);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":33,"-":27,"cxingkai":4}},{"path":"src/main/java/seedu/address/model/UniquePatientVisitingQueue.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyholmes"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":5,"author":{"gitID":"Kyholmes"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"Kyholmes"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyholmes"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"Kyholmes"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":11,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":12,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" * Patient visiting queue in Imdb"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":" * Gurantees: immutable"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"public class UniquePatientVisitingQueue implements Iterable\u003cPatient\u003e {"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":"    private LinkedList\u003cPatient\u003e visitingQueue;"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    public UniquePatientVisitingQueue() {"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":"        visitingQueue \u003d new LinkedList\u003cPatient\u003e();"},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"     * Adds a patient to the visiting queue."},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if the patient to add is a duplicate of an existing patient in the queue."},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    public void add(Patient patient) throws DuplicatePatientException {"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(patient);"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        if (contains(patient)) {"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"            throw new DuplicatePatientException();"},{"lineNumber":36,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyholmes"},"content":"        visitingQueue.add(patient);"},{"lineNumber":39,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"    public Patient getNextPatient() {"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.peekFirst();"},{"lineNumber":43,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Kyholmes"},"content":"     * Removes a patient from the visiting queue."},{"lineNumber":47,"author":{"gitID":"Kyholmes"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if the queue is empty."},{"lineNumber":49,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"    public Patient removePatient() throws PatientNotFoundException {"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"        if (visitingQueue.isEmpty()) {"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"            throw new PatientNotFoundException();"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.removeFirst();"},{"lineNumber":56,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyholmes"},"content":"    public LinkedList\u003cPatient\u003e getVisitingQueue() {"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue;"},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the queue contains an equivalent patient as the given argument."},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Kyholmes"},"content":"    public boolean contains(Patient toCheck) {"},{"lineNumber":66,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(toCheck);"},{"lineNumber":67,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.contains(toCheck);"},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"    public Iterator\u003cPatient\u003e iterator() {"},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.iterator();"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof UniquePatientVisitingQueue // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 this.visitingQueue.equals(((UniquePatientVisitingQueue) other).visitingQueue));"},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.hashCode();"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e asObservableList() {"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":"        ObservableList\u003cPatient\u003e patientList \u003d FXCollections.observableArrayList(this.visitingQueue);"},{"lineNumber":92,"author":{"gitID":"Kyholmes"},"content":"        return FXCollections.unmodifiableObservableList(patientList);"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":94}},{"path":"src/main/java/seedu/address/model/patient/DateOfBirth.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.patient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ktingit"},"content":" * Represents a Patient\u0027s DOB in the address book."},{"lineNumber":8,"author":{"gitID":"ktingit"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDob(String)}"},{"lineNumber":9,"author":{"gitID":"ktingit"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ktingit"},"content":"public class DateOfBirth {"},{"lineNumber":11,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":12,"author":{"gitID":"ktingit"},"content":"    public static final String MESSAGE_DOB_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ktingit"},"content":"            \"Patient DOBs should only contain digits and slashes, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":15,"author":{"gitID":"ktingit"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"ktingit"},"content":"     * The first character of the DOB must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"ktingit"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ktingit"},"content":"    public static final String DOB_VALIDATION_REGEX \u003d \"[\\\\p{Digit}\\\\p{Punct}]*\";"},{"lineNumber":20,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":21,"author":{"gitID":"ktingit"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":23,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ktingit"},"content":"     * Constructs a {@code Dob}."},{"lineNumber":25,"author":{"gitID":"ktingit"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"ktingit"},"content":"     * @param dob A valid DOB."},{"lineNumber":27,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ktingit"},"content":"    public DateOfBirth(String dob) {"},{"lineNumber":29,"author":{"gitID":"ktingit"},"content":"        requireNonNull(dob);"},{"lineNumber":30,"author":{"gitID":"ktingit"},"content":"        checkArgument(isValidDob(dob), MESSAGE_DOB_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"ktingit"},"content":"        this.value \u003d dob;"},{"lineNumber":32,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":34,"author":{"gitID":"ktingit"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ktingit"},"content":"     * Returns true if a given string is a valid patient DOB."},{"lineNumber":36,"author":{"gitID":"ktingit"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ktingit"},"content":"    public static boolean isValidDob(String test) {"},{"lineNumber":38,"author":{"gitID":"ktingit"},"content":"        return test.matches(DOB_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"ktingit"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ktingit"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ktingit"},"content":"                || (other instanceof DateOfBirth // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ktingit"},"content":"                \u0026\u0026 this.value.equals(((DateOfBirth) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":1,"ktingit":36,"-":22}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyholmes"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":" * A list of appointment that enforces no nulls and uniqueness between its elements."},{"lineNumber":16,"author":{"gitID":"-"},"content":" *"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":20,"author":{"gitID":"Kyholmes"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Kyholmes"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":22,"author":{"gitID":"Kyholmes"},"content":"    private final ObservableList internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":23,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Kyholmes"},"content":"     * Constructs empty AppointmentList."},{"lineNumber":26,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"    public UniqueAppointmentList() {}"},{"lineNumber":28,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Kyholmes"},"content":"     * Creates a UniqueAppointmentList using given appointments"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"     * Enforces no nulls"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Kyholmes"},"content":"    public UniqueAppointmentList(Set\u003cAppointment\u003e appointments) {"},{"lineNumber":34,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":35,"author":{"gitID":"Kyholmes"},"content":"        internalList.addAll(appointments);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Kyholmes"},"content":"     * Returns all appointments in this list as a Set."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"    public Set\u003cAppointment\u003e toSet() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Kyholmes"},"content":"     * Replaces the Appointment int this list with those in the argument appointment list."},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Kyholmes"},"content":"    public void setAppointment(Set\u003cAppointment\u003e appointments) {"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":54,"author":{"gitID":"Kyholmes"},"content":"        internalList.setAll(appointments);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Kyholmes"},"content":"     * Ensures every appointment in the argument list exists in this object."},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"    public void mergeFrom(UniqueAppointmentList from) {"},{"lineNumber":62,"author":{"gitID":"Kyholmes"},"content":"        final Set\u003cAppointment\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":63,"author":{"gitID":"Kyholmes"},"content":"        from.internalList.stream()"},{"lineNumber":64,"author":{"gitID":"Kyholmes"},"content":"                .filter(appointment -\u003e !alreadyInside.contains(appointment))"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the list contains an quivalent Appointment as the given argument."},{"lineNumber":72,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":74,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(toCheck);"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":76,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"Kyholmes"},"content":"     * Adds a Appointment to the list."},{"lineNumber":80,"author":{"gitID":"Kyholmes"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatedAppointmentException if the Appointment to add"},{"lineNumber":82,"author":{"gitID":"Kyholmes"},"content":"     * is a duplicate of an existing appointment in the list."},{"lineNumber":83,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"    public void add(Appointment toAdd) throws DuplicatedAppointmentException {"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        requireAllNonNull(toAdd);"},{"lineNumber":86,"author":{"gitID":"Kyholmes"},"content":"        if (contains(toAdd)) {"},{"lineNumber":87,"author":{"gitID":"Kyholmes"},"content":"            throw new DuplicatedAppointmentException();"},{"lineNumber":88,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"        internalList.addAll(toAdd);"},{"lineNumber":91,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"Kyholmes"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"        return other \u003d\u003d this"},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof UniqueAppointmentList"},{"lineNumber":114,"author":{"gitID":"Kyholmes"},"content":"                    \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":117,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"     * Returns true if the element in this list or equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"    public boolean equalsOrderInsensitive(UniqueAppointmentList other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Kyholmes"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list"},{"lineNumber":135,"author":{"gitID":"Kyholmes"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Kyholmes"},"content":"    public static class DuplicatedAppointmentException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"Kyholmes"},"content":"        protected DuplicatedAppointmentException() {"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"            super(\"Operation would result in duplicate appointments.\");"},{"lineNumber":139,"author":{"gitID":"Kyholmes"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Kyholmes"},"content":"}"}],"authorContributionMap":{"Kyholmes":77,"-":64}},{"path":"src/main/java/seedu/address/model/Imdb.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":16,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.Patient;"},{"lineNumber":17,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.UniquePatientList;"},{"lineNumber":18,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.DuplicatePatientException;"},{"lineNumber":19,"author":{"gitID":"Kyholmes"},"content":"import seedu.address.model.patient.exceptions.PatientNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"Kyholmes"},"content":"public class Imdb implements ReadOnlyImdb {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyholmes"},"content":"    private final UniquePatientList persons;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"Kyholmes"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":32,"author":{"gitID":"Kyholmes"},"content":"    private final UniquePatientVisitingQueue visitingQueue;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":42,"author":{"gitID":"Kyholmes"},"content":"        persons \u003d new UniquePatientList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":44,"author":{"gitID":"Kyholmes"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":45,"author":{"gitID":"Kyholmes"},"content":"        visitingQueue \u003d new UniquePatientVisitingQueue();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyholmes"},"content":"    public Imdb() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Kyholmes"},"content":"     * Creates an Imdb using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Kyholmes"},"content":"    public Imdb(ReadOnlyImdb toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Kyholmes"},"content":"    public void setPersons(List\u003cPatient\u003e patients) throws DuplicatePatientException {"},{"lineNumber":61,"author":{"gitID":"Kyholmes"},"content":"        this.persons.setPersons(patients);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Kyholmes"},"content":"    public void setAppointments(Set\u003cAppointment\u003e appointments) {"},{"lineNumber":69,"author":{"gitID":"Kyholmes"},"content":"        this.appointments.setAppointment(appointments);"},{"lineNumber":70,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Kyholmes"},"content":"     * Resets the existing data of this {@code Imdb} with {@code newData}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Kyholmes"},"content":"    public void resetData(ReadOnlyImdb newData) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":78,"author":{"gitID":"Kyholmes"},"content":"        List\u003cPatient\u003e syncedPatientList \u003d newData.getPersonList().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":81,"author":{"gitID":"Kyholmes"},"content":"        setAppointments(new HashSet\u003c\u003e(newData.getAppointmentList()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"Kyholmes"},"content":"            setPersons(syncedPatientList);"},{"lineNumber":85,"author":{"gitID":"Kyholmes"},"content":"        } catch (DuplicatePatientException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Kyholmes"},"content":"    //// patient-level operations"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Kyholmes"},"content":"     * Adds a patient to the address book."},{"lineNumber":94,"author":{"gitID":"Kyholmes"},"content":"     * Also checks the new patient\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":95,"author":{"gitID":"Kyholmes"},"content":"     * and updates the Tag objects in the patient to point to those in {@link #tags}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if an equivalent patient already exists."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Kyholmes"},"content":"    public void addPerson(Patient p) throws DuplicatePatientException {"},{"lineNumber":100,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d syncWithMasterTagList(p);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":102,"author":{"gitID":"Kyholmes"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any patient"},{"lineNumber":103,"author":{"gitID":"Kyholmes"},"content":"        // in the patient list."},{"lineNumber":104,"author":{"gitID":"Kyholmes"},"content":"        persons.add(patient);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Kyholmes"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPerson}."},{"lineNumber":109,"author":{"gitID":"Kyholmes"},"content":"     * {@code Imdb}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if updating the patient\u0027s details causes the patient to be equivalent to"},{"lineNumber":112,"author":{"gitID":"Kyholmes"},"content":"     *      another existing patient in the list."},{"lineNumber":113,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"Kyholmes"},"content":"     * @see #syncWithMasterTagList(Patient)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Kyholmes"},"content":"    public void updatePerson(Patient target, Patient editedPatient)"},{"lineNumber":118,"author":{"gitID":"Kyholmes"},"content":"            throws DuplicatePatientException, PatientNotFoundException {"},{"lineNumber":119,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(editedPatient);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"Kyholmes"},"content":"        Patient syncedEditedPatient \u003d syncWithMasterTagList(editedPatient);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":123,"author":{"gitID":"Kyholmes"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any patient"},{"lineNumber":124,"author":{"gitID":"Kyholmes"},"content":"        // in the patient list."},{"lineNumber":125,"author":{"gitID":"Kyholmes"},"content":"        persons.setPerson(target, syncedEditedPatient);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"Kyholmes"},"content":"     *  Updates the master tag list to include tags in {@code patient} that are not in the list."},{"lineNumber":130,"author":{"gitID":"Kyholmes"},"content":"     *  @return a copy of this {@code patient} such that every tag in this patient points to a Tag object in the master"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"Kyholmes"},"content":"    private Patient syncWithMasterTagList(Patient patient) {"},{"lineNumber":134,"author":{"gitID":"Kyholmes"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(patient.getTags());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":138,"author":{"gitID":"Kyholmes"},"content":"        // used for checking patient tag references"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"Kyholmes"},"content":"        // Rebuild the list of patient tags to point to the relevant tags in the master tag list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":145,"author":{"gitID":"ktingit"},"content":"        return new Patient(patient.getName(), patient.getNric(), patient.getPhone(), patient.getEmail(),"},{"lineNumber":146,"author":{"gitID":"ktingit"},"content":"                patient.getAddress(), patient.getDob(), patient.getBloodType(),"},{"lineNumber":147,"author":{"gitID":"ktingit"},"content":"                patient.getRemark(), correctTagReferences);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"Kyholmes"},"content":"     * Removes {@code key} from this {@code Imdb}."},{"lineNumber":152,"author":{"gitID":"Kyholmes"},"content":"     * @throws PatientNotFoundException if the {@code key} is not in this {@code Imdb}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"Kyholmes"},"content":"    public boolean removePerson(Patient key) throws PatientNotFoundException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitID":"Kyholmes"},"content":"            throw new PatientNotFoundException();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"Kyholmes"},"content":"    public void addAppointment(Appointment appt) throws UniqueAppointmentList.DuplicatedAppointmentException {"},{"lineNumber":169,"author":{"gitID":"Kyholmes"},"content":"        appointments.add(appt);"},{"lineNumber":170,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":172,"author":{"gitID":"Kyholmes"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Kyholmes"},"content":"     * Adds a patient to the visiting queue."},{"lineNumber":174,"author":{"gitID":"Kyholmes"},"content":"     * Also checks the new patient\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":175,"author":{"gitID":"Kyholmes"},"content":"     * and updates the Tag objects in the patient to point to those in {@link #tags}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":177,"author":{"gitID":"Kyholmes"},"content":"     * @throws DuplicatePatientException if an equivalent patient already exists."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"Kyholmes"},"content":"    public void addPatientToQueue(Patient p) throws DuplicatePatientException {"},{"lineNumber":180,"author":{"gitID":"Kyholmes"},"content":"        requireNonNull(p);"},{"lineNumber":181,"author":{"gitID":"Kyholmes"},"content":"        Patient patient \u003d syncWithMasterTagList(p);"},{"lineNumber":182,"author":{"gitID":"Kyholmes"},"content":"        visitingQueue.add(patient);"},{"lineNumber":183,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":185,"author":{"gitID":"Kyholmes"},"content":"    public Patient removePatientFromQueue() throws PatientNotFoundException {"},{"lineNumber":186,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.removePatient();"},{"lineNumber":187,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":189,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Kyholmes"},"content":"     * Remove {@code tag} from {@code patient}"},{"lineNumber":191,"author":{"gitID":"cxingkai"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"Kyholmes"},"content":"    private void removeTagFromPerson (Tag tag, Patient patient) throws PatientNotFoundException {"},{"lineNumber":193,"author":{"gitID":"Kyholmes"},"content":"        Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(patient.getTags());"},{"lineNumber":194,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":195,"author":{"gitID":"cxingkai"},"content":"        if (personTags.remove(tag)) {"},{"lineNumber":196,"author":{"gitID":"ktingit"},"content":"            Patient updatedPatient \u003d new Patient(patient.getName(), patient.getNric(), patient.getPhone(),"},{"lineNumber":197,"author":{"gitID":"ktingit"},"content":"                    patient.getEmail(), patient.getAddress(), patient.getDob(), patient.getBloodType(),"},{"lineNumber":198,"author":{"gitID":"ktingit"},"content":"                    patient.getRemark(), personTags);"},{"lineNumber":199,"author":{"gitID":"cxingkai"},"content":"            try {"},{"lineNumber":200,"author":{"gitID":"Kyholmes"},"content":"                updatePerson(patient, updatedPatient);"},{"lineNumber":201,"author":{"gitID":"Kyholmes"},"content":"            } catch (DuplicatePatientException dpe) {"},{"lineNumber":202,"author":{"gitID":"Kyholmes"},"content":"                throw new PatientNotFoundException();"},{"lineNumber":203,"author":{"gitID":"cxingkai"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":207,"author":{"gitID":"cxingkai"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"Kyholmes"},"content":"     * Loops through all persons in this {@code Imdb} and removes {@code tag}."},{"lineNumber":209,"author":{"gitID":"cxingkai"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"cxingkai"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":211,"author":{"gitID":"Kyholmes"},"content":"        for (Patient patient : persons) {"},{"lineNumber":212,"author":{"gitID":"cxingkai"},"content":"            try {"},{"lineNumber":213,"author":{"gitID":"Kyholmes"},"content":"                removeTagFromPerson(tag, patient);"},{"lineNumber":214,"author":{"gitID":"Kyholmes"},"content":"            } catch (PatientNotFoundException e) {"},{"lineNumber":215,"author":{"gitID":"cxingkai"},"content":"                e.printStackTrace();"},{"lineNumber":216,"author":{"gitID":"cxingkai"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"cxingkai"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"cxingkai"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"cxingkai"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getPersonList() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":240,"author":{"gitID":"Kyholmes"},"content":"        return appointments.asObservableList();"},{"lineNumber":241,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":243,"author":{"gitID":"Kyholmes"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"Kyholmes"},"content":"    public ObservableList\u003cPatient\u003e getUniquePatientQueue() {"},{"lineNumber":245,"author":{"gitID":"Kyholmes"},"content":"        return visitingQueue.asObservableList();"},{"lineNumber":246,"author":{"gitID":"Kyholmes"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"Kyholmes"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":251,"author":{"gitID":"Kyholmes"},"content":"                || (other instanceof Imdb // instanceof handles nulls"},{"lineNumber":252,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 this.persons.equals(((Imdb) other).persons)"},{"lineNumber":253,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((Imdb) other).tags)"},{"lineNumber":254,"author":{"gitID":"Kyholmes"},"content":"                \u0026\u0026 this.appointments.equalsOrderInsensitive(((Imdb) other).appointments));"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":260,"author":{"gitID":"Kyholmes"},"content":"        return Objects.hash(persons, tags, appointments);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Kyholmes":106,"ktingit":6,"-":132,"cxingkai":18}}]
