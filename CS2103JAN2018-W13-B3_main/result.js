var resultJson = [{"path":"docs/team/johndoe.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d John Doe - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: AddressBook - Level 4"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"CLIndar is a desktop application that helps university computing students to manage their tasks and events. The user interacts with it using a CLI. It has a GUI created with JavaFX, and is written in Java."},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":15,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":34,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"---"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"YuanQLLer":1,"-":69}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"\u003d CLIndar - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"By: `CS2103JAN2018-W13-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"CLIndar is a desktop application that helps university computing students to manage their tasks and events."},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"CLIndar is *Common-Line Interface (CLI) based and uses Linux-style commands*, which computing students are familiar with."},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"Thus, compared to traditional Graphical User Interface (GUI) applications, CLIndar is faster and provides more convenience for computing students."},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"With CLIndar, you can:"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"* Keep track of your tasks and events and be reminded of their due dates"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"* Record all completed tasks and events, so that you know what you have done"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"The current version of CLIndar is 1.4 and is available on Windows and Linux Operating Systems."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d Get Started"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"To start using CLIndar, follow the instructions below."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":".  Download the latest `CLIndar.jar` link:{repoURL}/releases[here]."},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":".  Copy the file to the folder you want to use as the home folder for CLIndar."},{"lineNumber":44,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":45,"author":{"gitID":"-"},"content":"+"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":52,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"* *`task`* `n/Software Engineering Milestone 1 d/16/03/2018 17:00 r/Enhance major component`: Adds Software Engineering task to the desk board in CLIndar"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"* *`event`* `n/Software Project s/01/05/2018 8:00 e/01/08/2018 8:00 l/School of Computing`: Adds Software Project event to the desk board"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"* *`ls task`* : list all uncompleted tasks"},{"lineNumber":57,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"The following describes the command format in CLIndar."},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"* *Words in `UPPER_CASE` are the parameters to be supplied by the user.* +"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"For example, in the following format `task n/NAME`,"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"  `NAME` must be supplied by the user as the task name. The following is an example of the command to be keyed in by user:"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"  `task n/Software Engineering Milestone 1`."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"* *Items in square brackets are optional.* +"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"For example,  `n/NAME [r/REMARK]` can be used as `n/Software Engineering Milestone 1 r/urgent` or as `n/Software Engineering Milestone 1`."},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"* *Parameters can be in any order.* +"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"For example, if the command specifies `n/NAME d/DATETIME`, `d/DATETIME n/NAME` is also acceptable."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Viewing help : `help` or `man` `[As of  v1.1]`"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"Shows the help menu for all of the commands or only the `COMMAND_WORD` requested."},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `help`, `help COMMAND_WORD`, `man` or `man COMMAND_WORD`"},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"* `help`"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"* `man`"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"* `help task`"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"* `man task`"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"* `help man`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Adding a task: `task` `[As of  v1.2]`"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"Adds a task to the desk board."},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `task n/NAME d/DUE_DATE_TIME [r/REMARK] [t/TAGS]`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"* `task n/Software Engineering Milestone 1 d/16/03/2018 17:00 r/urgent`"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"* `task n/Programming Methodology Assignment 2 d/16/03/2018 23:59`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Adding an event: `event` `[As of  v1.3]`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"Adds an event to the desk board. +"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `event n/NAME s/START_TIME e/END_TIME [l/LOCATION] [r/REMARK]`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"* `event n/Software Project s/1/5/2018 8:00 e/01/08/2018 8:00 l/School of Computing r/remember to bring laptop charger`"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"* `event n/Blockchain Talk s/16/3/2018 16:00 e/16/03/2018 18:00`"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Listing uncompleted tasks and upcoming events: `list` or `ls` `[As of  v1.4]`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":"Shows one or two lists of tasks and events in the desk board as described below."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"karenfrilya97"},"content":"*Format:*"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"* `list task` or `ls task`: shows only uncompleted tasks."},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"* `list event` or `ls event`: shows only upcoming events."},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"* `list` or `ls`: shows both uncompleted tasks and upcoming events in 2 separate lists."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Removing a task or event: `rm` `[As of  v1.4]`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"karenfrilya97"},"content":"Removes a task or event from the desk board according to the following conditions."},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":129,"author":{"gitID":"karenfrilya97"},"content":"* Removes the task or event at the specified `INDEX`."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":131,"author":{"gitID":"karenfrilya97"},"content":"* The index *must be a positive integer* e.g. 1, 2, 3."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"karenfrilya97"},"content":"*Format:*"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"karenfrilya97"},"content":"* `rm task INDEX`: removes a task."},{"lineNumber":136,"author":{"gitID":"karenfrilya97"},"content":"* `rm event INDEX`: removes an event."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"* `ls task` +"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"`rm task 2` +"},{"lineNumber":143,"author":{"gitID":"karenfrilya97"},"content":"Removes the 2nd task in the desk board."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Completing a task: `complete task` or `com task` `[Coming Soon in  v1.5]`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"karenfrilya97"},"content":"Completes the task at the specified `INDEX` based on the most recent listing."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `complete task INDEX` or `com task INDEX`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"* `ls task` +"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"`complete task 3` +"},{"lineNumber":155,"author":{"gitID":"karenfrilya97"},"content":"Completes the 3rd task in the desk board."},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"* `ls task` +"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"`com task 2` +"},{"lineNumber":159,"author":{"gitID":"karenfrilya97"},"content":"Completes the 2nd task in the desk board."},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Listing all completed tasks: `ls complete task` or `ls com task` `[Coming Soon in  v1.5]`"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":163,"author":{"gitID":"karenfrilya97"},"content":"Shows a list of all completed tasks in the desk board. +"},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":165,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `ls complete task` or `ls com task`"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Shows overdue tasks: `overdue` `[Coming Soon in  v1.5]`"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":169,"author":{"gitID":"karenfrilya97"},"content":"Shows a list of tasks that remain uncompleted after their respective due dates."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `overdue`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Listing entered commands : `history` `[Coming Soon in  v1.5]`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"karenfrilya97"},"content":"Lists all the commands that you have entered in reverse chronological order."},{"lineNumber":176,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":177,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `history`"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitID":"Kyomian"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box, just like in Linux."},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":185,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":188,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":189,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `undo` or `u`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"karenfrilya97"},"content":"Undoable commands are commands that modify the desk board\u0027s content (e.g. `task`, `rm task`)."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"Kyomian"},"content":"* `rm task 1` +"},{"lineNumber":200,"author":{"gitID":"Kyomian"},"content":"`ls task` +"},{"lineNumber":201,"author":{"gitID":"Kyomian"},"content":"`undo` (reverses the `rm task 1` command) +"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"Kyomian"},"content":"* `rm event 1` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":205,"author":{"gitID":"Kyomian"},"content":"`u` (reverses the `clear` command) +"},{"lineNumber":206,"author":{"gitID":"Kyomian"},"content":"`u` (reverses the `rm event 1` command)"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d Redoing previously undone command : `redo` or `r`"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `redo` or `r`"},{"lineNumber":213,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":214,"author":{"gitID":"karenfrilya97"},"content":"*Examples:*"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"Kyomian"},"content":"* `rm task 1` +"},{"lineNumber":217,"author":{"gitID":"Kyomian"},"content":"`undo` (reverses the `rm task 1` command) +"},{"lineNumber":218,"author":{"gitID":"Kyomian"},"content":"`redo` (reapplies the `rm task 1` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"Kyomian"},"content":"* `rm task 1` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"Kyomian"},"content":"* `rm task 1` +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":226,"author":{"gitID":"Kyomian"},"content":"`u` (reverses the `clear` command) +"},{"lineNumber":227,"author":{"gitID":"Kyomian"},"content":"`u` (reverses the `rm task 1` command) +"},{"lineNumber":228,"author":{"gitID":"Kyomian"},"content":"`r` (reapplies the `rm task 1` command) +"},{"lineNumber":229,"author":{"gitID":"Kyomian"},"content":"`r` (reapplies the `clear` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c` `[Coming Soon in  v1.5]`"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"karenfrilya97"},"content":"Clears all entries from the desk board."},{"lineNumber":235,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":236,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `clear` or `c`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Exiting the program : `exit` `[Coming Soon in  v1.5]`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"karenfrilya97"},"content":"Exits the program."},{"lineNumber":241,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":242,"author":{"gitID":"karenfrilya97"},"content":"*Format:* `exit`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Editing a task : `edit task` `[Coming Soon in v2.0]`"},{"lineNumber":245,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":246,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Locating task by name: `find task` `[Coming Soon in v2.0]`"},{"lineNumber":247,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":248,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Listing all past events: `ls past event` `[Coming Soon in v2.0]`"},{"lineNumber":249,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"Kyomian"},"content":"The data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":258,"author":{"gitID":"Kyomian"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CLIndar folder."},{"lineNumber":259,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":260,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d Command Summary"},{"lineNumber":261,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":262,"author":{"gitID":"Kyomian"},"content":"* *Add task*: `task n/NAME d/DUE_DATE_TIME [r/REMARK] [t/TAGS]` +"},{"lineNumber":263,"author":{"gitID":"Kyomian"},"content":"eg. `task n/Software Engineering Milestone 1 d/16/03/2018 17:00 r/urgent`"},{"lineNumber":264,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":265,"author":{"gitID":"Kyomian"},"content":"* *Add event*: `event n/NAME s/START_TIME e/END_TIME [l/LOCATION] [r/REMARK]` +"},{"lineNumber":266,"author":{"gitID":"Kyomian"},"content":"eg. `event n/Software Project s/1/5/2018 8:00 e/01/08/2018 8:00 l/School of Computing r/remember to bring laptop charger`"},{"lineNumber":267,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":268,"author":{"gitID":"Kyomian"},"content":"* *List uncompleted tasks and upcoming events*: `list` or `ls` +"},{"lineNumber":269,"author":{"gitID":"Kyomian"},"content":"eg. `list` or `ls` or `list task` or `ls event`"},{"lineNumber":270,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":271,"author":{"gitID":"Kyomian"},"content":"* *Remove task or event*: `rm` +"},{"lineNumber":272,"author":{"gitID":"Kyomian"},"content":"eg. `rm task 1` or `rm event 2`"},{"lineNumber":273,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":274,"author":{"gitID":"Kyomian"},"content":"* *Complete a task*: `complete task` or `com task` +"},{"lineNumber":275,"author":{"gitID":"Kyomian"},"content":"eg. `complete task 1` or `com task 2`"},{"lineNumber":276,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":277,"author":{"gitID":"Kyomian"},"content":"* *List completed tasks*: `ls complete task` or `ls com task` +"},{"lineNumber":278,"author":{"gitID":"Kyomian"},"content":"eg. `ls complete task` or `ls com task`"},{"lineNumber":279,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":280,"author":{"gitID":"Kyomian"},"content":"* *Show overdue tasks*: `overdue` +"},{"lineNumber":281,"author":{"gitID":"Kyomian"},"content":"eg. `overdue`"},{"lineNumber":282,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":283,"author":{"gitID":"Kyomian"},"content":"* *List entered commands*: `history` +"},{"lineNumber":284,"author":{"gitID":"Kyomian"},"content":"eg. `history`"},{"lineNumber":285,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":286,"author":{"gitID":"Kyomian"},"content":"* *Undo previous command*: `undo` or `u` +"},{"lineNumber":287,"author":{"gitID":"Kyomian"},"content":"eg. `undo` or `u`"},{"lineNumber":288,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":289,"author":{"gitID":"Kyomian"},"content":"* *Redo previously undone command*: `redo` or `r` +"},{"lineNumber":290,"author":{"gitID":"Kyomian"},"content":"eg. `redo` or `r`"},{"lineNumber":291,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":292,"author":{"gitID":"Kyomian"},"content":"* *Clear all entries*: `clear` or `c` +"},{"lineNumber":293,"author":{"gitID":"Kyomian"},"content":"eg. `clear` or `c`"},{"lineNumber":294,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":295,"author":{"gitID":"Kyomian"},"content":"* *Exit the program*: `exit` +"},{"lineNumber":296,"author":{"gitID":"Kyomian"},"content":"eg. `exit`"},{"lineNumber":297,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":298,"author":{"gitID":"Kyomian"},"content":"* *Edit a task*: `edit task` +"},{"lineNumber":299,"author":{"gitID":"Kyomian"},"content":"eg. `edit task 1`"},{"lineNumber":300,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":301,"author":{"gitID":"Kyomian"},"content":"* *Locate a task by name*: `find task` +"},{"lineNumber":302,"author":{"gitID":"Kyomian"},"content":"eg. `find task CS2106 Assignment`"},{"lineNumber":303,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":304,"author":{"gitID":"Kyomian"},"content":"* *List all past events*: `ls past event` +"},{"lineNumber":305,"author":{"gitID":"Kyomian"},"content":"eg. `ls past event`"}],"authorContributionMap":{"karenfrilya97":61,"-":109,"Kyomian":131,"jasmoon":4}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"CLIndar was developed by the CS2103JAN2018-W13-B3 team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Jarrett Choo"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"image::kyomian.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"{empty}[https://github.com/Kyomian[github]] [\u003c\u003cjarrett#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"Role: Team Lead, Testing, Deliverables and deadlines +"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"Responsibilities: Logic"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Jasmund Toh"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"image::jasmoon.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"{empty}[http://github.com/jasmoon[github]] [\u003c\u003cjasmond#, portfolio\u003e\u003e]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"Role: Scheduling and tracking, JavaFX expert +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Karen Frilya"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"image::karenfrilya97.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"{empty}[http://github.com/karenfrilya97[github]] [\u003c\u003ckaren#, portfolio\u003e\u003e]"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"Role: Documentation +"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"Responsibilities: Storage"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Yuan Quan"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"image::yuanqller.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"{empty}[http://github.com/YuanQQLer[github]] [\u003c\u003cyuanquan#, portfolio\u003e\u003e]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"Role: Code Quality, Integration +"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"Responsibilities: Model"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"\u0027\u0027\u0027"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"-":29,"Kyomian":24}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"\u003d CLIndar"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"https://travis-ci.org/CS2103JAN2018-W13-B3/main[image:https://travis-ci.org/CS2103JAN2018-W13-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"https://ci.appveyor.com/project/Kyomian/main/branch/master[image:https://ci.appveyor.com/api/projects/status/71lllhsrmkyylxm2/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"https://coveralls.io/github/CS2103JAN2018-W13-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W13-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"* CLindar is a desktop application that intends to help university computing students to manage their tasks and events."},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"** Computing student may have a tight schedule hence required to keep track of various events and deadlines"},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Computing student would be more familiar with the commands used in this application, hence would be easy to use."},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"* It is a GUI app but most of its user interaction is CLI (Command Line Interface)-based."},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"** This would allow fast input for users who can type fast, such as computing students."},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"* You would need to have *Java Runtime Environment* (JRE) installed to run this application."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"* This app was based on Addressbook - Level 4, developed by the https://github.com/se-edu/[se-edu] team."},{"lineNumber":36,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":37,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"YuanQLLer":5,"-":28,"Kyomian":7}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"//import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"public class SampleDataTest extends DeskBoardSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    protected DeskBoard getInitialData() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    //TODO:TEST"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"        Activity[] expectedList \u003d SampleDataUtil.getSampleActivity();"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"        ReadOnlyDeskBoard expectedDeskBoard \u003d SampleDataUtil.getSampleDeskBoard();"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard generatedDeskBoard \u003d new DeskBoard();"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"            generatedDeskBoard.setActivities(Arrays.asList(expectedList));"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        } catch (DuplicateActivityException e) {"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"            fail();"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(expectedDeskBoard.equals(generatedDeskBoard));"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        //TODO: After ui part finished"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        //assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":27,"-":42,"Kyomian":1}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package systemtests;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalActivities.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"////import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.activity.Activity;"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//public class DeleteCommandSystemTest extends RemarkBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"//    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//    public void delete() {"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//        /* ----------------- Performing delete operation while an unfiltered list is being shown"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"// -------------------- */"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//        /* Case: delete the first activity in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \""},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//                + INDEX_FIRST_ACTIVITY.getOneBased() + \"       \";"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//        Activity deletedActivity \u003d removePerson(expectedModel, INDEX_FIRST_ACTIVITY);"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedActivity);"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//        /* Case: delete the last activity in the list -\u003e deleted */"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"//        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//        /* Case: undo deleting the last activity in the list -\u003e last activity restored */"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"//        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//        /* Case: redo deleting the last activity in the list -\u003e last activity deleted again */"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//        /* Case: delete the middle activity in the list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//        /* ------------------ Performing delete operation while a filtered list is being shown"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"// ---------------------- */"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//        /* Case: filtered activity list, delete index within bounds of address book and activity list -\u003e deleted */"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//        Index index \u003d INDEX_FIRST_ACTIVITY;"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredActivityList().size());"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(index);"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//        /* Case: filtered activity list, delete index within bounds of address book but out of bounds of activity list"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//         * -\u003e rejected"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//         */"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//        int invalidIndex \u003d getModel().getDeskBoard().getActivityList().size();"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"//        /* --------------------- Performing delete operation while a activity card is selected"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"// ---------------------- */"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"//        /* Case: delete the selected activity -\u003e activity list panel selects the activity before the deleted activity"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"// */"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"//        showAllPersons();"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"//        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"//        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"//        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"//        selectPerson(selectedIndex);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"//        deletedActivity \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"//        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedActivity);"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"//        /* --------------------------------- Performing invalid delete operation"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"// ------------------------------------ */"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"//        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"//        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"//        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"//        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"//        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"//        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"//                getModel().getDeskBoard().getActivityList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"//        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\","},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"//                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"//        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"//                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"//        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"//     * Removes the {@code Activity} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"//     * @return the removed activity"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"//    private Activity removePerson(Model model, Index index) {"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"//        Activity targetActivity \u003d getPerson(model, index);"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":"//        try {"},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"//            model.deleteActivity(targetActivity);"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"//        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"//            throw new AssertionError(\"targetActivity is retrieved from model.\");"},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"//        return targetActivity;"},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":140,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"//     * Deletes the activity at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":143,"author":{"gitID":"Kyomian"},"content":"//     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":144,"author":{"gitID":"Kyomian"},"content":"//     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":146,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":147,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"Kyomian"},"content":"//        Activity deletedActivity \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedActivity);"},{"lineNumber":150,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess("},{"lineNumber":152,"author":{"gitID":"Kyomian"},"content":"//                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"//                expectedResultMessage);"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":155,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"//     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":"//     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"//     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"//     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":"//     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"//     * Verifications 1 to 3 are performed by"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"//     * {@code RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"//     * @see RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)}"},{"lineNumber":174,"author":{"gitID":"Kyomian"},"content":"// except that the browser url"},{"lineNumber":175,"author":{"gitID":"Kyomian"},"content":"//     * and selected card are expected to update accordingly depending on the card at"},{"lineNumber":176,"author":{"gitID":"Kyomian"},"content":"// {@code expectedSelectedCardIndex}."},{"lineNumber":177,"author":{"gitID":"Kyomian"},"content":"//     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":178,"author":{"gitID":"Kyomian"},"content":"//     * @see RemarkBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":179,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":180,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":181,"author":{"gitID":"Kyomian"},"content":"//            Index expectedSelectedCardIndex) {"},{"lineNumber":182,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(command);"},{"lineNumber":183,"author":{"gitID":"Kyomian"},"content":"//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":184,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":185,"author":{"gitID":"Kyomian"},"content":"//        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":186,"author":{"gitID":"Kyomian"},"content":"//            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":187,"author":{"gitID":"Kyomian"},"content":"//        } else {"},{"lineNumber":188,"author":{"gitID":"Kyomian"},"content":"//            assertSelectedCardUnchanged();"},{"lineNumber":189,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":190,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":191,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":192,"author":{"gitID":"Kyomian"},"content":"//        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":193,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":194,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":195,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":196,"author":{"gitID":"Kyomian"},"content":"//     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"Kyomian"},"content":"//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"Kyomian"},"content":"//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"Kyomian"},"content":"//     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"Kyomian"},"content":"//     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"Kyomian"},"content":"//     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"Kyomian"},"content":"//     * Verifications 1 to 3 are performed by"},{"lineNumber":203,"author":{"gitID":"Kyomian"},"content":"//     * {@code RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"Kyomian"},"content":"//     * @see RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":205,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":206,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":207,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":208,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":209,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(command);"},{"lineNumber":210,"author":{"gitID":"Kyomian"},"content":"//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":211,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":212,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBoxShowsErrorStyle();"},{"lineNumber":213,"author":{"gitID":"Kyomian"},"content":"//        assertStatusBarUnchanged();"},{"lineNumber":214,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":215,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":215}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package systemtests;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"////import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"///**"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"// * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"// */"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"//public class HelpCommandSystemTest extends RemarkBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"//            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"//            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//    public void openHelpWindow() {"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"//        //use accelerator"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//        getCommandBox().click();"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//        getResultDisplay().click();"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//        getPersonListPanel().click();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//        getBrowserPanel().click();"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowNotOpen();"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//        //use menu button"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//        //use command box"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//        // open help window and give it focus"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//        getMainWindowHandle().focus();"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased());"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//        assertListMatching(getPersonListPanel(), getModel().getFilteredActivityList());"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//        // note: the select command tested above does not update the status bar"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased());"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"//    private void assertHelpWindowOpen() {"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"//        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"//        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"//        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"//        getMainWindowHandle().focus();"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"//     * Asserts that the help window isn\u0027t open."},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"//    private void assertHelpWindowNotOpen() {"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":97}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package systemtests;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalActivities.ASSIGNMENT2;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalActivities.CCA;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalActivities.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalActivities.QUIZ;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//import java.util.List;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"////import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//public class FindCommandSystemTest extends RemarkBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//    public void find() {"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//         * -\u003e 2 persons found"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//         */"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, ASSIGNMENT2, CCA); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//        /* Case: repeat previous find command where activity list is displaying the persons we are finding"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//         * -\u003e 2 persons found"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//         */"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity where activity list is not displaying the activity we are finding -\u003e 1 activity found"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"// */"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, QUIZ);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, ASSIGNMENT2, CCA);"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//         */"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"//        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"//        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 activity found */"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(getModel().getDeskBoard().getActivityList().contains(ASSIGNMENT2));"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"//        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, CCA);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity in address book, keyword is same as name but of different case -\u003e 1 activity found */"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity not in address book -\u003e 0 persons found */"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find phone number of activity in address book -\u003e 0 persons found */"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + CCA.getDateTime().toString();"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find address of activity in address book -\u003e 0 persons found */"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + CCA.getRemark().value;"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find tags of activity in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"//        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(CCA.getTags());"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find while a activity is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"//        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"//        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(CCA.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, CCA);"},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":144,"author":{"gitID":"Kyomian"},"content":"//        /* Case: find activity in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":"//        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"Kyomian"},"content":"//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"Kyomian"},"content":"//        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"Kyomian"},"content":"//        ModelHelper.setFilteredList(expectedModel, CCA);"},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":152,"author":{"gitID":"Kyomian"},"content":"//        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"//        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"//     * box displays {@code Messages#MESSAGE_ACTIVITY_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":"//     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"//     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"//     * {@code RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":"//     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"//     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"//     * @see RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"//        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"//                MESSAGE_ACTIVITY_LISTED_OVERVIEW, expectedModel.getFilteredActivityList().size());"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":"//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"Kyomian"},"content":"//        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":176,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":177,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":178,"author":{"gitID":"Kyomian"},"content":"//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"Kyomian"},"content":"//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"Kyomian"},"content":"//     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"Kyomian"},"content":"//     * {@code RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"Kyomian"},"content":"//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"Kyomian"},"content":"//     * error style."},{"lineNumber":184,"author":{"gitID":"Kyomian"},"content":"//     * @see RemarkBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":186,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":189,"author":{"gitID":"Kyomian"},"content":"//        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"Kyomian"},"content":"//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"Kyomian"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"Kyomian"},"content":"//        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":195,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":195}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyDeskBoard\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":71}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"public class ClearCommandSystemTest extends DeskBoardSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: selects first card in activity list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: filters the activity list before clearing -\u003e entire address book cleared */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"     * {@code DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"     * @see DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"     * {@code DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"     * @see DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":13,"-":91}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"public class ErrorDialogGuiTest extends DeskBoardSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":6,"-":31}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    private static final Predicate\u003cActivity\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public static void setFilteredList(Model model, List\u003cActivity\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"        Optional\u003cPredicate\u003cActivity\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    public static void setFilteredList(Model model, Activity... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"     * Returns a predicate that evaluates to true if this {@code Activity} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    private static Predicate\u003cActivity\u003e getPredicateMatching(Activity other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":8,"-":31}},{"path":"src/test/java/seedu/address/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":" * A GUI unit test class for DeskBoard."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":37}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_ACTIVITY_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalActivities;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"public class SelectCommandSystemTest extends DeskBoardSystemTest {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: select the first card in the activity list, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased() + \"   \";"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(command, INDEX_FIRST_ACTIVITY);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: select the last card in the activity list -\u003e selected */"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalActivities().size());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: select the middle card in the activity list -\u003e selected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: filtered activity list, select index within bounds of address book but out of bounds of activity list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"        int invalidIndex \u003d getModel().getDeskBoard().getActivityList().size();"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        /* Case: filtered activity list, select index within bounds of address book and activity list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredActivityList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        invalidIndex \u003d getModel().getFilteredActivityList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"                MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":93,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased(),"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"                MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"     * {@code expectedSelectedCardIndex} of the selected activity.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":"     * 4. {@code Model}, {@code Storage} and {@code ActivityListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"     * {@code DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"     * @see DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"     * @see DeskBoardSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"                MESSAGE_SELECT_ACTIVITY_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"     * 4. {@code Model}, {@code Storage} and {@code ActivityListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":"     * {@code DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":"     * @see DeskBoardSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":34,"-":121,"Kyomian":2}},{"path":"src/test/java/seedu/address/ui/ActivityListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"//package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalActivities.getTypicalActivitiess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"//import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"//import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"//import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"//import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.activity.Activity;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"//public class ActivityListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//    private static final ObservableList\u003cActivity\u003e TYPICAL_ACTIVITIES \u003d"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"//            FXCollections.observableList(getTypicalActivitiess());"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"//    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"//            new JumpToListRequestEvent(INDEX_SECOND_ACTIVITY);"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"//    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"//    @Before"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"//    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"//        ActivityListPanel activityListPanel \u003d new ActivityListPanel(TYPICAL_ACTIVITIES);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"//        uiPartRule.setUiPart(activityListPanel);"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"//        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(activityListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"//                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"//    public void display() {"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"//        for (int i \u003d 0; i \u003c TYPICAL_ACTIVITIES.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"//            personListPanelHandle.navigateToCard(TYPICAL_ACTIVITIES.get(i));"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"//            Activity expectedActivity \u003d TYPICAL_ACTIVITIES.get(i);"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"//            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"//            assertCardDisplaysPerson(expectedActivity, actualCard);"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"//            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"//        }"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"//    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"//        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"//        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_ACTIVITY"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"//                .getZeroBased());"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"//        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"//        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"//}"}],"authorContributionMap":{"YuanQLLer":60}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"//package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"//public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"//    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"//    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"//    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"//    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"//    @Before"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"//    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"//        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"//        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"//        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"//                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"//        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"//        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"//        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"//        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"//    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"//    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"//        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"//        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"//    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"//    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"//        // empty history"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"//        // one command"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"//        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"//        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"//        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"//    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"//        // empty history"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":"//        // one command"},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"//        // two commands"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"//        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"//        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"//        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":"//    /**"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"//     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"//     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":"//     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"//     */"},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"//    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":"//    /**"},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":"//     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"//     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"//     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"//     */"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"//    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":"//        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":"//    /**"},{"lineNumber":151,"author":{"gitID":"YuanQLLer"},"content":"//     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"//     */"},{"lineNumber":153,"author":{"gitID":"YuanQLLer"},"content":"//    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":157,"author":{"gitID":"YuanQLLer"},"content":"//}"}],"authorContributionMap":{"YuanQLLer":157}},{"path":"src/test/java/seedu/address/ui/testutil/TaskListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"public class TaskListPanelTest {"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"jasmoon":4}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedActivity}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    public static void assertCardDisplaysPerson(Activity expectedActivity, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedActivity.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedActivity.getDateTime().toString(), actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedActivity.getRemark().value, actualCard.getAddress());"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedActivity.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code activities} correctly and"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Activity... activities) {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        for (int i \u003d 0; i \u003c activities.length; i++) {"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"            assertCardDisplaysPerson(activities[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code activities} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cActivity\u003e activities) {"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        assertListMatching(personListPanelHandle, activities.toArray(new Activity[0]));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":14,"-":58}},{"path":"src/test/java/seedu/address/ui/UiPartTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class UiPartTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        //assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return testFileUrl;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * UiPart used for testing."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @FXML"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":7,"-":114}},{"path":"src/test/java/seedu/address/ui/ActivityCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public class ActivityCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public void display() {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"        // no tags"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        ActivityCard activityCard \u003d new ActivityCard(activityWithNoTags, 1);"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"        uiPartRule.setUiPart(activityCard);"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"        assertCardDisplay(activityCard, activityWithNoTags, 1);"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        // with tags"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityWithTags \u003d new TaskBuilder().build();"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        activityCard \u003d new ActivityCard(activityWithTags, 2);"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        uiPartRule.setUiPart(activityCard);"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        assertCardDisplay(activityCard, activityWithTags, 2);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        Activity activity \u003d new TaskBuilder().build();"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        ActivityCard activityCard \u003d new ActivityCard(activity, 0);"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        // same activity, same index -\u003e returns true"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        ActivityCard copy \u003d new ActivityCard(activity, 0);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(activityCard.equals(copy));"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(activityCard.equals(activityCard));"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(activityCard.equals(null));"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(activityCard.equals(0));"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        // different activity, same index -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        Activity differentActivity \u003d new TaskBuilder().withName(\"differentName\").build();"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(activityCard.equals(new ActivityCard(differentActivity, 0)));"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        // same activity, different index -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(activityCard.equals(new ActivityCard(activity, 1)));"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that {@code activityCard} displays the details of {@code expectedActivity} correctly and matches"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"     * {@code expectedId}."},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    private void assertCardDisplay(ActivityCard activityCard, Activity expectedActivity, int expectedId) {"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(activityCard.getRoot());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        // verify activity details are displayed correctly"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"        assertCardDisplaysPerson(expectedActivity, personCardHandle);"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":61,"-":14}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"//package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalActivities.ASSIGNMENT1;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"//import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.commons.events.ui.ActivityPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"//public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"//    private ActivityPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"//    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"//    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"//    @Before"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"//    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"//        selectionChangedEventStub \u003d new ActivityPanelSelectionChangedEvent("},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"//                new ActivityCard(ASSIGNMENT1, 0));"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"//        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"//        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"//        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"//    public void display() throws Exception {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"//        // default web page"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"//        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"//        // associated web page of a activity"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"//        postNow(selectionChangedEventStub);"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"//        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ASSIGNMENT1.getName().fullName"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"//                .replaceAll(\" \", \"%20\"));"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"//        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"//        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"//}"}],"authorContributionMap":{"YuanQLLer":50}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"    private static final String[] CSS_FILES \u003d {\"view/CLIndarStyler.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":28,"jasmoon":1}},{"path":"src/test/java/systemtests/DeskBoardSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TypicalActivities;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":" * A system test class for DeskBoard, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"public abstract class DeskBoardSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    protected DeskBoard getInitialData() {"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"        return TypicalActivities.getTypicalDeskBoard();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(getModel().getDeskBoard().getActivityList().size(), getModel().getFilteredActivityList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(getModel().getFilteredActivityList().size() \u003c getModel().getDeskBoard().getActivityList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"     * Selects the activity at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(0, getModel().getDeskBoard().getActivityList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"YuanQLLer"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same activity objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"YuanQLLer"},"content":"     * and the activity list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedModel.getDeskBoard(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredActivityList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"YuanQLLer"},"content":"     * of the previously selected activity."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the activity in the activity list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that the browser\u0027s url and the selected card in the activity list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"YuanQLLer"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredActivityList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":18,"-":275}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"        String defaultConfigAsString \u003d \"App title : CLIndar\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"jasmoon":1}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private static final DeskBoardChangedEvent EVENT_STUB \u003d new DeskBoardChangedEvent(new DeskBoard());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":72}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.XmlSerializableDeskBoard;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    protected Supplier\u003cReadOnlyDeskBoard\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    public TestApp(Supplier\u003cReadOnlyDeskBoard\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"            createDataFileWithData(new XmlSerializableDeskBoard(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        userPrefs.setDeskBoardFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"        userPrefs.setDeskBoardName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoard readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"            return new DeskBoard(storage.readDeskBoard().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"Data is not in the DeskBoard format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        return storage.getDeskBoardFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"        Model copy \u003d new ModelManager((model.getDeskBoard()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredActivityList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":15,"-":108}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"        assertNotNull(AppUtil.getImage(\"/images/calendar_32.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":46}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.storage.XmlAdaptedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.storage.XmlAdaptedTask;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.XmlSerializableDeskBoard;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.DeskBoardBuilder;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":" * Tests {@code XmlUtil} read and save methods"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"public class XmlUtilTest {"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validDeskBoard.xml\");"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    private static final File MISSING_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingTaskField.xml\");"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"    private static final File INVALID_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskField.xml\");"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"    private static final File VALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"validTask.xml\");"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    private static final File MISSING_EVENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingEventField.xml\");"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"    private static final File INVALID_EVENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidEventField.xml\");"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"    private static final File VALID_EVENT_FILE \u003d new File(TEST_DATA_FOLDER + \"validEvent.xml\");"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempDeskBoard.xml\"));"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_DATE_TIME \u003d \"9482asf424\";"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_LOCATION \u003d \" michegan ave\";"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_TASK_NAME \u003d \"Hans Muster\";"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_TASK_DUE_DATE_TIME \u003d \"9482424\";"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_TASK_REMARK \u003d \"4th street\";"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TASK_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_EVENT_NAME \u003d \"CIP\";"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_EVENT_START_DATE_TIME \u003d \"02/04/2018 08:00\";"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_EVENT_END_DATE_TIME \u003d \"02/04/2018 12:00\";"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_EVENT_LOCATION \u003d \"michegan ave\";"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_EVENT_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"CIP\"));"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"    @Rule"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.getDataFromFile(null, DeskBoard.class);"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, DeskBoard.class);"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, DeskBoard.class);"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"    //TODO: TEST"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"    //@Test"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoard dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableDeskBoard.class).toModelType();"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(7, dataFromFile.getActivityList().size());"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(3, dataFromFile.getTagList().size());"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":"                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"                null, VALID_TASK_DUE_DATE_TIME, VALID_TASK_REMARK, VALID_TASK_TAGS);"},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"},{"lineNumber":105,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"                VALID_TASK_NAME, INVALID_DATE_TIME, VALID_TASK_REMARK, VALID_TASK_TAGS);"},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedTaskFromFile_fileWithValidTask_validResult() throws Exception {"},{"lineNumber":114,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":115,"author":{"gitID":"karenfrilya97"},"content":"                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":116,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":"                VALID_TASK_NAME, VALID_TASK_DUE_DATE_TIME, VALID_TASK_REMARK, VALID_TASK_TAGS);"},{"lineNumber":118,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":119,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":121,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedEventFromFile_fileWithMissingEventField_validResult() throws Exception {"},{"lineNumber":123,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("},{"lineNumber":124,"author":{"gitID":"karenfrilya97"},"content":"                MISSING_EVENT_FIELD_FILE, XmlAdaptedEventWithRootElement.class);"},{"lineNumber":125,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_START_DATE_TIME,"},{"lineNumber":126,"author":{"gitID":"karenfrilya97"},"content":"                null, VALID_EVENT_LOCATION, null, VALID_EVENT_TAGS);"},{"lineNumber":127,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedEvent, actualEvent);"},{"lineNumber":128,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":130,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedEventFromFile_fileWithInvalidEventField_validResult() throws Exception {"},{"lineNumber":132,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("},{"lineNumber":133,"author":{"gitID":"karenfrilya97"},"content":"                INVALID_EVENT_FIELD_FILE, XmlAdaptedEventWithRootElement.class);"},{"lineNumber":134,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_START_DATE_TIME,"},{"lineNumber":135,"author":{"gitID":"karenfrilya97"},"content":"                VALID_EVENT_END_DATE_TIME, INVALID_LOCATION, null, VALID_EVENT_TAGS);"},{"lineNumber":136,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedEvent, actualEvent);"},{"lineNumber":137,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":139,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"karenfrilya97"},"content":"    public void xmlAdaptedEventFromFile_fileWithValidEvent_validResult() throws Exception {"},{"lineNumber":141,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent actualEvent \u003d XmlUtil.getDataFromFile("},{"lineNumber":142,"author":{"gitID":"karenfrilya97"},"content":"                VALID_EVENT_FILE, XmlAdaptedEventWithRootElement.class);"},{"lineNumber":143,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent expectedEvent \u003d new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_START_DATE_TIME,"},{"lineNumber":144,"author":{"gitID":"karenfrilya97"},"content":"                VALID_EVENT_END_DATE_TIME, VALID_EVENT_LOCATION, null, VALID_EVENT_TAGS);"},{"lineNumber":145,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(expectedEvent, actualEvent);"},{"lineNumber":146,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":148,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":150,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":151,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.saveDataToFile(null, new DeskBoard());"},{"lineNumber":152,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":154,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":156,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":157,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":158,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":160,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":162,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":163,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new DeskBoard());"},{"lineNumber":164,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":166,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":168,"author":{"gitID":"karenfrilya97"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":169,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard dataToWrite \u003d new XmlSerializableDeskBoard(new DeskBoard());"},{"lineNumber":170,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":171,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableDeskBoard.class);"},{"lineNumber":172,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":173,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":174,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoardBuilder builder \u003d new DeskBoardBuilder(new DeskBoard());"},{"lineNumber":175,"author":{"gitID":"karenfrilya97"},"content":"        dataToWrite \u003d new XmlSerializableDeskBoard("},{"lineNumber":176,"author":{"gitID":"karenfrilya97"},"content":"                builder.withActivity(new TaskBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":177,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":178,"author":{"gitID":"karenfrilya97"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":179,"author":{"gitID":"karenfrilya97"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableDeskBoard.class);"},{"lineNumber":180,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":181,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":183,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"karenfrilya97"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data"},{"lineNumber":185,"author":{"gitID":"karenfrilya97"},"content":"     * to {@code XmlAdaptedTask} objects."},{"lineNumber":186,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"karenfrilya97"},"content":"    @XmlRootElement(name \u003d \"task\")"},{"lineNumber":188,"author":{"gitID":"karenfrilya97"},"content":"    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {}"},{"lineNumber":189,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":190,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"karenfrilya97"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data"},{"lineNumber":192,"author":{"gitID":"karenfrilya97"},"content":"     * to {@code XmlAdaptedEvent} objects."},{"lineNumber":193,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"karenfrilya97"},"content":"    @XmlRootElement(name \u003d \"event\")"},{"lineNumber":195,"author":{"gitID":"karenfrilya97"},"content":"    private static class XmlAdaptedEventWithRootElement extends XmlAdaptedEvent {}"},{"lineNumber":196,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"YuanQLLer":4,"karenfrilya97":173,"-":19}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"//    @Rule"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"//    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"//    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"//    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"//    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//        assertCommandException(deleteCommand, MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"//    public void getFilteredActivitiesList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"//        logic.getFilteredActivitiesList().remove(0);"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"//     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"//     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"//        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"//        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"//     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"//     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"//     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"//     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"//    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"//                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"//        try {"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"//            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"//            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"//            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"//        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"//            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"//            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"//     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"//     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"//    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"//        try {"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"//            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"//            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"//                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"//            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"//        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"//            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":122,"jasmoon":2}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":" * Test scope: similar to {@code RemoveCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":" * @see RemoveCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_ACTIVITY));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":25,"Kyomian":2}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"//package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MA2108_HOMEWORK;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_CS2010_QUIZ;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MA2108_HOMEWORK;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_CS2010_QUIZ;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MA2108_HOMEWORK;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_MA2108_HOMEWORK;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_CS2010_QUIZ;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_MA2108_HOMEWORK;"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_CS2010_QUIZ;"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MA2108_HOMEWORK;"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_MA2108_HOMEWORK;"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CS2010_QUIZ;"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2010;"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA2108;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ACTIVITY;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.logic.commands.EditCommand;"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.logic.commands.EditCommand.EditActivityDescriptor;"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.activity.DateTime;"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.activity.Name;"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.activity.Remark;"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"//import seedu.address.testutil.EditActivityDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"//public class EditCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"//    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"//    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_missingParts_failure() {"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"//        // no index specified"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, VALID_NAME_MA2108_HOMEWORK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"//        // no field specified"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"//        // no index and no field specified"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_invalidPreamble_failure() {"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"//        // negative index"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, \"-5\" + NAME_DESC_MA2108_HOMEWORK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"//        // zero index"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, \"0\" + NAME_DESC_MA2108_HOMEWORK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"//        // invalid arguments being parsed as preamble"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"//        // invalid prefix being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_invalidValue_failure() {"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, DateTime.MESSAGE_DATETIME_CONSTRAINTS); // invalid phone"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Remark.MESSAGE_REMARK_CONSTRAINTS); // invalid address"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"//        // invalid phone followed by valid email"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_MA2108_HOMEWORK, DateTime"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"//                .MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, \"1\" + DATE_TIME_DESC_CS2010_QUIZ + INVALID_PHONE_DESC,"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"//                DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Activity} being edited,"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"//        // parsing it together with a valid tag results in error"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"//        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":"//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_REMARKS_MA2108_HOMEWORK"},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":"//                + VALID_DATE_TIME_MA2108_HOMEWORK,"},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"//                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_allFieldsSpecified_success() {"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_SECOND_ACTIVITY;"},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"//        String userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_CS2010_QUIZ + TAG_DESC_HUSBAND"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":"//                + EMAIL_DESC_MA2108_HOMEWORK + ADDRESS_DESC_MA2108_HOMEWORK + NAME_DESC_MA2108_HOMEWORK"},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":"//                + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":114,"author":{"gitID":"karenfrilya97"},"content":"//        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_MA2108_HOMEWORK)"},{"lineNumber":115,"author":{"gitID":"karenfrilya97"},"content":"//                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).withAddress(VALID_REMARKS_MA2108_HOMEWORK)"},{"lineNumber":116,"author":{"gitID":"karenfrilya97"},"content":"//                .withTags(VALID_TAG_MA2108, VALID_TAG_CS2010).build();"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"},{"lineNumber":125,"author":{"gitID":"karenfrilya97"},"content":"//        String userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_CS2010_QUIZ + EMAIL_DESC_MA2108_HOMEWORK;"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":127,"author":{"gitID":"karenfrilya97"},"content":"//        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":128,"author":{"gitID":"karenfrilya97"},"content":"//                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).build();"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"//        // name"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_THIRD_ACTIVITY;"},{"lineNumber":138,"author":{"gitID":"karenfrilya97"},"content":"//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_MA2108_HOMEWORK;"},{"lineNumber":139,"author":{"gitID":"karenfrilya97"},"content":"//        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":140,"author":{"gitID":"karenfrilya97"},"content":"//                .withName(VALID_NAME_MA2108_HOMEWORK).build();"},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"//        // phone"},{"lineNumber":145,"author":{"gitID":"karenfrilya97"},"content":"//        userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_MA2108_HOMEWORK;"},{"lineNumber":146,"author":{"gitID":"karenfrilya97"},"content":"//        descriptor \u003d new EditActivityDescriptorBuilder().withPhone(VALID_DATE_TIME_MA2108_HOMEWORK).build();"},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":"//        // email"},{"lineNumber":151,"author":{"gitID":"karenfrilya97"},"content":"//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MA2108_HOMEWORK;"},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"//        descriptor \u003d new EditActivityDescriptorBuilder().build();"},{"lineNumber":153,"author":{"gitID":"YuanQLLer"},"content":"//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"//        // address"},{"lineNumber":157,"author":{"gitID":"karenfrilya97"},"content":"//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_MA2108_HOMEWORK;"},{"lineNumber":158,"author":{"gitID":"karenfrilya97"},"content":"//        descriptor \u003d new EditActivityDescriptorBuilder().withAddress(VALID_REMARKS_MA2108_HOMEWORK).build();"},{"lineNumber":159,"author":{"gitID":"YuanQLLer"},"content":"//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":162,"author":{"gitID":"YuanQLLer"},"content":"//        // tags"},{"lineNumber":163,"author":{"gitID":"YuanQLLer"},"content":"//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":164,"author":{"gitID":"karenfrilya97"},"content":"//        descriptor \u003d new EditActivityDescriptorBuilder().withTags(VALID_TAG_CS2010).build();"},{"lineNumber":165,"author":{"gitID":"YuanQLLer"},"content":"//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":168,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":169,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":170,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"},{"lineNumber":172,"author":{"gitID":"karenfrilya97"},"content":"//        String userInput \u003d targetIndex.getOneBased()  + DATE_TIME_DESC_MA2108_HOMEWORK"},{"lineNumber":173,"author":{"gitID":"karenfrilya97"},"content":"//                + ADDRESS_DESC_MA2108_HOMEWORK + EMAIL_DESC_MA2108_HOMEWORK + TAG_DESC_FRIEND"},{"lineNumber":174,"author":{"gitID":"karenfrilya97"},"content":"//                + DATE_TIME_DESC_MA2108_HOMEWORK + ADDRESS_DESC_MA2108_HOMEWORK + EMAIL_DESC_MA2108_HOMEWORK"},{"lineNumber":175,"author":{"gitID":"karenfrilya97"},"content":"//                + TAG_DESC_FRIEND + DATE_TIME_DESC_CS2010_QUIZ + ADDRESS_DESC_CS2010_QUIZ"},{"lineNumber":176,"author":{"gitID":"karenfrilya97"},"content":"//                + EMAIL_DESC_CS2010_QUIZ + TAG_DESC_HUSBAND;"},{"lineNumber":177,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":178,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":179,"author":{"gitID":"karenfrilya97"},"content":"//                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).withAddress(VALID_REMARK_CS2010_QUIZ)"},{"lineNumber":180,"author":{"gitID":"karenfrilya97"},"content":"//                .withTags(VALID_TAG_CS2010, VALID_TAG_MA2108).build();"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":183,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":185,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":186,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":187,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitID":"YuanQLLer"},"content":"//        // no other valid values specified"},{"lineNumber":189,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"},{"lineNumber":190,"author":{"gitID":"karenfrilya97"},"content":"//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + DATE_TIME_DESC_CS2010_QUIZ;"},{"lineNumber":191,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand.EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":192,"author":{"gitID":"karenfrilya97"},"content":"//                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).build();"},{"lineNumber":193,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":194,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":196,"author":{"gitID":"YuanQLLer"},"content":"//        // other valid values specified"},{"lineNumber":197,"author":{"gitID":"karenfrilya97"},"content":"//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_CS2010_QUIZ + INVALID_PHONE_DESC + ADDRESS_DESC_CS2010_QUIZ"},{"lineNumber":198,"author":{"gitID":"karenfrilya97"},"content":"//                + DATE_TIME_DESC_CS2010_QUIZ;"},{"lineNumber":199,"author":{"gitID":"karenfrilya97"},"content":"//        descriptor \u003d new EditActivityDescriptorBuilder().withPhone(VALID_DATE_TIME_CS2010_QUIZ)"},{"lineNumber":200,"author":{"gitID":"karenfrilya97"},"content":"//                .withAddress(VALID_REMARK_CS2010_QUIZ).build();"},{"lineNumber":201,"author":{"gitID":"YuanQLLer"},"content":"//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":202,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":203,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":204,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":205,"author":{"gitID":"YuanQLLer"},"content":"//    @Test"},{"lineNumber":206,"author":{"gitID":"YuanQLLer"},"content":"//    public void parse_resetTags_success() {"},{"lineNumber":207,"author":{"gitID":"YuanQLLer"},"content":"//        Index targetIndex \u003d INDEX_THIRD_ACTIVITY;"},{"lineNumber":208,"author":{"gitID":"YuanQLLer"},"content":"//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":209,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":210,"author":{"gitID":"YuanQLLer"},"content":"//        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withTags().build();"},{"lineNumber":211,"author":{"gitID":"YuanQLLer"},"content":"//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"YuanQLLer"},"content":"//"},{"lineNumber":213,"author":{"gitID":"YuanQLLer"},"content":"//        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":214,"author":{"gitID":"YuanQLLer"},"content":"//    }"},{"lineNumber":215,"author":{"gitID":"YuanQLLer"},"content":"//}"}],"authorContributionMap":{"YuanQLLer":161,"karenfrilya97":54}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/ListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"public class ListCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"        assertParseFailure(parser, \"hello\","},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"                String.format(Messages.MESSAGE_INVALID_LIST_REQUEST, \"hello\"));"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":1,"jasmoon":18}},{"path":"src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"public class RemoveCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"    private RemoveCommandParser parser \u003d new RemoveCommandParser();"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, \"task 1\", new RemoveCommand(\"task\", INDEX_FIRST_ACTIVITY));"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"        // Invalid activity option"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, \"invalidOption 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"                .MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"        // Only one argument"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, \"task\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"                .MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":8,"Kyomian":24}},{"path":"src/test/java/seedu/address/logic/parser/DeskBoardParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.EventCommand;"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"import seedu.address.testutil.EventUtil;"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"import seedu.address.testutil.TaskUtil;"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"public class DeskBoardParserTest {"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    private final DeskBoardParser parser \u003d new DeskBoardParser();"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    public void parseCommand_task() throws Exception {"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"        TaskCommand command \u003d (TaskCommand) parser.parseCommand(TaskUtil.getTaskCommand(task));"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        assertEquals(new TaskCommand(task), command);"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"    public void parseCommand_event() throws Exception {"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"        EventCommand command \u003d (EventCommand) parser.parseCommand(EventUtil.getEventCommand(event));"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"        assertTrue(command instanceof EventCommand);"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"    public void parseCommandPlusAlias_clear() throws Exception {"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"   /* @Test"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"    public void parseCommand_remove() throws Exception {"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"        RemoveCommand command \u003d (RemoveCommand) parser.parseCommand("},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"                RemoveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ACTIVITY.getOneBased());"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"        assertEquals(new RemoveCommand(\"task\", INDEX_FIRST_ACTIVITY), command);"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"    }*/"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_edit() throws Exception {"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"//        Person person \u003d new PersonBuilder().build();"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":72,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_exit() throws Exception {"},{"lineNumber":74,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_find() throws Exception {"},{"lineNumber":80,"author":{"gitID":"jasmoon"},"content":"//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":"//        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":82,"author":{"gitID":"jasmoon"},"content":"//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":"//        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":86,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":87,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":88,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"jasmoon"},"content":"    public void parseCommandPlusAlias_help() throws Exception {"},{"lineNumber":90,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" task\") instanceof HelpCommand);"},{"lineNumber":92,"author":{"gitID":"jasmoon"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"jasmoon"},"content":"            parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":94,"author":{"gitID":"jasmoon"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":95,"author":{"gitID":"jasmoon"},"content":"        } catch (ParseException pe) {"},{"lineNumber":96,"author":{"gitID":"jasmoon"},"content":"            assertEquals(String.format(Messages.MESSAGE_INVALID_HELP_REQUEST, \"3\"), pe.getMessage());"},{"lineNumber":97,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":100,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":101,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_history() throws Exception {"},{"lineNumber":102,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":"//        try {"},{"lineNumber":106,"author":{"gitID":"jasmoon"},"content":"//            parser.parseCommand(\"histories\");"},{"lineNumber":107,"author":{"gitID":"jasmoon"},"content":"//            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":108,"author":{"gitID":"jasmoon"},"content":"//        } catch (ParseException pe) {"},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":"//            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"//        }"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":112,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":113,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"    public void parseCommandPlusAlias_list() throws Exception {"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":117,"author":{"gitID":"jasmoon"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" task\") instanceof ListCommand);"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_select() throws Exception {"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"//        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":"//                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"//        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":133,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"//    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":135,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":136,"author":{"gitID":"jasmoon"},"content":"//        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":137,"author":{"gitID":"jasmoon"},"content":"//    }"},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":"//"},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":141,"author":{"gitID":"jasmoon"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":142,"author":{"gitID":"jasmoon"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"jasmoon"},"content":"        parser.parseCommand(\" \");"},{"lineNumber":144,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":146,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"jasmoon"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":148,"author":{"gitID":"jasmoon"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":149,"author":{"gitID":"jasmoon"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":150,"author":{"gitID":"jasmoon"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":151,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":7,"Kyomian":22,"jasmoon":123}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.activity.DateTime;"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.activity.Name;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.activity.Remark;"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//public class ParserUtilTest {"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//    @Rule"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(IllegalValueException.class);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//        // No whitespaces"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(INDEX_FIRST_ACTIVITY, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//        // Leading and trailing whitespaces"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(INDEX_FIRST_ACTIVITY, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"//    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"//        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"//        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"//    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"//    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"//    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"//        DateTime expectedDateTime \u003d new DateTime(VALID_PHONE);"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedDateTime, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedDateTime), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":"//        DateTime expectedDateTime \u003d new DateTime(VALID_PHONE);"},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedDateTime, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedDateTime), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"//    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":143,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":144,"author":{"gitID":"Kyomian"},"content":"//    //TODO: TEST"},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":146,"author":{"gitID":"Kyomian"},"content":"//     * Test"},{"lineNumber":147,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":148,"author":{"gitID":"Kyomian"},"content":"//    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":150,"author":{"gitID":"Kyomian"},"content":"//        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":152,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"//    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":155,"author":{"gitID":"Kyomian"},"content":"//        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":"//        Remark expectedRemark \u003d new Remark(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedRemark, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedRemark), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"//        Remark expectedRemark \u003d new Remark(VALID_ADDRESS);"},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedRemark, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(Optional.of(expectedRemark), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":174,"author":{"gitID":"Kyomian"},"content":"//    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":175,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(NullPointerException.class);"},{"lineNumber":176,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseTag(null);"},{"lineNumber":177,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":178,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":179,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":180,"author":{"gitID":"Kyomian"},"content":"//    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":181,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(IllegalValueException.class);"},{"lineNumber":182,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":183,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":184,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":185,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":186,"author":{"gitID":"Kyomian"},"content":"//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":187,"author":{"gitID":"Kyomian"},"content":"//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":188,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":189,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":190,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":191,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":192,"author":{"gitID":"Kyomian"},"content":"//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":193,"author":{"gitID":"Kyomian"},"content":"//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":194,"author":{"gitID":"Kyomian"},"content":"//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":195,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":196,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":197,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":198,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":199,"author":{"gitID":"Kyomian"},"content":"//    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":200,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(NullPointerException.class);"},{"lineNumber":201,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseTags(null);"},{"lineNumber":202,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":203,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":204,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":205,"author":{"gitID":"Kyomian"},"content":"//    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":206,"author":{"gitID":"Kyomian"},"content":"//        thrown.expect(IllegalValueException.class);"},{"lineNumber":207,"author":{"gitID":"Kyomian"},"content":"//        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":208,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":209,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":210,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":211,"author":{"gitID":"Kyomian"},"content":"//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":212,"author":{"gitID":"Kyomian"},"content":"//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":213,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":214,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":215,"author":{"gitID":"Kyomian"},"content":"//    @Test"},{"lineNumber":216,"author":{"gitID":"Kyomian"},"content":"//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":217,"author":{"gitID":"Kyomian"},"content":"//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":218,"author":{"gitID":"Kyomian"},"content":"//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":219,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":220,"author":{"gitID":"Kyomian"},"content":"//        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":221,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":222,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":222}},{"path":"src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"public class HelpCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"    private HelpCommandParser parser \u003d new HelpCommandParser();"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"        assertParseFailure(parser, \"a\", String.format(Messages.MESSAGE_INVALID_HELP_REQUEST, \"a\"));"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":1,"jasmoon":17}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"\u003d CLIndar - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B3/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"By: `CS2103JAN2018-W13-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"[[Introduction]]"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"CLIndar is a desktop application that helps university computing students to manage their tasks and events."},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"CLIndar is *Common-Line Interface (CLI) based and uses Linux-style commands*, which computing students are familiar with."},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"This guide provides information on the core functionalities of CLIndar and their implementation, so that a developer can"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"get started customising and contributing to the application."},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"Below is an overview of this guide:"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cSettingUp, Setting Up\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cDesign, Design\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cImplementation, Implementation\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cDocumentation, Documentation\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cTesting, Testing\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cDevOps, Dev Ops\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"* \u003c\u003cGetStartedProgramming, Appendices\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"[[SettingUp]]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"Follow the section below to set up the application on your computer."},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"The following must be installed in your computer before you can begin using the application:"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":". *IntelliJ* IDE"},{"lineNumber":54,"author":{"gitID":"-"},"content":"+"},{"lineNumber":55,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":57,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"Follow the following steps to set up the project."},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"*Step 1:* Fork this repo, and clone the fork to your computer."},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"To fork the repo, click the button circled below."},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"image::Origin Repo.png[width\u003d\"600\"]"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"Then open Git Bash. Change the current working directory to the location where you want the cloned directory to be made. And type the following:"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"\u003d"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"----"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"git clone https://github.com/YOUR-USERNAME/REPOSITORY.git"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"----"},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":"If the clone was successful, a new sub-directory appears on your local drive. This directory has the same name as the repository that you have cloned. The clone contains the files and metadata that Git requires to maintain the changes you make to the source files."},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":80,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":82,"author":{"gitID":"jasmoon"},"content":"The following should appear if `git clone https://github.com/YOUR-USERNAME/addressbook-level4.git` at C:/Users/temp folder is executed."},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"image::git clone.jpg[width\u003d\"600\"]"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"*Step 2:* Open IntelliJ. If you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first, as shown in the picture below."},{"lineNumber":88,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":89,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"image::Close Project.png[width\u003d\"600\"]"},{"lineNumber":92,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":93,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":94,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"*Step 3:* Set up the correct JDK version for Gradle."},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":"*Step 3a:* Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"image::Configure.png[Width\u003d\"400\"]"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":"*Step 3b:* Click `New...` and find the directory of the JDK."},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"*Step 4:* Click `Import Project`."},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":113,"author":{"gitID":"karenfrilya97"},"content":"*Step 5:* Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":118,"author":{"gitID":"karenfrilya97"},"content":"*Step 6:* Click `Open as Project`."},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":122,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":123,"author":{"gitID":"karenfrilya97"},"content":"*Step 7:* Click `OK` to accept the default settings."},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":127,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":128,"author":{"gitID":"karenfrilya97"},"content":"*Step 8:* Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":129,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"karenfrilya97"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":137,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"karenfrilya97"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":149,"author":{"gitID":"karenfrilya97"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":150,"author":{"gitID":"karenfrilya97"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"karenfrilya97"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":153,"author":{"gitID":"karenfrilya97"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W13-B3/main` repo. If you plan to develop this as a separate product, you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":174,"author":{"gitID":"karenfrilya97"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"karenfrilya97"},"content":"Follow the steps below when you are ready to start coding."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":181,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":182,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":183,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":184,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"Kyomian"},"content":"[[Design]]"},{"lineNumber":187,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":188,"author":{"gitID":"jasmoon"},"content":"This section describes the way the application is designed."},{"lineNumber":189,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":190,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":194,"author":{"gitID":"karenfrilya97"},"content":"*_Figure 1_* below explains the high-level design of the App."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":197,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"karenfrilya97"},"content":"Given below is a quick overview of each component."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"Kyomian"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"karenfrilya97"},"content":"* At app launch: initializing the components in the correct sequence and connecting them up with each other."},{"lineNumber":207,"author":{"gitID":"karenfrilya97"},"content":"* At shut down: shutting down the components and invoking cleanup method where necessary."},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"karenfrilya97"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":212,"author":{"gitID":"karenfrilya97"},"content":"* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"karenfrilya97"},"content":"The rest of the App consists of four components:"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"karenfrilya97"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: the UI of the App"},{"lineNumber":217,"author":{"gitID":"karenfrilya97"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: the command executor"},{"lineNumber":218,"author":{"gitID":"karenfrilya97"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: holds the data of the App in-memory"},{"lineNumber":219,"author":{"gitID":"karenfrilya97"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: reads data from, and writes data to, the hard disk"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"karenfrilya97"},"content":"Each of the four components:"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"karenfrilya97"},"content":"* defines its _API_ in an `interface` with the same name as the Component, and"},{"lineNumber":225,"author":{"gitID":"karenfrilya97"},"content":"* exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"Kyomian"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"Kyomian"},"content":".The API of the Logic Component"},{"lineNumber":230,"author":{"gitID":"Kyomian"},"content":"image::LogicAPI.png[width\u003d\"800\"]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"karenfrilya97"},"content":"*_Figure 3_* below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":240,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"karenfrilya97"},"content":"*_Figure 4_* below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":245,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"karenfrilya97"},"content":"*_Figure 5_* below shows the architecture diagram of the UI component."},{"lineNumber":256,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":258,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"YuanQLLer"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"jasmoon"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `EventListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"karenfrilya97"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"karenfrilya97"},"content":"The `UI` component"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"karenfrilya97"},"content":"* executes user commands using the `Logic` component,"},{"lineNumber":269,"author":{"gitID":"karenfrilya97"},"content":"* binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change, and"},{"lineNumber":270,"author":{"gitID":"karenfrilya97"},"content":"* responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"jasmoon"},"content":"*_Figure 6_* below shows the UML of the Logic component."},{"lineNumber":276,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":277,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":278,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":279,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":280,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":281,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":282,"author":{"gitID":"jasmoon"},"content":"*_Figure 7_* below shows finer details of the Logic component."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":288,"author":{"gitID":"YuanQLLer"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"Kyomian"},"content":".  `Logic` uses the `DeskBoardParser` class to parse the user command."},{"lineNumber":291,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":292,"author":{"gitID":"YuanQLLer"},"content":".  The command execution can affect the `Model` (e.g. adding a activity) and/or raise events."},{"lineNumber":293,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"Kyomian"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"rm task 1\")` API call."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"Kyomian"},"content":".Interactions Inside the Logic Component for the `rm task 1` Command"},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":302,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":303,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"YuanQLLer"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"karenfrilya97"},"content":"The `Model`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"karenfrilya97"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences,"},{"lineNumber":310,"author":{"gitID":"karenfrilya97"},"content":"* stores the Desk Board data,"},{"lineNumber":311,"author":{"gitID":"karenfrilya97"},"content":"* use two class to store information about \u0027Event\u0027 and \u0027Task\u0027 separately,"},{"lineNumber":312,"author":{"gitID":"karenfrilya97"},"content":"* exposes an unmodifiable `ObservableList\u003cActivity\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change, and"},{"lineNumber":313,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"karenfrilya97"},"content":"*_Figure 10_* below shows the structure of the Storage Component."},{"lineNumber":320,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"YuanQLLer"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"karenfrilya97"},"content":"The `Storage` component can save the following and read them back:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"karenfrilya97"},"content":"* `UserPref` objects in json format, and"},{"lineNumber":329,"author":{"gitID":"karenfrilya97"},"content":"* Desk Board data in xml format."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"YuanQLLer"},"content":"Classes used by multiple components are in the `seedu.address.commons` package."},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"Kyomian"},"content":"[[Implementation]]"},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":343,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"YuanQLLer"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the desk board (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"jasmoon"},"content":".Class Diagram of a Logic Command"},{"lineNumber":350,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"YuanQLLer"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the desk board before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":355,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":356,"author":{"gitID":"-"},"content":"----"},{"lineNumber":357,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":"}"},{"lineNumber":363,"author":{"gitID":"-"},"content":"----"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":366,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":367,"author":{"gitID":"-"},"content":"----"},{"lineNumber":368,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":371,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":"}"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":"}"},{"lineNumber":383,"author":{"gitID":"-"},"content":"----"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"YuanQLLer"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th activity in the desk board. The current state of the desk board is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"YuanQLLer"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new activity."},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":396,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"YuanQLLer"},"content":"The user now decides that adding the activity was a mistake, and decides to undo that action using `undo`."},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"YuanQLLer"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the desk board to the state before the `add` command executed."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"jasmoon"},"content":".\u0027Undo\u0027 stack pops into the \u0027Redo\u0027 Stack"},{"lineNumber":403,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":406,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"jasmoon"},"content":".\u0027Undo\u0027 and \u0027Redo\u0027 Stack Sequence Diagram"},{"lineNumber":411,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"YuanQLLer"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the desk board to the state after the command is executed)."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":416,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"jasmoon"},"content":".Adding \u0027ClearCommand\u0027 to the \u0027Undo\u0027 Stack"},{"lineNumber":421,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"jasmoon"},"content":".\u0027ListCommand\u0027 does not affect the \u0027Undo\u0027 Stack"},{"lineNumber":426,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"jasmoon"},"content":".Activity Diagram for \u0027Undo\u0027 and \u0027Redo\u0027"},{"lineNumber":431,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":439,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":440,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":441,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":442,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"YuanQLLer"},"content":"* **Alternative 1 (current choice):** Saves the entire desk board."},{"lineNumber":447,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":448,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":449,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":450,"author":{"gitID":"YuanQLLer"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the activity being deleted)."},{"lineNumber":451,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"YuanQLLer"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the desk board (`add`, `clear`, `edit`)."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":459,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":461,"author":{"gitID":"YuanQLLer"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the remark * book and not the view."},{"lineNumber":462,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":468,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":469,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":470,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":471,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":472,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":473,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":488,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":493,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":494,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":495,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d Task"},{"lineNumber":498,"author":{"gitID":"jasmoon"},"content":"Task refer to a piece of work to be done that can be added by a student user using the application. After being added, tasks can be edited and deleted. When a task is not completed within the deadline"},{"lineNumber":499,"author":{"gitID":"jasmoon"},"content":", it will be automatically be marked as overdue."},{"lineNumber":500,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"jasmoon"},"content":"*_Figure17_* below shows how `Task` is represented in the application."},{"lineNumber":504,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":505,"author":{"gitID":"jasmoon"},"content":".UML Diagram for Task"},{"lineNumber":506,"author":{"gitID":"jasmoon"},"content":"image::UML diagram for task.png[width\u003d\"450\"]"},{"lineNumber":507,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":508,"author":{"gitID":"jasmoon"},"content":"A brief description of each of the attributes of `Task`is given below:"},{"lineNumber":509,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":510,"author":{"gitID":"jasmoon"},"content":"* Name: Represents the name of the task"},{"lineNumber":511,"author":{"gitID":"jasmoon"},"content":"* DateTime: Represents the due date and time of the task."},{"lineNumber":512,"author":{"gitID":"jasmoon"},"content":"* Remark: Represents a short description or reminder pertaining to the task."},{"lineNumber":513,"author":{"gitID":"jasmoon"},"content":"* Tags: Groupings or representation for the task"},{"lineNumber":514,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":515,"author":{"gitID":"jasmoon"},"content":"Operation that manipulates the `task` object can been done using `task`, `complete`, `delete`, `edit` commands."},{"lineNumber":516,"author":{"gitID":"jasmoon"},"content":"These commands are described in more detail below."},{"lineNumber":517,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":518,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Task"},{"lineNumber":519,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":520,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Complete"},{"lineNumber":521,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":522,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Delete"},{"lineNumber":523,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":524,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Edit"},{"lineNumber":525,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":526,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Find"},{"lineNumber":527,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":528,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d\u003d Overdue"},{"lineNumber":529,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":530,"author":{"gitID":"Kyomian"},"content":"The user is able to list down overdue tasks by using the `overdue` command. Note that overdue only lists down overdue tasks; overdue events are marked as"},{"lineNumber":531,"author":{"gitID":"Kyomian"},"content":"completed automatically."},{"lineNumber":532,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":533,"author":{"gitID":"Kyomian"},"content":"We will be making use of the LocalDateTime class in Java. The class has a `now` method, which allows us to obtain the current system clock."},{"lineNumber":534,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":535,"author":{"gitID":"Kyomian"},"content":"There will be a class in the Model component, which has access to the UniqueActivityList class in that component. The class will go through the UniqueActivityList and obtain"},{"lineNumber":536,"author":{"gitID":"Kyomian"},"content":"the DateTime of Task, and the end DateTime of Event. It will then perform a check of the DateTime with `LocalDateTime.now()` and if it is overdue (for tasks), it will mark the task"},{"lineNumber":537,"author":{"gitID":"Kyomian"},"content":"as overdue, while if it is overdue (for Event), it will mark it as completed."},{"lineNumber":538,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":539,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"Kyomian"},"content":"* **Alternative 1**: Put the checking method together with UniqueActivityList class"},{"lineNumber":544,"author":{"gitID":"Kyomian"},"content":"** Pros: Less one class and it is easier for the developer to understand"},{"lineNumber":545,"author":{"gitID":"Kyomian"},"content":"** Cons: Violates Single Responsibility Principle (SRP). The UniqueAcitivtyList class should not perform the checking."},{"lineNumber":546,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":547,"author":{"gitID":"Kyomian"},"content":"* **Alternative 2**: Using Google Maps API to obtain current time"},{"lineNumber":548,"author":{"gitID":"Kyomian"},"content":"** Pros: `LocalDateTime.now()` is reliant on system clock, thus if the system clock is in error, tasks that are overdue will not be marked as"},{"lineNumber":549,"author":{"gitID":"Kyomian"},"content":"overdue correctly."},{"lineNumber":550,"author":{"gitID":"Kyomian"},"content":"** Cons: Reliant on Google Maps API, and might be difficult for the developer to understand."},{"lineNumber":551,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":552,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":553,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":558,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":559,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d Model"},{"lineNumber":563,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":564,"author":{"gitID":"YuanQLLer"},"content":"The `Model` component was originally implemented to store personal contact details."},{"lineNumber":565,"author":{"gitID":"karenfrilya97"},"content":"As we modified the application to `CLIndar` we need to store information of activities instead."},{"lineNumber":566,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":567,"author":{"gitID":"karenfrilya97"},"content":"The original application `Address Book` store information in the `Person` class."},{"lineNumber":568,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":569,"author":{"gitID":"karenfrilya97"},"content":"Since we now need to store information of events and tasks in the memory, the `Person` class needs to modified to store the record."},{"lineNumber":570,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":571,"author":{"gitID":"karenfrilya97"},"content":"The `UniquePersonList` needs to be modified to store list of `Task` and `Activity`."},{"lineNumber":572,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":573,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":574,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":575,"author":{"gitID":"YuanQLLer"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":576,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":577,"author":{"gitID":"YuanQLLer"},"content":"* ** Alternative 1 (Current Choice):**"},{"lineNumber":578,"author":{"gitID":"YuanQLLer"},"content":"Use the `Activity` Class as a place holder for events and tasks to be stored."},{"lineNumber":579,"author":{"gitID":"YuanQLLer"},"content":"Hence we created two new Class `Task` and `Event` to store the information."},{"lineNumber":580,"author":{"gitID":"YuanQLLer"},"content":"Both classes were iherited  from the `Activity` Class."},{"lineNumber":581,"author":{"gitID":"YuanQLLer"},"content":"** Pros:"},{"lineNumber":582,"author":{"gitID":"YuanQLLer"},"content":"No need to make major change to the current interface (except some renaming)."},{"lineNumber":583,"author":{"gitID":"YuanQLLer"},"content":"** Cons:"},{"lineNumber":584,"author":{"gitID":"YuanQLLer"},"content":"It would be a hassle to retrieve information about information stored in other class"},{"lineNumber":585,"author":{"gitID":"YuanQLLer"},"content":"Since `Task` and `Event` contains extra information and hence have extra excess method."},{"lineNumber":586,"author":{"gitID":"YuanQLLer"},"content":"Need to cast the object to retrieve the information."},{"lineNumber":587,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":588,"author":{"gitID":"YuanQLLer"},"content":"* **Alternative 2 :**"},{"lineNumber":589,"author":{"gitID":"YuanQLLer"},"content":"Replace the `Person` Class with two different class completely: `Task` and `Event`."},{"lineNumber":590,"author":{"gitID":"YuanQLLer"},"content":"Instead of only `UniquePersonList` Class, we create two different class `UniqueTaskList` and `UniqueEventList`."},{"lineNumber":591,"author":{"gitID":"YuanQLLer"},"content":"Relevant interface and access method will also be modified to cope with the change."},{"lineNumber":592,"author":{"gitID":"YuanQLLer"},"content":"** Pros:"},{"lineNumber":593,"author":{"gitID":"YuanQLLer"},"content":"Other component can easily distinguish two types of record."},{"lineNumber":594,"author":{"gitID":"YuanQLLer"},"content":"** Cons:"},{"lineNumber":595,"author":{"gitID":"YuanQLLer"},"content":"Since the interface is now completely changed, other component would now required to change a lot of coding to coped with the change."},{"lineNumber":596,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":597,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"YuanQLLer"},"content":"While either implementations has its pros and cons."},{"lineNumber":600,"author":{"gitID":"YuanQLLer"},"content":"For the purpose of having incremental modification. We choose Alternative 1."},{"lineNumber":601,"author":{"gitID":"YuanQLLer"},"content":"As such we can modified the implementation without modification to Interface, hence other component would be unaffected."},{"lineNumber":602,"author":{"gitID":"YuanQLLer"},"content":"This would allow us to have a working release every week."},{"lineNumber":603,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":604,"author":{"gitID":"YuanQLLer"},"content":"\u003d\u003d\u003d Storage"},{"lineNumber":605,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":606,"author":{"gitID":"karenfrilya97"},"content":"Our application deals with 2 main classes: Task and Event. Hence, when we store the data, we need to differentiate between these 2 classes. Our team came up with 2 possible implementations to store the data:"},{"lineNumber":607,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":608,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":609,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":610,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":611,"author":{"gitID":"karenfrilya97"},"content":"* **Alternative 1:** Use 1 list to store objects of both classes"},{"lineNumber":612,"author":{"gitID":"karenfrilya97"},"content":"** Pros: There is no need to create 2 separate lists to store the 2 different class objects."},{"lineNumber":613,"author":{"gitID":"karenfrilya97"},"content":"** Cons: Whenever we want to perform an operation on an object stored, we need to check its class."},{"lineNumber":614,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":615,"author":{"gitID":"karenfrilya97"},"content":"* **Alternative 2 (current choice):** Use 2 lists to store objects of the 2 classes separately"},{"lineNumber":616,"author":{"gitID":"karenfrilya97"},"content":"** Pros: When we want to perform an operation on all the objects stored in a list, each object can be treated equally as they are from the same class."},{"lineNumber":617,"author":{"gitID":"karenfrilya97"},"content":"** Cons: More effort is required to create 2 separate lists."},{"lineNumber":618,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":619,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":620,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":621,"author":{"gitID":"karenfrilya97"},"content":"While both alternatives have advantages and disadvantages, we feel that the second alternative\u0027s advantages outweigh its disadvantages in the long run. It is easier to maintain the 2 separate lists of objects, whereby each list contains objects of the same class, especially as we make the 2 classes more specialized. The inconvenience of creating 2 separate lists will be counterbalanced by the convenience in the long run."},{"lineNumber":622,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":623,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d UI"},{"lineNumber":626,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":627,"author":{"gitID":"jasmoon"},"content":"Our application deals with 2 main classes: Task and Event. These 2 classes needs to be"},{"lineNumber":628,"author":{"gitID":"jasmoon"},"content":"displayed in the UI and our team came up with 2 possible implementations to do it:"},{"lineNumber":629,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":630,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":631,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":632,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":633,"author":{"gitID":"jasmoon"},"content":"* **Alternative 1:** Have 1 panel which will display the 2 classes."},{"lineNumber":634,"author":{"gitID":"jasmoon"},"content":"** Pros: The coding required for this approach is much lesser."},{"lineNumber":635,"author":{"gitID":"jasmoon"},"content":"** Cons: The UI will be messier and less appealing."},{"lineNumber":636,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":637,"author":{"gitID":"jasmoon"},"content":"* ** Alternative 2 (current choice):** Have 2 panels which will display the 2 classes separately."},{"lineNumber":638,"author":{"gitID":"jasmoon"},"content":"** Pros: The backend coding will be neater as the 2 classes do not have the same number of compulsory information"},{"lineNumber":639,"author":{"gitID":"jasmoon"},"content":"tags. The design of the UI will be much more intuitive too."},{"lineNumber":640,"author":{"gitID":"jasmoon"},"content":"** Cons: More effort is required to create 2 seperate lists."},{"lineNumber":641,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":642,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":643,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":644,"author":{"gitID":"jasmoon"},"content":"While both alternatives have advantages and disadvantages, we feel that the second alternative adheres more closely with fundamental design principles. We feel that it is the responsibility of UI designers to make the"},{"lineNumber":645,"author":{"gitID":"jasmoon"},"content":"UI as intuitive as possible to bring convenience and comfort to the user. As such, the second alternative is"},{"lineNumber":646,"author":{"gitID":"jasmoon"},"content":"definitely the preferred approach here."},{"lineNumber":647,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":648,"author":{"gitID":"jasmoon"},"content":"{empty} +"},{"lineNumber":649,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":650,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":661,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":674,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":675,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":676,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":679,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":683,"author":{"gitID":"jasmoon"},"content":"This sections describes the different ways to do testing on the application."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":690,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":702,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":715,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":716,"author":{"gitID":"YuanQLLer"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":717,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":718,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":719,"author":{"gitID":"YuanQLLer"},"content":"e.g. `seedu.adress.commons.StringUtilTest`"},{"lineNumber":720,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":721,"author":{"gitID":"YuanQLLer"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":722,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":723,"author":{"gitID":"YuanQLLer"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":727,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":730,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"Kyomian"},"content":"[[DevOps]]"},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":734,"author":{"gitID":"jasmoon"},"content":"This sections features softwares which can be used to track the progress of the application development."},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":749,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"YuanQLLer"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":756,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":757,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":758,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":764,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":767,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":777,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":787,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"YuanQLLer"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all activities in the list."},{"lineNumber":790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":791,"author":{"gitID":"-"},"content":"****"},{"lineNumber":792,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":793,"author":{"gitID":"YuanQLLer"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":794,"author":{"gitID":"YuanQLLer"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":795,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":796,"author":{"gitID":"YuanQLLer"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":799,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":800,"author":{"gitID":"-"},"content":"****"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"YuanQLLer"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the desk board, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"YuanQLLer"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the desk board."},{"lineNumber":811,"author":{"gitID":"-"},"content":"+"},{"lineNumber":812,"author":{"gitID":"-"},"content":"****"},{"lineNumber":813,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":814,"author":{"gitID":"YuanQLLer"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":815,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":816,"author":{"gitID":"YuanQLLer"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a activity, and link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`] allows you to update the tags."},{"lineNumber":817,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":818,"author":{"gitID":"YuanQLLer"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each activity, and remove the `tag` from each activity."},{"lineNumber":819,"author":{"gitID":"YuanQLLer"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":821,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":822,"author":{"gitID":"YuanQLLer"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":823,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":824,"author":{"gitID":"-"},"content":"****"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"YuanQLLer"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your desk board application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last activity in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":832,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"YuanQLLer"},"content":". Use different colors for different tags inside activity cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":835,"author":{"gitID":"-"},"content":"+"},{"lineNumber":836,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":838,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":839,"author":{"gitID":"-"},"content":"+"},{"lineNumber":840,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":841,"author":{"gitID":"-"},"content":"+"},{"lineNumber":842,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":843,"author":{"gitID":"-"},"content":"+"},{"lineNumber":844,"author":{"gitID":"-"},"content":"****"},{"lineNumber":845,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":846,"author":{"gitID":"YuanQLLer"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":847,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":848,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":849,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":850,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":851,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":852,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":853,"author":{"gitID":"-"},"content":"****"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":856,"author":{"gitID":"-"},"content":"+"},{"lineNumber":857,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":859,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":864,"author":{"gitID":"-"},"content":"+"},{"lineNumber":865,"author":{"gitID":"-"},"content":"****"},{"lineNumber":866,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":867,"author":{"gitID":"YuanQLLer"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":868,"author":{"gitID":"YuanQLLer"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":869,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":870,"author":{"gitID":"YuanQLLer"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":871,"author":{"gitID":"YuanQLLer"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":872,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":873,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":874,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":875,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":876,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":877,"author":{"gitID":"-"},"content":"****"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"YuanQLLer"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the desk board."},{"lineNumber":880,"author":{"gitID":"-"},"content":"+"},{"lineNumber":881,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":882,"author":{"gitID":"-"},"content":"+"},{"lineNumber":883,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":884,"author":{"gitID":"-"},"content":"+"},{"lineNumber":885,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":886,"author":{"gitID":"-"},"content":"+"},{"lineNumber":887,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":888,"author":{"gitID":"-"},"content":"+"},{"lineNumber":889,"author":{"gitID":"-"},"content":"****"},{"lineNumber":890,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":892,"author":{"gitID":"YuanQLLer"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the desk board is updated."},{"lineNumber":893,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":894,"author":{"gitID":"YuanQLLer"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of activities when the application just started."},{"lineNumber":895,"author":{"gitID":"YuanQLLer"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of activities whenever there are new changes to the addressbook."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":897,"author":{"gitID":"YuanQLLer"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of activities status bar."},{"lineNumber":898,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":899,"author":{"gitID":"-"},"content":"****"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"YuanQLLer"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the desk board to the cloud. However, the current implementation of the application constantly saves the desk board after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the desk board storage."},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":907,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"YuanQLLer"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the desk board can be saved in a fixed temporary location."},{"lineNumber":910,"author":{"gitID":"-"},"content":"+"},{"lineNumber":911,"author":{"gitID":"-"},"content":"****"},{"lineNumber":912,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":913,"author":{"gitID":"YuanQLLer"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":914,"author":{"gitID":"YuanQLLer"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":915,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":916,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":917,"author":{"gitID":"-"},"content":"****"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":927,"author":{"gitID":"YuanQLLer"},"content":"Edits the remark for a activity specified in the `INDEX`. +"},{"lineNumber":928,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":933,"author":{"gitID":"YuanQLLer"},"content":"Edits the remark for the first activity to `Likes to drink coffee.`"},{"lineNumber":934,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":935,"author":{"gitID":"YuanQLLer"},"content":"Removes the remark for the first activity."},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":940,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"YuanQLLer"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":945,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":950,"author":{"gitID":"YuanQLLer"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":953,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":958,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":959,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":964,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":965,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":966,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":969,"author":{"gitID":"YuanQLLer"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each activity later."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":974,"author":{"gitID":"YuanQLLer"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":981,"author":{"gitID":"YuanQLLer"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"YuanQLLer"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/activity/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":986,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":993,"author":{"gitID":"YuanQLLer"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`]."},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"YuanQLLer"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`]."},{"lineNumber":998,"author":{"gitID":"YuanQLLer"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the activity will be created without a remark)."},{"lineNumber":999,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `deskBoard.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1002,"author":{"gitID":"YuanQLLer"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1013,"author":{"gitID":"YuanQLLer"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/activity/Person.java[`Person`]."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"YuanQLLer"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the activity that it is currently building."},{"lineNumber":1018,"author":{"gitID":"YuanQLLer"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1021,"author":{"gitID":"YuanQLLer"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"YuanQLLer"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"jasmoon"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysTask(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"YuanQLLer"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a activity."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"Kyomian"},"content":"*Target user*: University Computing students"},{"lineNumber":1050,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":1051,"author":{"gitID":"karenfrilya97"},"content":"*Target user profile*: Our target users are expected to have the following characteristics:"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"karenfrilya97"},"content":"* have a need to manage a significant number of tasks and events"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1056,"author":{"gitID":"karenfrilya97"},"content":"* prefer typing over mouse input"},{"lineNumber":1057,"author":{"gitID":"karenfrilya97"},"content":"* are reasonably comfortable using Linux-style commands and CLI apps"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"Kyomian"},"content":"*Value proposition*: The user will have all their tasks and events in one app."},{"lineNumber":1060,"author":{"gitID":"Kyomian"},"content":"This creates convenience for the user. The CLI also makes it"},{"lineNumber":1061,"author":{"gitID":"Kyomian"},"content":"faster than a typical mouse/GUI-driven app"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d Feature contribution"},{"lineNumber":1064,"author":{"gitID":"karenfrilya97"},"content":"The following section describes the major and minor enhancements that each of our members contributes to the development of our product."},{"lineNumber":1065,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1066,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d\u003d Jarrett"},{"lineNumber":1067,"author":{"gitID":"karenfrilya97"},"content":"*Major enhancement*: Creating \u0027overdue\u0027 command. This command shows a list of overdue tasks."},{"lineNumber":1068,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1069,"author":{"gitID":"karenfrilya97"},"content":"*Minor enhancement*: Creating \u0027task\u0027 and \u0027event\u0027 commands which add Task and Event objects respectively."},{"lineNumber":1070,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1071,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d\u003d Jasmund"},{"lineNumber":1072,"author":{"gitID":"karenfrilya97"},"content":"*Major enhancement*: Modifying the GUI to fit our task/event manager application. This includes but is not limited to allowing the UI to display 2 panes for showing the Task and Event lists separately."},{"lineNumber":1073,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1074,"author":{"gitID":"karenfrilya97"},"content":"*Minor enhancement*: Modifying the \u0027help\u0027 command. In our application, \u0027help\u0027 can be followed by a command word (e.g. \u0027help task\u0027) so that instructions for only the command desired are shown. Moreover, \u0027man\u0027 command -- an alias for \u0027help\u0027 -- is also added for users who are familiar with Linux commands."},{"lineNumber":1075,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1076,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d\u003d Karen"},{"lineNumber":1077,"author":{"gitID":"karenfrilya97"},"content":"*Major enhancement*: Modifying the Storage component to allow storage of Tasks and Events in an xml file."},{"lineNumber":1078,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1079,"author":{"gitID":"karenfrilya97"},"content":"*Minor enhancement*: Creating \u0027ls\u0027 command. This command shows the Event and Task objects added to the Desk Board in 2 separate lists."},{"lineNumber":1080,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1081,"author":{"gitID":"karenfrilya97"},"content":"\u003d\u003d\u003d\u003d Yuan Quan"},{"lineNumber":1082,"author":{"gitID":"karenfrilya97"},"content":"*Major enhancement*: Modifying the Model component. This includes creation of Event and Task classes, as well as their superclass, Activity. Other classes relevant to tasks and events are also created, such as DateTime."},{"lineNumber":1083,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1084,"author":{"gitID":"karenfrilya97"},"content":"*Minor enhancement*: Creating \u0027complete\u0027 command. This command marks a Task object as completed."},{"lineNumber":1085,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1094,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |new user |see usage instructions |figure out how to use the application"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |add a new task |record a new task to remind myself"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |add a new event |record a new event to remind myself"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |add the location of an event |be in the right location"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |add items to bring for an event |attend an event with all the required items"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |view upcoming tasks (in order of earliest to latest) |manage my time and finish my tasks on time"},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |view upcoming events (in order of earliest to latest) |attend my events"},{"lineNumber":1107,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1108,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |view free time slots |arrange for other events"},{"lineNumber":1109,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1110,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |change the deadline of a task |adjust my schedule when a deadline changes"},{"lineNumber":1111,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1112,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |change the time of an event |see the updated schedule in case there are changes"},{"lineNumber":1113,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1114,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |change the location of an event |be in the right location when the location changes"},{"lineNumber":1115,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1116,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |delete a task |remove tasks I no longer need to complete"},{"lineNumber":1117,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1118,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |delete an event |remove events I no longer need to attend"},{"lineNumber":1119,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1120,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |find a task by name |locate details of a task without having to go through the entire list"},{"lineNumber":1121,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1122,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |student |find an event by name |locate details of an event without having to go through the entire list"},{"lineNumber":1123,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1124,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |mark a task as complete |tell which tasks are completed and which are not"},{"lineNumber":1125,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1126,"author":{"gitID":"Kyomian"},"content":"|`* * *` |student |view completed tasks |be assured I have completed a task"},{"lineNumber":1127,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1128,"author":{"gitID":"Kyomian"},"content":"|`* * *` |forgetful student |view overdue tasks |be assured I did not miss any deadline"},{"lineNumber":1129,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1130,"author":{"gitID":"Kyomian"},"content":"|`* * *` |forgetful student |get notification for upcoming tasks |never forget to complete my tasks"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"karenfrilya97"},"content":"|`* * *` |forgetful student |get notification for upcoming events |never forget to attend my events"},{"lineNumber":1133,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1134,"author":{"gitID":"Kyomian"},"content":"|`* *` |busy student |sort tasks based on priority |allocate sufficient time for each task"},{"lineNumber":1135,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1136,"author":{"gitID":"Kyomian"},"content":"|`* *` |busy student |filter tasks based on time period |view only tasks with deadlines within a certain time period"},{"lineNumber":1137,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1138,"author":{"gitID":"karenfrilya97"},"content":"|`* *` |busy student |filter events based on time period |view only events within a certain time period"},{"lineNumber":1139,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1140,"author":{"gitID":"Kyomian"},"content":"|`* *` |busy student |filter tasks based on tags |view only certain tasks when there are too many tasks to view"},{"lineNumber":1141,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1142,"author":{"gitID":"karenfrilya97"},"content":"|`* *` |busy student |filter events based on tags |view only certain events when there are too many events to view"},{"lineNumber":1143,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1144,"author":{"gitID":"Kyomian"},"content":"|`* *` |procrastinating student |add estimated time needed to complete a task |estimate when to start on a task to complete it on time"},{"lineNumber":1145,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1146,"author":{"gitID":"YuanQLLer"},"content":"|`* *` |procrastinating student |view contact details of activity in-charge for a deadline extension |have enough time to complete my assignments despite my tight schedule"},{"lineNumber":1147,"author":{"gitID":"YuanQLLer"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1148,"author":{"gitID":"Kyomian"},"content":"|`* *` |procrastinating student |view contact details of person in-charge for a deadline extension |have enough time to complete my task despite my tight schedule"},{"lineNumber":1149,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":1150,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1151,"author":{"gitID":"karenfrilya97"},"content":"|`* *` |busy student |view free time slots before a deadline |know how much time I have when I\u0027m actually free to finish my tasks"},{"lineNumber":1152,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1153,"author":{"gitID":"karenfrilya97"},"content":"|`* *` |student |view common free time slots among my group mates |arrange a group meeting"},{"lineNumber":1154,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1155,"author":{"gitID":"Kyomian"},"content":"|`* *` |organised student |add multiple deadlines for a task |keep track of project progress"},{"lineNumber":1156,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1157,"author":{"gitID":"karenfrilya97"},"content":"|`* *` |NUS student |import timetable from NUSMods |avoid the trouble of keying in my lecture and tutorial schedules manually"},{"lineNumber":1158,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1159,"author":{"gitID":"Kyomian"},"content":"|`*` |student |be rewarded for completing a task |feel a sense of achievement"},{"lineNumber":1160,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":1161,"author":{"gitID":"karenfrilya97"},"content":"|`*` |student |hide private events |minimize chance of someone else seeing them by accident"},{"lineNumber":1162,"author":{"gitID":"karenfrilya97"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"Kyomian"},"content":"(For all use cases below, the *System* is the `CLIndar` and the *Actor* is the `User`, unless specified otherwise)"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Use case: Add task"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"Kyomian"},"content":"1. User adds a task into CLIndar by typing a command"},{"lineNumber":1176,"author":{"gitID":"Kyomian"},"content":"2. CLIndar parses command typed and adds in the task"},{"lineNumber":1177,"author":{"gitID":"Kyomian"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"Kyomian"},"content":"Use case ends."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1183,"author":{"gitID":"YuanQLLer"},"content":"** 2a. CLIndar detects that the format of the command typed is invalid"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1186,"author":{"gitID":"Kyomian"},"content":"** 3a1. CLIndar shows an error message"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1188,"author":{"gitID":"Kyomian"},"content":"Use case ends."},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add events"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"Kyomian"},"content":"1. User adds an event into CLIndar by typing a command"},{"lineNumber":1195,"author":{"gitID":"Kyomian"},"content":"2. CLIndar parses command typed and adds in the event"},{"lineNumber":1196,"author":{"gitID":"Kyomian"},"content":"+"},{"lineNumber":1197,"author":{"gitID":"Kyomian"},"content":"Use case ends."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1202,"author":{"gitID":"YuanQLLer"},"content":"** 3a. CLIndar detects that the format of the command typed is invalid"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1205,"author":{"gitID":"Kyomian"},"content":"** 3a1. CLIndar shows an error message"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"Kyomian"},"content":"Use case ends."},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Use case: Complete task"},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"Kyomian"},"content":"1. User requests to mark a task as completed by typing a command"},{"lineNumber":1214,"author":{"gitID":"Kyomian"},"content":"2. CLIndar shows a list of uncompleted tasks"},{"lineNumber":1215,"author":{"gitID":"Kyomian"},"content":"3. User selects the task to be marked as completed by the index"},{"lineNumber":1216,"author":{"gitID":"Kyomian"},"content":"4. CLIndar marks the selected task as completed"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1223,"author":{"gitID":"Kyomian"},"content":"* 2a. The list is empty"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1230,"author":{"gitID":"Kyomian"},"content":"** 3a1. CLIndar shows an error message"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"Kyomian"},"content":"\u003d\u003d\u003d Use case: Show urgent task"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"Kyomian"},"content":"1. User requests to show all tasks before a certain date by typing a command"},{"lineNumber":1240,"author":{"gitID":"Kyomian"},"content":"2. CLIndar shows a list of uncompleted tasks with deadline before the provided date"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1245,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":1246,"author":{"gitID":"jasmoon"},"content":"[none]"},{"lineNumber":1247,"author":{"gitID":"Kyomian"},"content":"* 1a. The given date is invalid"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1250,"author":{"gitID":"Kyomian"},"content":"** 1a1. CLIndar shows an error message"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1255,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"jasmoon"},"content":"\u003d\u003d\u003d Use case: Show help for command"},{"lineNumber":1259,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":1260,"author":{"gitID":"jasmoon"},"content":"*MSS*"},{"lineNumber":1261,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":1262,"author":{"gitID":"jasmoon"},"content":"1. User requests to show help for command requested"},{"lineNumber":1263,"author":{"gitID":"jasmoon"},"content":"2. CLIndar shows the help message for the requested command"},{"lineNumber":1264,"author":{"gitID":"Kyomian"},"content":"+"},{"lineNumber":1265,"author":{"gitID":"Kyomian"},"content":"Use case ends."},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1268,"author":{"gitID":"-"},"content":""},{"lineNumber":1269,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1270,"author":{"gitID":"jasmoon"},"content":"* 1a. The command requested is invalid"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1273,"author":{"gitID":"Kyomian"},"content":"** 1a1. CLIndar shows an error message"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"jasmoon"},"content":"Use case ends."},{"lineNumber":1278,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1285,"author":{"gitID":"Kyomian"},"content":".  Should be able to hold up to 500 tasks and 500 events without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1286,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1287,"author":{"gitID":"Kyomian"},"content":".  The system should respond within two seconds when the user enters a command."},{"lineNumber":1288,"author":{"gitID":"Kyomian"},"content":".  The system CLI commands should be easy to remember for the average English speaker."},{"lineNumber":1289,"author":{"gitID":"Kyomian"},"content":".  A novice user should be able to understand how to use the system in a short period of time."},{"lineNumber":1290,"author":{"gitID":"Kyomian"},"content":".  The notification feature should not be deemed too annoying for the user."},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"Kyomian"},"content":"[[tasks]] Tasks::"},{"lineNumber":1298,"author":{"gitID":"Kyomian"},"content":"A particular work assigned by a professor."},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"[[completed]] Completed::"},{"lineNumber":1301,"author":{"gitID":"Kyomian"},"content":"A task or event that has finished."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[[deadline]] Deadline::"},{"lineNumber":1304,"author":{"gitID":"Kyomian"},"content":"The date and time by which an event will happen or a task is due."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[[duration]] Duration::"},{"lineNumber":1307,"author":{"gitID":"Kyomian"},"content":"The amount of time left to complete a task or prepare for an event."},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"[[events]] Events::"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"A thing that will occur in a certain place at a particular interval of time."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"[[location]] Location::"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"The place where the event will occur."},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"[[overdue]] Overdue::"},{"lineNumber":1322,"author":{"gitID":"Kyomian"},"content":"A task that has not been completed past the deadline."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"[[things-to-bring]] Things to bring::"},{"lineNumber":1325,"author":{"gitID":"-"},"content":"Things to be brought for an event that is going to happen."},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"[[urgent]] Urgent::"},{"lineNumber":1328,"author":{"gitID":"Kyomian"},"content":"A task due or event that will happen within the next 24 hours."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1340,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1345,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1353,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1360,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1366,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"YuanQLLer"},"content":"\u003d\u003d\u003d Deleting a activity"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"YuanQLLer"},"content":". Deleting a activity while all activities are listed"},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"YuanQLLer"},"content":".. Prerequisites: List all activities using the `list` command. Multiple activities in the list."},{"lineNumber":1376,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1378,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1379,"author":{"gitID":"YuanQLLer"},"content":"   Expected: No activity is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1380,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"karenfrilya97":164,"YuanQLLer":118,"-":847,"Kyomian":114,"jasmoon":148}},{"path":"src/test/java/seedu/address/logic/parser/EventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"public class EventCommandParserTest {"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"   //TODO: Tedious"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"-":2,"Kyomian":4}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowActivityRequestEvent;"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowEventOnlyRequestEvent;"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowTaskOnlyRequestEvent;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"public class ListCommandTest {"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"//may need revising, is the interaction with the model needed?"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    private Model model;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    private Model expectedModel;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    private ListCommand listCommand;"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"    /*    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"    }*/"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"    public void execute_listForTask_success() {"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"        ListCommand command \u003d new ListCommand(\"task\");"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, ListCommand.MESSAGE_SUCCESS_TASK);"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowTaskOnlyRequestEvent);"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"    public void execute_listForEvent_success() {"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"        ListCommand command \u003d new ListCommand(\"event\");"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, ListCommand.MESSAGE_SUCCESS_EVENT);"},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowEventOnlyRequestEvent);"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":72,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"    public void execute_listForActivity_success()    {"},{"lineNumber":74,"author":{"gitID":"jasmoon"},"content":"        ListCommand command \u003d new ListCommand();"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, ListCommand.MESSAGE_SUCCESS);"},{"lineNumber":76,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowActivityRequestEvent);"},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":80,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":"    public void execute_invalidArgs_throwsCommandException() throws Exception   {"},{"lineNumber":82,"author":{"gitID":"jasmoon"},"content":"        ListCommand command \u003d new ListCommand(\"hello\");"},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":"        assertCommandFailure(command, String.format(Messages.MESSAGE_INVALID_LIST_REQUEST, \"hello\"));"},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":86,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":35,"-":3,"Kyomian":1,"jasmoon":47}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2010_QUIZ;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MA2108_HOMEWORK;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CS2010_QUIZ;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2010_QUIZ;"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA2108;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.EditCommand.EditActivityDescriptor;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.EditActivityDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    private Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        Activity editedActivity \u003d new TaskBuilder().build();"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY, descriptor);"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedActivity);"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(model.getFilteredActivityList().get(0), editedActivity);"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredActivityList().size());"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        Activity lastActivity \u003d model.getFilteredActivityList().get(indexLastPerson.getZeroBased());"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        TaskBuilder personInList \u003d new TaskBuilder(lastActivity);"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"        Activity editedActivity \u003d personInList.withName(VALID_NAME_CS2010_QUIZ)"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"                .withDateTime(VALID_DATE_TIME_CS2010_QUIZ)"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"                .withTags(VALID_TAG_MA2108).build();"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_CS2010_QUIZ)"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).withTags(VALID_TAG_MA2108).build();"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedActivity);"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(lastActivity, editedActivity);"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY, new EditActivityDescriptor());"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        Activity editedActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedActivity);"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityInFilteredList \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":"        Activity editedActivity \u003d new TaskBuilder(activityInFilteredList).withName(VALID_NAME_CS2010_QUIZ).build();"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY,"},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"                new EditActivityDescriptorBuilder().withName(VALID_NAME_CS2010_QUIZ).build());"},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedActivity);"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(model.getFilteredActivityList().get(0), editedActivity);"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"        Activity firstActivity \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(firstActivity).build();"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_ACTIVITY, descriptor);"},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":"        // edit activity in filtered list into a duplicate in address book"},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityInList \u003d model.getDeskBoard().getActivityList().get(INDEX_SECOND_ACTIVITY.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY,"},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"                new EditActivityDescriptorBuilder(activityInList).build());"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":151,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"},{"lineNumber":152,"author":{"gitID":"karenfrilya97"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":153,"author":{"gitID":"karenfrilya97"},"content":"                .withName(VALID_NAME_CS2010_QUIZ).build();"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":157,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":159,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"YuanQLLer"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":161,"author":{"gitID":"YuanQLLer"},"content":"     * but smaller than size of address book"},{"lineNumber":162,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":164,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":166,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"},{"lineNumber":167,"author":{"gitID":"YuanQLLer"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":168,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDeskBoard().getActivityList().size());"},{"lineNumber":169,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":170,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":171,"author":{"gitID":"karenfrilya97"},"content":"                new EditActivityDescriptorBuilder().withName(VALID_NAME_CS2010_QUIZ).build());"},{"lineNumber":172,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":173,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":174,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":176,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":177,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":179,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":184,"author":{"gitID":"YuanQLLer"},"content":"        Activity editedActivity \u003d new TaskBuilder().build();"},{"lineNumber":185,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityToEdit \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":186,"author":{"gitID":"YuanQLLer"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"},{"lineNumber":187,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY, descriptor);"},{"lineNumber":188,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":189,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":190,"author":{"gitID":"YuanQLLer"},"content":"        // edit -\u003e first activity edited"},{"lineNumber":191,"author":{"gitID":"YuanQLLer"},"content":"        editCommand.execute();"},{"lineNumber":192,"author":{"gitID":"YuanQLLer"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":193,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":194,"author":{"gitID":"YuanQLLer"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered activity list to show all persons"},{"lineNumber":195,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":196,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":197,"author":{"gitID":"YuanQLLer"},"content":"        // redo -\u003e same first activity edited again"},{"lineNumber":198,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(activityToEdit, editedActivity);"},{"lineNumber":199,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":200,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":202,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":203,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":205,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":207,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":208,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":209,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":210,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"},{"lineNumber":211,"author":{"gitID":"karenfrilya97"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"},{"lineNumber":212,"author":{"gitID":"karenfrilya97"},"content":"                .withName(VALID_NAME_CS2010_QUIZ).build();"},{"lineNumber":213,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":214,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":215,"author":{"gitID":"YuanQLLer"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":216,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":217,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":218,"author":{"gitID":"YuanQLLer"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":219,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":220,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":221,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":223,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"YuanQLLer"},"content":"     * 1. Edits a {@code Activity} from a filtered list."},{"lineNumber":225,"author":{"gitID":"YuanQLLer"},"content":"     * 2. Undo the edit."},{"lineNumber":226,"author":{"gitID":"YuanQLLer"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited activity in the"},{"lineNumber":227,"author":{"gitID":"YuanQLLer"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":228,"author":{"gitID":"YuanQLLer"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the activity object regardless of indexing."},{"lineNumber":229,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":231,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":232,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":233,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":234,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":235,"author":{"gitID":"YuanQLLer"},"content":"        Activity editedActivity \u003d new TaskBuilder().build();"},{"lineNumber":236,"author":{"gitID":"YuanQLLer"},"content":"        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"},{"lineNumber":237,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY, descriptor);"},{"lineNumber":238,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(new DeskBoard(model.getDeskBoard()), new UserPrefs());"},{"lineNumber":239,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":240,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_SECOND_ACTIVITY);"},{"lineNumber":241,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityToEdit \u003d model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":242,"author":{"gitID":"YuanQLLer"},"content":"        // edit -\u003e edits second activity in unfiltered activity list / first activity in filtered activity list"},{"lineNumber":243,"author":{"gitID":"YuanQLLer"},"content":"        editCommand.execute();"},{"lineNumber":244,"author":{"gitID":"YuanQLLer"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":245,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":246,"author":{"gitID":"YuanQLLer"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered activity list to show all persons"},{"lineNumber":247,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":248,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":249,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(activityToEdit, editedActivity);"},{"lineNumber":250,"author":{"gitID":"YuanQLLer"},"content":"        assertNotEquals(model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased()), activityToEdit);"},{"lineNumber":251,"author":{"gitID":"YuanQLLer"},"content":"        // redo -\u003e edits same second activity in unfiltered activity list"},{"lineNumber":252,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":253,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":255,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":256,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":258,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() throws Exception {"},{"lineNumber":260,"author":{"gitID":"karenfrilya97"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY, DESC_MA2108_HOMEWORK);"},{"lineNumber":261,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":262,"author":{"gitID":"YuanQLLer"},"content":"        // same values -\u003e returns true"},{"lineNumber":263,"author":{"gitID":"karenfrilya97"},"content":"        EditCommand.EditActivityDescriptor copyDescriptor \u003d new EditActivityDescriptor(DESC_MA2108_HOMEWORK);"},{"lineNumber":264,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_ACTIVITY, copyDescriptor);"},{"lineNumber":265,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":266,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":267,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":268,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":269,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":270,"author":{"gitID":"YuanQLLer"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":271,"author":{"gitID":"YuanQLLer"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":272,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":273,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":274,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":275,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":276,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":277,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":278,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":279,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":280,"author":{"gitID":"YuanQLLer"},"content":"        // different index -\u003e returns false"},{"lineNumber":281,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ACTIVITY, DESC_MA2108_HOMEWORK)));"},{"lineNumber":282,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":283,"author":{"gitID":"YuanQLLer"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":284,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ACTIVITY, DESC_CS2010_QUIZ)));"},{"lineNumber":285,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":287,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":289,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"YuanQLLer"},"content":"    private EditCommand prepareCommand(Index index, EditCommand.EditActivityDescriptor descriptor) {"},{"lineNumber":291,"author":{"gitID":"YuanQLLer"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":292,"author":{"gitID":"YuanQLLer"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":293,"author":{"gitID":"YuanQLLer"},"content":"        return editCommand;"},{"lineNumber":294,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":257,"karenfrilya97":21,"-":12,"Kyomian":5}},{"path":"src/test/java/seedu/address/logic/parser/TaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_CS2010_QUIZ;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_MA2108_HOMEWORK;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_TAG_DESC;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2010_QUIZ;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MA2108_HOMEWORK;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_CS2010_QUIZ;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_MA2108_HOMEWORK;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2010;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_URGENT;"},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CS2010_QUIZ;"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_MA2108_HOMEWORK;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2010_QUIZ;"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MA2108_HOMEWORK;"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_CS2010_QUIZ;"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_MA2108_HOMEWORK;"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2010;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"public class TaskCommandParserTest {"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    private TaskCommandParser parser \u003d new TaskCommandParser();"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        Task expectedTask \u003d new TaskBuilder().withName(VALID_NAME_CS2010_QUIZ).withDateTime(VALID_DATE_TIME_CS2010_QUIZ)"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"                .withRemark(VALID_REMARK_CS2010_QUIZ).withTags(VALID_TAG_CS2010).build();"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        // whitespace only preamble"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"                + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010, new TaskCommand(expectedTask));"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        // multiple names - last name accepted"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, NAME_DESC_MA2108_HOMEWORK + NAME_DESC_CS2010_QUIZ"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"                + DATE_TIME_DESC_CS2010_QUIZ + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010,"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"                new TaskCommand(expectedTask));"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"        // multiple date times - last date time accepted"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_MA2108_HOMEWORK"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"                + DATE_TIME_DESC_CS2010_QUIZ + REMARK_DESC_CS2010_QUIZ"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"                + TAG_DESC_CS2010, new TaskCommand(expectedTask));"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        // multiple remarks - last remark accepted"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"                + REMARK_DESC_MA2108_HOMEWORK + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010,"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"                new TaskCommand(expectedTask));"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"        // multiple tags - all accepted"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"        Task expectedTaskMultipleTags \u003d new TaskBuilder().withName(VALID_NAME_CS2010_QUIZ)"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"                .withDateTime(VALID_DATE_TIME_CS2010_QUIZ)"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"                .withRemark(VALID_REMARK_CS2010_QUIZ)"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"                .withTags(VALID_TAG_CS2010, VALID_TAG_URGENT).build();"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"                + REMARK_DESC_CS2010_QUIZ + TAG_DESC_URGENT + TAG_DESC_CS2010,"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"                new TaskCommand(expectedTaskMultipleTags));"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"    //TODO: Is Remark optional?"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"    public void parse_optionalRemarkMissing_success() {"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"    public void parse_optionalTagsMissing_success() {"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"        Task expectedTask \u003d new TaskBuilder().withName(VALID_NAME_MA2108_HOMEWORK)"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"                .withDateTime(VALID_DATE_TIME_MA2108_HOMEWORK)"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"                .withRemark(VALID_REMARK_MA2108_HOMEWORK).withTags().build();"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        assertParseSuccess(parser, NAME_DESC_MA2108_HOMEWORK + DATE_TIME_DESC_MA2108_HOMEWORK"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"                        + REMARK_DESC_MA2108_HOMEWORK, new TaskCommand(expectedTask));"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskCommand.MESSAGE_USAGE);"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"        // missing name prefix"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, VALID_NAME_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"                        + REMARK_DESC_CS2010_QUIZ, expectedMessage);"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"        // missing date time prefix"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, NAME_DESC_CS2010_QUIZ + VALID_DATE_TIME_CS2010_QUIZ"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"                        + REMARK_DESC_CS2010_QUIZ, expectedMessage);"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"//        // missing remark prefix"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"//        assertParseFailure(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ + VALID_EMAIL_BOB + ,"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"//                expectedMessage);"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"//        // all prefixes missing"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"//        assertParseFailure(parser, VALID_NAME_CS2010_QUIZ + VALID_DATE_TIME_CS2010_QUIZ + VALID_EMAIL_BOB"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"//                + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"        // invalid name"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, INVALID_TASK_NAME_DESC + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"                + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"//        TODO: Got to do with DateTime Regex in Model"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"//        // invalid date time"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"//        assertParseFailure(parser, NAME_DESC_CS2010_QUIZ + INVALID_TASK_DATE_TIME_DESC"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"//                + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010, DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"//        TODO: Not sure myself"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"//        // invalid remark"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"//        assertParseFailure(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"//                + INVALID_TASK_REMARK_DESC + TAG_DESC_CS2010, Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"        // invalid tag"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"                + REMARK_DESC_CS2010_QUIZ + INVALID_TASK_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, INVALID_TASK_NAME_DESC + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"                        + REMARK_DESC_CS2010_QUIZ,"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"        // non-empty preamble"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS2010_QUIZ + DATE_TIME_DESC_CS2010_QUIZ"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"                        + REMARK_DESC_CS2010_QUIZ + TAG_DESC_CS2010,"},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"karenfrilya97":7,"YuanQLLer":5,"-":6,"Kyomian":121}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"        HelpCommand command \u003d new HelpCommand();"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    public void execute_helpForTask_success() {"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"        HelpCommand command \u003d new HelpCommand(\"task\");"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, TaskCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    public void execute_helpForEvent_success() {"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"        HelpCommand command \u003d new HelpCommand(\"event\");"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, EventCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"    public void execute_helpForRemove_success()    {"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"        HelpCommand command \u003d new HelpCommand(\"rm\");"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, RemoveCommand.MESSAGE_USAGE);;"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"    public void execute_helpForComplete_success()    {"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"        HelpCommand command \u003d new HelpCommand(\"complete\");"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"        assertCommandSuccess(command, CompleteCommand.MESSAGE_USAGE);;"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    public void execute_helpForHelp_success() {"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        HelpCommand command \u003d new HelpCommand(\"help\");"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(command, HelpCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    public void execute_helpForMan_success() {"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"        HelpCommand command \u003d new HelpCommand(\"man\");"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(command, HelpCommand.MESSAGE_USAGE);"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    public void execute_helpForList_success() {"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"        HelpCommand command \u003d new HelpCommand(\"list\");"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(command, ListCommand.MESSAGE_USAGE);"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"        command \u003d new HelpCommand(\"ls\");"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(command, ListCommand.MESSAGE_USAGE);"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"    public void execute_invalidArgs_throwsCommandException()   {"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"        HelpCommand command \u003d new HelpCommand(\"hello\");"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(command, HelpCommand.MESSAGE_USAGE);"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":19,"Kyomian":29,"jasmoon":30}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.removeFirstTask;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    private final Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    private final RemoveCommand removeCommandOne \u003d new RemoveCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    private final RemoveCommand removeCommandTwo \u003d new RemoveCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"        removeCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        removeCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"                Arrays.asList(removeCommandOne, removeCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        removeCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        removeCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        removeFirstTask(expectedModel);"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":50,"Kyomian":7}},{"path":"src/test/java/seedu/address/logic/commands/EditActivityDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2010_QUIZ;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MA2108_HOMEWORK;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CS2010_QUIZ;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2010_QUIZ;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_CS2010_QUIZ;"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA2108;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.EditCommand.EditActivityDescriptor;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.EditActivityDescriptorBuilder;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"public class EditActivityDescriptorTest {"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"        EditActivityDescriptor descriptorWithSameValues \u003d new EditActivityDescriptor(DESC_MA2108_HOMEWORK);"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"        assertTrue(DESC_MA2108_HOMEWORK.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"        assertTrue(DESC_MA2108_HOMEWORK.equals(DESC_MA2108_HOMEWORK));"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(null));"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(5));"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(DESC_CS2010_QUIZ));"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"        EditActivityDescriptor editedAmy \u003d new EditActivityDescriptorBuilder(DESC_MA2108_HOMEWORK)"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"                .withName(VALID_NAME_CS2010_QUIZ).build();"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"        editedAmy \u003d new EditActivityDescriptorBuilder(DESC_MA2108_HOMEWORK)"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).build();"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(editedAmy));"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        // different address -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"        editedAmy \u003d new EditActivityDescriptorBuilder(DESC_MA2108_HOMEWORK)"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"                .withAddress(VALID_REMARK_CS2010_QUIZ).build();"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(editedAmy));"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        // different tags -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"        editedAmy \u003d new EditActivityDescriptorBuilder(DESC_MA2108_HOMEWORK).withTags(VALID_TAG_MA2108).build();"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(DESC_MA2108_HOMEWORK.equals(editedAmy));"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":31,"karenfrilya97":23,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/TaskCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":" * Contains integration tests (interaction with the Model) for {@code TaskCommand}."},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"public class TaskCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"        model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    public void execute_newTask_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"        expectedModel.addActivity(validTask);"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(prepareCommand(validTask, model), model,"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"                String.format(TaskCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"    // Questionable - does the app check for duplicate task?"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"    public void execute_duplicateTask_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"        Activity activityInList \u003d model.getDeskBoard().getActivityList().get(1);"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(prepareCommand((Task) activityInList, model), model, TaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"     * Generates a new {@code TaskCommand} which upon execution, adds {@code task} into the {@code model}."},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    private TaskCommand prepareCommand(Task task, Model model) {"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        TaskCommand command \u003d new TaskCommand(task);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        return command;"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":5,"-":11,"Kyomian":42}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"        Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":36}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.removeFirstActivity;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    private final Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"        removeFirstActivity(expectedModel);"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        removeFirstActivity(expectedModel);"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"     * Deletes the first activity in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"            Activity activityToDelete \u003d model.getFilteredActivityList().get(0);"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"                model.deleteActivity(activityToDelete);"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"            } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"                fail(\"Impossible: activityToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":62,"Kyomian":6}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.removeFirstTask;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private final Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    private final RemoveCommand removeCommandOne \u003d new RemoveCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"    private final RemoveCommand removeCommandTwo \u003d new RemoveCommand(\"task\", INDEX_SECOND_ACTIVITY);"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        removeCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        removeCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        removeCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        removeCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"                Collections.emptyList(), Arrays.asList(removeCommandTwo, removeCommandOne));"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        removeFirstTask(expectedModel);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        removeFirstTask(expectedModel);"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":51,"Kyomian":7}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ACTIVITY;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"//import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size());"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionSuccess(INDEX_FIRST_ACTIVITY);"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionSuccess(INDEX_THIRD_ACTIVITY);"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionSuccess(INDEX_FIRST_ACTIVITY);"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_ACTIVITY;"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getDeskBoard().getActivityList().size());"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: TEST"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"     * Test"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_ACTIVITY);"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"        // same values -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":"        // different activity -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"     * is raised with the correct index."},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_ACTIVITY_SUCCESS, index.getOneBased()),"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"        } catch (CommandException ce) {"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"            selectCommand.execute();"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"        } catch (CommandException ce) {"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":151,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":153,"author":{"gitID":"YuanQLLer"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":"        return selectCommand;"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":133,"-":21,"Kyomian":3}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT1;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.EXAM1;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.QUIZ;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    private Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        // different activity -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"    //TODO:@Test"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    private void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand command \u003d prepareCommand(\"CS2101\");"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ASSIGNMENT1, QUIZ, EXAM1));"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"     *     - the {@code FilteredList\u003cActivity\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"     *     - the {@code DeskBoard} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cActivity\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard expectedAddressBook \u003d new DeskBoard(model.getDeskBoard());"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedList, model.getFilteredActivityList());"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(expectedAddressBook, model.getDeskBoard());"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":98}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.EditActivityDescriptorBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TASK \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_NAME_MA2108_HOMEWORK \u003d \"MA2108 Homework 3\";"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_NAME_CS2010_QUIZ \u003d \"CS2010 Online Quiz 2\";"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_DATE_TIME_MA2108_HOMEWORK \u003d \"11/11/1111 11:11\";"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_DATE_TIME_CS2010_QUIZ \u003d \"22/12/2222 22:22\";"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_REMARK_MA2108_HOMEWORK \u003d \"3% of total grade\";"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_REMARK_CS2010_QUIZ \u003d \"5% of total grade\";"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_TAG_MA2108 \u003d \"MA2108\";"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    public static final String VALID_TAG_CS2010 \u003d \"CS2010\";"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"    public static final String VALID_TAG_URGENT \u003d \"Urgent\";"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"    public static final String NAME_DESC_MA2108_HOMEWORK \u003d \" \" + PREFIX_NAME + VALID_NAME_MA2108_HOMEWORK;"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"    public static final String NAME_DESC_CS2010_QUIZ \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2010_QUIZ;"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"    public static final String DATE_TIME_DESC_MA2108_HOMEWORK \u003d \" \" + PREFIX_DATE_TIME"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"            + VALID_DATE_TIME_MA2108_HOMEWORK;"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"    public static final String DATE_TIME_DESC_CS2010_QUIZ \u003d \" \" + PREFIX_DATE_TIME + VALID_DATE_TIME_CS2010_QUIZ;"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    public static final String REMARK_DESC_MA2108_HOMEWORK \u003d \" \" + PREFIX_REMARK + VALID_REMARK_MA2108_HOMEWORK;"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"    public static final String REMARK_DESC_CS2010_QUIZ \u003d \" \" + PREFIX_REMARK + VALID_REMARK_CS2010_QUIZ;"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"    public static final String TAG_DESC_CS2010 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2010;"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    public static final String TAG_DESC_MA2108 \u003d \" \" + PREFIX_TAG + VALID_TAG_MA2108;"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    public static final String TAG_DESC_URGENT \u003d \" \" + PREFIX_TAG + VALID_TAG_URGENT;"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    public static final String INVALID_TASK_NAME_DESC \u003d \" \" + PREFIX_NAME + \"CS2106 Assignment\u0026\"; // \u0027\u0026\u0027 not allowed"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"    public static final String INVALID_TASK_DATE_TIME_DESC \u003d \" \" + PREFIX_DATE_TIME + \"2018-03-04 17:00\";"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"    public static final String INVALID_TASK_REMARK_DESC \u003d \" \" + PREFIX_REMARK + \"$\"; // \u0027$\u0027 not allowed"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    public static final String INVALID_TASK_TAG_DESC \u003d \" \" + PREFIX_TAG + \"CS2106*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EVENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    //TODO: Tedious"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"    public static final EditCommand.EditActivityDescriptor DESC_MA2108_HOMEWORK;"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"    public static final EditCommand.EditActivityDescriptor DESC_CS2010_QUIZ;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        DESC_MA2108_HOMEWORK \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_MA2108_HOMEWORK)"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"                .withPhone(VALID_DATE_TIME_MA2108_HOMEWORK).withAddress(VALID_REMARK_MA2108_HOMEWORK)"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"                .withTags(VALID_TAG_CS2010).build();"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"        DESC_CS2010_QUIZ \u003d new EditActivityDescriptorBuilder().withName(VALID_NAME_CS2010_QUIZ)"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"                .withPhone(VALID_DATE_TIME_CS2010_QUIZ).withAddress(VALID_REMARK_CS2010_QUIZ)"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"                .withTags(VALID_TAG_MA2108, VALID_TAG_CS2010).build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":97,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"jasmoon"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jasmoon"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"jasmoon"},"content":"    public static void assertCommandSuccess(Command command, String expectedMessage)   {"},{"lineNumber":102,"author":{"gitID":"jasmoon"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":"        } catch (CommandException ce) {"},{"lineNumber":106,"author":{"gitID":"jasmoon"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":107,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"jasmoon"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"jasmoon"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"    public static void assertCommandFailure(Command command, String expectedMessage) {"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"jasmoon"},"content":"            command.execute();"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"        } catch (CommandException e) {"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"     * - the address book and the filtered activity list in the {@code actualModel} remain unchanged"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard expectedAddressBook \u003d new DeskBoard(actualModel.getDeskBoard());"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivity\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredActivityList());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"            assertEquals(expectedAddressBook, actualModel.getDeskBoard());"},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredActivityList());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"     * Updates {@code model}\u0027s filtered list to show only the activity at the given {@code targetIndex} in the"},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"     * {@code model}\u0027s desk board."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"    public static void showActivityAtIndex(Model model, Index targetIndex) {"},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredActivityList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"        Activity activity \u003d model.getFilteredActivityList().get(targetIndex.getZeroBased());"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":"        final String[] splitName \u003d activity.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(1, model.getFilteredActivityList().size());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":"     * Removes the first activity in {@code model}\u0027s filtered list from {@code model}\u0027s desk board."},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"    public static void removeFirstActivity(Model model) {"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"        Activity firstActivity \u003d model.getFilteredActivityList().get(0);"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"            model.deleteActivity(firstActivity);"},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"            throw new AssertionError(\"Activity in filtered list must exist in model.\", pnfe);"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":174,"author":{"gitID":"YuanQLLer"},"content":"    //@@author YuanQLLer"},{"lineNumber":175,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"YuanQLLer"},"content":"     * Removes the first activity in {@code model}\u0027s filtered list from {@code model}\u0027s desk board."},{"lineNumber":177,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"YuanQLLer"},"content":"    public static void removeFirstTask(Model model) {"},{"lineNumber":179,"author":{"gitID":"YuanQLLer"},"content":"        Activity firstActivity \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":180,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"            model.deleteActivity(firstActivity);"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":183,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"Activity in filtered list must exist in model.\", pnfe);"},{"lineNumber":184,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":187,"author":{"gitID":"YuanQLLer"},"content":"    //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"karenfrilya97":24,"YuanQLLer":30,"-":86,"Kyomian":35,"jasmoon":30}},{"path":"src/test/java/seedu/address/logic/commands/EventCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":" * Contains integration tests (interaction with the Model) for {@code EventCommand}."},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"public class EventCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"        model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    public void execute_newEvent_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"        expectedModel.addActivity(validEvent);"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(prepareCommand(validEvent, model), model,"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"                String.format(EventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"    // Questionable - does the app check for duplicate?"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"    public void execute_duplicateEvent_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"        Activity activityInList \u003d model.getDeskBoard().getActivityList().get(0);"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(prepareCommand((Event) activityInList, model), model,"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"                EventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"     * Generates a new {@code EventCommand} which upon execution, adds {@code event} into the {@code model}."},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    private EventCommand prepareCommand(Event event, Model model) {"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        EventCommand command \u003d new EventCommand(event);"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":4,"-":10,"Kyomian":45}},{"path":"src/test/java/seedu/address/logic/commands/CompleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"public class CompleteCommandTest {"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    private Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        String expectedMessage \u003d String.format(CompleteCommand.MESSAGE_COMPLETE_TASK_SUCCESS, activityToComplete);"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        Activity completedActivity \u003d activityToComplete.getCompletedCopy();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(activityToComplete, completedActivity);"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(completeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(completeCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    //TODO"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        showActivityAtIndex(model, INDEX_FIRST_ACTIVITY);"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ACTIVITY;"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDeskBoard().getActivityList().size());"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(completeCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    //TODO"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        // complete -\u003e first activity completed"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"        completeCommand.execute();"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"        undoRedoStack.push(completeCommand);"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        // undo -\u003e reverts desk board back to previous state and filtered activity list to show all activities"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"        // redo -\u003e same first activity completed again"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"        Activity completedActivity \u003d activityToComplete.getCompletedCopy();"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(activityToComplete, completedActivity);"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommandCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"        // execution failed -\u003e completeCommandCommand not pushed into undoRedoStack"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(completeCommandCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"     * 1. Complete a {@code Task} from a filtered list."},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":"     * 2. Undo the completion."},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously completed activity in the"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"     * 4. Redo the completion. This ensures {@code RedoCommand} copletes the activity object regardless of indexing."},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonCompleted() throws Exception {"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"        showActivityAtIndex(model, INDEX_SECOND_ACTIVITY);"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"        Activity activityToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"        // complete -\u003e completes second activity in unfiltered activity list / first activity in filtered activity list"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"        completeCommand.execute();"},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":"        undoRedoStack.push(completeCommand);"},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"        // undo -\u003e reverts desk board back to previous state and filtered activity list to show all persons"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"        Activity completedActivity \u003d activityToComplete.getCompletedCopy();"},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"        expectedModel.updateActivity(activityToComplete, completedActivity);"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"        assertNotEquals(activityToComplete, model.getFilteredActivityList().get(INDEX_FIRST_ACTIVITY.getZeroBased()));"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"        // redo -\u003e completes same second activity in unfiltered activity list"},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() throws Exception {"},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeFirstCommand \u003d prepareCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeSecondCommand \u003d prepareCommand(INDEX_SECOND_ACTIVITY);"},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"        // same object -\u003e returns true"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(completeFirstCommand.equals(completeFirstCommand));"},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"        // same values -\u003e returns true"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_ACTIVITY);"},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(completeFirstCommand.equals(completeFirstCommandCopy));"},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":151,"author":{"gitID":"YuanQLLer"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"        completeFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":153,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(completeFirstCommand.equals(completeFirstCommandCopy));"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":"        // different types -\u003e returns false"},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(completeFirstCommand.equals(1));"},{"lineNumber":157,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":158,"author":{"gitID":"YuanQLLer"},"content":"        // null -\u003e returns false"},{"lineNumber":159,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(completeFirstCommand.equals(null));"},{"lineNumber":160,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":161,"author":{"gitID":"YuanQLLer"},"content":"        // different activity -\u003e returns false"},{"lineNumber":162,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(completeFirstCommand.equals(completeSecondCommand));"},{"lineNumber":163,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":165,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"YuanQLLer"},"content":"     * Returns a {@code CompleteCommand} with the parameter {@code index}."},{"lineNumber":167,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"YuanQLLer"},"content":"    private CompleteCommand prepareCommand(Index index) {"},{"lineNumber":169,"author":{"gitID":"YuanQLLer"},"content":"        CompleteCommand completeCommand \u003d new CompleteCommand(index);"},{"lineNumber":170,"author":{"gitID":"YuanQLLer"},"content":"        completeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":171,"author":{"gitID":"YuanQLLer"},"content":"        return completeCommand;"},{"lineNumber":172,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":174,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"YuanQLLer"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":176,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"YuanQLLer"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":178,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(p -\u003e false);"},{"lineNumber":179,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":180,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(model.getFilteredActivityList().isEmpty());"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":181,"karenfrilya97":1}},{"path":"src/test/java/seedu/address/storage/XmlDeskBoardStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT3;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.DEMO1;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":11,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"public class XmlDeskBoardStorageTest {"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlDeskBoardStorageTest/\");"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    public void readDeskBoard_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"        readDeskBoard(null);"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    private java.util.Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard(String filePath) throws Exception {"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"        return new XmlDeskBoardStorage(filePath).readDeskBoard(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"                : null;"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"        assertFalse(readDeskBoard(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        readDeskBoard(\"NotXmlFormatDeskBoard.xml\");"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"    public void readDeskBoard_invalidActivityDeskBoard_throwDataConversionException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"        readDeskBoard(\"invalidActivityDeskBoard.xml\");"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"    public void readDeskBoard_invalidAndValidActivityDeskBoard_throwDataConversionException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"        readDeskBoard(\"invalidAndValidActivityDeskBoard.xml\");"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"    public void readAndSaveDeskBoard_allInOrder_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempDeskBoard.xml\";"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoard original \u003d getTypicalDeskBoard();"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"        XmlDeskBoardStorage xmlDeskBoardStorage \u003d new XmlDeskBoardStorage(filePath);"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"        //Save in new file and read back"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":"        xmlDeskBoardStorage.saveDeskBoard(original, filePath);"},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        ReadOnlyDeskBoard readBack \u003d xmlDeskBoardStorage.readDeskBoard(filePath).get();"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(original, new DeskBoard(readBack));"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"        original.addActivity(ASSIGNMENT3);"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"        original.removeActivity(ASSIGNMENT3);"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"        xmlDeskBoardStorage.saveDeskBoard(original, filePath);"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"        readBack \u003d xmlDeskBoardStorage.readDeskBoard(filePath).get();"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(original, new DeskBoard(readBack));"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"        //Save and read without specifying file path"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"        original.addActivity(DEMO1);"},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"        xmlDeskBoardStorage.saveDeskBoard(original); //file path not specified"},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":"        readBack \u003d xmlDeskBoardStorage.readDeskBoard().get(); //file path not specified"},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(original, new DeskBoard(readBack));"},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDeskBoard_nullDeskBoard_throwsNullPointerException() {"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":"        saveDeskBoard(null, \"SomeFile.xml\");"},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":105,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"     * Saves {@code deskBoard} at the specified {@code filePath}."},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"    private void saveDeskBoard(ReadOnlyDeskBoard deskBoard, String filePath) {"},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"            new XmlDeskBoardStorage(filePath).saveDeskBoard(deskBoard, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":"        } catch (IOException ioe) {"},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":113,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":116,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":"    public void saveDeskBoard_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":118,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":119,"author":{"gitID":"karenfrilya97"},"content":"        saveDeskBoard(new DeskBoard(), null);"},{"lineNumber":120,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":122,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":123,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":123}},{"path":"src/test/java/seedu/address/storage/XmlSerializableDeskBoardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.testutil.TypicalActivities;"},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"public class XmlSerializableDeskBoardTest {"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableDeskBoardTest/\");"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"    private static final File TYPICAL_ACTIVITIES_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalActivitiesDeskBoard.xml\");"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"    private static final File INVALID_ACTIVITY_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidActivityDeskBoard.xml\");"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagDeskBoard.xml\");"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_typicalActivitiesFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ACTIVITIES_FILE,"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"                XmlSerializableDeskBoard.class);"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoard deskBoardFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoard typicalActivitiesDeskBoard \u003d TypicalActivities.getTypicalDeskBoard();"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"        boolean equals \u003d deskBoardFromFile.getTagList().get(1).equals("},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"                    typicalActivitiesDeskBoard.getTagList().get(1));"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"        boolean equals2 \u003d deskBoardFromFile.getTagList().get(2).equals("},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"                typicalActivitiesDeskBoard.getTagList().get(2));"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"        boolean equals3 \u003d deskBoardFromFile.getTagList().get(3).equals("},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"                typicalActivitiesDeskBoard.getTagList().get(3));"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"        boolean equals4 \u003d deskBoardFromFile.getTagList().get(4).equals("},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"                typicalActivitiesDeskBoard.getTagList().get(4));"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(deskBoardFromFile, typicalActivitiesDeskBoard);"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidActivityFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ACTIVITY_FILE,"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"                XmlSerializableDeskBoard.class);"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"        dataFromFile.toModelType();"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"                XmlSerializableDeskBoard.class);"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"        dataFromFile.toModelType();"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":58,"-":2}},{"path":"src/test/java/seedu/address/logic/commands/TaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"public class TaskCommandTest {"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        new TaskCommand(null);"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        CommandResult commandResult \u003d getTaskCommandForGivenTask(validTask, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        assertEquals(String.format(TaskCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateActivityException();"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"        thrown.expectMessage(TaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        getTaskCommandForGivenTask(validTask, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    public void equals() {"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"        Task assignment \u003d new TaskBuilder().build();"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        Task project \u003d new TaskBuilder().withName(\"Project\").build();"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        TaskCommand addAssignmentCommand \u003d new TaskCommand(assignment);"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"        TaskCommand addProjectCommand \u003d new TaskCommand(project);"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"        assertTrue(addAssignmentCommand.equals(addAssignmentCommand));"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"        TaskCommand addAssignmentCommandCopy \u003d new TaskCommand(assignment);"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        assertTrue(addAssignmentCommand.equals(addAssignmentCommandCopy));"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"        // different types -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addAssignmentCommand.equals(1));"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addAssignmentCommand.equals(null));"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        // different activity -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addAssignmentCommand.equals(addProjectCommand));"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"     * Generates a new TaskCommand with the details of the given task."},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"    private TaskCommand getTaskCommandForGivenTask(Task task, Model model) {"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"        TaskCommand command \u003d new TaskCommand(task);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"        return command;"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"    private class ModelStub implements Model {"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"        public void resetData(ReadOnlyDeskBoard newData) {"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"            return null;"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"        public void deleteActivity(Activity target) throws ActivityNotFoundException {"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"        public void updateActivity(Activity target, Activity editedActivity)"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"                throws DuplicateActivityException {"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"        public ObservableList\u003cActivity\u003e getFilteredActivityList() {"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"        //@@author jasmoon"},{"lineNumber":135,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"jasmoon"},"content":"        public ObservableList\u003cActivity\u003e getFilteredTaskList()    {"},{"lineNumber":137,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":141,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"jasmoon"},"content":"        public ObservableList\u003cActivity\u003e getFilteredEventList() {"},{"lineNumber":143,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"jasmoon"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":147,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"jasmoon"},"content":"        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"},{"lineNumber":149,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":153,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"jasmoon"},"content":"     * A Model stub that always throw a DuplicateActivityException when trying to add a activity."},{"lineNumber":155,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"jasmoon"},"content":"    private class ModelStubThrowingDuplicateActivityException extends ModelStub {"},{"lineNumber":157,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"jasmoon"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":159,"author":{"gitID":"jasmoon"},"content":"            throw new DuplicateActivityException();"},{"lineNumber":160,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":162,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"jasmoon"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":164,"author":{"gitID":"jasmoon"},"content":"            return new DeskBoard();"},{"lineNumber":165,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":168,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"jasmoon"},"content":"     * A Model stub that always accept the activity being added."},{"lineNumber":170,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"jasmoon"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":172,"author":{"gitID":"jasmoon"},"content":"        final ArrayList\u003cActivity\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":173,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":174,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"jasmoon"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":176,"author":{"gitID":"jasmoon"},"content":"            requireNonNull(activity);"},{"lineNumber":177,"author":{"gitID":"jasmoon"},"content":"            tasksAdded.add(activity);"},{"lineNumber":178,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":180,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"jasmoon"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":182,"author":{"gitID":"jasmoon"},"content":"            return new DeskBoard();"},{"lineNumber":183,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":186,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":6,"-":22,"Kyomian":105,"jasmoon":53}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT2;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":11,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"    private static final Task ASSIGNMENT2_TASK \u003d (Task) ASSIGNMENT2;"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_NAME \u003d \"Rachel\u0027s Bday\";"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_DATE_TIME \u003d \"23 April 2018\";"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_NAME \u003d ASSIGNMENT2_TASK.getName().toString();"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_DATE_TIME \u003d ASSIGNMENT2_TASK.getDueDateTime().toString();"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_REMARK \u003d ASSIGNMENT2_TASK.getRemark().toString();"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d ASSIGNMENT2_TASK.getTags().stream()"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(ASSIGNMENT2_TASK);"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(ASSIGNMENT2_TASK, task.toModelType());"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"                new XmlAdaptedTask(INVALID_NAME, VALID_DATE_TIME, VALID_REMARK, VALID_TAGS);"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_DATE_TIME, VALID_REMARK, VALID_TAGS);"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, task.getActivityType(), \"name\");"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidDateTime_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"                new XmlAdaptedTask(VALID_NAME, INVALID_DATE_TIME, VALID_REMARK, VALID_TAGS);"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_DATETIME_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_nullDateTime_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, null, VALID_REMARK, VALID_TAGS);"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, task.getActivityType(), \"due date/time\");"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"                new XmlAdaptedTask(VALID_NAME, VALID_DATE_TIME, VALID_REMARK, invalidTags);"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":78,"-":2}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        XmlDeskBoardStorage addressBookStorage \u003d new XmlDeskBoardStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"    public void deskBoardReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"         * {@link XmlDeskBoardStorage} class."},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlDeskBoardStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard original \u003d getTypicalDeskBoard();"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        storageManager.saveDeskBoard(original);"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        ReadOnlyDeskBoard retrieved \u003d storageManager.readDeskBoard().get();"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(original, new DeskBoard(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"    public void getDeskBoardFilePath() {"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        assertNotNull(storageManager.getDeskBoardFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"    public void handleDeskBoardChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        Storage storage \u003d new StorageManager(new XmlDeskBoardStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"        storage.handleDeskBoardChangedEvent(new DeskBoardChangedEvent(new DeskBoard()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"    class XmlDeskBoardStorageExceptionThrowingStub extends XmlDeskBoardStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        public XmlDeskBoardStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"        public void saveDeskBoard(ReadOnlyDeskBoard deskBoard, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":17,"karenfrilya97":4,"-":80}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":"        userPrefs.setDeskBoardFilePath(\"data/deskboard.xml\");"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"        userPrefs.setDeskBoardName(\"MyDeskBoard\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"karenfrilya97":4,"-":131}},{"path":"src/test/java/seedu/address/model/activity/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/RemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":" * Contains unit tests for {@code RemoveCommand} and integration tests (interactions with Model, UndoCommand"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":" * and RedoCommand)"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"public class RemoveCommandTest {"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"    private Model model \u003d new ModelManager(getTypicalDeskBoard(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    public void execute_validTaskOptionValidIndex_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        Activity activityToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_TASK_SUCCESS, activityToDelete);"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        expectedModel.deleteActivity(activityToDelete);"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"    public void execute_validEventOptionValidIndex_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        Activity activityToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(\"event\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_EVENT_SUCCESS, activityToDelete);"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        expectedModel.deleteActivity(activityToDelete);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"    public void execute_validOptionInvalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(\"task\", outOfBoundIndex);"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"    public void executeUndoRedo_validOptionValidIndex_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"        Activity activityToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"        Model expectedModel \u003d new ModelManager(model.getDeskBoard(), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        // delete -\u003e first activity deleted"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"        removeCommand.execute();"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"        undoRedoStack.push(removeCommand);"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"        // undo -\u003e reverts desk board back to previous state"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"        // redo -\u003e same first activity deleted again"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        expectedModel.deleteActivity(activityToDelete);"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"    public void executeUndoRedo_validOptionInvalidIndex_failure() {"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(\"task\", outOfBoundIndex);"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"    public void equals() throws Exception {"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeFirstCommand \u003d prepareCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeSecondCommand \u003d prepareCommand(\"task\", INDEX_SECOND_ACTIVITY);"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"        // same object -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"        assertTrue(removeFirstCommand.equals(removeFirstCommand));"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"        // same values -\u003e returns true"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeFirstCommandCopy \u003d prepareCommand(\"task\", INDEX_FIRST_ACTIVITY);"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"        assertTrue(removeFirstCommand.equals(removeFirstCommandCopy));"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"        removeFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"        assertFalse(removeFirstCommand.equals(removeFirstCommandCopy));"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"        // different types -\u003e returns false"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":"        assertFalse(removeFirstCommand.equals(1));"},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"        // null -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"        assertFalse(removeFirstCommand.equals(null));"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"        // different activity -\u003e returns false"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"        assertFalse(removeFirstCommand.equals(removeSecondCommand));"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"    private RemoveCommand prepareCommand(String activityOption, Index index) {"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(activityOption, index);"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"        removeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":"        return removeCommand;"},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":21,"-":2,"Kyomian":112}},{"path":"src/test/java/seedu/address/model/DeskBoardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT1;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.getTypicalDeskBoard;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"public class DeskBoardTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private final DeskBoard addressBook \u003d new DeskBoard();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(Collections.emptyList(), addressBook.getActivityList());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard newData \u003d getTypicalDeskBoard();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        // Repeat ASSIGNMENT1 twice"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivity\u003e newActivities \u003d Arrays.asList(ASSIGNMENT1, ASSIGNMENT1);"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ASSIGNMENT1.getTags());"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoardStub newData \u003d new DeskBoardStub(newActivities, newTags);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        addressBook.getActivityList().remove(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"     * A stub ReadOnlyDeskBoard whose activities and tags lists can violate interface constraints."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    private static class DeskBoardStub implements ReadOnlyDeskBoard {"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoardStub(Collection\u003cActivity\u003e activities, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"            this.activities.setAll(activities);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        public ObservableList\u003cActivity\u003e getActivityList() {"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"            return activities;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":21,"-":73}},{"path":"src/test/java/seedu/address/model/activity/LocationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//@@Author YuanQLLer"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"public class LocationTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    public void constructor_invalidLocation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"        String invalidLocation \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    public void isValidRemark() {"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        // null address"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        // invalid addresses"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(Location.isValidLocation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(Location.isValidLocation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        // valid addresses"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Location.isValidLocation(\"-\")); // one character"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        // long address"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    public void hashCodeTest() {"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(new Location(\"Clementi\").hashCode(), new Location(\"Clementi\").hashCode());"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        assertEquals(new Location(\"-\").hashCode(), new Location(\"-\").hashCode());"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    public void isEqual() {"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(new Location(\"Clementi\").equals(new Location(\"Clementi\")));"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(new Location(\"-\").equals(null));"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(new Location(\"-\").equals(\"-\"));"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(new Location(\"-\").equals(new Location(\"+\")));"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":49,"-":5}},{"path":"src/test/java/seedu/address/model/activity/EventOnlyPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//Author YuanQLLer"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"public class EventOnlyPredicateTest {"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"        EventOnlyPredicate firstPredicate \u003d new EventOnlyPredicate();"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"        EventOnlyPredicate secondPredicate \u003d new EventOnlyPredicate();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public void test_isEvent_returnsTrue() {"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        EventOnlyPredicate predicate \u003d new EventOnlyPredicate();"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new EventBuilder().withName(\"Event 1\").build()));"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test((Activity) new EventBuilder().withName(\"Activity\").build()));"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public void test_isNotEvent_returnsFalse() {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        EventOnlyPredicate predicate \u003d new EventOnlyPredicate();"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Task 1\").build()));"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test((Activity) new TaskBuilder().withName(\"Activity Task\").build()));"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":35,"-":13}},{"path":"src/test/java/seedu/address/model/activity/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"public class RemarkTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    public void constructor_invalidRemark_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"        String invalidRemark \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public void isValidRemark() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Remark.isValidRemark(\" Hello\")); // empty string"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Remark.isValidRemark(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Remark.isValidRemark(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Remark.isValidRemark(\"-\")); // one character"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(Remark.isValidRemark(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":14,"-":22}},{"path":"src/test/java/seedu/address/model/activity/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        // different activity -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withDateTime(\"04/04/2018 19:00\")"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"                .withRemark(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":12,"-":63}},{"path":"src/test/java/seedu/address/model/activity/DateTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"public class DateTimeTest {"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"        String invalidDateTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"    public void isValidDateTime_null_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    public void isValidDateTime_validDateTime() {"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"        assertTrue(DateTime.isValidDateTime(\"01/08/1995 12:00\"));"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"        assertTrue(DateTime.isValidDateTime(\"03/03/2019 12:00\"));"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        assertTrue(DateTime.isValidDateTime(\"3/3/2019 00:00\"));"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        assertTrue(DateTime.isValidDateTime(\"3/3/2019 23:59\"));"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    public void isValidDateTime_invalidDateTime() {"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"\"));"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\" \"));"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"2019/03/03 12:00\")); // YYMMDD"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"12:00 03/03/2019\")); // time before date"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"03-03-2019 12:00\")); // dash, instead of slash"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"32/12/2018 12:00\")); // wrong day"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"1/13/2018 10:00\")); // wrong month"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"1/12/0000 12:00\")); // wrong year"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        assertFalse(DateTime.isValidDateTime(\"1/8/1995 25:00\")); // wrong time"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":6,"Kyomian":41}},{"path":"src/test/java/seedu/address/logic/commands/EventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"public class EventCommandTest {"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        new EventCommand(null);"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        CommandResult commandResult \u003d getEventCommandForGivenEvent(validEvent, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        assertEquals(String.format(EventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateActivityException();"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"        thrown.expectMessage(EventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        getEventCommandForGivenEvent(validEvent, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    public void equals() {"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"        Event cip \u003d new EventBuilder().build();"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        Event cca \u003d new EventBuilder().withName(\"CCA\").build();"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        EventCommand addCipCommand \u003d new EventCommand(cip);"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"        EventCommand addCcaCommand \u003d new EventCommand(cca);"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"        assertTrue(addCipCommand.equals(addCipCommand));"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"        EventCommand addAssignmentCommandCopy \u003d new EventCommand(cip);"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        assertTrue(addCipCommand.equals(addAssignmentCommandCopy));"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"        // different types -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addCipCommand.equals(1));"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addCipCommand.equals(null));"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        // different activity -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"        assertFalse(addCipCommand.equals(addCcaCommand));"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"     * Generates a new EventCommand with the details of the given event."},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"    private EventCommand getEventCommandForGivenEvent(Event event, Model model) {"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"        EventCommand command \u003d new EventCommand(event);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"        return command;"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"    private class ModelStub implements Model {"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"        public void resetData(ReadOnlyDeskBoard newData) {"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"            return null;"},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"        public void deleteActivity(Activity target) throws ActivityNotFoundException {"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"        public void updateActivity(Activity target, Activity editedActivity)"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"                throws DuplicateActivityException {"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"        public ObservableList\u003cActivity\u003e getFilteredActivityList() {"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"        //@@author jasmoon"},{"lineNumber":135,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"jasmoon"},"content":"        public ObservableList\u003cActivity\u003e getFilteredTaskList()    {"},{"lineNumber":137,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":141,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"jasmoon"},"content":"        public ObservableList\u003cActivity\u003e getFilteredEventList() {"},{"lineNumber":143,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"jasmoon"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":147,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"jasmoon"},"content":"        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"},{"lineNumber":149,"author":{"gitID":"jasmoon"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":153,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"jasmoon"},"content":"     * A Model stub that always throw a DuplicateActivityException when trying to add a activity."},{"lineNumber":155,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"jasmoon"},"content":"    private class ModelStubThrowingDuplicateActivityException extends ModelStub {"},{"lineNumber":157,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"jasmoon"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":159,"author":{"gitID":"jasmoon"},"content":"            throw new DuplicateActivityException();"},{"lineNumber":160,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":162,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"jasmoon"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":164,"author":{"gitID":"jasmoon"},"content":"            return new DeskBoard();"},{"lineNumber":165,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":168,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"jasmoon"},"content":"     * A Model stub that always accept the activity being added."},{"lineNumber":170,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"jasmoon"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":172,"author":{"gitID":"jasmoon"},"content":"        final ArrayList\u003cActivity\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":173,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":174,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"jasmoon"},"content":"        public void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":176,"author":{"gitID":"jasmoon"},"content":"            requireNonNull(activity);"},{"lineNumber":177,"author":{"gitID":"jasmoon"},"content":"            eventsAdded.add(activity);"},{"lineNumber":178,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":180,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"jasmoon"},"content":"        public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":182,"author":{"gitID":"jasmoon"},"content":"            return new DeskBoard();"},{"lineNumber":183,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":5,"-":21,"Kyomian":107,"jasmoon":52}},{"path":"src/test/java/seedu/address/model/UniqueActivityListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT1;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT2;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.CCA;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.CIP;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.UniqueActivityList;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"public class UniqueActivityListTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    public void internalListAsObservable_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"        UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"        uniqueActivityList.internalListAsObservable().remove(0);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    //@@author karenfrilya97"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    public void add_taskWithEarlierDateTimeThanExisting_sortsListAutomatically() throws DuplicateActivityException {"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"        UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"        Task earlierTask \u003d ASSIGNMENT1;"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"        Task laterTask \u003d ASSIGNMENT2;"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"        uniqueActivityList.add(laterTask);"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"        uniqueActivityList.add(earlierTask);"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"        Activity firstActivityOnTheList \u003d uniqueActivityList.internalListAsObservable().get(0);"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(firstActivityOnTheList, earlierTask);"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    public void add_eventWithEarlierStartDateTimeThanExisting_sortsListAutomatically()"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"            throws DuplicateActivityException {"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"        UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"        Event earlierEvent \u003d CCA;"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"        Event laterEvent \u003d CIP;"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"        uniqueActivityList.add(laterEvent);"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"        uniqueActivityList.add(earlierEvent);"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"        Activity firstActivityOnTheList \u003d uniqueActivityList.internalListAsObservable().get(0);"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(firstActivityOnTheList, earlierEvent);"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":34,"YuanQLLer":4,"-":13,"jasmoon":2}},{"path":"src/test/java/seedu/address/testutil/ActivityBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":" * A utility class to help with building Activity objects."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"public interface ActivityBuilder\u003cT\u003e {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"    T build();"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":5,"Kyomian":5}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITY;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT1;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.testutil.TypicalActivities.ASSIGNMENT2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.DeskBoardBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    public void getFilteredActivitiesList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        modelManager.getFilteredActivityList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard addressBook \u003d new DeskBoardBuilder().withActivity(ASSIGNMENT1).withActivity(ASSIGNMENT2).build();"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard differentAddressBook \u003d new DeskBoard();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        String[] keywords \u003d ASSIGNMENT1.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        modelManager.updateFilteredActivityList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"        modelManager.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITY);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        differentUserPrefs.setDeskBoardName(\"differentName\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":13,"-":51,"jasmoon":1}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" * Build task for testing"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"public class TaskBuilder implements ActivityBuilder {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_NAME \u003d \"Assignment\";"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_DATETIME \u003d \"04/04/2018 08:10\";"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_REMARK \u003d \"Urgent\";"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_TAGS \u003d \"Optional\";"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    private DateTime dateTime;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    private Remark remark;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder() {"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        dateTime \u003d new DateTime(DEFAULT_DATETIME);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"     * Initializes the ActivityBuilder with the data of {@code taskToCopy}."},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        dateTime \u003d taskToCopy.getDateTime();"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        remark \u003d taskToCopy.getRemark();"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"     * Initializes the ActivityBuilder with the data of {@code taskToCopy}."},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder(Activity activityToCopy) {"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        name \u003d activityToCopy.getName();"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        dateTime \u003d activityToCopy.getDateTime();"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        remark \u003d activityToCopy.getRemark();"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d new HashSet\u003c\u003e(activityToCopy.getTags());"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Name} of the {@code Activity} that we are building."},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Activity} that we are building."},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder withTags(String... tags) {"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Remark} of the {@code Activity} that we are building."},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder withRemark(String remark) {"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code DateTime} of the {@code Activity} that we are building."},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    public TaskBuilder withDateTime(String dateTime) {"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        this.dateTime \u003d new DateTime(dateTime);"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    public Task build() {"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"        return new Task(name, dateTime, remark, tags);"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":83,"-":3,"Kyomian":5}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    public void internalListAsObservable_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"        uniqueTagList.internalListAsObservable().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":17,"jasmoon":2}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" * This the class to build event"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"public class EventBuilder implements ActivityBuilder {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_NAME \u003d \"CIP\";"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_START_DATETIME \u003d \"04/04/2018 08:10\";"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_END_DATETIME \u003d \"04/04/2018 10:00\";"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_LOCATION \u003d \"123, Jurong West Ave 6\";"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_REMARK \u003d \"nil\";"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    public static final String DEFAULT_TAGS \u003d \"optional\";"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    private DateTime startDateTime;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    private DateTime endDateTime;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    private Location location;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    private Remark remark;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder() {"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        startDateTime \u003d new DateTime(DEFAULT_START_DATETIME);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        endDateTime \u003d new DateTime(DEFAULT_END_DATETIME);"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"     * Initializes the EventBuilder with the data of {@code activityToCopy}."},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder(Event eventToCopy) {"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        name \u003d eventToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        startDateTime \u003d eventToCopy.getStartDateTime();"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        endDateTime \u003d eventToCopy.getEndDateTime();"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        location \u003d eventToCopy.getLocation();"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        remark \u003d eventToCopy.getRemark();"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Name} of the {@code Activity} that we are building."},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Activity} that we are building."},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Remark} of the {@code Activity} that we are building."},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withRemark(String remark) {"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code DateTime} of the {@code Activity} that we are building."},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withStartDateTime(String dateTime) {"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        this.startDateTime \u003d new DateTime(dateTime);"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code DateTime} of the {@code Activity} that we are building."},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withEndDateTime(String dateTime) {"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"        this.endDateTime \u003d new DateTime(dateTime);"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Location} of the {@code Activity} that we are building."},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"    public EventBuilder withLocation (String location) {"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"        this.location \u003d new Location(location);"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"    //@@author Kyomian"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"    public Event build() {"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"        return new Event(name, startDateTime, endDateTime, location, remark, tags);"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":94,"-":8,"Kyomian":6}},{"path":"src/test/java/seedu/address/model/activity/TaskOnlyPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//@@Author YuanQLLer"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"public class TaskOnlyPredicateTest {"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"        TaskOnlyPredicate firstPredicate \u003d new TaskOnlyPredicate();"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"        TaskOnlyPredicate secondPredicate \u003d new TaskOnlyPredicate();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(firstPredicate.equals(secondPredicate));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public void test_isEvent_returnsTrue() {"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        TaskOnlyPredicate predicate \u003d new TaskOnlyPredicate();"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Task 1\").build()));"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        assertTrue(predicate.test((Activity) new TaskBuilder().withName(\"Activity\").build()));"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public void test_isNotEvent_returnsFalse() {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        TaskOnlyPredicate predicate \u003d new TaskOnlyPredicate();"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test(new EventBuilder().withName(\"Task 1\").build()));"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        assertFalse(predicate.test((Activity) new EventBuilder().withName(\"Activity Task\").build()));"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":34,"-":13}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"    public static final Index INDEX_FIRST_ACTIVITY \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"    public static final Index INDEX_SECOND_ACTIVITY \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"    public static final Index INDEX_THIRD_ACTIVITY \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the middle index of the activity in the {@code model}\u0027s activity list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        return Index.fromOneBased(model.getDeskBoard().getActivityList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the last index of the activity in the {@code model}\u0027s activity list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        return Index.fromOneBased(model.getDeskBoard().getActivityList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the activity in the {@code model}\u0027s activity list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    public static Activity getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        return model.getDeskBoard().getActivityList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":8,"-":46}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.storage.XmlAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.testutil.TypicalActivities.CIP;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":11,"author":{"gitID":"karenfrilya97"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"public class XmlAdaptedEventTest {"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"    private static final Event CIP_EVENT \u003d CIP;"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_NAME \u003d \"Rachel\u0027s Bday\";"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_DATE_TIME \u003d \"23 April 2018\";"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_LOCATION \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_NAME \u003d CIP_EVENT.getName().toString();"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_START_DATE_TIME \u003d CIP_EVENT.getStartDateTime().toString();"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_END_DATE_TIME \u003d CIP_EVENT.getEndDateTime().toString();"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_LOCATION \u003d CIP_EVENT.getLocation().toString();"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    private static final String VALID_REMARK \u003d CIP_EVENT.getRemark().toString();"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d CIP_EVENT.getTags().stream()"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(CIP_EVENT);"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"        assertEquals(CIP_EVENT, event.toModelType());"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(INVALID_NAME, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"                        VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"                VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, event.getActivityType(), \"name\");"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidStartDateTime_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, INVALID_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"                        VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_DATETIME_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_nullStartDateTime_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, null, VALID_END_DATE_TIME,"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"                VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT, event.getActivityType(), \"start date/time\");"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidEndDateTime_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_START_DATE_TIME, INVALID_DATE_TIME,"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":"                VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_DATETIME_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_nullEndDateTime_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_START_DATE_TIME, null,"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"                VALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT, event.getActivityType(), \"end date/time\");"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidLocation_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":"                INVALID_LOCATION, VALID_REMARK, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"        String expectedMessage \u003d Location.MESSAGE_LOCATION_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"karenfrilya97"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"karenfrilya97"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"                VALID_LOCATION, VALID_REMARK, invalidTags);"},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"        Assert.assertThrows(IllegalValueException.class, event::toModelType);"},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":104,"YuanQLLer":3,"-":5}},{"path":"src/test/java/seedu/address/testutil/DeskBoardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" *     {@code DeskBoard ab \u003d new DeskBoardBuilder().withActivity(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public class DeskBoardBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    private DeskBoard deskBoard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoardBuilder() {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"        deskBoard \u003d new DeskBoard();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoardBuilder(DeskBoard deskBoard) {"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        this.deskBoard \u003d deskBoard;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"     * Adds a new {@code Activity} to the {@code DeskBoard} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoardBuilder withActivity(Activity activity) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"            deskBoard.addActivity(activity);"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        } catch (DuplicateActivityException dpe) {"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"            throw new IllegalArgumentException(\"activity is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code DeskBoard} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoardBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"            deskBoard.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoard build() {"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoard;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":20,"-":33}},{"path":"src/test/java/seedu/address/testutil/EventsUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"// Note that this class is for Event Handling, and not for Activity.Event class"},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper methods related to events."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EventsUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * has been posted to all subscribers."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static void postNow(BaseEvent event) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers at some unspecified time in the future."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void postLater(BaseEvent event) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":25,"Kyomian":2}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":" * A utility class for Task."},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"public class TaskUtil {"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"     * Returns a task command string for adding the {@code task}."},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"    public static String getTaskCommand(Task task) {"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"        return TaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"    public static String getTaskDetails(Task task) {"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_DATE_TIME + task.getDueDateTime().toString() + \" \");"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_REMARK + task.getRemark().value + \" \");"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"        task.getTags().stream().forEach("},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        );"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"karenfrilya97":1,"YuanQLLer":1,"-":3,"Kyomian":31}},{"path":"src/test/java/seedu/address/testutil/TypicalActivities.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":" * A utility class containing a list of {@code Activity} objects to be used in tests."},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"public class TypicalActivities {"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    public static final Task ASSIGNMENT1 \u003d new TaskBuilder().withName(\"CS2101Assignment\")"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\" \")"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"            .withDateTime(\"04/03/2018 23:59\")"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"            .withTags(\"CS2101\").build();"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public static final Task ASSIGNMENT2 \u003d new TaskBuilder().withName(\"CS2102Assignment\")"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\" \")"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"            .withDateTime(\"15/03/2018 23:59\")"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"            .withTags(\"CS2102\").build();"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    public static final Task QUIZ \u003d new TaskBuilder().withName(\"CS2101Quiz\")"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"            .withDateTime(\"19/03/2018 23:59\")"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"IVLE Quiz\").build();"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    public static final Event CCA \u003d new EventBuilder().withName(\"CCA\")"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"            .withStartDateTime(\"01/04/2018 20:00\")"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"            .withEndDateTime(\"01/04/2018 21:00\")"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"            .withLocation(\"Campus\")"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"nil\").build();"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    public static final Event CIP \u003d new EventBuilder().withName(\"CIP\")"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"            .withStartDateTime(\"02/04/2018 08:00\")"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"            .withEndDateTime(\"02/04/2018 12:00\")"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"            .withLocation(\"michegan ave\")"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"nil\")"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"            .withTags(\"CIP\").build();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public static final Event EXAM1 \u003d new EventBuilder().withName(\"CS2101Exam\")"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"            .withStartDateTime(\"28/04/2018 09:00\")"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"            .withEndDateTime(\"28/04/2018 11:00\")"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"            .withLocation(\"MPSH\")"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"nil\")"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"            .withTags(\"CS2101\").build();"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    public static final Event IFG \u003d new EventBuilder().withName(\"InterFacultyGame\")"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"            .withStartDateTime(\"04/01/2018 20:00\")"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"            .withEndDateTime(\"04/01/2018 22:00\")"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"            .withLocation(\"MPSH 1\")"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"nil\").build();"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    public static final Task ASSIGNMENT3 \u003d new TaskBuilder().withName(\"CS2102Assignment\")"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"            .withDateTime(\"01/04/2018 20:00\")"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"nil\").build();"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"    public static final Event DEMO1 \u003d new EventBuilder().withName(\"CS2102ProjectDemo\")"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"            .withStartDateTime(\"04/04/2018 09:00\")"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"            .withEndDateTime(\"04/04/2018 10:00\")"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"            .withRemark(\"FinalDemo\").build();"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    private TypicalActivities() {} // prevents instantiation"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an {@code DeskBoard} with all the typical activities."},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    public static DeskBoard getTypicalDeskBoard() {"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoard deskBoard \u003d new DeskBoard();"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"        for (Activity activity : getTypicalActivities()) {"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"            try {"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"                deskBoard.addActivity(activity);"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"            } catch (DuplicateActivityException e) {"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"                throw new AssertionError(\"Not possible\");"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoard;"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"    public static List\u003cActivity\u003e getTypicalActivities() {"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT1, ASSIGNMENT2, QUIZ, CCA, CIP, EXAM1, IFG));"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    public static List\u003cActivity\u003e getTypicalTask() {"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT1, ASSIGNMENT2, QUIZ));"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":82,"-":4,"Kyomian":2}},{"path":"src/test/java/seedu/address/testutil/EditActivityDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.EditCommand.EditActivityDescriptor;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" * A utility class to help with building EditActivityDescriptor objects."},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"public class EditActivityDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    private EditActivityDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"        descriptor \u003d new EditActivityDescriptor();"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder(EditCommand.EditActivityDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        this.descriptor \u003d new EditActivityDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an {@code EditActivityDescriptor} with fields containing {@code activity}\u0027s details"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder(Activity activity) {"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        descriptor \u003d new EditActivityDescriptor();"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setName(activity.getName());"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setDateTime(activity.getDateTime());"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setRemark(activity.getRemark());"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setTags(activity.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Name} of the {@code EditActivityDescriptor} that we are building."},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code DateTime} of the {@code EditActivityDescriptor} that we are building."},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder withPhone(String phone) {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setDateTime(new DateTime(phone));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"     * Sets the {@code Remark} of the {@code EditActivityDescriptor} that we are building."},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder withAddress(String address) {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        descriptor.setRemark(new Remark(address));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditActivityDescriptor}"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"     * that we are building."},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptorBuilder withTags(String... tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    public EditActivityDescriptor build() {"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"        return descriptor;"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":55,"-":23}},{"path":"src/test/java/seedu/address/testutil/EventUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.EventCommand;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":" * A utility class for Event."},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"public class EventUtil {"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"     * Returns an event command string for adding the {@code event}."},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public static String getEventCommand(Event event) {"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"        return EventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"     * Returns the part of command string for the given {@code event}\u0027s details."},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    public static String getEventDetails(Event event) {"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_NAME + event.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_START_DATETIME + event.getStartDateTime().toString() + \" \");"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_END_DATETIME + event.getEndDateTime().toString() + \" \");"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_LOCATION + event.getLocation().toString() + \" \");"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        sb.append(PREFIX_REMARK + event.getRemark().value + \" \");"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        event.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":1,"Kyomian":37}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":" * Provides a handle to a activity card in the activity list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":70}},{"path":"src/test/java/guitests/guihandles/PersonListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.ui.ActivityCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":" * Provides a handle for {@code ActivityListPanel} containing the list of {@code ActivityCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cActivityCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    private Optional\u003cActivityCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    public PersonListPanelHandle(ListView\u003cActivityCard\u003e personListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(personListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code PersonCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public PersonCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivityCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (personList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"Activity list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new PersonCardHandle(personList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivityCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"     * Navigates the listview to display and select the activity."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    public void navigateToCard(Activity activity) {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivityCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        Optional\u003cActivityCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.activity.equals(activity)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"            throw new IllegalArgumentException(\"Activity does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the activity card handle of a activity associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).activity);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code activity} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    public PersonCardHandle getPersonCardHandle(Activity activity) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"                .filter(card -\u003e card.activity.equals(activity))"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .map(card -\u003e new PersonCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Activity does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"     * Selects the {@code ActivityCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"     * Remembers the selected {@code ActivityCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivityCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"     * Returns true if the selected {@code ActivityCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivityCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":25,"-":109}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.ui.ActivityPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//TODO: Replace this panel in the future."},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: URL may need to be  change"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    private void loadPersonPage(Activity activity) {"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        loadPage(SEARCH_PAGE_URL + activity.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    private void handlePersonPanelSelectionChangedEvent(ActivityPanelSelectionChangedEvent event) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        loadPersonPage(event.getNewSelection().activity);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":8,"-":66}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: Change to a new icon"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/calendar_32.png\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":118}},{"path":"src/test/java/guitests/guihandles/TaskCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":" * Handler for task card"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"    private static final String DUEDATE_FIELD_ID \u003d \"#dueDate\";"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"    private final Label dueDateLabel;"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    private final Label remarkLabel;"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"    public TaskCardHandle(Node cardNode) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"        this.dueDateLabel \u003d getChildNode(DUEDATE_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"    public String getDateTime() {"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"        return dueDateLabel.getText();"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    public String getRemark() {"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"        return remarkLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"jasmoon":21}},{"path":"src/test/java/guitests/guihandles/EventCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":" * Handler for event card"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"public class EventCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"    private static final String STARTDATE_FIELD_ID \u003d \"#startDate\";"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"    private static final String ENDDATE_FIELD_ID \u003d \"#endDate\";"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"    private static final String LOCATION_FIELD_ID \u003d \"#location\";"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    private final Label startDateLabel;"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"    private final Label endDateLabel;"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"    private final Label locationLabel;"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"    private final Label remarkLabel;"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"    public EventCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"        this.startDateLabel \u003d getChildNode(STARTDATE_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"        this.endDateLabel \u003d getChildNode(ENDDATE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"        this.locationLabel \u003d getChildNode(LOCATION_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    public String getStartDateTime() {"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"        return startDateLabel.getText();"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"    public String getEndDateTime() {"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"        return endDateLabel.getText();"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"    public String getLocation() {"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"        return locationLabel.getText();"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"    public String getRemark() {"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"        return remarkLabel.getText();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"jasmoon":35}},{"path":"src/main/java/seedu/address/ui/util/DateTimeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.ui.util;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":" * Formats DateTime for display in UI"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":" * Example: 01/08/2018 08:00 is displayed as 1 Aug 2018 08:00 in the UI"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"public class DateTimeUtil {"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"    private static final String DISPLAYED_DATETIME_FORMAT \u003d \"d MMM y HH:mm\";"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(DISPLAYED_DATETIME_FORMAT);"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"     * Formats DateTime of task as day, name of month, year, hours and minutes"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    public static String getDisplayedDateTime(Task task) throws DateTimeException {"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"        DateTime dateTime \u003d task.getDateTime();"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"        String displayedDateTime \u003d displayFormatter.format(dateTime.getLocalDateTime());"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"        return displayedDateTime;"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"     * Formats StartDateTime of event as day, name of month, year, hours and minutes"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    public static String getDisplayedStartDateTime(Event event) throws DateTimeException {"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        DateTime dateTime \u003d event.getStartDateTime();"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        String displayedDateTime \u003d displayFormatter.format(dateTime.getLocalDateTime());"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        return displayedDateTime;"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"     * Formats EndDateTime of event as day, name of month, year, hours and minutes"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"    public static String getDisplayedEndDateTime(Event event) throws DateTimeException {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        DateTime dateTime \u003d event.getEndDateTime();"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        String displayedDateTime \u003d displayFormatter.format(dateTime.getLocalDateTime());"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        return displayedDateTime;"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"Kyomian":43}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import static seedu.address.ui.util.DateTimeUtil.getDisplayedDateTime;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"    public final Task task;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    private HBox cardPane;"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"    private Label name;"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    private Label id;"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"    private Label dateTime;"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"    private Label remark;"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    private FlowPane tags;"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"    private FlowPane status;"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"    public TaskCard(Activity task, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"        this.task \u003d (Task) task;"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"        name.setText(this.task.getName().fullName);"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"        dateTime.setText(getDisplayedDateTime(this.task));"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"        remark.setText(this.task.getRemark().value);"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"        if (task.isCompleted()) {"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"            status.getChildren().add(new Label(\"Completed\"));"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"            status.getChildren().add(new Label(\"Uncompleted\"));"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"jasmoon":70}},{"path":"src/main/java/seedu/address/ui/ActivityListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.ui.ActivityPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":" * Panel containing the list of activities."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"public class ActivityListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    private static final String FXML \u003d \"ActivityListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    private ListView\u003cActivityCard\u003e activityListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    private Label emptyLabel \u003d new Label(\"Event List is empty!\");"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public ActivityListPanel(ObservableList\u003cActivity\u003e activityList) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        setConnections(activityList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"        activityListView.setPlaceholder(emptyLabel);"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"        emptyLabel.setStyle(\"-fx-font-family: \\\"Open Sans\\\"; -fx-font-size: 25px; \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    private void setConnections(ObservableList\u003cActivity\u003e activityList) {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        ObservableList\u003cActivityCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"                activityList, (activity) -\u003e new ActivityCard(activity, activityList.indexOf(activity) + 1));"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        activityListView.setItems(mappedList);"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        activityListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"                        logger.fine(\"Selection in activity list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"                        raise(new ActivityPanelSelectionChangedEvent(newValue));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"     * Scrolls to the {@code ActivityCard} at the {@code index} and selects it."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"            activityListView.scrollTo(index);"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"            activityListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ActivityCard}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"    class ActivityListViewCell extends ListCell\u003cActivityCard\u003e {"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"        protected void updateItem(ActivityCard activity, boolean empty) {"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"            super.updateItem(activity, empty);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"            if (empty || activity \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"                setGraphic(activity.getRoot());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":25,"-":62,"jasmoon":6}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    public void handleAddressBookChangedEvent(DeskBoardChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":79}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowActivityRequestEvent;"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowEventOnlyRequestEvent;"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowTaskOnlyRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"    private EventListPanel eventListPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"    private StackPane eventListPanelPlaceholder;"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":"        //@@author jasmoon"},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":"        //@@author"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getDeskBoardFilePath());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":198,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":199,"author":{"gitID":"jasmoon"},"content":"    @Subscribe"},{"lineNumber":200,"author":{"gitID":"jasmoon"},"content":"    private void handleShowActivityRequestEvent(ShowActivityRequestEvent event)    {"},{"lineNumber":201,"author":{"gitID":"jasmoon"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":202,"author":{"gitID":"jasmoon"},"content":"        taskListPanel.getTaskListView().setVisible(true);"},{"lineNumber":203,"author":{"gitID":"jasmoon"},"content":"        eventListPanel.getEventListView().setVisible(true);"},{"lineNumber":204,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":206,"author":{"gitID":"jasmoon"},"content":"    @Subscribe"},{"lineNumber":207,"author":{"gitID":"jasmoon"},"content":"    private void handleShowEventOnlyRequestEvent(ShowEventOnlyRequestEvent event)   {"},{"lineNumber":208,"author":{"gitID":"jasmoon"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":209,"author":{"gitID":"jasmoon"},"content":"        taskListPanel.getTaskListView().setVisible(false);"},{"lineNumber":210,"author":{"gitID":"jasmoon"},"content":"        eventListPanel.getEventListView().setVisible(true);"},{"lineNumber":211,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":213,"author":{"gitID":"jasmoon"},"content":"    @Subscribe"},{"lineNumber":214,"author":{"gitID":"jasmoon"},"content":"    private void handleShowTaskOnlyRequestEvent(ShowTaskOnlyRequestEvent event) {"},{"lineNumber":215,"author":{"gitID":"jasmoon"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":216,"author":{"gitID":"jasmoon"},"content":"        taskListPanel.getTaskListView().setVisible(true);"},{"lineNumber":217,"author":{"gitID":"jasmoon"},"content":"        eventListPanel.getEventListView().setVisible(false);"},{"lineNumber":218,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":176,"jasmoon":42}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_ACTIVITY_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_INVALID_HELP_REQUEST \u003d \"Help for \u0027%s\u0027 is unknown or not available.\";"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_INVALID_LIST_REQUEST \u003d \"List for \u0027%s\u0027 is invalid\";"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":10,"jasmoon":5}},{"path":"src/main/java/seedu/address/ui/ActivityCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":" * An UI component that displays information of a {@code Activity}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"//TODO: NEED TO CHANGE"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public class ActivityCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    private static final String FXML \u003d \"ActivityListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on DeskBoard level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    public final Activity activity;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    private Label dateTime;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    private Label remark;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    private FlowPane status;"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    public ActivityCard(Activity activity, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        this.activity \u003d activity;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        name.setText(activity.getName().fullName);"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        dateTime.setText(activity.getDateTime().toString());"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        remark.setText(activity.getRemark().value);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        activity.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        if (activity.isCompleted()) {"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"            status.getChildren().add(new Label(\"Completed\"));"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"            status.getChildren().add(new Label(\"Uncompleted\"));"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        if (!(other instanceof ActivityCard)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"        ActivityCard card \u003d (ActivityCard) other;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 activity.equals(card.activity);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":25,"-":49}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"    private String appTitle \u003d \"CLIndar\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"karenfrilya97":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    //TODO : Change the file name later"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":130}},{"path":"src/main/java/seedu/address/ui/EventCard.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"//@author jasmoon"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.ui.util.DateTimeUtil.getDisplayedEndDateTime;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.ui.util.DateTimeUtil.getDisplayedStartDateTime;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":" * An UI component that displays information of a {@code Event}."},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"    public final Event event;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    private Label startDateTime;"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"    private Label endDateTime;"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"    private Label locationEvent;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    private Label remark;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public EventCard(Activity event, int displayedIndex)   {"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        assert (event instanceof  Event) : \"The activity passed in should be of type Event\";"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        this.event \u003d (Event) event;"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        name.setText(this.event.getName().fullName);"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        startDateTime.setText(getDisplayedStartDateTime(this.event));"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        endDateTime.setText(getDisplayedEndDateTime(this.event));"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        locationEvent.setText(this.event.getLocation().toString());"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        remark.setText(this.event.getRemark().value);"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"        event.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"        if (!(other instanceof EventCard)) {"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"        // state check"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"        EventCard card \u003d (EventCard) other;"},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"                \u0026\u0026 event.equals(card.event);"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":8,"-":27,"Kyomian":5,"jasmoon":31}},{"path":"src/main/java/seedu/address/commons/events/ui/ActivityPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.ui.ActivityCard;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * Represents a selection change in the Activity List Panel"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"public class ActivityPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"    private final ActivityCard newSelection;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    public ActivityPanelSelectionChangedEvent(ActivityCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public ActivityCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowActivityRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":" * An event requesting to view all activites - tasks and events."},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"public class ShowActivityRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":9,"jasmoon":6}},{"path":"src/main/java/seedu/address/commons/events/ui/PanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":" * Represents a selection change in the Panel"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"public class PanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"    private final Object newSelection;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    public PanelSelectionChangedEvent(Object newSelection) {"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    public Object getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"jasmoon":27}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.DeselectListCellEvent;"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.PanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":" * Panel containing the list of events."},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"    private ListView\u003cEventCard\u003e eventListView;"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    private Label emptyLabel \u003d new Label(\"Event List is empty!\");"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"    public EventListPanel(ObservableList\u003cActivity\u003e eventList) {"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"        setConnections(eventList);"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"        setUpPlaceHolder();"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"        //maybe do not need this"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"        //eventListView.managedProperty().bind(eventListView.visibleProperty());"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"    private void setConnections(ObservableList\u003cActivity\u003e eventList) {"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"        ObservableList\u003cEventCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"                eventList, (event) -\u003e new EventCard(event, eventList.indexOf(event) + 1));"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"        eventListView.setItems(mappedList);"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"        linkCell();"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"    private void setUpPlaceHolder()   {"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"        eventListView.setPlaceholder(emptyLabel);"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"        emptyLabel.setStyle(\"-fx-font-family: \\\"Open Sans\\\"; -fx-font-size: 25px; \");"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"     * Links eventListView to eventListViewCell as its custom ListCell"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"    private void linkCell() {"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"        eventListView.setCellFactory(listView -\u003e {"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"            EventListViewCell cell \u003d new EventListViewCell();"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"            cell.addEventFilter(MouseEvent.MOUSE_PRESSED, event -\u003e {"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"                eventListView.requestFocus();"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"                if (!cell.isEmpty()) {"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"                    int index \u003d cell.getIndex();"},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"                    if (eventListView.getSelectionModel().getSelectedIndices().contains(index))  {"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"                        logger.fine(\"Selection in event list panel with index \u0027\" + index"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"                                + \"\u0027 has been deselected\");"},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":"                        raise(new DeselectListCellEvent(eventListView, index));"},{"lineNumber":72,"author":{"gitID":"jasmoon"},"content":"                    } else {"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"                        eventListView.getSelectionModel().select(index);"},{"lineNumber":74,"author":{"gitID":"jasmoon"},"content":"                    }"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"                    event.consume();"},{"lineNumber":76,"author":{"gitID":"jasmoon"},"content":"                }"},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":"            });"},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"            return cell;"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":"        });"},{"lineNumber":80,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":82,"author":{"gitID":"jasmoon"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":"        eventListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":86,"author":{"gitID":"jasmoon"},"content":"                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":87,"author":{"gitID":"jasmoon"},"content":"                        raise(new PanelSelectionChangedEvent(newValue));"},{"lineNumber":88,"author":{"gitID":"jasmoon"},"content":"                    }"},{"lineNumber":89,"author":{"gitID":"jasmoon"},"content":"                });"},{"lineNumber":90,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":92,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"jasmoon"},"content":"     * Scrolls to the {@code EventCard} at the {@code index} and selects it."},{"lineNumber":94,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"jasmoon"},"content":"    private void scrollTo(int index) {"},{"lineNumber":96,"author":{"gitID":"jasmoon"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":97,"author":{"gitID":"jasmoon"},"content":"            eventListView.scrollTo(index);"},{"lineNumber":98,"author":{"gitID":"jasmoon"},"content":"            eventListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":99,"author":{"gitID":"jasmoon"},"content":"        });"},{"lineNumber":100,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":102,"author":{"gitID":"jasmoon"},"content":"    @Subscribe"},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":106,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":108,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EventCard}."},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":"    class EventListViewCell extends ListCell\u003cEventCard\u003e {"},{"lineNumber":112,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":113,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"        protected void updateItem(EventCard event, boolean empty) {"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"            super.updateItem(event, empty);"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":117,"author":{"gitID":"jasmoon"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"                setGraphic(null);"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"                setText(null);"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"            } else {"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"                setGraphic(event.getRoot());"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":"     * Getter method for eventListView"},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"     * @return eventListView"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":"    public ListView\u003cEventCard\u003e getEventListView()   {"},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":"        return eventListView;"},{"lineNumber":133,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"jasmoon":134}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowTaskOnlyRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":" * An event requesting to view only events."},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"public class ShowTaskOnlyRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":8,"jasmoon":6}},{"path":"src/main/java/seedu/address/commons/events/ui/DeselectListCellEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import seedu.address.ui.EventCard;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"public class DeselectListCellEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"    public DeselectListCellEvent(ListView\u003cEventCard\u003e panel, int targetIndex) {"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"        panel.getSelectionModel().clearSelection(targetIndex);"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":9,"jasmoon":12}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.DeselectListCellTask;"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.PanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":" * Panel containing the list of activities."},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    private Label emptyLabel \u003d new Label(\"Task List is empty!\");"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"    public TaskListPanel(ObservableList\u003cActivity\u003e taskList) {"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"        setConnections(taskList);"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"        setUpPlaceholder();"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    private void setUpPlaceholder() {"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"        taskListView.setPlaceholder(emptyLabel);"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"        emptyLabel.setStyle(\"-fx-font-family: \\\"Open Sans\\\"; -fx-font-size: 25px; \");"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"    private void setConnections(ObservableList\u003cActivity\u003e taskList) {"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"                taskList, (activity) -\u003e new TaskCard(activity, taskList.indexOf(activity) + 1));"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"        linkCell();"},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"     * Links taskListView to taskListViewCell as its custom ListCell"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"    private void linkCell() {"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"        taskListView.setCellFactory(listView -\u003e {"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"            TaskListViewCell cell \u003d new TaskListViewCell();"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"            cell.addEventFilter(MouseEvent.MOUSE_PRESSED, event -\u003e {"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"                taskListView.requestFocus();"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"                if (!cell.isEmpty()) {"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"                    int index \u003d cell.getIndex();"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"                    if (taskListView.getSelectionModel().getSelectedIndices().contains(index))  {"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":"                        logger.fine(\"Selection in task list panel with index \u0027\" + index"},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"                                + \"\u0027 has been deselected\");"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"                        raise(new DeselectListCellTask(taskListView, index));"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":"                    } else {"},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":"                        taskListView.getSelectionModel().select(index);"},{"lineNumber":72,"author":{"gitID":"jasmoon"},"content":"                    }"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"                    event.consume();"},{"lineNumber":74,"author":{"gitID":"jasmoon"},"content":"                }"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"            });"},{"lineNumber":76,"author":{"gitID":"jasmoon"},"content":"            return cell;"},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":"        });"},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":80,"author":{"gitID":"jasmoon"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":81,"author":{"gitID":"jasmoon"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":82,"author":{"gitID":"jasmoon"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":83,"author":{"gitID":"jasmoon"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":84,"author":{"gitID":"jasmoon"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":85,"author":{"gitID":"jasmoon"},"content":"                        raise(new PanelSelectionChangedEvent(newValue));"},{"lineNumber":86,"author":{"gitID":"jasmoon"},"content":"                    }"},{"lineNumber":87,"author":{"gitID":"jasmoon"},"content":"                });"},{"lineNumber":88,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":90,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"jasmoon"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."},{"lineNumber":92,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"jasmoon"},"content":"    private void scrollTo(int index) {"},{"lineNumber":94,"author":{"gitID":"jasmoon"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":95,"author":{"gitID":"jasmoon"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":96,"author":{"gitID":"jasmoon"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":97,"author":{"gitID":"jasmoon"},"content":"        });"},{"lineNumber":98,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":100,"author":{"gitID":"jasmoon"},"content":"    @Subscribe"},{"lineNumber":101,"author":{"gitID":"jasmoon"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":102,"author":{"gitID":"jasmoon"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":106,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":107,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":108,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":112,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":113,"author":{"gitID":"jasmoon"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"        protected void updateItem(TaskCard activity, boolean empty) {"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"            super.updateItem(activity, empty);"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":117,"author":{"gitID":"jasmoon"},"content":"            if (empty || activity \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"                setGraphic(null);"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"                setText(null);"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"            } else {"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"                setGraphic(activity.getRoot());"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":"     * Getter method for taskListView"},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"     * @return taskListView"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":"    public ListView\u003cTaskCard\u003e getTaskListView()   {"},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":"        return taskListView;"},{"lineNumber":133,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"jasmoon":134}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    /** Returns an unmodifiable view of the filtered list of activities */"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    ObservableList\u003cActivity\u003e getFilteredActivitiesList();"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredTaskList();"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"    /** Returns an unmodifiable view of the filtered list of events*/"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredEventList();"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"    //@@author"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":23,"jasmoon":12}},{"path":"src/main/java/seedu/address/commons/events/ui/DeselectListCellTask.java","lines":[{"lineNumber":1,"author":{"gitID":"jasmoon"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"public class DeselectListCellTask extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"    public DeselectListCellTask(ListView\u003cTaskCard\u003e panel, int targetIndex) {"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"        panel.getSelectionModel().clearSelection(targetIndex);"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":9,"jasmoon":12}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowEventOnlyRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":" * An event requesting to view only events."},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":"public class ShowEventOnlyRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":9,"jasmoon":6}},{"path":"src/main/java/seedu/address/commons/events/model/DeskBoardChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"/** Indicates the DeskBoard in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"public class DeskBoardChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"    public final ReadOnlyDeskBoard data;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoardChangedEvent(ReadOnlyDeskBoard data) {"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"        return \"number of activities \" + data.getActivityList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":16,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/Prefix.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":" * E.g. \u0027n/\u0027 in \u0027task n/Software Engineering Milestone 1\u0027."},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"Kyomian":1}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code String datetime} into a {@code DateTime}."},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the given {@code datetime} is invalid."},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"    public static DateTime parseDateTime(String datetime) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(datetime);"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"        String trimmedDateTime \u003d datetime.trim();"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        return new DateTime(trimmedDateTime);"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cDateTime\u003e} if {@code datetime} is present."},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"    public static Optional\u003cDateTime\u003e parseDateTime(Optional\u003cString\u003e datetime) throws IllegalValueException {"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(datetime);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        return datetime.isPresent() ? Optional.of(parseDateTime(datetime.get())) : Optional.empty();"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code String location} into a {@code Location}."},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the given {@code location} is invalid."},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"    public static Location parseLocation(String location) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(location);"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code Optional\u003cString\u003e location} into an {@code Optional\u003cLocation\u003e} if {@code location} is present."},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(location);"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"        return location.isPresent() ? Optional.of(parseLocation(location.get())) : Optional.empty();"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the given {@code remark} is invalid."},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"    public static Remark parseRemark(String remark) throws IllegalValueException {"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(remark);"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"        if (!Remark.isValidRemark(trimmedRemark)) {"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":140,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(remark);"},{"lineNumber":143,"author":{"gitID":"Kyomian"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":144,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":146,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Kyomian"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":148,"author":{"gitID":"Kyomian"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"Kyomian"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"Kyomian"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(tag);"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":155,"author":{"gitID":"Kyomian"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(tags);"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":"        for (String tagName : tags) {"},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"        return tagSet;"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":14,"Kyomian":156}},{"path":"src/main/java/seedu/address/logic/parser/HelpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.CompleteCommand;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.EventCommand;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":" * Parses input arguments and create a new HelpCommand object."},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    public final ArrayList\u003cString\u003e availableCommands;"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"     * HelpCommandParser constructor - creates an ArrayList which contains all commands open to the help function."},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    public HelpCommandParser()  {"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"        availableCommands \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(RemoveCommand.COMMAND_WORD);"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(EditCommand.COMMAND_WORD);"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(FindCommand.COMMAND_WORD);"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(SelectCommand.COMMAND_WORD);"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(TaskCommand.COMMAND_WORD);"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(EventCommand.COMMAND_WORD);"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(CompleteCommand.COMMAND_WORD);"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(HelpCommand.COMMAND_ALIAS);"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(ListCommand.COMMAND_WORD);"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(ListCommand.COMMAND_ALIAS);"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"     * Parses the given {@code String} of arguments in the context of the HelpCommand"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"     * and returns an HelpCommand object for execution."},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"    public HelpCommand parse(String args) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"        String commandRequest \u003d args.trim();"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"        if (commandRequest.length() \u003d\u003d 0) {"},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"            return new HelpCommand();"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"            if (availableCommands.contains(commandRequest)) {"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"                return new HelpCommand(args);"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"            } else {"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"                throw new ParseException(String.format(Messages.MESSAGE_INVALID_HELP_REQUEST, commandRequest));"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":4,"-":6,"Kyomian":4,"jasmoon":48}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"public class CliSyntax {"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_DATE_TIME \u003d new Prefix(\"d/\");"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_START_DATETIME \u003d new Prefix(\"s/\");"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_END_DATETIME \u003d new Prefix(\"e/\");"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    // To be deleted soon"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"em/\");"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"-":2,"Kyomian":20}},{"path":"src/main/java/seedu/address/logic/parser/DeskBoardParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.CompleteCommand;"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.EventCommand;"},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":" * Parses user input."},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"public class DeskBoardParser {"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        switch (commandWord) {"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        case TaskCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"            return new TaskCommandParser().parse(arguments);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"        case CompleteCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"            return new CompleteCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"            return new EventCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        //case EditCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"            //return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        //case SelectCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"            //return new SelectCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"            return new ClearCommand();"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"            return new ClearCommand();"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"        //case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"            //return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"        //case HistoryCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"            //return new HistoryCommand();"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"        //case ExitCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":"            //return new ExitCommand();"},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"            return new HelpCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"            return new HelpCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"            return new UndoCommand();"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":"            return new RedoCommand();"},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"        default:"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":11,"Kyomian":86,"jasmoon":6}},{"path":"src/main/java/seedu/address/logic/parser/RemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":" * Parses input arguments and creates a new RemoveCommand object"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveCommand"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"     * and returns a RemoveCommand object for execution."},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public RemoveCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"        String[] argsParts \u003d args.trim().split(\" \");"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"        if (argsParts.length !\u003d 2 || !isValidActivityOption(argsParts[0])) {"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"            String activityOption \u003d argsParts[0];"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"            Index index \u003d ParserUtil.parseIndex(argsParts[1]);"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"            return new RemoveCommand(activityOption, index);"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"    private static boolean isValidActivityOption(String activityOption) {"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"        return activityOption.equals(\"task\") || activityOption.equals(\"event\");"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"-":8,"Kyomian":34}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"//package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"//import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"//import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"//import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.commands.EditCommand.EditActivityDescriptor;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"///**"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"// * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"// */"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"////TODO: NEED A LOT OF WORK"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"//public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"//     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"//     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"//     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"//        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"//        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"//        Index index;"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"//        try {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"//            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"//        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"//        EditActivityDescriptor editActivityDescriptor \u003d new EditActivityDescriptor();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"//        try {"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"//            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editActivityDescriptor::setName);"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"//            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editActivityDescriptor::setDateTime);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"//            ParserUtil.parseAddress"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"//            (argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editActivityDescriptor::setRemark);"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"//            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editActivityDescriptor::setTags);"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"//        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"//            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"//        if (!editActivityDescriptor.isAnyFieldEdited()) {"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"//            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"//        return new EditCommand(index, editActivityDescriptor);"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"//    /**"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"//     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"//     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"//     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"//     */"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"//    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"//        assert tags !\u003d null;"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"//        if (tags.isEmpty()) {"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"//            return Optional.empty();"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"//        }"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"//        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"//        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"//    }"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"//"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"//}"}],"authorContributionMap":{"Kyomian":80}},{"path":"src/main/java/seedu/address/logic/parser/TaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.TaskCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":" * Parses input arguments and creates a new TaskCommand object"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"public class TaskCommandParser implements Parser\u003cTaskCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"     * Parses the given {@code String} of arguments in the context of the TaskCommand"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"     * and returns a TaskCommand object for execution."},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    public TaskCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE_TIME, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE_TIME)"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"            DateTime datetime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME)).get();"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"            Task task \u003d new Task(name, datetime, remark, tagList);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"            return new TaskCommand(task);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"karenfrilya97":1,"YuanQLLer":3,"-":13,"Kyomian":47}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":9,"author":{"gitID":"jasmoon"},"content":"//@@author jasmoon"},{"lineNumber":10,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jasmoon"},"content":" * Parses input arguments and create a new ListCommand object."},{"lineNumber":13,"author":{"gitID":"jasmoon"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jasmoon"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"    public final ArrayList\u003cString\u003e availableCommands;"},{"lineNumber":17,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":18,"author":{"gitID":"jasmoon"},"content":"    public ListCommandParser()  {"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":"        availableCommands \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(\"task\");"},{"lineNumber":21,"author":{"gitID":"jasmoon"},"content":"        availableCommands.add(\"event\");"},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"        String commandRequest \u003d args.trim();"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"        if (commandRequest.length() \u003d\u003d 0)  {"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"            return new ListCommand();"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"        } else  {"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"            if (availableCommands.contains(commandRequest))   {"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"                return new ListCommand(commandRequest);"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"            } else  {"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"                throw new ParseException(String.format(Messages.MESSAGE_INVALID_LIST_REQUEST, commandRequest));"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":5,"jasmoon":38}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowActivityRequestEvent;"},{"lineNumber":6,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowEventOnlyRequestEvent;"},{"lineNumber":7,"author":{"gitID":"jasmoon"},"content":"import seedu.address.commons.events.ui.ShowTaskOnlyRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jasmoon"},"content":"  * Lists task or events, or both."},{"lineNumber":12,"author":{"gitID":"-"},"content":"  */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"    public static final String COMMAND_ALIAS \u003d \"ls\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists tasks, events or both tasks and events.\\n\""},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"            + \"Parameters: [task/event]\\n\""},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"            + \"Example: \" + COMMAND_WORD + \" OR \""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"            + COMMAND_ALIAS + \" task\";"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks and events!\";"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_SUCCESS_TASK \u003d \"Listed all tasks!\";"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_SUCCESS_EVENT \u003d \"Listed all events!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"    private String commandRequest \u003d null;"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":"    public ListCommand()    {"},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"    public ListCommand(String commandRequest) {"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"        this.commandRequest \u003d commandRequest;"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"        if (commandRequest \u003d\u003d null)  {"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":"            EventsCenter.getInstance().post(new ShowActivityRequestEvent());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"        switch(commandRequest)  {"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"        case \"task\":"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":"            EventsCenter.getInstance().post(new ShowTaskOnlyRequestEvent());"},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TASK);"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"        case \"event\":"},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"            EventsCenter.getInstance().post(new ShowEventOnlyRequestEvent());"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"            return new CommandResult(MESSAGE_SUCCESS_EVENT);"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"        default:"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_LIST_REQUEST, commandRequest));"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":16,"Kyomian":5,"jasmoon":36}},{"path":"src/main/java/seedu/address/logic/parser/CompleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.commands.CompleteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//@@Author YuanQLLer"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" * Parses input arguments and creates a new CompleteCommand object"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public class CompleteCommandParser implements Parser\u003cCompleteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    public CompleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"            return new CompleteCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":15,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Desk Board has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"        model.resetData(new DeskBoard());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":19,"Kyomian":1}},{"path":"src/main/java/seedu/address/logic/commands/TaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":" * Adds a task to the desk board."},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"public class TaskCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_WORD \u003d \"task\";"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the desk board. \""},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_DATE_TIME + \"DATETIME \""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\\n\""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_NAME + \"Software Engineering Milestone 1 \""},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_DATE_TIME + \"01/08/2018 17:00 \""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_REMARK + \"Enhance major component \""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_TAG + \"CS2103T\";"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the desk board\";"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"    private final Task toAdd;"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"     * Creates a TaskCommand to add the specified {@code Task}"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"    public TaskCommand(Task task) {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(task);"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        toAdd \u003d task;"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"            model.addActivity(toAdd);"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"        } catch (DuplicateActivityException e) {"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"                || (other instanceof TaskCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 toAdd.equals(((TaskCommand) other).toAdd));"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"karenfrilya97":1,"YuanQLLer":3,"-":6,"Kyomian":54}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"        return String.format(Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":42}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":" * Format full help instructions for every command for display or command requested"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_ALIAS \u003d \"man\";"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":15,"author":{"gitID":"jasmoon"},"content":"    public static final String MESSAGE_USAGE \u003d \"Type \u0027\" + COMMAND_WORD + \"\u0027 OR \u0027\" + COMMAND_ALIAS"},{"lineNumber":16,"author":{"gitID":"jasmoon"},"content":"            + \"\u0027 to shows program usage instructions.\\n\"  + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"    private String commandRequest \u003d null;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":22,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":23,"author":{"gitID":"jasmoon"},"content":"    public HelpCommand()    {"},{"lineNumber":24,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":26,"author":{"gitID":"jasmoon"},"content":"    public HelpCommand(String args) {"},{"lineNumber":27,"author":{"gitID":"jasmoon"},"content":"        commandRequest \u003d args.trim();"},{"lineNumber":28,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":30,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"jasmoon"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"jasmoon"},"content":"        if (commandRequest \u003d\u003d null)   {"},{"lineNumber":33,"author":{"gitID":"jasmoon"},"content":"            EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":34,"author":{"gitID":"jasmoon"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":35,"author":{"gitID":"jasmoon"},"content":"        } else   {"},{"lineNumber":36,"author":{"gitID":"jasmoon"},"content":"            switch(commandRequest) {"},{"lineNumber":37,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":38,"author":{"gitID":"jasmoon"},"content":"            case TaskCommand.COMMAND_WORD:"},{"lineNumber":39,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(TaskCommand.MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":41,"author":{"gitID":"jasmoon"},"content":"            case EventCommand.COMMAND_WORD:"},{"lineNumber":42,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(EventCommand.MESSAGE_USAGE);"},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"            case CompleteCommand.COMMAND_WORD:"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(CompleteCommand.MESSAGE_USAGE);"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"            //case EditCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"                //return new CommandResult(EditCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"            //case SelectCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"                //return new CommandResult(SelectCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"            case RemoveCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(RemoveCommand.MESSAGE_USAGE);"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"            case HelpCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(HelpCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"            case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(HelpCommand.MESSAGE_USAGE);"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"            case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(ListCommand.MESSAGE_USAGE);"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"            case ListCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"                return new CommandResult(ListCommand.MESSAGE_USAGE);"},{"lineNumber":67,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":68,"author":{"gitID":"jasmoon"},"content":"            //case FindCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"jasmoon"},"content":"                //return new CommandResult(FindCommand.MESSAGE_USAGE);"},{"lineNumber":70,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":71,"author":{"gitID":"jasmoon"},"content":"            default:"},{"lineNumber":72,"author":{"gitID":"jasmoon"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":73,"author":{"gitID":"jasmoon"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":77,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":78,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"-":1,"Kyomian":18,"jasmoon":59}},{"path":"src/main/java/seedu/address/logic/parser/EventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.EventCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":" * Parses input arguments and creates a new EventCommand object"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"public class EventCommandParser implements Parser\u003cEventCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"     * Parses the given {@code String} of arguments in the context of the EventCommand"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"     * and returns a EventCommand object for execution."},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"    public EventCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATETIME, PREFIX_END_DATETIME,"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"                        PREFIX_LOCATION, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATETIME, PREFIX_END_DATETIME)"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"            DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATETIME)).get();"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"            DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATETIME)).get();"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION)).get();"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"            Event event \u003d new Event(name, startDateTime, endDateTime, location, remark, tagList);"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"            return new EventCommand(event);"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":5,"-":12,"Kyomian":51}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"    private ReadOnlyDeskBoard previousDeskBoard;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"     * Stores the current state of {@code model#deskBoard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"    private void saveDeskBoardSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"        this.previousDeskBoard \u003d new DeskBoard(model.getDeskBoard());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"     * Reverts the DeskBoard to the state before this command"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * was executed and updates the filtered activity list to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"        requireAllNonNull(model, previousDeskBoard);"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"        model.resetData(previousDeskBoard);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITY);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"     * Executes the command and updates the filtered activity"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITY);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"        saveDeskBoardSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":5,"karenfrilya97":10,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Kyomian"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITY;"},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":" * Edits the details of an existing activity in the remark book."},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"//TODO: This command need a lot of rework"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \""},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"            + \"by the index number used in the last activity listing. \""},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Activity: %1$s\";"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This activity already exists in the desk board.\";"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"    private final EditActivityDescriptor editActivityDescriptor;"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    private Activity activityToEdit;"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"    private Activity editedActivity;"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"     * @param index of the activity in the filtered activity list to edit"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"     * @param editActivityDescriptor details to edit the activity with"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"    public EditCommand(Index index, EditActivityDescriptor editActivityDescriptor) {"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(editActivityDescriptor);"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"        this.editActivityDescriptor \u003d new EditActivityDescriptor(editActivityDescriptor);"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"            model.updateActivity(activityToEdit, editedActivity);"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"        } catch (DuplicateActivityException dpe) {"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"Kyomian"},"content":"            throw new AssertionError(\"The target activity cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Kyomian"},"content":"        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITY);"},{"lineNumber":84,"author":{"gitID":"Kyomian"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedActivity));"},{"lineNumber":85,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":87,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"Kyomian"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"Kyomian"},"content":"        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"},{"lineNumber":90,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":91,"author":{"gitID":"Kyomian"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"Kyomian"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":95,"author":{"gitID":"Kyomian"},"content":"        activityToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"Kyomian"},"content":"        editedActivity \u003d createEditedPerson(activityToEdit, editActivityDescriptor);"},{"lineNumber":97,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":99,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"Kyomian"},"content":"     * Creates and returns a {@code Activity} with the details of {@code activityToEdit}"},{"lineNumber":101,"author":{"gitID":"Kyomian"},"content":"     * edited with {@code editActivityDescriptor}."},{"lineNumber":102,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Kyomian"},"content":"    private static Activity createEditedPerson(Activity activityToEdit,"},{"lineNumber":104,"author":{"gitID":"Kyomian"},"content":"        EditActivityDescriptor editActivityDescriptor) {"},{"lineNumber":105,"author":{"gitID":"Kyomian"},"content":"        assert activityToEdit !\u003d null;"},{"lineNumber":106,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":107,"author":{"gitID":"Kyomian"},"content":"        Name updatedName \u003d editActivityDescriptor.getName().orElse(activityToEdit.getName());"},{"lineNumber":108,"author":{"gitID":"Kyomian"},"content":"        DateTime updatedDateTime \u003d editActivityDescriptor.getDateTime().orElse(activityToEdit.getDateTime());"},{"lineNumber":109,"author":{"gitID":"Kyomian"},"content":"        Remark updatedRemark \u003d editActivityDescriptor.getRemark().orElse(activityToEdit.getRemark());"},{"lineNumber":110,"author":{"gitID":"Kyomian"},"content":"        Set\u003cTag\u003e updatedTags \u003d editActivityDescriptor.getTags().orElse(activityToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"        return new Task(updatedName, updatedDateTime, updatedRemark, updatedTags);"},{"lineNumber":113,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":115,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"Kyomian"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"Kyomian"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"Kyomian"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"Kyomian"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":122,"author":{"gitID":"Kyomian"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"Kyomian"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitID":"Kyomian"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":127,"author":{"gitID":"Kyomian"},"content":"        // state check"},{"lineNumber":128,"author":{"gitID":"Kyomian"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitID":"Kyomian"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 editActivityDescriptor.equals(e.editActivityDescriptor)"},{"lineNumber":131,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 Objects.equals(activityToEdit, e.activityToEdit);"},{"lineNumber":132,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":134,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"Kyomian"},"content":"     * Stores the details to edit the activity with. Each non-empty field value will replace the"},{"lineNumber":136,"author":{"gitID":"Kyomian"},"content":"     * corresponding field value of the activity."},{"lineNumber":137,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Kyomian"},"content":"    public static class EditActivityDescriptor {"},{"lineNumber":139,"author":{"gitID":"Kyomian"},"content":"        private Name name;"},{"lineNumber":140,"author":{"gitID":"Kyomian"},"content":"        private DateTime dateTime;"},{"lineNumber":141,"author":{"gitID":"Kyomian"},"content":"        private Remark remark;"},{"lineNumber":142,"author":{"gitID":"Kyomian"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":143,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":144,"author":{"gitID":"Kyomian"},"content":"        public EditActivityDescriptor() {}"},{"lineNumber":145,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":146,"author":{"gitID":"Kyomian"},"content":"        /**"},{"lineNumber":147,"author":{"gitID":"Kyomian"},"content":"         * Copy constructor."},{"lineNumber":148,"author":{"gitID":"Kyomian"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":149,"author":{"gitID":"Kyomian"},"content":"         */"},{"lineNumber":150,"author":{"gitID":"Kyomian"},"content":"        public EditActivityDescriptor(EditActivityDescriptor toCopy) {"},{"lineNumber":151,"author":{"gitID":"Kyomian"},"content":"            setName(toCopy.name);"},{"lineNumber":152,"author":{"gitID":"Kyomian"},"content":"            setDateTime(toCopy.dateTime);"},{"lineNumber":153,"author":{"gitID":"Kyomian"},"content":"            setRemark(toCopy.remark);"},{"lineNumber":154,"author":{"gitID":"Kyomian"},"content":"            setTags(toCopy.tags);"},{"lineNumber":155,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":157,"author":{"gitID":"Kyomian"},"content":"        /**"},{"lineNumber":158,"author":{"gitID":"Kyomian"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":159,"author":{"gitID":"Kyomian"},"content":"         */"},{"lineNumber":160,"author":{"gitID":"Kyomian"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":161,"author":{"gitID":"Kyomian"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.dateTime, this.remark, this.tags);"},{"lineNumber":162,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":164,"author":{"gitID":"Kyomian"},"content":"        public void setName(Name name) {"},{"lineNumber":165,"author":{"gitID":"Kyomian"},"content":"            this.name \u003d name;"},{"lineNumber":166,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":168,"author":{"gitID":"Kyomian"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":169,"author":{"gitID":"Kyomian"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":170,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":172,"author":{"gitID":"Kyomian"},"content":"        public void setDateTime(DateTime dateTime) {"},{"lineNumber":173,"author":{"gitID":"Kyomian"},"content":"            this.dateTime \u003d dateTime;"},{"lineNumber":174,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":176,"author":{"gitID":"Kyomian"},"content":"        public Optional\u003cDateTime\u003e getDateTime() {"},{"lineNumber":177,"author":{"gitID":"Kyomian"},"content":"            return Optional.ofNullable(dateTime);"},{"lineNumber":178,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":180,"author":{"gitID":"Kyomian"},"content":"        public void setRemark(Remark remark) {"},{"lineNumber":181,"author":{"gitID":"Kyomian"},"content":"            this.remark \u003d remark;"},{"lineNumber":182,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":184,"author":{"gitID":"Kyomian"},"content":"        public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":185,"author":{"gitID":"Kyomian"},"content":"            return Optional.ofNullable(remark);"},{"lineNumber":186,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":188,"author":{"gitID":"Kyomian"},"content":"        /**"},{"lineNumber":189,"author":{"gitID":"Kyomian"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":190,"author":{"gitID":"Kyomian"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":191,"author":{"gitID":"Kyomian"},"content":"         */"},{"lineNumber":192,"author":{"gitID":"Kyomian"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":193,"author":{"gitID":"Kyomian"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":194,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":196,"author":{"gitID":"Kyomian"},"content":"        /**"},{"lineNumber":197,"author":{"gitID":"Kyomian"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":198,"author":{"gitID":"Kyomian"},"content":"         * if modification is attempted."},{"lineNumber":199,"author":{"gitID":"Kyomian"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":200,"author":{"gitID":"Kyomian"},"content":"         */"},{"lineNumber":201,"author":{"gitID":"Kyomian"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":202,"author":{"gitID":"Kyomian"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":203,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":205,"author":{"gitID":"Kyomian"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"Kyomian"},"content":"        public boolean equals(Object other) {"},{"lineNumber":207,"author":{"gitID":"Kyomian"},"content":"            // short circuit if same object"},{"lineNumber":208,"author":{"gitID":"Kyomian"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":209,"author":{"gitID":"Kyomian"},"content":"                return true;"},{"lineNumber":210,"author":{"gitID":"Kyomian"},"content":"            }"},{"lineNumber":211,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":212,"author":{"gitID":"Kyomian"},"content":"            // instanceof handles nulls"},{"lineNumber":213,"author":{"gitID":"Kyomian"},"content":"            if (!(other instanceof EditActivityDescriptor)) {"},{"lineNumber":214,"author":{"gitID":"Kyomian"},"content":"                return false;"},{"lineNumber":215,"author":{"gitID":"Kyomian"},"content":"            }"},{"lineNumber":216,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":217,"author":{"gitID":"Kyomian"},"content":"            // state check"},{"lineNumber":218,"author":{"gitID":"Kyomian"},"content":"            EditActivityDescriptor e \u003d (EditActivityDescriptor) other;"},{"lineNumber":219,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":220,"author":{"gitID":"Kyomian"},"content":"            return getName().equals(e.getName())"},{"lineNumber":221,"author":{"gitID":"Kyomian"},"content":"                    \u0026\u0026 getDateTime().equals(e.getDateTime())"},{"lineNumber":222,"author":{"gitID":"Kyomian"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark())"},{"lineNumber":223,"author":{"gitID":"Kyomian"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":224,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"Kyomian":224}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" * Selects a activity identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"            + \": Selects the activity identified by the index number used in the last activity listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_SELECT_ACTIVITY_SUCCESS \u003d \"Selected Activity: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_ACTIVITY_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":7,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all activities whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        model.updateFilteredActivityList(predicate);"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredActivityList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":4,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Desk Board as requested ...\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/EventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":" * Adds an event to the desk board"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"public class EventCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the desk board. \""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_START_DATETIME + \" START DATETIME \""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_END_DATETIME + \"END DATETIME \""},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK]\""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\\n\""},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_NAME + \"Software Project \""},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_START_DATETIME + \"01/05/2018 08:00 \""},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_END_DATETIME + \"01/08/2018 08:00 \""},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_LOCATION + \"School of Computing \""},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_REMARK + \"Bring laptop charger \""},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"            + PREFIX_TAG + \"Important\";"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the desk board\";"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"    private final Event toAdd;"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"     * Creates a EventCommand to add the specified {@code Event}"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"    public EventCommand(Event event) {"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(event);"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"        toAdd \u003d event;"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"            model.addActivity(toAdd);"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        } catch (DuplicateActivityException e) {"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"                || (other instanceof EventCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":5,"Kyomian":62}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.logic.parser.DeskBoardParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    private final DeskBoardParser deskBoardParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        deskBoardParser \u003d new DeskBoardParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"            Command command \u003d deskBoardParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredActivitiesList() {"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        return model.getFilteredActivityList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredTaskList() {"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":58,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredEventList() {"},{"lineNumber":59,"author":{"gitID":"jasmoon"},"content":"        return model.getFilteredEventList();"},{"lineNumber":60,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":62,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"jasmoon"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitID":"jasmoon"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":6,"-":45,"jasmoon":15}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"public interface Storage extends DeskBoardStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    String getDeskBoardFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    void saveDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     * Saves the current version of the Remark Book to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    void handleDeskBoardChangedEvent(DeskBoardChangedEvent dbce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":8,"-":30}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted activity"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":61}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":" * Manages storage of DeskBoard data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    private DeskBoardStorage deskBoardStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    public StorageManager(DeskBoardStorage deskBoardStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        this.deskBoardStorage \u003d deskBoardStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeskBoard methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    public String getDeskBoardFilePath() {"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoardStorage.getDeskBoardFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    public Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        return readDeskBoard(deskBoardStorage.getDeskBoardFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    public Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoardStorage.readDeskBoard(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    public void saveDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException {"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"        saveDeskBoard(deskBoard, deskBoardStorage.getDeskBoardFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    public void saveDeskBoard(ReadOnlyDeskBoard deskBoard, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"        deskBoardStorage.saveDeskBoard(deskBoard, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"    public void backupDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException {"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"        deskBoardStorage.backupDeskBoard(deskBoard);"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"    public void handleDeskBoardChangedEvent(DeskBoardChangedEvent dbce) {"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(dbce, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"            saveDeskBoard(dbce.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":22,"karenfrilya97":2,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/RemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":" * Removes an activity based on its last displayed index in the desk board."},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"public class RemoveCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"    public static final String COMMAND_WORD \u003d \"rm\";"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"            + \": Removes task/event identified by the index number in the last displayed task/event listing.\\n\""},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"            + \"Parameters: task/event INDEX (INDEX must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":"            + \"Example: \" + COMMAND_WORD + \" task 1\" + \" OR \""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"            + COMMAND_WORD + \" event 1\";"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_REMOVE_TASK_SUCCESS \u003d \"Removed task: %1$s\";"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_REMOVE_EVENT_SUCCESS \u003d \"Removed event: %1$s\";"},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"    private Activity activityToDelete;"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"    private final String activityOption;"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"    public RemoveCommand(String activityOption, Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"        this.activityOption \u003d activityOption;"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(activityToDelete);"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"            model.deleteActivity(activityToDelete);"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"            throw new AssertionError(\"The target activity cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"        if (activityOption.equals(\"task\")) {"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":"            return new CommandResult(String.format(MESSAGE_REMOVE_TASK_SUCCESS, activityToDelete));"},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"            return new CommandResult(String.format(MESSAGE_REMOVE_EVENT_SUCCESS, activityToDelete));"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":"        if (activityOption.equals(\"task\")) {"},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"            List\u003cActivity\u003e lastShownTaskList \u003d model.getFilteredTaskList();"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"            activityToDelete \u003d lastShownTaskList.get(targetIndex.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"        } else if (activityOption.equals(\"event\")) {"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":"            List\u003cActivity\u003e lastShownEventList \u003d model.getFilteredEventList();"},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownEventList.size()) {"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"            activityToDelete \u003d lastShownEventList.get(targetIndex.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":73,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"Kyomian"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"Kyomian"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"Kyomian"},"content":"                || (other instanceof RemoveCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemoveCommand) other).targetIndex) // state check"},{"lineNumber":78,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 Objects.equals(this.activityToDelete, ((RemoveCommand) other).activityToDelete));"},{"lineNumber":79,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"-":11,"Kyomian":67}},{"path":"src/main/java/seedu/address/logic/commands/CompleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"//@@Author YuanQLLer"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" *"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":" * Complete a task identified using it\u0027s last displayed index from the CLInder."},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"public class CompleteCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    public static final String COMMAND_WORD \u003d \"complete\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"            + \": Complete the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_COMPLETE_TASK_SUCCESS \u003d \"Completed Activity: %1$s\";"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    private Activity activityToComplete;"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    public CompleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(activityToComplete);"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"            Activity completedActivity \u003d activityToComplete.getCompletedCopy();"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"            model.updateActivity(activityToComplete, completedActivity);"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        } catch (ActivityNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"The target activity cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        } catch (DuplicateActivityException dae) {"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"The completed activity cannot be duplicated\");"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        return new CommandResult(String.format(MESSAGE_COMPLETE_TASK_SUCCESS, activityToComplete));"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivity\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"        activityToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof CompleteCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.targetIndex.equals(((CompleteCommand) other).targetIndex) // state check"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 Objects.equals(this.activityToComplete, ((CompleteCommand) other).activityToComplete));"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":38,"-":30,"Kyomian":4}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"karenfrilya97"},"content":" * Stores desk board data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"     * Saves the given desk board data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"    public static void saveDataToFile(File file, XmlSerializableDeskBoard deskBoard)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"            XmlUtil.saveDataToFile(file, deskBoard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"     * Returns desk board in the file or an empty desk board"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    public static XmlSerializableDeskBoard loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableDeskBoard.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"karenfrilya97":7,"-":32}},{"path":"src/main/java/seedu/address/storage/XmlSerializableDeskBoard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":" * An Immutable DeskBoard that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"@XmlRootElement(name \u003d \"deskboard\")"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"public class XmlSerializableDeskBoard {"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"     * Creates an empty XmlSerializableDeskBoard."},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"    public XmlSerializableDeskBoard() {"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"     * Conversion"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"    public XmlSerializableDeskBoard(ReadOnlyDeskBoard src) {"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"        this();"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"        for (Activity activity : src.getActivityList()) {"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"            if (activity instanceof Task) {"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"                tasks.add(new XmlAdaptedTask((Task) activity));"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"            } else if (activity instanceof Event) {"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"                events.add(new XmlAdaptedEvent((Event) activity));"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"     * Converts this addressbook into the model\u0027s {@code DeskBoard} object."},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"     * {@code XmlAdaptedActivity} or {@code XmlAdaptedTag}."},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"    public DeskBoard toModelType() throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"        DeskBoard deskBoard \u003d new DeskBoard();"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"            deskBoard.addTag(t.toModelType());"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"        for (XmlAdaptedActivity a : tasks) {"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"            deskBoard.addActivity(((XmlAdaptedTask) a).toModelType());"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"        for (XmlAdaptedActivity e : events) {"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"            deskBoard.addActivity(((XmlAdaptedEvent) e).toModelType());"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"        return deskBoard;"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        if (!(other instanceof XmlSerializableDeskBoard)) {"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"        XmlSerializableDeskBoard otherDb \u003d (XmlSerializableDeskBoard) other;"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"        return tasks.equals(otherDb.tasks) \u0026\u0026 events.equals(otherDb.events) \u0026\u0026 tags.equals(otherDb.tags);"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"YuanQLLer":2,"karenfrilya97":76,"-":11}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedActivity.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":" * JAXB-friendly version of the Activity."},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"public abstract class XmlAdaptedActivity {"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"    protected String name;"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"    protected String dateTime;"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"    protected String remark;"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    protected boolean iscompleted;"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    protected List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an XmlAdaptedActivity."},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedActivity() {}"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an {@code XmlAdaptedActivity} with the given activity details."},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedActivity(String name, String dateTime, String remark, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"        this.name \u003d name;"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"        this.remark \u003d remark;"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"        iscompleted \u003d false;"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"     * Converts a given Activity into this class for JAXB use."},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedActivity"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedActivity(Activity source) {"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"        dateTime \u003d source.getDateTime().toString();"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"        iscompleted \u003d source.isCompleted();"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"     * Converts this jaxb-friendly adapted activity object into the model\u0027s Activity object."},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted activity"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"    public abstract Activity toModelType() throws IllegalValueException;"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"    public abstract String getActivityType();"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        if (!(other instanceof XmlAdaptedActivity)) {"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedActivity otherActivity \u003d (XmlAdaptedActivity) other;"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"        return Objects.equals(name, otherActivity.name)"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"                \u0026\u0026 Objects.equals(dateTime, otherActivity.dateTime)"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"                \u0026\u0026 Objects.equals(remark, otherActivity.remark)"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"                \u0026\u0026 tagged.equals(otherActivity.tagged)"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"                \u0026\u0026 this.iscompleted \u003d\u003d otherActivity.iscompleted;"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"karenfrilya97":81,"-":11}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"public class XmlAdaptedTask extends XmlAdaptedActivity {"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"    private static final String ACTIVITY_TYPE \u003d \"Task\";"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedTask(String name, String dueDateTime, String remark, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"        super(name, dueDateTime, remark, tagged);"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"        super(source);"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"     * Converts this jaxb-friendly adapted Task object into the model\u0027s Task object."},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"                    getActivityType(), \"name\"));"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"                    getActivityType(), \"due date/time\"));"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"        if (!DateTime.isValidDateTime(this.dateTime)) {"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        final DateTime dateTime \u003d new DateTime(this.dateTime);"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"        if (!Remark.isValidRemark(this.remark)) {"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":"        return new Task(name, dateTime, remark, tags, this.iscompleted);"},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":"    public String getActivityType() {"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"        return ACTIVITY_TYPE;"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"        return super.equals(other) \u0026\u0026 other instanceof XmlAdaptedTask;"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":85,"YuanQLLer":4,"-":1,"Kyomian":4}},{"path":"src/main/java/seedu/address/storage/DeskBoardStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":" * Represents a storage for {@link DeskBoard}."},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"public interface DeskBoardStorage {"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    String getDeskBoardFilePath();"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"     * Returns DeskBoard data as a {@link ReadOnlyDeskBoard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"     * @see #getDeskBoardFilePath()"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"     * Saves the given {@link ReadOnlyDeskBoard} to the storage."},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * @param deskBoard cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    void saveDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException;"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"     * @see #saveDeskBoard(ReadOnlyDeskBoard)"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    void saveDeskBoard(ReadOnlyDeskBoard deskBoard, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"     * Saves the given {@link ReadOnlyDeskBoard} to the fixed temporary location."},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"     * @param deskBoard cannot be null."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"    void backupDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException;"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":37,"-":14}},{"path":"src/main/java/seedu/address/model/ReadOnlyDeskBoard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":" * Unmodifiable view of an desk board"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"public interface ReadOnlyDeskBoard {"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an unmodifiable view of the activities list."},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"     * This list will not contain any duplicate activities.."},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    ObservableList\u003cActivity\u003e getActivityList();"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":20,"-":5}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.DeskBoardStorage;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.storage.XmlDeskBoardStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DeskBoard ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"        DeskBoardStorage deskBoardStorage \u003d new XmlDeskBoardStorage(userPrefs.getDeskBoardFilePath());"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        storage \u003d new StorageManager(deskBoardStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s desk board and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"        Optional\u003cReadOnlyDeskBoard\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        ReadOnlyDeskBoard initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"            addressBookOptional \u003d storage.readDeskBoard();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"                logger.info(\"Data file not found. Will be starting with a sample DeskBoard\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleDeskBoard);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty DeskBoard\");"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"            initialData \u003d new DeskBoard();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty DeskBoard\");"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"            initialData \u003d new DeskBoard();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"YuanQLLer"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty DeskBoard\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"YuanQLLer"},"content":"        logger.info(\"Starting DeskBoard \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"YuanQLLer"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DeskBoard ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":27,"-":184,"Kyomian":1}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.DeskBoard;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Task;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":" * Contains utility methods for populating {@code DeskBoard} with sample data."},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    public static Activity[] getSampleActivity() {"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"        return new Activity[] {"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"            new Task(new Name(\"Task 1\"), new DateTime(\"01/01/2018 23:59\"),"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Completed\")),"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"            new Task (new Name(\"Task 2\"), new DateTime(\"02/02/2018 23:59\"),"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Completed\")),"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"            new Task (new Name(\"Task 3\"), new DateTime(\"03/03/2018 23:59\"),"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Completed\")),"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"            new Task (new Name(\"Task 4\"), new DateTime(\"04/04/2018 23:59\"),"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Uncompleted\")),"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"            new Task (new Name(\"Task 5\"), new DateTime(\"05/05/2018 23:59\"),"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Unompleted\")),"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"            new Task (new Name(\"Task 6\"), new DateTime(\"06/06/2018 23:59\"),"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"                    new Remark(\"Submit through ivle\"), getTagSet(\"Completed\")),"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"            new Event(new Name(\"Event 1\"), new DateTime(\"01/01/2018 07:00\"),"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"01/01/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Finished\")),"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"            new Event (new Name(\"Event 2\"), new DateTime(\"02/02/2018 07:00\"),"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"02/02/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Finished\")),"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"            new Event (new Name(\"Event 3\"), new DateTime(\"03/03/2018 07:00\"),"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"03/03/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Cancelled\")),"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"            new Event (new Name(\"Event 4\"), new DateTime(\"04/04/2018 07:00\"),"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"04/04/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Important\")),"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"            new Event (new Name(\"Event 5\"), new DateTime(\"05/05/2018 07:00\"),"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"05/05/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Important\")),"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"            new Event (new Name(\"Event 6\"), new DateTime(\"06/06/2018 07:00\"),"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"                    new DateTime(\"06/06/2018 08:00\"), new Location(\"TBC\"), new Remark(\"Remark\"),"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"                    getTagSet(\"Compulsory\"))"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        };"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    public static ReadOnlyDeskBoard getSampleDeskBoard() {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"            DeskBoard sampleAb \u003d new DeskBoard();"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"            for (Activity sampleActivity : getSampleActivity()) {"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"                sampleAb.addActivity(sampleActivity);"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"            return sampleAb;"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        } catch (DuplicateActivityException e) {"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate activities\", e);"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"    public static Set\u003cTag\u003e getTagSet(String ... strings) {"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        for (String s : strings) {"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"            tags.add(new Tag(s));"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"        return tags;"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":75,"-":7}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"Kyomian"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Kyomian"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"Kyomian"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Event;"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Location;"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Name;"},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"import seedu.address.model.activity.Remark;"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":" * JAXB-friendly version of the Event."},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"public class XmlAdaptedEvent extends XmlAdaptedActivity {"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"    private static final String ACTIVITY_TYPE \u003d \"Event\";"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    private String endDateTime;"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    private String location;"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an XmlAdaptedEvent."},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedEvent() {}"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"     * Constructs an {@code XmlAdaptedEvent} with the given event details."},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedEvent(String name, String startDateTime, String endDateTime,"},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"                           String location, String remark, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"        super(name, startDateTime, remark, tagged);"},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"        this.location \u003d location;"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"     * Converts a given Event into this class for JAXB use."},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEvent"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"    public XmlAdaptedEvent(Event source) {"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        super((Activity) source);"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"        endDateTime \u003d source.getEndDateTime().toString();"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"        location \u003d source.getLocation().toString();"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"     * Converts this jaxb-friendly adapted Event object into the model\u0027s Event object."},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted ectivity"},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"                    getActivityType(), \"name\"));"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":"                    getActivityType(), \"start date/time\"));"},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":"        if (!DateTime.isValidDateTime(this.dateTime)) {"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":"        final DateTime startDateTime \u003d new DateTime(this.dateTime);"},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"        if (this.endDateTime \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"                    getActivityType(), \"end date/time\"));"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"        if (!DateTime.isValidDateTime(this.endDateTime)) {"},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":"        final DateTime endDateTime \u003d new DateTime(this.endDateTime);"},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"        if (!Location.isValidLocation(this.location)) {"},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":"        final Location location \u003d new Location(this.location);"},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":104,"author":{"gitID":"karenfrilya97"},"content":"        if (!Remark.isValidRemark(this.remark)) {"},{"lineNumber":105,"author":{"gitID":"karenfrilya97"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"        return new Event(name, startDateTime, endDateTime, location, remark, tags, this.iscompleted);"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":113,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"karenfrilya97"},"content":"    public String getActivityType() {"},{"lineNumber":115,"author":{"gitID":"karenfrilya97"},"content":"        return ACTIVITY_TYPE;"},{"lineNumber":116,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":118,"author":{"gitID":"karenfrilya97"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"karenfrilya97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"karenfrilya97"},"content":"        if (!super.equals(other)) {"},{"lineNumber":121,"author":{"gitID":"karenfrilya97"},"content":"            return false;"},{"lineNumber":122,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":124,"author":{"gitID":"karenfrilya97"},"content":"        if (!(other instanceof XmlAdaptedEvent)) {"},{"lineNumber":125,"author":{"gitID":"karenfrilya97"},"content":"            return false;"},{"lineNumber":126,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":128,"author":{"gitID":"karenfrilya97"},"content":"        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"},{"lineNumber":129,"author":{"gitID":"karenfrilya97"},"content":"        return Objects.equals(endDateTime, otherEvent.endDateTime)"},{"lineNumber":130,"author":{"gitID":"karenfrilya97"},"content":"                \u0026\u0026 Objects.equals(location, otherEvent.location);"},{"lineNumber":131,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":133,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":120,"-":2,"Kyomian":11}},{"path":"src/main/java/seedu/address/model/util/DateTimeComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"karenfrilya97"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":3,"author":{"gitID":"karenfrilya97"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.DateTime;"},{"lineNumber":7,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":8,"author":{"gitID":"karenfrilya97"},"content":"//@@author karenfrilya97"},{"lineNumber":9,"author":{"gitID":"karenfrilya97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"karenfrilya97"},"content":" * Comparator class that compares Activity based on dateTime attributes."},{"lineNumber":11,"author":{"gitID":"karenfrilya97"},"content":" * For Event objects, this class only compares based on the startDateTime,"},{"lineNumber":12,"author":{"gitID":"karenfrilya97"},"content":" * and does not take into account the endDateTime."},{"lineNumber":13,"author":{"gitID":"karenfrilya97"},"content":" */"},{"lineNumber":14,"author":{"gitID":"karenfrilya97"},"content":"public class DateTimeComparator implements Comparator\u003cActivity\u003e {"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":16,"author":{"gitID":"karenfrilya97"},"content":"    public DateTimeComparator () {"},{"lineNumber":17,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":19,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"karenfrilya97"},"content":"     * Compares two activities"},{"lineNumber":21,"author":{"gitID":"karenfrilya97"},"content":"     * @param o1 and"},{"lineNumber":22,"author":{"gitID":"karenfrilya97"},"content":"     * @param o2,"},{"lineNumber":23,"author":{"gitID":"karenfrilya97"},"content":"     * @return a negative integer, zero, or a positive integer"},{"lineNumber":24,"author":{"gitID":"karenfrilya97"},"content":"     * if the first activity\u0027s dateTime is earlier than, equal to or later than"},{"lineNumber":25,"author":{"gitID":"karenfrilya97"},"content":"     * the second activity\u0027s dateTime respectively."},{"lineNumber":26,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"karenfrilya97"},"content":"    public int compare(Activity o1, Activity o2) {"},{"lineNumber":28,"author":{"gitID":"karenfrilya97"},"content":"        DateTime dt1 \u003d o1.getDateTime();"},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"        DateTime dt2 \u003d o2.getDateTime();"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"        return dt1.getLocalDateTime().compareTo(dt2.getLocalDateTime());"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"}"}],"authorContributionMap":{"karenfrilya97":30,"YuanQLLer":2}},{"path":"src/main/java/seedu/address/model/activity/EventOnlyPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * This class gives a predicate that returns only the event in a list."},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"public class EventOnlyPredicate implements Predicate\u003cActivity\u003e {"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"    public EventOnlyPredicate() {"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"        ;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    public boolean test(Activity activity) {"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"        return activity.getActivityType().equals(\"EVENT\");"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof EventOnlyPredicate); // instanceof handles nulls"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":26}},{"path":"src/main/java/seedu/address/storage/XmlDeskBoardStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.ReadOnlyDeskBoard;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":" * A class to access DeskBoard data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"public class XmlDeskBoardStorage implements DeskBoardStorage {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlDeskBoardStorage.class);"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    public XmlDeskBoardStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    public String getDeskBoardFilePath() {"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    public Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        return readDeskBoard(filePath);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"     * Similar to {@link #readDeskBoard()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    public Optional\u003cReadOnlyDeskBoard\u003e readDeskBoard(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        File deskBoardFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        if (!deskBoardFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"            logger.info(\"DeskBoard file \"  + deskBoardFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        XmlSerializableDeskBoard xmlDeskBoard \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"            return Optional.of(xmlDeskBoard.toModelType());"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"            logger.info(\"Illegal values found in \" + deskBoardFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"    public void saveDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException {"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        saveDeskBoard(deskBoard, filePath);"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"     * Similar to {@link #saveDeskBoard(ReadOnlyDeskBoard)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"    public void saveDeskBoard(ReadOnlyDeskBoard deskBoard, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(deskBoard);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableDeskBoard(deskBoard));"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"    public void backupDeskBoard(ReadOnlyDeskBoard deskBoard) throws IOException {"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        saveDeskBoard(deskBoard, filePath + \".backup\");"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":55,"-":31}},{"path":"src/main/java/seedu/address/model/activity/Activity.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" * Represents a Activity in the desk board."},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"public abstract class Activity {"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    private final DateTime dateTime;"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    private final Remark remark;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    private final UniqueTagList tags;"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    private final boolean isCompleted;"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    public Activity(Name name, DateTime dateTime, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(name, dateTime, tags);"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        this.remark \u003d remark;"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        this.isCompleted \u003d false;"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    public Activity(Name name, DateTime dateTime, Remark remark, Set\u003cTag\u003e tags, boolean isCompleted) {"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(name, dateTime, tags);"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        this.remark \u003d remark;"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    public Name getName() {"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        return name;"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    public DateTime getDateTime() {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        return dateTime;"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    public Remark getRemark() {"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        return remark;"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    public abstract String getActivityType();"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    public abstract Activity copy(Set\u003cTag\u003e tags);"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"    public boolean isCompleted() {"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"        return isCompleted;"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"    public abstract Activity getCompletedCopy();"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":68,"-":9}},{"path":"src/main/java/seedu/address/model/activity/exceptions/ActivityNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":" * Signals that the operation is unable to find the specified activity."},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"public class ActivityNotFoundException extends Exception {}"}],"authorContributionMap":{"YuanQLLer":6,"-":1}},{"path":"src/main/java/seedu/address/model/activity/exceptions/DuplicateActivityException.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * Signals that the operation will result in duplicate Activity objects."},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"public class DuplicateActivityException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"    public DuplicateActivityException() {"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"        super(\"Operation would result in duplicate activities\");"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":10,"-":3}},{"path":"src/main/java/seedu/address/model/activity/UniqueActivityList.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"karenfrilya97"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":15,"author":{"gitID":"karenfrilya97"},"content":"import seedu.address.model.util.DateTimeComparator;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jasmoon"},"content":" * A list of activities, tasks and/or events that enforces uniqueness between its elements and"},{"lineNumber":20,"author":{"gitID":"jasmoon"},"content":" * does not allow nulls."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":" * @see Activity#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"public class UniqueActivityList implements Iterable\u003cActivity\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"karenfrilya97"},"content":"    //@@author karenfrilya97"},{"lineNumber":30,"author":{"gitID":"karenfrilya97"},"content":"    private static DateTimeComparator dateTimeComparator \u003d new DateTimeComparator();"},{"lineNumber":31,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":32,"author":{"gitID":"karenfrilya97"},"content":"    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":34,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"karenfrilya97"},"content":"     * Returns true if the list contains an equivalent activity as the given argument."},{"lineNumber":36,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"karenfrilya97"},"content":"    public boolean contains(Activity toCheck) {"},{"lineNumber":38,"author":{"gitID":"karenfrilya97"},"content":"        requireNonNull(toCheck);"},{"lineNumber":39,"author":{"gitID":"karenfrilya97"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":40,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":42,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":43,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"karenfrilya97"},"content":"     * Adds a activity to the list."},{"lineNumber":45,"author":{"gitID":"karenfrilya97"},"content":"     * If activity is a task or an event, is added to its respective list."},{"lineNumber":46,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"karenfrilya97"},"content":"     * @throws DuplicateActivityException if the activity to add is a duplicate of an existing activity in the list."},{"lineNumber":48,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"karenfrilya97"},"content":"    public void add(Activity toAdd) throws DuplicateActivityException {"},{"lineNumber":50,"author":{"gitID":"karenfrilya97"},"content":"        requireNonNull(toAdd);"},{"lineNumber":51,"author":{"gitID":"karenfrilya97"},"content":"        if (contains(toAdd)) {"},{"lineNumber":52,"author":{"gitID":"karenfrilya97"},"content":"            throw new DuplicateActivityException();"},{"lineNumber":53,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"karenfrilya97"},"content":"        internalList.add(toAdd);"},{"lineNumber":55,"author":{"gitID":"karenfrilya97"},"content":"        //@@author karenfrilya97"},{"lineNumber":56,"author":{"gitID":"karenfrilya97"},"content":"        Collections.sort(internalList, dateTimeComparator);"},{"lineNumber":57,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":59,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"karenfrilya97"},"content":"     * Replaces the activity {@code target} in the list with {@code editedActivity}."},{"lineNumber":61,"author":{"gitID":"karenfrilya97"},"content":"     * If activity is a task or an event, edited in its respective list."},{"lineNumber":62,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"karenfrilya97"},"content":"     * @throws DuplicateActivityException if the replacement is equivalent to another existing activity in the list."},{"lineNumber":64,"author":{"gitID":"karenfrilya97"},"content":"     * @throws ActivityNotFoundException if {@code target} could not be found in the list."},{"lineNumber":65,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"karenfrilya97"},"content":"    public void setActivity(Activity target, Activity editedActivity)"},{"lineNumber":67,"author":{"gitID":"karenfrilya97"},"content":"            throws DuplicateActivityException, ActivityNotFoundException {"},{"lineNumber":68,"author":{"gitID":"karenfrilya97"},"content":"        requireNonNull(editedActivity);"},{"lineNumber":69,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":70,"author":{"gitID":"karenfrilya97"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":71,"author":{"gitID":"karenfrilya97"},"content":"        int taskIndex;"},{"lineNumber":72,"author":{"gitID":"karenfrilya97"},"content":"        int eventIndex;"},{"lineNumber":73,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":74,"author":{"gitID":"karenfrilya97"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":75,"author":{"gitID":"karenfrilya97"},"content":"            throw new ActivityNotFoundException();"},{"lineNumber":76,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":78,"author":{"gitID":"karenfrilya97"},"content":"        if (!target.equals(editedActivity) \u0026\u0026 internalList.contains(editedActivity)) {"},{"lineNumber":79,"author":{"gitID":"karenfrilya97"},"content":"            throw new DuplicateActivityException();"},{"lineNumber":80,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":82,"author":{"gitID":"karenfrilya97"},"content":"        internalList.set(index, editedActivity);"},{"lineNumber":83,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":84,"author":{"gitID":"karenfrilya97"},"content":"        //@@author karenfrilya97"},{"lineNumber":85,"author":{"gitID":"karenfrilya97"},"content":"        Collections.sort(internalList, dateTimeComparator);"},{"lineNumber":86,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":87,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":89,"author":{"gitID":"karenfrilya97"},"content":"    public void setActivity(UniqueActivityList replacement) {"},{"lineNumber":90,"author":{"gitID":"karenfrilya97"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":91,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":92,"author":{"gitID":"karenfrilya97"},"content":"        //@@author karenfrilya97"},{"lineNumber":93,"author":{"gitID":"karenfrilya97"},"content":"        Collections.sort(internalList, dateTimeComparator);"},{"lineNumber":94,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":96,"author":{"gitID":"karenfrilya97"},"content":"    public void setActivity(List\u003cActivity\u003e activities) throws DuplicateActivityException {"},{"lineNumber":97,"author":{"gitID":"karenfrilya97"},"content":"        requireAllNonNull(activities);"},{"lineNumber":98,"author":{"gitID":"karenfrilya97"},"content":"        final UniqueActivityList replacement \u003d new UniqueActivityList();"},{"lineNumber":99,"author":{"gitID":"karenfrilya97"},"content":"        for (final Activity activity : activities) {"},{"lineNumber":100,"author":{"gitID":"karenfrilya97"},"content":"            replacement.add(activity);"},{"lineNumber":101,"author":{"gitID":"karenfrilya97"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"karenfrilya97"},"content":"        setActivity(replacement);"},{"lineNumber":103,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":104,"author":{"gitID":"karenfrilya97"},"content":"        //@@author karenfrilya97"},{"lineNumber":105,"author":{"gitID":"karenfrilya97"},"content":"        Collections.sort(internalList, dateTimeComparator);"},{"lineNumber":106,"author":{"gitID":"karenfrilya97"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"karenfrilya97"},"content":""},{"lineNumber":108,"author":{"gitID":"karenfrilya97"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"karenfrilya97"},"content":"     * Removes the equivalent activity from the list and its respective task or event list."},{"lineNumber":110,"author":{"gitID":"karenfrilya97"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"karenfrilya97"},"content":"     * @throws ActivityNotFoundException if no such activity could be found in the list."},{"lineNumber":112,"author":{"gitID":"karenfrilya97"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"karenfrilya97"},"content":"    public boolean remove(Activity toRemove) throws ActivityNotFoundException {"},{"lineNumber":114,"author":{"gitID":"karenfrilya97"},"content":"        requireNonNull(toRemove);"},{"lineNumber":115,"author":{"gitID":"karenfrilya97"},"content":"        final boolean activityFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":116,"author":{"gitID":"karenfrilya97"},"content":"        if (!activityFoundAndDeleted) {"},{"lineNumber":117,"author":{"gitID":"karenfrilya97"},"content":"            throw new ActivityNotFoundException();"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"            //@@author jasmoon"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":"        } else  {"},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"            internalList.remove(toRemove);"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"        return activityFoundAndDeleted;"},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e internalListAsObservable() {"},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":133,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"jasmoon"},"content":"    public Iterator\u003cActivity\u003e iterator() {"},{"lineNumber":136,"author":{"gitID":"jasmoon"},"content":"        return internalList.iterator();"},{"lineNumber":137,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":"    public boolean equals(Object other) {"},{"lineNumber":141,"author":{"gitID":"jasmoon"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":142,"author":{"gitID":"jasmoon"},"content":"                || (other instanceof UniqueActivityList // instanceof handles nulls"},{"lineNumber":143,"author":{"gitID":"jasmoon"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueActivityList) other).internalList));"},{"lineNumber":144,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":146,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"jasmoon"},"content":"    public int hashCode() {"},{"lineNumber":148,"author":{"gitID":"jasmoon"},"content":"        return internalList.hashCode();"},{"lineNumber":149,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":6,"karenfrilya97":91,"-":18,"jasmoon":35}},{"path":"src/main/java/seedu/address/model/DeskBoard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.UniqueActivityList;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"public class DeskBoard implements ReadOnlyDeskBoard {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    private final UniqueActivityList activities;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        activities \u003d new UniqueActivityList();"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoard() {}"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"     * Creates an DeskBoard using the Activities and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    public DeskBoard(ReadOnlyDeskBoard toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    public void setActivities(List\u003cActivity\u003e activities) throws DuplicateActivityException {"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        this.activities.setActivity(activities);"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"     * Resets the existing data of this {@code DeskBoard} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    public void resetData(ReadOnlyDeskBoard newData) {"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"        List\u003cActivity\u003e syncedActivityList \u003d newData.getActivityList().stream()"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"            setActivities(syncedActivityList);"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        } catch (DuplicateActivityException e) {"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"            throw new AssertionError(\"DeskBoard should not have duplicate activities\");"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"    //// activity-level operations"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"     * Adds an activity to the desk board."},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"     * Also checks the new activity\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"     * and updates the Tag objects in the activity to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"     * @throws DuplicateActivityException if an equivalent activity already exists."},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"    public void addActivity(Activity p) throws DuplicateActivityException {"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        Activity activity \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any activity"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"        // in the activity list."},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        activities.add(activity);"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"     * Replaces the given activity {@code target} in the list with {@code editedActivity}."},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"     * {@code DeskBoard}\u0027s tag list will be updated with the tags of {@code editedActivity}."},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"     * @throws DuplicateActivityException if updating the activity\u0027s details causes the activity to be equivalent to"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"     *      another existing activity in the list."},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":"     * @throws ActivityNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"     * @see #syncWithMasterTagList(Activity)"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"    public void updateActivity(Activity target, Activity editedActivity)"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"            throws DuplicateActivityException, ActivityNotFoundException {"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(editedActivity);"},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"        Activity syncedEditedActivity \u003d syncWithMasterTagList(editedActivity);"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any activity"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"        // in the activity list."},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"        activities.setActivity(target, syncedEditedActivity);"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"     *  Updates the master tag list to include tags in {@code activity} that are not in the list."},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"     *  @return a copy of this {@code activity} such that every tag in this activity points to"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"     *      a Tag object in the master list."},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":"    private Activity syncWithMasterTagList(Activity activity) {"},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"        final UniqueTagList activityTags \u003d new UniqueTagList(activity.getTags());"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"        tags.mergeFrom(activityTags);"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":"        // used for checking activity tag references"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"        // Rebuild the list of activity tags to point to the relevant tags in the master tag list."},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"        activityTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"        return activity.copy(correctTagReferences);"},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":"     * Removes {@code key} from this {@code DeskBoard}."},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":"     * @throws ActivityNotFoundException if the {@code key} is not in this {@code DeskBoard}."},{"lineNumber":141,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"YuanQLLer"},"content":"    public boolean removeActivity(Activity key) throws ActivityNotFoundException {"},{"lineNumber":143,"author":{"gitID":"YuanQLLer"},"content":"        if (activities.remove(key)) {"},{"lineNumber":144,"author":{"gitID":"YuanQLLer"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"YuanQLLer"},"content":"        } else {"},{"lineNumber":146,"author":{"gitID":"YuanQLLer"},"content":"            throw new ActivityNotFoundException();"},{"lineNumber":147,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":150,"author":{"gitID":"YuanQLLer"},"content":"    //// tag-level operations"},{"lineNumber":151,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":152,"author":{"gitID":"YuanQLLer"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":153,"author":{"gitID":"YuanQLLer"},"content":"        tags.add(t);"},{"lineNumber":154,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":156,"author":{"gitID":"YuanQLLer"},"content":"    //// util methods"},{"lineNumber":157,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":158,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":160,"author":{"gitID":"YuanQLLer"},"content":"        return activities.internalListAsObservable().size() + \" activities, \""},{"lineNumber":161,"author":{"gitID":"YuanQLLer"},"content":"                + tags.internalListAsObservable().size() +  \" tags\";"},{"lineNumber":162,"author":{"gitID":"YuanQLLer"},"content":"        // TODO: refine later"},{"lineNumber":163,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":165,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"YuanQLLer"},"content":"    public ObservableList\u003cActivity\u003e getActivityList() {"},{"lineNumber":167,"author":{"gitID":"YuanQLLer"},"content":"        return activities.internalListAsObservable();"},{"lineNumber":168,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":170,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":171,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":172,"author":{"gitID":"YuanQLLer"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":173,"author":{"gitID":"YuanQLLer"},"content":"        return tags.internalListAsObservable();"},{"lineNumber":174,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":176,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":178,"author":{"gitID":"YuanQLLer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":179,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof DeskBoard // instanceof handles nulls"},{"lineNumber":180,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.activities.equals(((DeskBoard) other).activities)"},{"lineNumber":181,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((DeskBoard) other).tags));"},{"lineNumber":182,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":184,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"YuanQLLer"},"content":"    public int hashCode() {"},{"lineNumber":186,"author":{"gitID":"YuanQLLer"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":187,"author":{"gitID":"YuanQLLer"},"content":"        return Objects.hash(activities, tags);"},{"lineNumber":188,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":173,"-":16}},{"path":"src/main/java/seedu/address/model/activity/TaskOnlyPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"YuanQLLer"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * This class gives a predicate that returns only the tasks in a list."},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":"public class TaskOnlyPredicate implements Predicate\u003cActivity\u003e {"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"    public TaskOnlyPredicate() {"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"        ;"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    public boolean test(Activity activity) {"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"        return activity.getActivityType().equals(\"TASK\");"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof TaskOnlyPredicate); // instanceof handles nulls"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":25}},{"path":"src/main/java/seedu/address/model/activity/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" * Represents an Activity\u0027s remark in the desk board."},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"public class Remark {"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"            \"Activity remark can take any values, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \".+\";"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"     * @param remark A valid remark."},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    public Remark(String remark) {"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(remark);"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        this.value \u003d remark;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     * Returns true if a given string is a valid activity remark."},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        return test.matches(REMARK_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":51,"-":4}},{"path":"src/main/java/seedu/address/model/activity/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * Represents an Activity\u0027s name in the desk board."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"            \"Activity names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * Returns true if a given string is a valid activity name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":4,"-":55}},{"path":"src/main/java/seedu/address/model/activity/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":" * Tests that a {@code Activity}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    public boolean test(Activity activity) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":5,"-":26}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":"    //TODO: Change the file path latter"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    private String deskBoardFilePath \u003d \"data/deskboard.xml\";"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    private String deskBoardName \u003d \"MyDeskBoard\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    public String getDeskBoardFilePath() {"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoardFilePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    public void setDeskBoardFilePath(String deskBoardFilePath) {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        this.deskBoardFilePath \u003d deskBoardFilePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public String getDeskBoardName() {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoardName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    public void setDeskBoardName(String deskBoardName) {"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        this.deskBoardName \u003d deskBoardName;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 Objects.equals(deskBoardFilePath, o.deskBoardFilePath)"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 Objects.equals(deskBoardName, o.deskBoardName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        return Objects.hash(guiSettings, deskBoardFilePath, deskBoardName);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        sb.append(\"\\nLocal data file location : \" + deskBoardFilePath);"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        sb.append(\"\\nDeskBoard name : \" + deskBoardName);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":16,"-":63}},{"path":"src/main/java/seedu/address/model/activity/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":" * This class is to store location info in an event"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"public class Location {"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":"            \"Activity location should not be blank, or start with white space\";"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"     * Constructs a {@code Name}."},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"     * @param location A valid location."},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    public Location(String location) {"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"        requireNonNull(location);"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"        this.value \u003d location;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"     * Returns true if a given string is a valid location."},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":54,"-":4}},{"path":"src/main/java/seedu/address/model/activity/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":" * Represents a Task in the desk board."},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":" * The field contains 3 field, name, due date and (Optional)remark."},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":" * The following example would illustrate one example"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" * ******** Example ******************************* *"},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" * NAME : CS2103 Project"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":" * DUE DATE/TIME: 21/03/2018 23:59"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":" * REMARK: Submit through a pull request in git hub."},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" * ************************************************ *"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"public class Task extends Activity {"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":"    private static final String ACTIVITY_TYPE \u003d \"TASK\";"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":"     * Every field must be present and not null."},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    public Task(Name name, DateTime dueDateTime, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"        super(name, dueDateTime, remark, tags);"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    public Task(Name name, DateTime dueDateTime, Remark remark, Set\u003cTag\u003e tags, boolean isComplete) {"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"        super(name, dueDateTime, remark, tags, isComplete);"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    public Name getName() {"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        return super.getName();"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    public DateTime getDueDateTime() {"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"        return super.getDateTime();"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    public Remark getRemark() {"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        return super.getRemark();"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    public String getActivityType() {"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"        return ACTIVITY_TYPE;"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        return super.getTags();"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"            return true;"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"        return otherTask.getName().equals(this.getName())"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 otherTask.getDueDateTime().equals(this.getDueDateTime())"},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 (getRemark() \u003d\u003d null ? otherTask.getRemark() \u003d\u003d null : getRemark().equals(otherTask.getRemark()))"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.isCompleted() \u003d\u003d otherTask.isCompleted();"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"        builder.append(\"Task Name: \")"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":"                .append(getName())"},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Due Date/Time: \")"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"                .append(getDateTime())"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Remark: \")"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"                .append(getRemark() \u003d\u003d null ? \"\" : getRemark())"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Tags: \")"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"                .append(isCompleted() ? \"Uncompleted\" : \"Completed\");"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"        return builder.toString();"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"    public Activity copy(Set\u003cTag\u003e tags) {"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"        if (tags \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"            return new Task(getName(), getDueDateTime(), getRemark(), getTags(), isCompleted());"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"        return new Task(getName(), getDueDateTime(), getRemark(), tags, isCompleted());"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"    public Activity getCompletedCopy() {"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"        return new Task(getName(), getDueDateTime(), getRemark(), getTags(), true);"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"}"}],"authorContributionMap":{"YuanQLLer":105,"-":3}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":" * Represents a Tag in the desk board."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"YuanQLLer":1,"-":53}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITY \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"    void resetData(ReadOnlyDeskBoard newData);"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"    /** Returns the DeskBoard */"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"    ReadOnlyDeskBoard getDeskBoard();"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"    /** Deletes the given activity. */"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":"    void deleteActivity(Activity target) throws ActivityNotFoundException;"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    /** Adds the given activity */"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    void addActivity(Activity activity) throws DuplicateActivityException;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"     * Replaces the given activity {@code target} with {@code editedActivity}."},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     * @throws DuplicateActivityException if updating the activity\u0027s details causes the activity to be equivalent to"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"     *      another existing activity in the list."},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"     * @throws ActivityNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"    void updateActivity(Activity target, Activity editedActivity)"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"            throws DuplicateActivityException, ActivityNotFoundException;"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    /** Returns an unmodifiable view of the filtered activity list */"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"    ObservableList\u003cActivity\u003e getFilteredActivityList();"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":43,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":44,"author":{"gitID":"jasmoon"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":45,"author":{"gitID":"jasmoon"},"content":"    ObservableList\u003cActivity\u003e getFilteredTaskList();"},{"lineNumber":46,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":47,"author":{"gitID":"jasmoon"},"content":"    /** Returns an unmodifiable view of the filtered event list */"},{"lineNumber":48,"author":{"gitID":"jasmoon"},"content":"    ObservableList\u003cActivity\u003e getFilteredEventList();"},{"lineNumber":49,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":50,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"jasmoon"},"content":"     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."},{"lineNumber":52,"author":{"gitID":"jasmoon"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":53,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jasmoon"},"content":"    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"},{"lineNumber":55,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":56,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":37,"-":5,"jasmoon":14}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cTag\u003e internalListAsObservable() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":141,"jasmoon":2}},{"path":"src/main/java/seedu/address/model/activity/DateTime.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Kyomian"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"Kyomian"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"Kyomian"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"Kyomian"},"content":"//@@author Kyomian"},{"lineNumber":11,"author":{"gitID":"Kyomian"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Kyomian"},"content":" * Represents an Activity\u0027s datetime in the desk board."},{"lineNumber":13,"author":{"gitID":"Kyomian"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"},{"lineNumber":14,"author":{"gitID":"Kyomian"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Kyomian"},"content":"public class DateTime {"},{"lineNumber":16,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":17,"author":{"gitID":"Kyomian"},"content":"    public static final String DEFAULT_DATETIME_FORMAT \u003d \"d/M/y H:m\";"},{"lineNumber":18,"author":{"gitID":"Kyomian"},"content":"    public static final String MESSAGE_DATETIME_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"Kyomian"},"content":"            \"Date and Time should be in the format of \" + DEFAULT_DATETIME_FORMAT;"},{"lineNumber":20,"author":{"gitID":"Kyomian"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DEFAULT_DATETIME_FORMAT);"},{"lineNumber":21,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":22,"author":{"gitID":"Kyomian"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":23,"author":{"gitID":"Kyomian"},"content":"    private final String dateTimeString;"},{"lineNumber":24,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":25,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Kyomian"},"content":"     * Constructs a {@code DateTime}."},{"lineNumber":27,"author":{"gitID":"Kyomian"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"Kyomian"},"content":"     * @param value A valid datetime."},{"lineNumber":29,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Kyomian"},"content":"    public DateTime(String value) {"},{"lineNumber":31,"author":{"gitID":"Kyomian"},"content":"        requireNonNull(value);"},{"lineNumber":32,"author":{"gitID":"Kyomian"},"content":"        checkArgument(isValidDateTime(value), MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"Kyomian"},"content":"        this.dateTime \u003d LocalDateTime.parse(value, formatter);"},{"lineNumber":34,"author":{"gitID":"Kyomian"},"content":"        this.dateTimeString \u003d value;"},{"lineNumber":35,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":37,"author":{"gitID":"Kyomian"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Kyomian"},"content":"     * Returns true if a given string is a valid datetime."},{"lineNumber":39,"author":{"gitID":"Kyomian"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Kyomian"},"content":"    public static boolean isValidDateTime(String value) {"},{"lineNumber":41,"author":{"gitID":"Kyomian"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"Kyomian"},"content":"            LocalDateTime.parse(value, formatter);"},{"lineNumber":43,"author":{"gitID":"Kyomian"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"Kyomian"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":45,"author":{"gitID":"Kyomian"},"content":"            dtpe.printStackTrace();"},{"lineNumber":46,"author":{"gitID":"Kyomian"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"Kyomian"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":50,"author":{"gitID":"Kyomian"},"content":"    public LocalDateTime getLocalDateTime() {"},{"lineNumber":51,"author":{"gitID":"Kyomian"},"content":"        return this.dateTime;"},{"lineNumber":52,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":54,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Kyomian"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"Kyomian"},"content":"        return this.dateTimeString;"},{"lineNumber":57,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":59,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"Kyomian"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"Kyomian"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"Kyomian"},"content":"                || (other instanceof DateTime // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"Kyomian"},"content":"                \u0026\u0026 this.dateTime.equals(((DateTime) other).dateTime)); // state check"},{"lineNumber":64,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":66,"author":{"gitID":"Kyomian"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"Kyomian"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitID":"Kyomian"},"content":"        return dateTime.hashCode();"},{"lineNumber":69,"author":{"gitID":"Kyomian"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Kyomian"},"content":""},{"lineNumber":71,"author":{"gitID":"Kyomian"},"content":"}"}],"authorContributionMap":{"YuanQLLer":3,"-":3,"Kyomian":65}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.commons.events.model.DeskBoardChangedEvent;"},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.Activity;"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.EventOnlyPredicate;"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.TaskOnlyPredicate;"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.ActivityNotFoundException;"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.activity.exceptions.DuplicateActivityException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":" * Represents the in-memory model of the desk board data."},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    private final DeskBoard deskBoard;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":"    private final FilteredList\u003cActivity\u003e filteredActivities;"},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     * Initializes a ModelManager with the given deskBoard and userPrefs."},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public ModelManager(ReadOnlyDeskBoard deskBoard, UserPrefs userPrefs) {"},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(deskBoard, userPrefs);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        logger.fine(\"Initializing with desk board: \" + deskBoard + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"        this.deskBoard \u003d new DeskBoard(deskBoard);"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":"        filteredActivities \u003d new FilteredList\u003c\u003e(this.deskBoard.getActivityList());"},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"    public ModelManager() {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        this(new DeskBoard(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"    public void resetData(ReadOnlyDeskBoard newData) {"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":"        deskBoard.resetData(newData);"},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"        indicateAddressBookChanged();"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":"    public ReadOnlyDeskBoard getDeskBoard() {"},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"        return deskBoard;"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        raise(new DeskBoardChangedEvent(deskBoard));"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"    public synchronized void deleteActivity(Activity target) throws ActivityNotFoundException {"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"        deskBoard.removeActivity(target);"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"        indicateAddressBookChanged();"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":"    public synchronized void addActivity(Activity activity) throws DuplicateActivityException {"},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"        deskBoard.addActivity(activity);"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITY);"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"    public synchronized void updateActivity(Activity target, Activity editedActivity)"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"            throws DuplicateActivityException, ActivityNotFoundException {"},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(target, editedActivity);"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"        deskBoard.updateActivity(target, editedActivity);"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Activity List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"     * {@code deskBoard}"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        return FXCollections.unmodifiableObservableList(filteredActivities);"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":97,"author":{"gitID":"jasmoon"},"content":"    //@@author jasmoon"},{"lineNumber":98,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"jasmoon"},"content":"     * Returns an unmodifiable view of the list of {@code Task} backed by the task list of"},{"lineNumber":100,"author":{"gitID":"jasmoon"},"content":"     * {@code deskBoard}"},{"lineNumber":101,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredTaskList()   {"},{"lineNumber":104,"author":{"gitID":"jasmoon"},"content":"        FilteredList\u003cActivity\u003e taskList \u003d  new FilteredList\u003c\u003e(filteredActivities, new TaskOnlyPredicate());"},{"lineNumber":105,"author":{"gitID":"jasmoon"},"content":"        ObservableList\u003cActivity\u003e result \u003d FXCollections.unmodifiableObservableList(taskList);"},{"lineNumber":106,"author":{"gitID":"jasmoon"},"content":"        return result;"},{"lineNumber":107,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":109,"author":{"gitID":"jasmoon"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"jasmoon"},"content":"     * Returns an unmodifiable view of the list of {@code Event} backed by the event list of"},{"lineNumber":111,"author":{"gitID":"jasmoon"},"content":"     * {@code deskBoard}"},{"lineNumber":112,"author":{"gitID":"jasmoon"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"jasmoon"},"content":"    public ObservableList\u003cActivity\u003e getFilteredEventList() {"},{"lineNumber":115,"author":{"gitID":"jasmoon"},"content":"        FilteredList\u003cActivity\u003e eventList \u003d  new FilteredList\u003c\u003e(filteredActivities, new EventOnlyPredicate());"},{"lineNumber":116,"author":{"gitID":"jasmoon"},"content":"        ObservableList\u003cActivity\u003e result \u003d FXCollections.unmodifiableObservableList(eventList);"},{"lineNumber":117,"author":{"gitID":"jasmoon"},"content":"        return result;"},{"lineNumber":118,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":120,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"jasmoon"},"content":"    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"},{"lineNumber":122,"author":{"gitID":"jasmoon"},"content":"        requireNonNull(predicate);"},{"lineNumber":123,"author":{"gitID":"jasmoon"},"content":"        filteredActivities.setPredicate(predicate);"},{"lineNumber":124,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":126,"author":{"gitID":"jasmoon"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"jasmoon"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":128,"author":{"gitID":"jasmoon"},"content":"        // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"jasmoon"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"jasmoon"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":133,"author":{"gitID":"jasmoon"},"content":"        // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"jasmoon"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":135,"author":{"gitID":"jasmoon"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"jasmoon"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":138,"author":{"gitID":"jasmoon"},"content":"        // state check"},{"lineNumber":139,"author":{"gitID":"jasmoon"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":140,"author":{"gitID":"jasmoon"},"content":"        return deskBoard.equals(other.deskBoard)"},{"lineNumber":141,"author":{"gitID":"jasmoon"},"content":"                \u0026\u0026 filteredActivities.equals(other.filteredActivities);"},{"lineNumber":142,"author":{"gitID":"jasmoon"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"jasmoon"},"content":""},{"lineNumber":144,"author":{"gitID":"jasmoon"},"content":"}"}],"authorContributionMap":{"YuanQLLer":82,"-":14,"jasmoon":48}},{"path":"src/main/java/seedu/address/model/activity/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"YuanQLLer"},"content":"package seedu.address.model.activity;"},{"lineNumber":2,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":5,"author":{"gitID":"YuanQLLer"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":7,"author":{"gitID":"YuanQLLer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":9,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":10,"author":{"gitID":"YuanQLLer"},"content":"//@@author YuanQLLer"},{"lineNumber":11,"author":{"gitID":"YuanQLLer"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"YuanQLLer"},"content":" * Represents a Task in the desk board."},{"lineNumber":13,"author":{"gitID":"YuanQLLer"},"content":" * The field contains 3 field, name, start date/time, end date/time and"},{"lineNumber":14,"author":{"gitID":"YuanQLLer"},"content":" *      (Optional)location (Optional)remark."},{"lineNumber":15,"author":{"gitID":"YuanQLLer"},"content":" * The following example would illustrate one example"},{"lineNumber":16,"author":{"gitID":"YuanQLLer"},"content":" * ******** Example ******************************* *"},{"lineNumber":17,"author":{"gitID":"YuanQLLer"},"content":" * NAME : CS2103 Exam"},{"lineNumber":18,"author":{"gitID":"YuanQLLer"},"content":" * START DATE/TIME: 21/03/2018 23:59"},{"lineNumber":19,"author":{"gitID":"YuanQLLer"},"content":" * END DATE/TIME:"},{"lineNumber":20,"author":{"gitID":"YuanQLLer"},"content":" * LOCATION: TBC"},{"lineNumber":21,"author":{"gitID":"YuanQLLer"},"content":" * REMARK: Submit through a pull request in git hub."},{"lineNumber":22,"author":{"gitID":"YuanQLLer"},"content":" * ************************************************ *"},{"lineNumber":23,"author":{"gitID":"YuanQLLer"},"content":" */"},{"lineNumber":24,"author":{"gitID":"YuanQLLer"},"content":"public class Event extends Activity {"},{"lineNumber":25,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":26,"author":{"gitID":"YuanQLLer"},"content":"    private static final String  ACTIVITY_TYPE \u003d \"EVENT\";"},{"lineNumber":27,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":28,"author":{"gitID":"YuanQLLer"},"content":"    private final DateTime endDateTime;"},{"lineNumber":29,"author":{"gitID":"YuanQLLer"},"content":"    private final Location location;"},{"lineNumber":30,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":31,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"YuanQLLer"},"content":"     * Every field must be present and not null."},{"lineNumber":33,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"YuanQLLer"},"content":"    public Event("},{"lineNumber":35,"author":{"gitID":"YuanQLLer"},"content":"            Name name, DateTime startDateTime, DateTime endDateTime, Location location, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"YuanQLLer"},"content":"        super(name, startDateTime, remark, tags);"},{"lineNumber":37,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(endDateTime);"},{"lineNumber":38,"author":{"gitID":"YuanQLLer"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":39,"author":{"gitID":"YuanQLLer"},"content":"        this.location \u003d location;"},{"lineNumber":40,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":42,"author":{"gitID":"YuanQLLer"},"content":"    public Event("},{"lineNumber":43,"author":{"gitID":"YuanQLLer"},"content":"            Name name, DateTime startDateTime, DateTime endDateTime, Location location, Remark remark, Set\u003cTag\u003e tags,"},{"lineNumber":44,"author":{"gitID":"YuanQLLer"},"content":"            boolean isComplete) {"},{"lineNumber":45,"author":{"gitID":"YuanQLLer"},"content":"        super(name, startDateTime, remark, tags, isComplete);"},{"lineNumber":46,"author":{"gitID":"YuanQLLer"},"content":"        requireAllNonNull(endDateTime);"},{"lineNumber":47,"author":{"gitID":"YuanQLLer"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":48,"author":{"gitID":"YuanQLLer"},"content":"        this.location \u003d location;"},{"lineNumber":49,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":51,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"YuanQLLer"},"content":"    public Name getName() {"},{"lineNumber":53,"author":{"gitID":"YuanQLLer"},"content":"        return super.getName();"},{"lineNumber":54,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":56,"author":{"gitID":"YuanQLLer"},"content":"    public DateTime getStartDateTime() {"},{"lineNumber":57,"author":{"gitID":"YuanQLLer"},"content":"        return super.getDateTime();"},{"lineNumber":58,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":60,"author":{"gitID":"YuanQLLer"},"content":"    public DateTime getEndDateTime() {"},{"lineNumber":61,"author":{"gitID":"YuanQLLer"},"content":"        return this.endDateTime;"},{"lineNumber":62,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":64,"author":{"gitID":"YuanQLLer"},"content":"    public Location getLocation() {"},{"lineNumber":65,"author":{"gitID":"YuanQLLer"},"content":"        return this.location;"},{"lineNumber":66,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"YuanQLLer"},"content":"    public Remark getRemark() {"},{"lineNumber":69,"author":{"gitID":"YuanQLLer"},"content":"        return super.getRemark();"},{"lineNumber":70,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":72,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"YuanQLLer"},"content":"    public String getActivityType() {"},{"lineNumber":74,"author":{"gitID":"YuanQLLer"},"content":"        return ACTIVITY_TYPE;"},{"lineNumber":75,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":77,"author":{"gitID":"YuanQLLer"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"YuanQLLer"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":79,"author":{"gitID":"YuanQLLer"},"content":"     * if modification is attempted."},{"lineNumber":80,"author":{"gitID":"YuanQLLer"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"YuanQLLer"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":83,"author":{"gitID":"YuanQLLer"},"content":"        return super.getTags();"},{"lineNumber":84,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":86,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"YuanQLLer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"YuanQLLer"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"YuanQLLer"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":92,"author":{"gitID":"YuanQLLer"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":93,"author":{"gitID":"YuanQLLer"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":96,"author":{"gitID":"YuanQLLer"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":97,"author":{"gitID":"YuanQLLer"},"content":"        return otherEvent.getName().equals(this.getName())"},{"lineNumber":98,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 otherEvent.getStartDateTime().equals(this.getStartDateTime())"},{"lineNumber":99,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 otherEvent.getEndDateTime().equals(this.getEndDateTime())"},{"lineNumber":100,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 (location \u003d\u003d null ? otherEvent.location \u003d\u003d null : location.equals(otherEvent.getLocation()))"},{"lineNumber":101,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 (getRemark() \u003d\u003d null ? otherEvent.getRemark() \u003d\u003d null : getRemark().equals(otherEvent.getRemark()))"},{"lineNumber":102,"author":{"gitID":"YuanQLLer"},"content":"                \u0026\u0026 this.isCompleted() \u003d\u003d otherEvent.isCompleted();"},{"lineNumber":103,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":105,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"YuanQLLer"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"YuanQLLer"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitID":"YuanQLLer"},"content":"        builder.append(\"Event Name: \")"},{"lineNumber":109,"author":{"gitID":"YuanQLLer"},"content":"                .append(getName())"},{"lineNumber":110,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Start Date/Time: \")"},{"lineNumber":111,"author":{"gitID":"YuanQLLer"},"content":"                .append(getDateTime())"},{"lineNumber":112,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" End Date/Time\")"},{"lineNumber":113,"author":{"gitID":"YuanQLLer"},"content":"                .append(getEndDateTime())"},{"lineNumber":114,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Location: \")"},{"lineNumber":115,"author":{"gitID":"YuanQLLer"},"content":"                .append(getLocation() \u003d\u003d null ? \"\" : getLocation())"},{"lineNumber":116,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Remark: \")"},{"lineNumber":117,"author":{"gitID":"YuanQLLer"},"content":"                .append(getRemark() \u003d\u003d null ? \"\" : getRemark())"},{"lineNumber":118,"author":{"gitID":"YuanQLLer"},"content":"                .append(\" Tags: \")"},{"lineNumber":119,"author":{"gitID":"YuanQLLer"},"content":"                .append(isCompleted() ? \"Uncompleted\" : \"Completed\");"},{"lineNumber":120,"author":{"gitID":"YuanQLLer"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":121,"author":{"gitID":"YuanQLLer"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":124,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"YuanQLLer"},"content":"    public Activity copy(Set\u003cTag\u003e tags) {"},{"lineNumber":126,"author":{"gitID":"YuanQLLer"},"content":"        if (tags \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitID":"YuanQLLer"},"content":"            return new Event(getName(), getStartDateTime(), getEndDateTime(), getLocation(), getRemark(), getTags(),"},{"lineNumber":128,"author":{"gitID":"YuanQLLer"},"content":"                    isCompleted());"},{"lineNumber":129,"author":{"gitID":"YuanQLLer"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"YuanQLLer"},"content":"        return new Event(getName(), getStartDateTime(), getEndDateTime(), getLocation(), getRemark(), tags,"},{"lineNumber":131,"author":{"gitID":"YuanQLLer"},"content":"                isCompleted());"},{"lineNumber":132,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"YuanQLLer"},"content":""},{"lineNumber":134,"author":{"gitID":"YuanQLLer"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"YuanQLLer"},"content":"    public Activity getCompletedCopy() {"},{"lineNumber":136,"author":{"gitID":"YuanQLLer"},"content":"        return new Event("},{"lineNumber":137,"author":{"gitID":"YuanQLLer"},"content":"                getName(), getStartDateTime(), getEndDateTime(), getLocation(), getRemark(), getTags(), true);"},{"lineNumber":138,"author":{"gitID":"YuanQLLer"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"YuanQLLer"},"content":"}"},{"lineNumber":140,"author":{"gitID":"YuanQLLer"},"content":""}],"authorContributionMap":{"YuanQLLer":139,"-":1}}]
