var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yuxiangSg"},"content":"\u003d Smart Insurance Collection"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."},{"lineNumber":20,"author":{"gitID":"-"},"content":"* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."},{"lineNumber":21,"author":{"gitID":"-"},"content":"* What\u0027s different from https://github.com/se-edu/addressbook-level3[level 3]:"},{"lineNumber":22,"author":{"gitID":"-"},"content":"** A more sophisticated GUI that includes a list  panel and an in-built Browser."},{"lineNumber":23,"author":{"gitID":"-"},"content":"** More test cases, including automated GUI testing."},{"lineNumber":24,"author":{"gitID":"-"},"content":"** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":36,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4],"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"https://github.com/jfoenixadmin/JFoenix[JFoenix], https://github.com/dlemmermann/CalendarFX[CalendarFx]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"yuxiangSg":3,"-":37}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AddressBook Level 4 - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T15-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"Smart Insurance Collection(SIC) is for those who *prefer to use a desktop app for managing contacts*. More importantly, SIC is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS i/INCOME b/AGE [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, i/23000 age/23 block 123, #01-01`"},{"lineNumber":74,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal, i/100000 age/23`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"****"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":89,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":92,"author":{"gitID":"-"},"content":"****"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":108,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"****"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":118,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":130,"author":{"gitID":"-"},"content":"****"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"****"},{"lineNumber":147,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":148,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"****"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an appointment: `add_appointment`"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"Adds an appointment to the address book calendar +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Format: `add_appointment n/NAME S/START DATE E/END DATE`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"The date must be entered in the d/MM/yyyy format"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `add_appointment n/meet John S/11/09/2018  E/11/09/2018`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Intended Features"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"- Enhanced search bar functionality"},{"lineNumber":251,"author":{"gitID":"-"},"content":"- Prediction of purchasing power"},{"lineNumber":252,"author":{"gitID":"-"},"content":"- Enhanced Calendar features"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":258,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d remove existing appointment `[coming in v2.0]`"},{"lineNumber":261,"author":{"gitID":"yuxiangSg"},"content":"the user is allowed to use command line to delete an existing appointment by specifying the appointment title and interval"},{"lineNumber":262,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":263,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d update existing appointment `[coming in v2.0]`"},{"lineNumber":264,"author":{"gitID":"yuxiangSg"},"content":"the user is allowed to use command line to update an existing appointment by specifying the old appointment title and interval"},{"lineNumber":265,"author":{"gitID":"yuxiangSg"},"content":"then the new appointment title and interval"},{"lineNumber":266,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":267,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d add task to task pad`[coming in v2.0]`"},{"lineNumber":268,"author":{"gitID":"yuxiangSg"},"content":"the user is allowed to use command line to add a task to the task pad GUI  specifying the task title , task details"},{"lineNumber":269,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":270,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d remove task on task pad`[coming in v2.0]`"},{"lineNumber":271,"author":{"gitID":"yuxiangSg"},"content":"the user is allowed to use command line to remove a task to the task pad GUI  specifying the task index"},{"lineNumber":272,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Predict Purchasing Power"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"- User is able to type \"Predict\" get potential customer\u0027s expected spending based on the existing data"},{"lineNumber":276,"author":{"gitID":"-"},"content":"- After new data has been entered, users are able to re-predict and retrain the model"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":290,"author":{"gitID":"-"},"content":"* *Add Appointment* `add_appointment n/NAME S/START DATE E/End Date` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"e.g. `add_appointment n/Meet James S/14/08/2018 S/14/08/2018`"},{"lineNumber":292,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":293,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":294,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":295,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":297,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":299,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":300,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":301,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":303,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":304,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":305,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"yuxiangSg":13,"-":292}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":"        //getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":"        //assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":2,"-":92}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yuxiangSg"},"content":"\u003d Smart Insurance Collection - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":":repoURL: https://github.com/CS2103JAN2018-T15-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"*Method* : GradientDescent.java"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"* Extract targeted fields from user list in addressbook."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* Do some predictive calculation based on gradient descent method."},{"lineNumber":215,"author":{"gitID":"-"},"content":"* Output the \"ExpectedSpending\" back to the view"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":252,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":253,"author":{"gitID":"-"},"content":"----"},{"lineNumber":254,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":263,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"----"},{"lineNumber":265,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":"}"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":293,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":302,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":331,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":340,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":341,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":354,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":362,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":365,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"yuxiangSg"},"content":"// tag::add_appointment[]"},{"lineNumber":368,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d Add Appointment feature"},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":370,"author":{"gitID":"yuxiangSg"},"content":"The Add appointment feature is facilitated by all the components of the application. It supports adding of entry to the calendar through the command lines."},{"lineNumber":371,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":372,"author":{"gitID":"yuxiangSg"},"content":"After the `commandBox` in UI passed the text field input with add_appointment command word to the `LogicManger`, `AddressBookParser` will identify the command word and"},{"lineNumber":373,"author":{"gitID":"yuxiangSg"},"content":"call `AddAppointmentCommandParser` which will parse the input text to create a new `AppointmentEntry` object and return a new `AddAppointmentCommand` object. The `LogicManger` will"},{"lineNumber":374,"author":{"gitID":"yuxiangSg"},"content":"then execute this command."},{"lineNumber":375,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":376,"author":{"gitID":"yuxiangSg"},"content":"The `AddAppointmentCommand` calls `ModelManager` to add an appointment to calendar, `ModelManager` then call `AddressBook\u0027 to add appointment and raise a `AddressBookChangedEvent`, finally `AddressBook` calls its `InsuranceCalendar` object to"},{"lineNumber":377,"author":{"gitID":"yuxiangSg"},"content":"add an appointment and raise a ."},{"lineNumber":378,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":379,"author":{"gitID":"yuxiangSg"},"content":"Within `InsuranceCalendar`, the code is as follows:"},{"lineNumber":380,"author":{"gitID":"yuxiangSg"},"content":"[source,java]"},{"lineNumber":381,"author":{"gitID":"yuxiangSg"},"content":"----"},{"lineNumber":382,"author":{"gitID":"yuxiangSg"},"content":" public void addAppointment(AppointmentEntry entry)throws DuplicateAppointmentException {"},{"lineNumber":383,"author":{"gitID":"yuxiangSg"},"content":"        if (contains(entry)) {"},{"lineNumber":384,"author":{"gitID":"yuxiangSg"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":385,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":386,"author":{"gitID":"yuxiangSg"},"content":"        calendar.addEntry(entry.getAppointmentEntry());"},{"lineNumber":387,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntries.add(entry);"},{"lineNumber":388,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"yuxiangSg"},"content":"----"},{"lineNumber":390,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":391,"author":{"gitID":"yuxiangSg"},"content":"Both the `Calendar` class from the CalendarFx Lib and the `AppointmentEntry` list that the `InsuranceCalendar` class maintains are"},{"lineNumber":392,"author":{"gitID":"yuxiangSg"},"content":"updated with the addition of the new appointment. Addition od entry to the `Calendar` object automatically reflects the change on the"},{"lineNumber":393,"author":{"gitID":"yuxiangSg"},"content":"`CalendarView` GUI"},{"lineNumber":394,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":395,"author":{"gitID":"yuxiangSg"},"content":"On the other hand, as a `AddressBookChangedEvent` is raised, the `EventCenter` calls the `Storage Manager` to handle this event and the"},{"lineNumber":396,"author":{"gitID":"yuxiangSg"},"content":"added appointment is saved to persistent data"},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `Add_Appointment command`"},{"lineNumber":400,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":401,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 1 (current choice):** create a InsuranceCalendar class in Model that maintain a list of appointment entries`"},{"lineNumber":402,"author":{"gitID":"yuxiangSg"},"content":"** Pros: Preserve existing Architecture with little alternation to architecture design"},{"lineNumber":403,"author":{"gitID":"yuxiangSg"},"content":"** Cons: Duplicate set of appointment entries maintained"},{"lineNumber":404,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 2:** Use only the `Calendar` in CalendarFX Lib"},{"lineNumber":405,"author":{"gitID":"yuxiangSg"},"content":"** Pros: Simple and clean, only one set of appointment entries kept."},{"lineNumber":406,"author":{"gitID":"yuxiangSg"},"content":"** Cons: Drastic alteration to existing Structure, original Storage functions will not work."},{"lineNumber":407,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to add_appointment"},{"lineNumber":408,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":409,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 1 (current choice):** Ask the user to specify title, start date and end date."},{"lineNumber":410,"author":{"gitID":"yuxiangSg"},"content":"** Pros: Easy to implement."},{"lineNumber":411,"author":{"gitID":"yuxiangSg"},"content":"** Cons: user may find it tedious to type in the date and time also cannot be specified"},{"lineNumber":412,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 2:** user click on the calendar UI to specify date, specify time in command box."},{"lineNumber":413,"author":{"gitID":"yuxiangSg"},"content":"** Pros: more flexible and user friendly interface"},{"lineNumber":414,"author":{"gitID":"yuxiangSg"},"content":"** Cons: more elaborate parser and calendar UI event listener need to be in place to support"},{"lineNumber":415,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":416,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":417,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of appointment supported"},{"lineNumber":418,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":419,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 1 (current choice):** the user has to specify the title himself."},{"lineNumber":420,"author":{"gitID":"yuxiangSg"},"content":"** Pros: easy to implement"},{"lineNumber":421,"author":{"gitID":"yuxiangSg"},"content":"** Cons: require user to specify the appointment himself"},{"lineNumber":422,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 2:** link appointment to person list"},{"lineNumber":423,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":424,"author":{"gitID":"yuxiangSg"},"content":"** Cons: require elaborate event listener for Person list panel"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 1 (current choice):Array list to maintain the list of the appointments;"},{"lineNumber":429,"author":{"gitID":"yuxiangSg"},"content":"** Pros: Easy to understand and implement."},{"lineNumber":430,"author":{"gitID":"yuxiangSg"},"content":"** Cons: entires duplicated twice."},{"lineNumber":431,"author":{"gitID":"yuxiangSg"},"content":"* **Alternative 2:** use Calendar Library"},{"lineNumber":432,"author":{"gitID":"yuxiangSg"},"content":"** Pros: Clean and simple"},{"lineNumber":433,"author":{"gitID":"yuxiangSg"},"content":"** Cons: breaks the layering of the current architecture"},{"lineNumber":434,"author":{"gitID":"yuxiangSg"},"content":"// end::add_appointment[]"},{"lineNumber":435,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"// tag::add_appointment[]"},{"lineNumber":437,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Age Field feature (V1.2)"},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"One of the features that was added is the age field. When adding a new person to the addressbook now, the user must"},{"lineNumber":441,"author":{"gitID":"-"},"content":"specify the age of the new person. This will allow the user to have a more accurate description of the client, and"},{"lineNumber":442,"author":{"gitID":"-"},"content":"come up with a better insurance policy."},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"image::NewPersonListCard.png[width\u003d\"800\"]"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"To add a person with an age field, one must specify the age prefixed with the indicator `/age`:"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"```"},{"lineNumber":449,"author":{"gitID":"-"},"content":"ADD n/NAME p/PHONE e/EMAIL a/ADDRESS i/INCOME as/ACTUALSPENDING es/EXPECTEDINCOME age/AGE [t/TAG]..."},{"lineNumber":450,"author":{"gitID":"-"},"content":"```"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Improvements"},{"lineNumber":453,"author":{"gitID":"-"},"content":"* Include the age field when performing predictions"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* Filter clients by their age"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":457,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":468,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":469,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":474,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":475,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":476,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":488,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":493,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":506,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":507,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":508,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":511,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":514,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":521,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":526,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":533,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":546,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":547,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":548,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":549,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":550,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":551,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":552,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":553,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":554,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":558,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":561,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":578,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":586,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":587,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":593,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":596,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":616,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":619,"author":{"gitID":"-"},"content":"+"},{"lineNumber":620,"author":{"gitID":"-"},"content":"****"},{"lineNumber":621,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":622,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":623,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":624,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":625,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":626,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":627,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":628,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":629,"author":{"gitID":"-"},"content":"****"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":637,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":640,"author":{"gitID":"-"},"content":"+"},{"lineNumber":641,"author":{"gitID":"-"},"content":"****"},{"lineNumber":642,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":643,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":645,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":646,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":649,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":651,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":652,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":653,"author":{"gitID":"-"},"content":"****"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":661,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":664,"author":{"gitID":"-"},"content":"+"},{"lineNumber":665,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":666,"author":{"gitID":"-"},"content":"+"},{"lineNumber":667,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":668,"author":{"gitID":"-"},"content":"+"},{"lineNumber":669,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":670,"author":{"gitID":"-"},"content":"+"},{"lineNumber":671,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":673,"author":{"gitID":"-"},"content":"****"},{"lineNumber":674,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":675,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":676,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":677,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":678,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":679,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":680,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":681,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":682,"author":{"gitID":"-"},"content":"****"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":685,"author":{"gitID":"-"},"content":"+"},{"lineNumber":686,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":688,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":689,"author":{"gitID":"-"},"content":"+"},{"lineNumber":690,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":691,"author":{"gitID":"-"},"content":"+"},{"lineNumber":692,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"+"},{"lineNumber":694,"author":{"gitID":"-"},"content":"****"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":696,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":697,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":699,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":700,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":701,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":702,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":703,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":705,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":706,"author":{"gitID":"-"},"content":"****"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":710,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":712,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":714,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":716,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":718,"author":{"gitID":"-"},"content":"****"},{"lineNumber":719,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":722,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":723,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":724,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":736,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":740,"author":{"gitID":"-"},"content":"****"},{"lineNumber":741,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":742,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":743,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":744,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":745,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":746,"author":{"gitID":"-"},"content":"****"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":756,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":757,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":762,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":764,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":769,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":774,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":779,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":782,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":787,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":788,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":793,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":794,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":795,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":798,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":803,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":810,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":815,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":822,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":827,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":828,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":831,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":842,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":847,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":850,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":861,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":879,"author":{"gitID":"yuxiangSg"},"content":"* Insurance agents who work under a big agency (eg. AIA, AIG)"},{"lineNumber":880,"author":{"gitID":"yuxiangSg"},"content":"* has different categories of contacts to manage (eg. existing client, potential client, client making a claim)"},{"lineNumber":881,"author":{"gitID":"yuxiangSg"},"content":"* Has a need to record various tasks pertaining to the list of contacts kept(eg. arrangement of appointment)"},{"lineNumber":882,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":883,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":884,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":885,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":886,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"yuxiangSg"},"content":"*Value proposition*: manage contacts and related tasks within one app such that it will be more convenient and efficient for the user to carry out his job"},{"lineNumber":889,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":890,"author":{"gitID":"yuxiangSg"},"content":"[appendix]"},{"lineNumber":891,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":892,"author":{"gitID":"yuxiangSg"},"content":"*YuxiangSG*:"},{"lineNumber":893,"author":{"gitID":"yuxiangSg"},"content":"* Major feature: calendar with appointment support that allow user to add, remove, modify appointments and reflect these changes on a calendar GUI"},{"lineNumber":894,"author":{"gitID":"yuxiangSg"},"content":"* Minor feature: task pad GUI plus task assignment related functions, allow user to add,remove,modify tasks and reflect these changes on a task pad GUI"},{"lineNumber":895,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"*jstarw*:"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"* Minor feature: added an age field to the Person class, so that now insurance companies can now use age as a factor for"},{"lineNumber":899,"author":{"gitID":"-"},"content":"determining insurance policies"},{"lineNumber":900,"author":{"gitID":"-"},"content":"* Major feature: adding enhanced Search functionality. This will allow things like a drop down list, quick filtering,"},{"lineNumber":901,"author":{"gitID":"-"},"content":"and various other features. This will help improve the experience of the client as well as increase the efficiency of"},{"lineNumber":902,"author":{"gitID":"-"},"content":"their workflow."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":905,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":910,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":911,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":912,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":923,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":924,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent with many contacts |Group the contacts into different categories |View the list of contacts by categories"},{"lineNumber":925,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":926,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent with many contacts |Change the category of a contact |View the list of contacts by categories"},{"lineNumber":927,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":928,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that constantly contacts people |Update contact info |Keep my contact list updated"},{"lineNumber":929,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":930,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that needs to meet clients |Add appointments |Maintain my schedule"},{"lineNumber":931,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":932,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that needs to meet clients |Change the time/date of an existing appointment |Maintain my schedule"},{"lineNumber":933,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":934,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that needs to meet clients |Delete an appointment |Maintain my schedule"},{"lineNumber":935,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":936,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that needs to meet clients |Record client’s income |Prioritize purchasing power"},{"lineNumber":937,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":938,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent that needs to meet clients |Record client’s job |Prioritize purchasing power"},{"lineNumber":939,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":940,"author":{"gitID":"yuxiangSg"},"content":"|`* * *` |Insurance agent |Assign different policies to each contact |Know the policy my client is under"},{"lineNumber":941,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":942,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent that work for someone |Mark important tasks on my calendar |Don’s miss important meeting or tasks"},{"lineNumber":943,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":944,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent that needs to meet clients |Know the contact of an appointment |I know immediately who I am meeting and prepare for the appointment"},{"lineNumber":945,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":946,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent that needs to meet clients |Know which potential customer is likely to spend more |Schedule to meet them as a priority"},{"lineNumber":947,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":948,"author":{"gitID":"yuxiangSg"},"content":"|`* *` |Insurance agent that needs to meet clients |Know which potential customer is likely to spend more |Schedule to meet them as a priority"},{"lineNumber":949,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":950,"author":{"gitID":"yuxiangSg"},"content":"|`*` |Insurance agent that work with other agents |give a contact to other agents |share the contact with other agents"},{"lineNumber":951,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":952,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":953,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":959,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":964,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":969,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":970,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":971,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":972,"author":{"gitID":"-"},"content":"+"},{"lineNumber":973,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":978,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":979,"author":{"gitID":"-"},"content":"+"},{"lineNumber":980,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":983,"author":{"gitID":"-"},"content":"+"},{"lineNumber":984,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":985,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":986,"author":{"gitID":"-"},"content":"+"},{"lineNumber":987,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"yuxiangSg"},"content":"[discrete]"},{"lineNumber":990,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":991,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":992,"author":{"gitID":"yuxiangSg"},"content":"*MSS*"},{"lineNumber":993,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":994,"author":{"gitID":"yuxiangSg"},"content":"1.  User click on the calendar to specify the date to add"},{"lineNumber":995,"author":{"gitID":"yuxiangSg"},"content":"2.  User requests to add an appointment"},{"lineNumber":996,"author":{"gitID":"yuxiangSg"},"content":"3.  App add an appointment to the calendar"},{"lineNumber":997,"author":{"gitID":"yuxiangSg"},"content":"4.  calendar reflect the new appointment"},{"lineNumber":998,"author":{"gitID":"-"},"content":"+"},{"lineNumber":999,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1004,"author":{"gitID":"yuxiangSg"},"content":"* 2a.  No date is selected."},{"lineNumber":1005,"author":{"gitID":"yuxiangSg"},"content":"+"},{"lineNumber":1006,"author":{"gitID":"yuxiangSg"},"content":"Use case ends."},{"lineNumber":1007,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1008,"author":{"gitID":"yuxiangSg"},"content":"* 3a. The given date/timing is occupied."},{"lineNumber":1009,"author":{"gitID":"yuxiangSg"},"content":"+"},{"lineNumber":1010,"author":{"gitID":"yuxiangSg"},"content":"[none]"},{"lineNumber":1011,"author":{"gitID":"yuxiangSg"},"content":"** 3a1. AddressBook shows a “slot is occupied” error."},{"lineNumber":1012,"author":{"gitID":"yuxiangSg"},"content":"+"},{"lineNumber":1013,"author":{"gitID":"yuxiangSg"},"content":"Use case resumes at step 2."},{"lineNumber":1014,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1015,"author":{"gitID":"yuxiangSg"},"content":"[discrete]"},{"lineNumber":1016,"author":{"gitID":"yuxiangSg"},"content":"\u003d\u003d\u003d Use case: Add job of a person"},{"lineNumber":1017,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1018,"author":{"gitID":"yuxiangSg"},"content":"*MSS*"},{"lineNumber":1019,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1020,"author":{"gitID":"yuxiangSg"},"content":"1.  User requests add person"},{"lineNumber":1021,"author":{"gitID":"yuxiangSg"},"content":"2.  App takes in a command i/income"},{"lineNumber":1022,"author":{"gitID":"yuxiangSg"},"content":"3.  AddressBook adds a person with income"},{"lineNumber":1023,"author":{"gitID":"yuxiangSg"},"content":"4.  Use case ends"},{"lineNumber":1024,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1025,"author":{"gitID":"yuxiangSg"},"content":"*Extensions*"},{"lineNumber":1026,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1027,"author":{"gitID":"yuxiangSg"},"content":"[none]"},{"lineNumber":1028,"author":{"gitID":"yuxiangSg"},"content":"* 2a. The person should not already exist."},{"lineNumber":1029,"author":{"gitID":"yuxiangSg"},"content":"+"},{"lineNumber":1030,"author":{"gitID":"yuxiangSg"},"content":"Use case ends."},{"lineNumber":1031,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1038,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1039,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1040,"author":{"gitID":"yuxiangSg"},"content":".  A simple and clean GUI interface to facilitate better user experience"},{"lineNumber":1041,"author":{"gitID":"yuxiangSg"},"content":".  Incorporate material design into GUI to make the app more appealing to users"},{"lineNumber":1042,"author":{"gitID":"yuxiangSg"},"content":".  Should have a simple tutorial section to help ramp up new users to the system"},{"lineNumber":1043,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"yuxiangSg"},"content":"[[client]]Client::"},{"lineNumber":1057,"author":{"gitID":"yuxiangSg"},"content":"A person who can be enrolled into the insurance policy or a potential customer"},{"lineNumber":1058,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1059,"author":{"gitID":"yuxiangSg"},"content":"[[colleague]]Colleague::"},{"lineNumber":1060,"author":{"gitID":"yuxiangSg"},"content":"A fellow agent who work under the same organization"},{"lineNumber":1061,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1062,"author":{"gitID":"yuxiangSg"},"content":"[[calendar]]Calendar::"},{"lineNumber":1063,"author":{"gitID":"yuxiangSg"},"content":"A GUI calendar in the app"},{"lineNumber":1064,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1065,"author":{"gitID":"yuxiangSg"},"content":"[[policies]]Policies::"},{"lineNumber":1066,"author":{"gitID":"yuxiangSg"},"content":"Insurance policies the company offers to customers"},{"lineNumber":1067,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1068,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1079,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1099,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1105,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1115,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1117,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1119,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"yuxiangSg":160,"-":970}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"yuxiangSg"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"yuxiangSg"},"content":"        public void addAppointment(AppointmentEntry appointmentEntry) throws DuplicateAppointmentException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":146,"author":{"gitID":"yuxiangSg"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"yuxiangSg"},"content":"        public CalendarSource getCalendar() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public ArrayList\u003cArrayList\u003cDouble\u003e\u003e getPersonAttrMatrix() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":154,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":12,"-":178}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.InsuranceCalendar;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":95,"author":{"gitID":"yuxiangSg"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"yuxiangSg"},"content":"        public ArrayList\u003cAppointmentEntry\u003e getMyCalendarEntries() {"},{"lineNumber":97,"author":{"gitID":"yuxiangSg"},"content":"            return null;"},{"lineNumber":98,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":100,"author":{"gitID":"yuxiangSg"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"yuxiangSg"},"content":"        public InsuranceCalendar getMyCalendar() {"},{"lineNumber":102,"author":{"gitID":"yuxiangSg"},"content":"            return null;"},{"lineNumber":103,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":12,"-":94}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":"    private static final String FXML \u003d \"NewMainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":133,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":134,"author":{"gitID":"yuxiangSg"},"content":"        calendarPanel \u003d new CalendarPanel(logic.getCalendar());"},{"lineNumber":135,"author":{"gitID":"yuxiangSg"},"content":"        browserPlaceholder.getChildren().add(calendarPanel.getCalendarPage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":5,"-":195}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"    /** Returns the calender in addressbook*/"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"    CalendarSource getCalendar();"},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":6,"-":27}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"                + \"number of appointment entires \" + data.getMyCalendarEntries().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":2,"-":18}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":" * The Calendar Panel of the App."},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yuxiangSg"},"content":"public class CalendarPanel {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":"    private CalendarView calendarPage;"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":"    public CalendarPanel(CalendarSource calendar) {"},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage \u003d new CalendarView();"},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.getCalendarSources().setAll(calendar);"},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"        configurCalendarPage();"},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"        //registerAsAnEventHandler(this);"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":"     * Configure the calendarView to fit the browser panel."},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"    void configurCalendarPage() {"},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowAddCalendarButton(false);"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowDeveloperConsole(false);"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowPageSwitcher(true);"},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowPageToolBarControls(true);"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowPrintButton(false);"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowSearchField(false);"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowSearchResultsTray(false);"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowSourceTray(false);"},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.setShowToolBar(false);"},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":"        calendarPage.showMonthPage();"},{"lineNumber":42,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":43,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":44,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":46,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":53,"author":{"gitID":"yuxiangSg"},"content":"    public CalendarView getCalendarPage() {"},{"lineNumber":54,"author":{"gitID":"yuxiangSg"},"content":"        return calendarPage;"},{"lineNumber":55,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":44,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PredictCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case PredictCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new PredictCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"yuxiangSg"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"yuxiangSg"},"content":"            return new AddAppointmentCommandPaser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":4,"-":96}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":"    public static final Prefix PREFIX_START_INTERVAL \u003d new Prefix(\"S/\");"},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":"    public static final Prefix PREFIX_END_INTERVAL \u003d new Prefix(\"E/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_INCOME \u003d new Prefix(\"i/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ACTUALSPENDING \u003d new Prefix(\"as/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EXPECTEDSPENDING \u003d new Prefix(\"es/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"age/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":3,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Age;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Expenditure;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Income;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yuxiangSg"},"content":"     * Parses a {@code String input} into a {@code String}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yuxiangSg"},"content":"    static String parseString(String input) {"},{"lineNumber":61,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(input);"},{"lineNumber":62,"author":{"gitID":"yuxiangSg"},"content":"        String trimmedInput \u003d input.trim();"},{"lineNumber":63,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":64,"author":{"gitID":"yuxiangSg"},"content":"        return trimmedInput;"},{"lineNumber":65,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":67,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"yuxiangSg"},"content":"     * Parses a {@code Optional\u003cString\u003e input} into an {@code Optional\u003cString\u003e} if {@code input} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yuxiangSg"},"content":"    public static Optional\u003cString\u003e parseString(Optional\u003cString\u003e input) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(input);"},{"lineNumber":73,"author":{"gitID":"yuxiangSg"},"content":"        return input.isPresent() ? Optional.of(parseString(input.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":76,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":77,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"yuxiangSg"},"content":"     * Parses a {@code String input} into a {@code LocalDate}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"yuxiangSg"},"content":"    static LocalDate parseDate(String input) throws  IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(input);"},{"lineNumber":85,"author":{"gitID":"yuxiangSg"},"content":"        String trimmedInput \u003d input.trim();"},{"lineNumber":86,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":87,"author":{"gitID":"yuxiangSg"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(AppointmentEntry.DATE_VALIDATION);"},{"lineNumber":88,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":89,"author":{"gitID":"yuxiangSg"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":91,"author":{"gitID":"yuxiangSg"},"content":"            LocalDate localDate \u003d LocalDate.parse(trimmedInput, formatter);"},{"lineNumber":92,"author":{"gitID":"yuxiangSg"},"content":"            return localDate;"},{"lineNumber":93,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":95,"author":{"gitID":"yuxiangSg"},"content":"            throw new IllegalValueException(AppointmentEntry.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":98,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":99,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":100,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":102,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"yuxiangSg"},"content":"     * Parses a {@code Optional\u003cString\u003e input} into an {@code Optional\u003cLocalDate\u003e} if {@code input} is present."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yuxiangSg"},"content":"    public static Optional\u003cLocalDate\u003e parseDate(Optional\u003cString\u003e input) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(input);"},{"lineNumber":108,"author":{"gitID":"yuxiangSg"},"content":"        return input.isPresent() ? Optional.of(parseDate(input.get())) : Optional.empty();"},{"lineNumber":109,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":111,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"yuxiangSg"},"content":"     * Parses a {@code String name} into an {@code Name}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (!Address.isValid(trimmedAddress)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Parses a {@code String value} into an {@code value}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code value} is invalid."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public static Income parseIncome(String income) throws IllegalValueException {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        requireNonNull(income);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Double trimmedIncome \u003d Double.parseDouble(income.trim());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        if (!Income.isValid(trimmedIncome)) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Income.MESSAGE_INCOME_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return new Income(trimmedIncome);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cvalue\u003e} if {@code value} is present."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public static Optional\u003cIncome\u003e parseIncome(Optional\u003cString\u003e income) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        requireNonNull(income);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        return income.isPresent() ? Optional.of(parseIncome(income.get())) : Optional.empty();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Parses a {@code String value} into an {@code value}."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code value} is invalid."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static Expenditure parseActualSpending(String actualSpending) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        requireNonNull(actualSpending);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Double trimmedActualSpending \u003d Double.parseDouble(actualSpending.trim());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        if (!Expenditure.isValid(trimmedActualSpending)) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Expenditure.MESSAGE_EXPENDITURE_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        return new Expenditure(trimmedActualSpending);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cvalue\u003e} if {@code value} is present."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public static Optional\u003cExpenditure\u003e parseActualSpending(Optional\u003cString\u003e actualSpending)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        requireNonNull(actualSpending);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return actualSpending.isPresent()"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                ? Optional.of(parseActualSpending(actualSpending.get())) : Optional.empty();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Parses a {@code String value} into an {@code value}."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code value} is invalid."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public static Expenditure parseExpectedSpending(String expectedSpending) throws IllegalValueException {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        requireNonNull(expectedSpending);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Double trimmedExpectedSpending \u003d Double.parseDouble(expectedSpending.trim());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        if (!Expenditure.isValid(trimmedExpectedSpending)) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Expenditure.MESSAGE_EXPENDITURE_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return new Expenditure(trimmedExpectedSpending);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cvalue\u003e} if {@code value} is present."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public static Optional\u003cExpenditure\u003e parseExpectedSpending(Optional\u003cString\u003e expectedSpending)"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        requireNonNull(expectedSpending);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return expectedSpending.isPresent()"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                ? Optional.of(parseExpectedSpending(expectedSpending.get())) : Optional.empty();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Parses a {@code String value} into an {@code value}."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code value} is invalid."},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public static Age parseAge(String age) throws IllegalValueException {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        requireNonNull(age);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        Integer trimmedAge \u003d Integer.parseInt(age.trim());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        if (!Age.isValidAge(trimmedAge)) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Age.AGE_CONSTRAINTS);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        return new Age(trimmedAge);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cvalue\u003e} if {@code value} is present."},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public static Optional\u003cAge\u003e parseAge(Optional\u003cString\u003e age) throws IllegalValueException {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        requireNonNull(age);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        return age.isPresent() ? Optional.of(parseAge(age.get())) : Optional.empty();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":313,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":315,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":327,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":332,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":51,"-":285}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandPaser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_INTERVAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_INTERVAL;"},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalTime;"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object"},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"public class AddAppointmentCommandPaser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"     * and returns an AddAppointCommand object for execution."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_INTERVAL, PREFIX_END_INTERVAL);"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_INTERVAL, PREFIX_END_INTERVAL)"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"                        AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"yuxiangSg"},"content":"            String appointmentTitle \u003d ParserUtil.parseString(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":43,"author":{"gitID":"yuxiangSg"},"content":"            LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_INTERVAL)).get();"},{"lineNumber":44,"author":{"gitID":"yuxiangSg"},"content":"            LocalDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_INTERVAL)).get();"},{"lineNumber":45,"author":{"gitID":"yuxiangSg"},"content":"            Interval interval \u003d new Interval(startDate, LocalTime.MIN, endDate, LocalTime.MAX);"},{"lineNumber":46,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":48,"author":{"gitID":"yuxiangSg"},"content":"            AppointmentEntry appointmentEntry \u003d new AppointmentEntry(appointmentTitle, interval);"},{"lineNumber":49,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":50,"author":{"gitID":"yuxiangSg"},"content":"            return new AddAppointmentCommand(appointmentEntry);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":42,"-":21}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":60,"author":{"gitID":"yuxiangSg"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"yuxiangSg"},"content":"    public CalendarSource getCalendar() {"},{"lineNumber":62,"author":{"gitID":"yuxiangSg"},"content":"        return model.getCalendar();"},{"lineNumber":63,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":7,"-":57}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"    private List\u003cXmlAdptedAppointmentEntry\u003e appointmentEntries;"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntries.addAll(src.getMyCalendarEntries().stream().map(XmlAdptedAppointmentEntry::new)"},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":65,"author":{"gitID":"yuxiangSg"},"content":"        for (XmlAdptedAppointmentEntry a : appointmentEntries) {"},{"lineNumber":66,"author":{"gitID":"yuxiangSg"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":67,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":11,"-":73}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_INTERVAL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_INTERVAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":" * Adds a appointment to the address book\u0027s calendar."},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":16,"author":{"gitID":"yuxiangSg"},"content":"public class AddAppointmentCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"    public static final String COMMAND_WORD \u003d \"add_appointment\";"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the calendar. \""},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_START_INTERVAL + \"START DATE \""},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_END_INTERVAL + \"END DATE \""},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_NAME + \"Meet John \""},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_START_INTERVAL + \"14/08/2018 \""},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"            + PREFIX_END_INTERVAL + \"14/08/2018\";"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Appointment Added: %1$s\";"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the calendar\";"},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"    private final AppointmentEntry toAdd;"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"     * Creates an AddCommand to add the specified {@code AppointmentEntry}"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"    public AddAppointmentCommand(AppointmentEntry appointmentEntry) {"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(appointmentEntry);"},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":"        toAdd \u003d appointmentEntry;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":49,"author":{"gitID":"yuxiangSg"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":50,"author":{"gitID":"yuxiangSg"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"yuxiangSg"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"yuxiangSg"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"},{"lineNumber":60,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":43,"-":18}},{"path":"src/main/java/seedu/address/model/person/Age.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":" * Represents a Person\u0027s age in the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s value in the address book"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declare in {@link #isValidAge(Integer)}}"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Age {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String AGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"-"},"content":"            \"Persons age must be above 0 years old and under 150.\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public final Integer value;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param age a valid value"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public Age(Integer age) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(age);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        checkArgument(isValidAge(age), AGE_CONSTRAINTS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.value \u003d age;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * checks if the age is valid"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param age"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static boolean isValidAge(Integer age) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return age \u003e\u003d 0 \u0026\u0026 age \u003c 150;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return value.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || (other instanceof Age"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Age) other).value);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":3,"-":43}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":" * Signals that the operation will result in duplicate AppointmentEntry objects."},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":8,"-":5}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yuxiangSg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.InsuranceCalendar;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"     * Returns an unmodifiable view of the appointment entry list."},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"     * This list will not contain any duplicate lists."},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"    ArrayList\u003cAppointmentEntry\u003e getMyCalendarEntries();"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"     * Returns an unmodifiable view of Insurance calendar."},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":"    InsuranceCalendar getMyCalendar();"},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":42,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":43,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":20,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.InsuranceCalendar;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    private InsuranceCalendar calendar;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        calendar \u003d new InsuranceCalendar();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"yuxiangSg"},"content":"    public void setCalendar(InsuranceCalendar calendar) {"},{"lineNumber":72,"author":{"gitID":"yuxiangSg"},"content":"        this.calendar \u003d calendar;"},{"lineNumber":73,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":81,"author":{"gitID":"yuxiangSg"},"content":"        setCalendar(newData.getMyCalendar());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yuxiangSg"},"content":"    //// calendar-level operations"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":"     * Adds a appointment entry to the calendar."},{"lineNumber":95,"author":{"gitID":"yuxiangSg"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"yuxiangSg"},"content":"     * @throws DuplicateAppointmentException if an equivalent appointment already exists."},{"lineNumber":97,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"yuxiangSg"},"content":"    public void addAppointment(AppointmentEntry entry) throws DuplicateAppointmentException {"},{"lineNumber":99,"author":{"gitID":"yuxiangSg"},"content":"        calendar.addAppointment(entry);"},{"lineNumber":100,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Gets the matrix of list of persons with selected fields for calculation"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public ArrayList\u003cArrayList\u003cDouble\u003e\u003e getPersonAttrMatrix() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ArrayList\u003cArrayList\u003cDouble\u003e\u003e matrix \u003d new ArrayList\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ObservableList\u003cPerson\u003e list \u003d this.persons.asObservableList();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        list.forEach(person -\u003e {"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return matrix;"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":171,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":174,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                correctTagReferences, person.getIncome(), person.getActualSpending(),"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                person.getExpectedSpending(), person.getAge());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"yuxiangSg"},"content":"    CalendarSource getCalendar() {"},{"lineNumber":201,"author":{"gitID":"yuxiangSg"},"content":"        return calendar.getCalendar();"},{"lineNumber":202,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"yuxiangSg"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"yuxiangSg"},"content":"    public ArrayList\u003cAppointmentEntry\u003e getMyCalendarEntries() {"},{"lineNumber":222,"author":{"gitID":"yuxiangSg"},"content":"        return calendar.getAppointmentEntries();"},{"lineNumber":223,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":225,"author":{"gitID":"yuxiangSg"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"yuxiangSg"},"content":"    public InsuranceCalendar getMyCalendar() {"},{"lineNumber":227,"author":{"gitID":"yuxiangSg"},"content":"        return calendar;"},{"lineNumber":228,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":35,"-":208}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    /** Adds the given appointment entry */"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"    void addAppointment(AppointmentEntry appointmentEntry) throws DuplicateAppointmentException;"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yuxiangSg"},"content":"    /** returns the calendar in the addressbook */"},{"lineNumber":58,"author":{"gitID":"yuxiangSg"},"content":"    CalendarSource getCalendar();"},{"lineNumber":59,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Gets the matrix of list of persons with selected fields for calculation"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    ArrayList\u003cArrayList\u003cDouble\u003e\u003e getPersonAttrMatrix();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":11,"-":54}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    //self instantiate new AddressBook and UserPrefs"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Gets the matrix of list of persons with selected fields for calculation"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ArrayList\u003cArrayList\u003cDouble\u003e\u003e getPersonAttrMatrix() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this.addressBook.getPersonAttrMatrix();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"yuxiangSg"},"content":"    public void addAppointment(AppointmentEntry appointmentEntry) throws DuplicateAppointmentException {"},{"lineNumber":96,"author":{"gitID":"yuxiangSg"},"content":"        addressBook.addAppointment(appointmentEntry);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":98,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":99,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        this.indicateAddressBookChanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"yuxiangSg"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"yuxiangSg"},"content":"    public CalendarSource getCalendar() {"},{"lineNumber":129,"author":{"gitID":"yuxiangSg"},"content":"        return addressBook.getCalendar();"},{"lineNumber":130,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":16,"-":134}},{"path":"src/main/java/seedu/address/storage/XmlAdptedAppointmentEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"yuxiangSg"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":3,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.insuranceCalendar.AppointmentEntry;"},{"lineNumber":16,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":" * JAXB-friendly version of the Appointment Entry."},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":"public class XmlAdptedAppointmentEntry {"},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment Entry\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MISSING_FIELD_TITLE \u003d \"[TITLE]\";"},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MISSING_FIELD_START_DATE \u003d \"[START_DATE]\";"},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MISSING_FIELD_END_DATE \u003d \"[END_DATE]\";"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"    public static final String DATE_VALIDATION \u003d \"yyyy-MM-d\";"},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"            \"Dates should be in the format of yyyy-MM-d\";"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"    private String title;"},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"    private String startDate;"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    private String endDate;"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"     * Constructs an XmlAdaptedCalendarEntry."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public XmlAdptedAppointmentEntry() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":"    public XmlAdptedAppointmentEntry(String title, String startDate, String endDate) {"},{"lineNumber":48,"author":{"gitID":"yuxiangSg"},"content":"        this.title \u003d title;"},{"lineNumber":49,"author":{"gitID":"yuxiangSg"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":50,"author":{"gitID":"yuxiangSg"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":54,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yuxiangSg"},"content":"     * Converts a given appoinmentEntry into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"yuxiangSg"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"yuxiangSg"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointmentEntry"},{"lineNumber":58,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"yuxiangSg"},"content":"    public XmlAdptedAppointmentEntry(AppointmentEntry source) {"},{"lineNumber":60,"author":{"gitID":"yuxiangSg"},"content":"        title \u003d source.getGivenTitle();"},{"lineNumber":61,"author":{"gitID":"yuxiangSg"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":62,"author":{"gitID":"yuxiangSg"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":63,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":65,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"yuxiangSg"},"content":"     * Converts this jaxb-friendly adapted calendarEntry object into the model\u0027s AppointmentEntry object."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yuxiangSg"},"content":"    public AppointmentEntry toModelType() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":72,"author":{"gitID":"yuxiangSg"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"yuxiangSg"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MISSING_FIELD_TITLE));"},{"lineNumber":74,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":76,"author":{"gitID":"yuxiangSg"},"content":"        final String title \u003d this.title;"},{"lineNumber":77,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":78,"author":{"gitID":"yuxiangSg"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"yuxiangSg"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MISSING_FIELD_START_DATE));"},{"lineNumber":80,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":82,"author":{"gitID":"yuxiangSg"},"content":"        final String newStartDate \u003d this.startDate;"},{"lineNumber":83,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":84,"author":{"gitID":"yuxiangSg"},"content":"        if (this.endDate \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"yuxiangSg"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MISSING_FIELD_END_DATE));"},{"lineNumber":86,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":88,"author":{"gitID":"yuxiangSg"},"content":"        final String newEndDate \u003d this.endDate;"},{"lineNumber":89,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":90,"author":{"gitID":"yuxiangSg"},"content":"        final Interval interval \u003d new Interval(getLocatDate(newStartDate), LocalTime.MIN, getLocatDate(newEndDate),"},{"lineNumber":91,"author":{"gitID":"yuxiangSg"},"content":"                LocalTime.MAX);"},{"lineNumber":92,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":93,"author":{"gitID":"yuxiangSg"},"content":"        return new AppointmentEntry(title, interval);"},{"lineNumber":94,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":96,"author":{"gitID":"yuxiangSg"},"content":"    LocalDate getLocatDate(String date) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"yuxiangSg"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_VALIDATION);"},{"lineNumber":98,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":99,"author":{"gitID":"yuxiangSg"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":101,"author":{"gitID":"yuxiangSg"},"content":"            LocalDate localDate \u003d LocalDate.parse(date, formatter);"},{"lineNumber":102,"author":{"gitID":"yuxiangSg"},"content":"            return localDate;"},{"lineNumber":103,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":104,"author":{"gitID":"yuxiangSg"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":105,"author":{"gitID":"yuxiangSg"},"content":"            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"yuxiangSg"},"content":"        XmlAdptedAppointmentEntry otherEntry \u003d (XmlAdptedAppointmentEntry) other;"},{"lineNumber":121,"author":{"gitID":"yuxiangSg"},"content":"        return Objects.equals(title, otherEntry.title)"},{"lineNumber":122,"author":{"gitID":"yuxiangSg"},"content":"                \u0026\u0026 Objects.equals(startDate, otherEntry.startDate)"},{"lineNumber":123,"author":{"gitID":"yuxiangSg"},"content":"                \u0026\u0026 Objects.equals(endDate, otherEntry.endDate);"},{"lineNumber":124,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":100,"-":25}},{"path":"src/main/java/seedu/address/model/policy/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.policy;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Date."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(Integer, Month, Integer)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Date {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DATE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"-"},"content":"            \"Day must be from 1 to 28, 29, 30 or 31 depending on the month and year. Year must be from 1950 to 2150.\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public final Integer day;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final Month month;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final Integer year;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public Date(Integer day, Month month, Integer year) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireAllNonNull(day, month, year);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        checkArgument(isValidDate(day, month, year), DATE_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.day \u003d day;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.month \u003d month;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.year \u003d year;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static boolean isLeapYear(Integer year) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if a given (Integer, Month, Integer) tuple represents a valid date."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidDate(Integer day, Month month, Integer year) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        boolean yearCorrect \u003d year \u003e\u003d 1950 \u0026\u0026 year \u003c\u003d 2150;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        int daysInMonth \u003d 31;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (month \u003d\u003d Month.APRIL || month \u003d\u003d Month.JUNE || month \u003d\u003d Month.SEPTEMBER || month \u003d\u003d Month.NOVEMBER) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            daysInMonth \u003d 30;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } else if (month \u003d\u003d Month.FEBRUARY) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            daysInMonth \u003d isLeapYear(year) ? 29 : 28;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return yearCorrect \u0026\u0026 day \u003e\u003d 0 \u0026\u0026 day \u003c\u003d daysInMonth;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        builder.append(month.name().charAt(0) + month.name().substring(1).toLowerCase())"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .append(\" \")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .append(day)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .append(\", \")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .append(year);"},{"lineNumber":54,"author":{"gitID":"yuxiangSg"},"content":"        return builder.toString();"},{"lineNumber":55,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!(other instanceof seedu.address.model.policy.Date)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        seedu.address.model.policy.Date otherDate \u003d (seedu.address.model.policy.Date) other;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return otherDate.day.equals(this.day)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherDate.month.equals(this.month)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherDate.year.equals(this.year);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yuxiangSg":2,"-":71}},{"path":"src/main/java/seedu/address/model/insuranceCalendar/AppointmentEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"yuxiangSg"},"content":"package seedu.address.model.insuranceCalendar;"},{"lineNumber":2,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":" * Represents a appointment in the calendar."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":"public class AppointmentEntry {"},{"lineNumber":16,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"            \"Dates should be in the format of dd/MM/yyyy\";"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":"    public static final String DATE_VALIDATION \u003d \"d/MM/yyyy\";"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":"    private final Entry appointmentEntry;"},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":"    private final Interval interval;"},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":"    private final String givenTitle;"},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"    public AppointmentEntry(String title, Interval timeSlot) {"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"        requireAllNonNull(title, timeSlot);"},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntry \u003d new Entry(title, timeSlot);"},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"        interval \u003d timeSlot;"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":"        givenTitle \u003d title;"},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"    public LocalDate getStartDate() {"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"        return interval.getStartDate();"},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"    public LocalDate getEndDate() {"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"        return interval.getEndDate();"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":"    public Entry getAppointmentEntry() {"},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":"        return appointmentEntry;"},{"lineNumber":42,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":44,"author":{"gitID":"yuxiangSg"},"content":"    public String getGivenTitle() {"},{"lineNumber":45,"author":{"gitID":"yuxiangSg"},"content":"        return givenTitle;"},{"lineNumber":46,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":"        builder.append(givenTitle)"},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":"                .append(\" Start Date: \")"},{"lineNumber":53,"author":{"gitID":"yuxiangSg"},"content":"                .append(interval.getStartDate().toString())"},{"lineNumber":54,"author":{"gitID":"yuxiangSg"},"content":"                .append(\" End Date: \")"},{"lineNumber":55,"author":{"gitID":"yuxiangSg"},"content":"                .append(interval.getEndDate().toString());"},{"lineNumber":56,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":57,"author":{"gitID":"yuxiangSg"},"content":"        return builder.toString();"},{"lineNumber":58,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yuxiangSg"},"content":"        if (!(other instanceof AppointmentEntry)) {"},{"lineNumber":67,"author":{"gitID":"yuxiangSg"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":70,"author":{"gitID":"yuxiangSg"},"content":"        AppointmentEntry otherAppointment \u003d (AppointmentEntry) other;"},{"lineNumber":71,"author":{"gitID":"yuxiangSg"},"content":"        return otherAppointment.givenTitle.equals(this.getGivenTitle())"},{"lineNumber":72,"author":{"gitID":"yuxiangSg"},"content":"                \u0026\u0026 otherAppointment.getStartDate().equals(this.getStartDate())"},{"lineNumber":73,"author":{"gitID":"yuxiangSg"},"content":"                \u0026\u0026 otherAppointment.getEndDate().equals(this.getEndDate());"},{"lineNumber":74,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":61,"-":14}},{"path":"src/main/java/seedu/address/model/insuranceCalendar/InsuranceCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"yuxiangSg"},"content":"package seedu.address.model.insuranceCalendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":5,"author":{"gitID":"yuxiangSg"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":7,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":8,"author":{"gitID":"yuxiangSg"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":9,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":10,"author":{"gitID":"yuxiangSg"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":12,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":13,"author":{"gitID":"yuxiangSg"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yuxiangSg"},"content":" * The calendar in the address book."},{"lineNumber":15,"author":{"gitID":"yuxiangSg"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yuxiangSg"},"content":"public class InsuranceCalendar {"},{"lineNumber":17,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":18,"author":{"gitID":"yuxiangSg"},"content":"    private CalendarSource calendarSource;"},{"lineNumber":19,"author":{"gitID":"yuxiangSg"},"content":"    private Calendar calendar;"},{"lineNumber":20,"author":{"gitID":"yuxiangSg"},"content":"    private ArrayList\u003cAppointmentEntry\u003e appointmentEntries;"},{"lineNumber":21,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":22,"author":{"gitID":"yuxiangSg"},"content":"    public InsuranceCalendar() {"},{"lineNumber":23,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":24,"author":{"gitID":"yuxiangSg"},"content":"        calendar \u003d new Calendar();"},{"lineNumber":25,"author":{"gitID":"yuxiangSg"},"content":"        calendarSource \u003d new CalendarSource();"},{"lineNumber":26,"author":{"gitID":"yuxiangSg"},"content":"        calendarSource.getCalendars().add(calendar);"},{"lineNumber":27,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":30,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yuxiangSg"},"content":"     * Adds an appointment to the calendar."},{"lineNumber":32,"author":{"gitID":"yuxiangSg"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"yuxiangSg"},"content":"     * @throws DuplicateAppointmentException if the appointment to add is a duplicate of an existing appointments."},{"lineNumber":34,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"yuxiangSg"},"content":"    public void addAppointment(AppointmentEntry entry) throws DuplicateAppointmentException {"},{"lineNumber":36,"author":{"gitID":"yuxiangSg"},"content":"        if (contains(entry)) {"},{"lineNumber":37,"author":{"gitID":"yuxiangSg"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":38,"author":{"gitID":"yuxiangSg"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"yuxiangSg"},"content":"        calendar.addEntry(entry.getAppointmentEntry());"},{"lineNumber":40,"author":{"gitID":"yuxiangSg"},"content":"        appointmentEntries.add(entry);"},{"lineNumber":41,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":43,"author":{"gitID":"yuxiangSg"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yuxiangSg"},"content":"     * Returns true if the calender contains an equivalent appointment as the given argument."},{"lineNumber":45,"author":{"gitID":"yuxiangSg"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"yuxiangSg"},"content":"    public boolean contains(AppointmentEntry toCheck) {"},{"lineNumber":47,"author":{"gitID":"yuxiangSg"},"content":"        requireNonNull(toCheck);"},{"lineNumber":48,"author":{"gitID":"yuxiangSg"},"content":"        return appointmentEntries.contains(toCheck);"},{"lineNumber":49,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":51,"author":{"gitID":"yuxiangSg"},"content":"    public CalendarSource getCalendar() {"},{"lineNumber":52,"author":{"gitID":"yuxiangSg"},"content":"        return calendarSource;"},{"lineNumber":53,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yuxiangSg"},"content":""},{"lineNumber":55,"author":{"gitID":"yuxiangSg"},"content":"    public ArrayList\u003cAppointmentEntry\u003e getAppointmentEntries() {"},{"lineNumber":56,"author":{"gitID":"yuxiangSg"},"content":"        return appointmentEntries;"},{"lineNumber":57,"author":{"gitID":"yuxiangSg"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yuxiangSg"},"content":"}"}],"authorContributionMap":{"yuxiangSg":56,"-":2}}]
