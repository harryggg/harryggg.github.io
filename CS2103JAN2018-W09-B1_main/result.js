var resultJson = [{"path":"docs/team/owzhenwei.adoc","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"\u003d Ow Zhen Wei - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CarviciM"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"---"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"\u003d\u003d Overview"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"CarviciM is a car servicing management application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":""}],"authorContributionMap":{"whenzei":11,"-":2}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"CarviciM is built on a fork of https://github.com/nus-cs2103-AY1718S2/addressbook-level4[AddressBook -"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"Level"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":" 4],"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"which was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Ow Zhen Wei"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"image::whenzei.png[width\u003d\"130\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"{empty}[https://github.com/whenzei[github]] [\u003c\u003cwhenzei#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"Role: Team Lead, Code Quality, Developer +"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"Responsibilities: Model"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d Yu Hong Herald"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"image::yuhongherald.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"{empty} [https://github.com/yuhongherald[github]] [\u003c\u003cyuhongherald#, portfolio\u003e\u003e]"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"Role: Developer _Integration, Scheduling and tracking_ +"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"Responsibilities: Storage"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Wee Jia Sheng Richardson"},{"lineNumber":33,"author":{"gitID":"-"},"content":"image::richardson0694.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"{empty}[http://github.com/Richardson0694[github]] [\u003c\u003cRichardson0694#, portfolio\u003e\u003e]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"Role: Developer, Documentation, Integration +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d Charmaine Lee Hui Ching"},{"lineNumber":42,"author":{"gitID":"charmaineleehc"},"content":"image::charmaineleehc.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":43,"author":{"gitID":"charmaineleehc"},"content":"{empty}[http://github.com/charmaineleehc[github]] [\u003c\u003ccharmaineleehc#, portfolio\u003e\u003e]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"charmaineleehc"},"content":"Role: Developer, Documentation, Testing, Code Quality +"},{"lineNumber":46,"author":{"gitID":"charmaineleehc"},"content":"Responsibilities: Logic"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"whenzei":8,"charmaineleehc":5,"-":26,"yuhongherald":9}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"ï»¿\u003d CarviciM - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team W09-B1`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"CarviciM (Car Servicing Manager) is a desktop application for *managing car servicing jobs*. You can use Carvicim to add jobs, close ongoing jobs, import large number of job entries, manage employees for job assignment and notify employees of jobs through email. CarviciM is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CarviciM can get your management of servicing jobs done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d About This User Guide"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"This user guide shows you how to get started using the CarviciM. It shows you how to setup the application, and also how to perform operations in the CarviciM which are lead by examples."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*Legend*"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"..."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* represents something noteworthy"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"..."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"* represents a useful tip"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"`............`"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* represents an input command"},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"-"},"content":".  You can download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":".  Copy the file to the folder you want to use as the home folder for your CarviciM."},{"lineNumber":54,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. You should see the Graphical User Interface (GUI) in a few seconds."},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"+"},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Type the command in the \u003c\u003ccommand-box,command box\u003e\u003e and press kbd:[Enter] to execute it. +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":60,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"* *`liste`* : lists all employees\u0027 contacts"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"* **`adde`**`n/John Doe p/98765432 e/johnd@example.com` : adds an employee named `John Doe` to CarviciM."},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"* **`deletee`**`3` : deletes the 3rd employee shown in the current list"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":".  For details of each command, you can refer to \u003c\u003cFeatures\u003e\u003e."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"These are the command format for the user guide:"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `adde n/NAME`, `NAME` is a parameter which can be used as `adde n/John Doe`."},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/mechanic` or as `n/John Doe`."},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"* Items with `â¦`â after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/mechanic`, `t/technician` etc."},{"lineNumber":80,"author":{"gitID":"-"},"content":"* Items with `+` after them can be used multiple times but has to be used **at least once** e.g. `w/ASSIGNED_EMPLOYEE_INDEX+` can be used as `w/4`, `w/5` etc."},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"You can use this command to bring up the help menu. +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Adding an job entry: `addj`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"You can use this command to add a job to CarviciM. +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Format: `addj n/NAME p/PHONE_NUMBER e/EMAIL v/VEHICLE_NUMBER w/ASSIGNED_EMPLOYEE_INDEX+`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"****"},{"lineNumber":95,"author":{"gitID":"-"},"content":"* Adds a job with the given fields and assign employees based on specified `ASSIGNED_EMPLOYEE_INDEX`."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":97,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":98,"author":{"gitID":"-"},"content":"****"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"Examples:"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":103,"author":{"gitID":"-"},"content":". `addj n/John Doe p/98765432 e/johnd@example.com v/bhj123 w/3` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"*** You will see \"New job added: ... \" in the \u003c\u003cresult-display,result display\u003e\u003e. +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"*** The \u003c\u003cjobs-ui-panel ,jobs UI panel\u003e\u003e will be updated to display the newly added job"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Closing a job entry: `closej`"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"You can use this command to close an ongoing job based on its job number. +"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"Format: `closej JOB_NUMBER`"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"Examples:"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":115,"author":{"gitID":"-"},"content":". `closej 123` +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"*** Closes the ongoing job of number 123 in CarviciM. +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"*** You will see \"Job 123 closed\" in the \u003c\u003cresult-display,result display\u003e\u003e. +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"*** You will not see job of number 123 in the \u003c\u003cjobs-ui-panel,jobs UI panel\u003e\u003e."},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Adding an employee: `adde`"},{"lineNumber":121,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"You can use this command to add an employee to CarviciM. +"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"Format: `adde n/NAME p/PHONE_NUMBER e/EMAIL`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":128,"author":{"gitID":"-"},"content":". `adde n/John Doe p/98765432 e/johnd@example.com` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"*** Add the details of the employee into CarviciM. +"},{"lineNumber":130,"author":{"gitID":"-"},"content":"*** You will see \"New employee added: ...\" followed by details of the employee. +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"*** You will see the newly added employee in the \u003cemployees-ui-panel,employees ui panel\u003e\u003e."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Listing all employees : `liste`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"You can use this command to view a list of all employees in CarviciM. +"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":"Format: `liste`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Editing a employee : `edite`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"You can use this command to edit an existing employee in CarviciM. +"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":"Format: `edite INDEX [p/PHONE] [e/EMAIL] [t/TAG]...`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"****"},{"lineNumber":144,"author":{"gitID":"whenzei"},"content":"* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the last employee listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":147,"author":{"gitID":"-"},"content":"****"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":152,"author":{"gitID":"-"},"content":". `edite 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"*** Edits the phone number and email address of the 1st employee to be `91234567` and `johndoe@example.com` respectively. +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"*** You will see \"Edited Employee: ... \" followed by the new updated details of the employee in the \u003c\u003cresult-display,result display\u003e\u003e. +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"*** You will see the edited employee details in the \u003c\u003cemployees-ui-panel,employee UI panel\u003e\u003e."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Locating employees by name: `finde`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"You can use this command to find employees, whose names contain any of the given keywords. +"},{"lineNumber":160,"author":{"gitID":"whenzei"},"content":"Format: `finde KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":164,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":165,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":"* Employees matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":168,"author":{"gitID":"-"},"content":"****"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":173,"author":{"gitID":"-"},"content":". `finde John` +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"*** You will see all employees with `john` as their name (not case-sensitive), shown in the \u003c\u003cemployees-ui-panel,employee UI panel\u003e\u003e."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":177,"author":{"gitID":"-"},"content":". `finde Betsy Tim John` +"},{"lineNumber":178,"author":{"gitID":"-"},"content":"*** You will see all employees with `Betsy`, `Tim`, or `John` (not case-sensitive), shown in the employees UI panel."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Deleting an employee : `deletee`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"You can use this command to delete the specified employee from CarviciM. +"},{"lineNumber":183,"author":{"gitID":"whenzei"},"content":"Format: `deletee INDEX`"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"****"},{"lineNumber":186,"author":{"gitID":"whenzei"},"content":"* Deletes the employee at the specified `INDEX`."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":188,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":189,"author":{"gitID":"-"},"content":"****"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":194,"author":{"gitID":"-"},"content":". `liste` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"*** You will see a list of employees displayed in the UI panel."},{"lineNumber":196,"author":{"gitID":"-"},"content":". `deletee 2` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"*** You will see an updated \u003c\u003cemployees-ui-panel,employee UI panel\u003e\u003e which has the 2nd employee removed."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":200,"author":{"gitID":"-"},"content":". `finde Betsy` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"*** You will see the results of the `finde` command which shows all employees with matching keyword name."},{"lineNumber":202,"author":{"gitID":"-"},"content":". `deletee 1` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"*** You will see an updated employees UI panel which has the 1st employee removed."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"yuhongherald"},"content":"// tag::set[]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing a command word : `set`"},{"lineNumber":207,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"You can use this command to set an easy to use word in place of a default \u003c\u003ccommand-word,command word\u003e\u003e. +"},{"lineNumber":209,"author":{"gitID":"yuhongherald"},"content":"Format: `set OLD_COMMAND_WORD NEW_COMMAND_WORD`"},{"lineNumber":210,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":211,"author":{"gitID":"yuhongherald"},"content":"[NOTE]"},{"lineNumber":212,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":213,"author":{"gitID":"yuhongherald"},"content":"* The OLD_COMMAND_WORD can be either a default command word or one which user has set previously."},{"lineNumber":214,"author":{"gitID":"yuhongherald"},"content":"* The NEW_COMMAND_WORD must be 1 word, with no spacing."},{"lineNumber":215,"author":{"gitID":"yuhongherald"},"content":"* Any default words or words currently set by users are not allowed."},{"lineNumber":216,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":217,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":218,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":219,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":221,"author":{"gitID":"-"},"content":". `set add a` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"*** Sets `add` command word to `a` using default. +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"*** You will see \"add has been replaced with a!\" in the \u003c\u003cresult-display,result display\u003e\u003e."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":226,"author":{"gitID":"-"},"content":". `set delete d` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"*** Sets `delete` command word to `d` using default. +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"*** You will see \"delete has been replaced with d!\" in the result display."},{"lineNumber":229,"author":{"gitID":"yuhongherald"},"content":"// end::set[]"},{"lineNumber":230,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":231,"author":{"gitID":"yuhongherald"},"content":"// tag::importexport[]"},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing jobs from an excel file"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Importing a new excel file: `import`"},{"lineNumber":234,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"You can use this command to load your excel file by filename or filepath. +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"Format: `import FILE_PATH`"},{"lineNumber":237,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":238,"author":{"gitID":"yuhongherald"},"content":"[NOTE]"},{"lineNumber":239,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":240,"author":{"gitID":"yuhongherald"},"content":"* Filepath: A text representation of the location of the file used by the computer."},{"lineNumber":241,"author":{"gitID":"yuhongherald"},"content":"* CarviciM tries to read the file by rows:"},{"lineNumber":242,"author":{"gitID":"yuhongherald"},"content":"** The first row specifies the type of detail in the column."},{"lineNumber":243,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":244,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":245,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":248,"author":{"gitID":"-"},"content":". `import excel.xls` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"*** Imports file excel.xls."},{"lineNumber":250,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":251,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":252,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d Accepting and rejecting changes"},{"lineNumber":253,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":254,"author":{"gitID":"yuhongherald"},"content":"You can use 4 commands when reviewing changes:"},{"lineNumber":255,"author":{"gitID":"-"},"content":"* `accept INDEX`"},{"lineNumber":256,"author":{"gitID":"-"},"content":"* `reject INDEX`"},{"lineNumber":257,"author":{"gitID":"-"},"content":"* `acceptAll`"},{"lineNumber":258,"author":{"gitID":"-"},"content":"* `rejectAll`"},{"lineNumber":259,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Accepting 1 job: `accept`"},{"lineNumber":261,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":262,"author":{"gitID":"yuhongherald"},"content":"Accepts a job specified at position INDEX in imported list."},{"lineNumber":263,"author":{"gitID":"yuhongherald"},"content":"Format: `accept INDEX`"},{"lineNumber":264,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":265,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":266,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":268,"author":{"gitID":"-"},"content":". `accept 1` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"*** Accepts the first job entry and removes it from imported list."},{"lineNumber":270,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Accepting all remaining imported jobs: `acceptAll`"},{"lineNumber":272,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":273,"author":{"gitID":"yuhongherald"},"content":"Accepts all remaining jobs."},{"lineNumber":274,"author":{"gitID":"yuhongherald"},"content":"Format: `acceptAll`"},{"lineNumber":275,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":276,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":277,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":279,"author":{"gitID":"-"},"content":". `acceptAll` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"*** Accepts all remaining job entries and clears the imported list."},{"lineNumber":281,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Rejecting 1 job: `reject`"},{"lineNumber":283,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":284,"author":{"gitID":"yuhongherald"},"content":"Rejects a job specified at position INDEX in imported list."},{"lineNumber":285,"author":{"gitID":"yuhongherald"},"content":"Format: `reject INDEX`"},{"lineNumber":286,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":287,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":288,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":290,"author":{"gitID":"-"},"content":". `reject 1` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"*** Rejects the first job entry and removes it from imported list."},{"lineNumber":292,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Rejecting all remaining imported jobs: `rejectAll`"},{"lineNumber":294,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":295,"author":{"gitID":"yuhongherald"},"content":"Rejects all remaining jobs."},{"lineNumber":296,"author":{"gitID":"yuhongherald"},"content":"Format: `rejectAll`"},{"lineNumber":297,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":298,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":299,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"** Example 1:"},{"lineNumber":301,"author":{"gitID":"-"},"content":". `rejectAll` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"*** Rejects all remaining job entries and clears the imported list."},{"lineNumber":303,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":304,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d Writing comments to your reviews"},{"lineNumber":305,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"While accepting or rejecting changes, you can enter your comments behind the command."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"yuhongherald"},"content":"[TIP]"},{"lineNumber":309,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":310,"author":{"gitID":"yuhongherald"},"content":"You can type any alphanumeric sentence as a comment, as long as it is after the command."},{"lineNumber":311,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":312,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":313,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":314,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":316,"author":{"gitID":"-"},"content":". `accept 1` good job` +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"*** Accepts first job and attaches \"good job\" as a comment to the first job."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":320,"author":{"gitID":"-"},"content":". `acceptAll well done` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"*** Accepts all remaining imported jobs and attaches \"well done\" as a comment to all the remaining imported jobs."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"** Example 3: +"},{"lineNumber":324,"author":{"gitID":"-"},"content":". `reject 1 Speak to you during tomorrow\u0027s meeting.` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"*** Rejects first job and attaches \"Speak to you during tomorrow\u0027s meeting.\" as a comment to the first job."},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Example 4: +"},{"lineNumber":328,"author":{"gitID":"-"},"content":". `rejectAll Please check the customer details.` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"*** Rejects all remaining imported jobs and attaches \"Please check the customer details.\" as a comment to all the remaining imported jobs."},{"lineNumber":330,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":331,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d Sharing your feedback with your employees"},{"lineNumber":332,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":333,"author":{"gitID":"yuhongherald"},"content":"If you want to share your feedback, you can export it as an excel file, reflecting accept/reject with comments."},{"lineNumber":334,"author":{"gitID":"-"},"content":"Format: `export FILE_PATH`"},{"lineNumber":335,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":336,"author":{"gitID":"yuhongherald"},"content":"[TIP]"},{"lineNumber":337,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":338,"author":{"gitID":"-"},"content":"* You can type any filename supported by your computer\u0027s storage format."},{"lineNumber":339,"author":{"gitID":"-"},"content":"* If you forgot to export your feedback, you can find it under C:\\User\\Documents\\CarviciM\\feedback.xls."},{"lineNumber":340,"author":{"gitID":"yuhongherald"},"content":"* The feedback file\u0027s format is support for future imports."},{"lineNumber":341,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"yuhongherald"},"content":"[NOTE]"},{"lineNumber":344,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":345,"author":{"gitID":"-"},"content":"Filepath: A text representation of the file location in the computer."},{"lineNumber":346,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":347,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":348,"author":{"gitID":"yuhongherald"},"content":"Examples:"},{"lineNumber":349,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":351,"author":{"gitID":"-"},"content":". `export summary report` +"},{"lineNumber":352,"author":{"gitID":"-"},"content":"*** Exports the feedback to \"summary report.xls\""},{"lineNumber":353,"author":{"gitID":"yuhongherald"},"content":"// end::importexport[]"},{"lineNumber":354,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"// tag::theme[]"},{"lineNumber":356,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Setting a theme : `theme`"},{"lineNumber":357,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"You can use this command to set the theme of the application. +"},{"lineNumber":359,"author":{"gitID":"whenzei"},"content":"Format: `theme INDEX`"},{"lineNumber":360,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":361,"author":{"gitID":"whenzei"},"content":"****"},{"lineNumber":362,"author":{"gitID":"whenzei"},"content":"* Sets the theme based on the specified \u0027INDEX\u0027"},{"lineNumber":363,"author":{"gitID":"whenzei"},"content":"* The index refers to the index number shown in the most recent listing"},{"lineNumber":364,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3,..."},{"lineNumber":365,"author":{"gitID":"-"},"content":"****"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":370,"author":{"gitID":"-"},"content":". `theme` +"},{"lineNumber":371,"author":{"gitID":"-"},"content":"*** You will see the list of valid themes to choose from in the \u003c\u003cresult-display,result display\u003e\u003e."},{"lineNumber":372,"author":{"gitID":"-"},"content":". `theme 1` +"},{"lineNumber":373,"author":{"gitID":"-"},"content":"*** You will see the theme of the application set as the selected one."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"// end::theme[]"},{"lineNumber":376,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":384,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"You can use this command to restore CarviciM to the state before the previous _undoable_ command was executed. +"},{"lineNumber":391,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":395,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify CarviciM\u0027s content (`addj, `closej`, `adde`, `deletee`, `edit` and `cleare`)."},{"lineNumber":396,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":401,"author":{"gitID":"-"},"content":". `deletee 1` +"},{"lineNumber":402,"author":{"gitID":"-"},"content":"*** Deletes the first employee in CarviciM.+"},{"lineNumber":403,"author":{"gitID":"-"},"content":"*** You will see that the first employee is no longer displayed in the \u003c\u003cemployees-ui-panel,employees UI panel\u003e\u003e."},{"lineNumber":404,"author":{"gitID":"-"},"content":". `liste` +"},{"lineNumber":405,"author":{"gitID":"-"},"content":"*** Shows all employees in CarviciM. +"},{"lineNumber":406,"author":{"gitID":"-"},"content":"*** You will not see the deleted employee of index 1 in employees UI panel."},{"lineNumber":407,"author":{"gitID":"-"},"content":". `undo` (reverses the `delete 1` command) +"},{"lineNumber":408,"author":{"gitID":"-"},"content":"*** You will see the deleted employee present in the employees UI panel again."},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":411,"author":{"gitID":"-"},"content":". `closej 1` +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"*** You will see that job number 1 is removed from the \u003c\u003cjobs-ui-panel,jobs UI panel\u003e\u003e."},{"lineNumber":413,"author":{"gitID":"-"},"content":". `undo` (reverses the `closej 1` command) +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"*** You will see that job number 1 is added back into the jobs UI panel."},{"lineNumber":415,"author":{"gitID":"-"},"content":". `undo` +"},{"lineNumber":416,"author":{"gitID":"-"},"content":"*** The `undo` command fails as there are no undoable commands."},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"You can use this command to reverse the most recent `undo` command. +"},{"lineNumber":421,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Example 1: +"},{"lineNumber":426,"author":{"gitID":"-"},"content":". `deletee 1` +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"*** You will see that the first employee is removed from the \u003c\u003cemployees-ui-panel,employees UI panel\u003e\u003e."},{"lineNumber":428,"author":{"gitID":"-"},"content":". `undo` (reverses the `deletee 1` command) +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"*** You will see that the deleted employee is added back into the employees UI panel."},{"lineNumber":430,"author":{"gitID":"-"},"content":". `redo` (reapplies the `deletee 1` command) +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"*** You will see that the same employee is removed from the employees UI panel again."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Example 2: +"},{"lineNumber":434,"author":{"gitID":"-"},"content":". `closej 1` +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"*** You will see that the job number 1 is removed from the \u003c\u003cjobs-ui-panel,jobs UI panel\u003e\u003e."},{"lineNumber":436,"author":{"gitID":"-"},"content":". `deletee 1` +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"*** You will see that the first employee is removed from the employees UI panel."},{"lineNumber":438,"author":{"gitID":"-"},"content":". `undo` (reverses the `deletee 1` command) +"},{"lineNumber":439,"author":{"gitID":"-"},"content":"*** You will see that the deleted employee is added back into the employees UI panel."},{"lineNumber":440,"author":{"gitID":"-"},"content":". `undo` (reverses the `closej 1` command) +"},{"lineNumber":441,"author":{"gitID":"-"},"content":"*** You will see that the closed job number 1 is added back into the jobs UI panel."},{"lineNumber":442,"author":{"gitID":"-"},"content":". `redo` (reapplies the `closej 1` command) +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"*** You will see that the job number 1 is removed from the jobs UI panel again."},{"lineNumber":444,"author":{"gitID":"-"},"content":". `redo` (reapplies the `deletee 1` command) +"},{"lineNumber":445,"author":{"gitID":"-"},"content":"*** You will see that the same employee is removed from the employees UI panel."},{"lineNumber":446,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all employees : `cleare`"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"You can use this command to clear all employees from CarviciM. +"},{"lineNumber":451,"author":{"gitID":"-"},"content":"Format: `cleare`"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"You can use this command to exit the program. +"},{"lineNumber":456,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"whenzei"},"content":"CarviciM data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":461,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Email assigned employees belonging to a job : `email`"},{"lineNumber":464,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"You can use this command to send a notice email to all assigned employees of a job. +"},{"lineNumber":466,"author":{"gitID":"-"},"content":"Format: `email JOB_NUMBER`"},{"lineNumber":467,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":472,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":477,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"* *Add Job* `adde n/NAME p/PHONE_NUMBER e/EMAIL v/VEHICLE_NUMBER w/ASSIGNED_EMPLOYEE_INDEX+` +"},{"lineNumber":482,"author":{"gitID":"whenzei"},"content":"e.g. `addj n/James Ho p/22224444 e/jamesho@example.com v/saa213 w/22`"},{"lineNumber":483,"author":{"gitID":"whenzei"},"content":"* *Close Job* `closej JOB_NUMBER` +"},{"lineNumber":484,"author":{"gitID":"whenzei"},"content":"e.g. `closej 1232`"},{"lineNumber":485,"author":{"gitID":"whenzei"},"content":"* *Add Employee* `adde n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...` +"},{"lineNumber":486,"author":{"gitID":"whenzei"},"content":"e.g. `adde n/James Ho p/22224444 e/jamesho@example.com t/mechanic`"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* *Clear Employees* : `cleare`"},{"lineNumber":488,"author":{"gitID":"whenzei"},"content":"* *Delete Employee* : `deletee INDEX` +"},{"lineNumber":489,"author":{"gitID":"whenzei"},"content":"e.g. `deletee 3`"},{"lineNumber":490,"author":{"gitID":"whenzei"},"content":"* *Edit Employee* : `edite INDEX [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"},{"lineNumber":491,"author":{"gitID":"whenzei"},"content":"e.g. `edite 2 e/jameslee@example.com`"},{"lineNumber":492,"author":{"gitID":"whenzei"},"content":"* *Find Employees* : `finde KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":493,"author":{"gitID":"whenzei"},"content":"e.g. `finde James Jake`"},{"lineNumber":494,"author":{"gitID":"-"},"content":"* *List Employee* : `liste`"},{"lineNumber":495,"author":{"gitID":"-"},"content":"* *Import excel file* : `import` +"},{"lineNumber":496,"author":{"gitID":"-"},"content":"e.g. `import excel.xls`"},{"lineNumber":497,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":498,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":499,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":500,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":501,"author":{"gitID":"-"},"content":"* *Email Assigned Employees Of A Job* : `email` +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"e.g. `email 123`"},{"lineNumber":503,"author":{"gitID":"-"},"content":"* *Change \u003c\u003ccommand-word,Command Word\u003e\u003e* : `set` +"},{"lineNumber":504,"author":{"gitID":"-"},"content":"e.g. `set add a`"},{"lineNumber":505,"author":{"gitID":"whenzei"},"content":"* *Theme* : `theme INDEX` +"},{"lineNumber":506,"author":{"gitID":"whenzei"},"content":"e.g. `theme 1`"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":509,"author":{"gitID":"-"},"content":"[[command-box]] Command Box::"},{"lineNumber":510,"author":{"gitID":"-"},"content":"A region on the User Interface which allows the user to type in."},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"[[jobs-ui-panel]] Jobs UI Panel::"},{"lineNumber":513,"author":{"gitID":"-"},"content":"A region on the User Interface which displays the list of jobs."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"[[employees-ui-panel]] Employees UI Panel::"},{"lineNumber":516,"author":{"gitID":"-"},"content":"A region on the User Interface which displays the list of employees."},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"[[result-display]] Result Display::"},{"lineNumber":519,"author":{"gitID":"-"},"content":"A region on the User Interface which displays the result of executed commands."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"[[command-word]] Command Word::"},{"lineNumber":522,"author":{"gitID":"-"},"content":"A text that the application recognises for performing an operation."}],"authorContributionMap":{"whenzei":53,"charmaineleehc":2,"-":379,"yuhongherald":88}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CarviciM"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"https://travis-ci.org/CS2103JAN2018-W09-B1/main[image:https://travis-ci.org/CS2103JAN2018-W09-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/CarviciM_logo.PNG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"CarviciM is your go-to desktop application for managing car servicing jobs. If you prefer to perform your tasks with minimal usage of the mouse, this is the application just for you!"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":18,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"* This application has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"* This application aims to helps users who are proficient at using the keyboard to manage their car servicing jobs swiftly. As such, most of the available commands can be executed using just the keyboard."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* CarviciM is built on a fork of https://github.com/nus-cs2103-AY1718S2/addressbook-level4[AddressBook - Level 4], which was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"whenzei":5,"-":31}},{"path":"docs/team/yuhongherald.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"\u003d Yu Hong Herald - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d PROJECT: Car Servicing Manager"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"---"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"Coming in v2.0"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"* *Major enhancement*: added *the ability to import job entries from an excel file*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"* *Minor enhancement*: added a set command that allows the user to use a custom keyword in place of the default keyword."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"*** Helped to edit PRs for merging for v1.2- (Pull requests https://github.com[#40], https://github.com[#48])"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"*** Added JobListPanel to support displaying jobs (Pull requests https://github.com[#53])"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"** Documentation:"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"** Tools:"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"include::../UserGuide.adoc[tag\u003dset]"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"include::../UserGuide.adoc[tag\u003dimportexport]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"include::../DeveloperGuide.adoc[tag\u003dset]"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"include::../DeveloperGuide.adoc[tag\u003dimportexport]"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":""}],"authorContributionMap":{"-":27,"yuhongherald":29}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        Employee[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":49}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        /* ---------------- Performing delete operation while an unfiltered list is being shown ------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"        /* Case: delete the first employee in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        Employee deletedEmployee \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEmployee);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        /* Case: delete the last employee in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        /* Case: undo deleting the last employee in the list -\u003e last employee restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        /* Case: redo deleting the last employee in the list -\u003e last employee deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        /* Case: delete the middle employee in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        /* ---------------- Performing delete operation while a filtered list is being shown -------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, delete index within bounds of address book and employee list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, delete index within bounds of address book but out of bounds of employee list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getEmployeeList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        /* ------------------- Performing delete operation while a employee card is selected ---------------------- */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"        /* Case: delete the selected employee -\u003e employee list panel selects the employee before the deleted employee */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        deletedEmployee \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEmployee);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        /* ------------------------------- Performing invalid delete operation ---------------------------------- */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"                getModel().getAddressBook().getEmployeeList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"     * Removes the {@code Employee} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"     * @return the removed employee"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"    private Employee removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"        Employee targetEmployee \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"            model.deletePerson(targetEmployee);"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"targetEmployee is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"        return targetEmployee;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":"     * Deletes the employee at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":"        Employee deletedEmployee \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEmployee);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(DeleteCommand.COMMAND_WORD + \" \""},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":"                + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)}"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":186,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":31,"-":156,"yuhongherald":3}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        /* Case: selects first card in employee list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        /* Case: filters the employee list before clearing -\u003e entire address book cleared */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":91,"yuhongherald":1}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MECHANIC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECHNICIAN;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECHNICIAN;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee without tags to a non-empty address book, command with leading spaces and"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"         * trailing spaces -\u003e added"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        Employee toAdd \u003d AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + \"   \" + TAG_DESC_TECHNICIAN + \" \";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee with all fields same as another employee in the address book except name -\u003e added */"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_TECHNICIAN;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee with all fields same as another employee in the address book except phone -\u003e added */"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + TAG_DESC_TECHNICIAN;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee with all fields same as another employee in the address book except email -\u003e added */"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + TAG_DESC_TECHNICIAN;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee with tags, command with parameters in random order -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_TECHNICIAN + PHONE_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + EMAIL_DESC_BOB;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        /* Case: add a employee, missing tags -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"        /* ------------------------ Perform add operation on the shown filtered list ---------------------------- */"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"        /* Case: filters the employee list before adding -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":"        /* ----------------------- Perform add operation while a employee card is selected ------------------------- */"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"        /* Case: selects first card in the employee list, add a employee -\u003e added, card selection remains unchanged */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"        /* --------------------------------- Perform invalid add operations ------------------------------------- */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"        /* Case: add a duplicate employee -\u003e rejected */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"        /* Case: add a duplicate employee except with different tags -\u003e rejected */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"        // AddressBook#addEmployee(Employee)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"mechanic\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * 5. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"whenzei"},"content":"    private void assertCommandSuccess(Employee toAdd) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"whenzei"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":186,"author":{"gitID":"whenzei"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Employee)"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"    private void assertCommandSuccess(String command, Employee toAdd) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":192,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"whenzei"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Employee)} except asserts that"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Employee)"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":230,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":29,"-":204,"yuhongherald":1}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        /* Case: select the first card in the employee list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        /* Case: select the last card in the employee list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        /* Case: select the middle card in the employee list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, select index within bounds of address book but out of bounds of employee list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getEmployeeList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, select index within bounds of address book and employee list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"     * {@code expectedSelectedCardIndex} of the selected employee.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":7,"-":135,"yuhongherald":1}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"        assertEquals(getModel().getAddressBook().getEmployeeList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getEmployeeList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":"     * Selects the employee at {@code index} of the displayed list."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":153,"author":{"gitID":"whenzei"},"content":"        assertEquals(0, getModel().getAddressBook().getEmployeeList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":158,"author":{"gitID":"whenzei"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same employee objects as {@code expectedModel}"},{"lineNumber":159,"author":{"gitID":"whenzei"},"content":"     * and the employee list panel displays the persons in the model correctly."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":172,"author":{"gitID":"yuhongherald"},"content":"     * {@code expectedResultMessage} with command keys message appended,"},{"lineNumber":173,"author":{"gitID":"whenzei"},"content":"     * the model and storage contains the same employee objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"whenzei"},"content":"     * and the employee list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"yuhongherald"},"content":"    protected void assertApplicationDisplaysExpectedError(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"yuhongherald"},"content":"        assertEquals(getModel().appendCommandKeyToMessage(expectedResultMessage), getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":8,"-":240,"yuhongherald":5}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    private static final Predicate\u003cEmployee\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    public static void setFilteredList(Model model, List\u003cEmployee\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"        Optional\u003cPredicate\u003cEmployee\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    public static void setFilteredList(Model model, Employee... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"     * Returns a predicate that evaluates to true if this {@code Employee} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    private static Predicate\u003cEmployee\u003e getPredicateMatching(Employee other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":7,"-":32}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        /* Case: repeat previous find command where employee list is displaying the persons we are finding"},{"lineNumber":37,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 employee found */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"        assertFalse(getModel().getAddressBook().getEmployeeList().contains(BENSON));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee in address book, keyword is same as name but of different case -\u003e 1 employee found */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee not in address book -\u003e 0 persons found */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"        /* Case: find phone number of employee in address book -\u003e 0 persons found */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"        /* Case: find email of employee in address book -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"        /* Case: find tags of employee in address book -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"        /* Case: find while a employee is selected -\u003e selected card deselected */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"        /* Case: find employee in empty address book -\u003e 0 persons found */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":147,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":166,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":13,"-":156,"yuhongherald":1}},{"path":"src/test/java/seedu/address/ui/EmployeeCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"public class EmployeeCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"        Employee employeeWithNoTags \u003d new EmployeeBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"        PersonCard personCard \u003d new PersonCard(employeeWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"        assertCardDisplay(personCard, employeeWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        Employee employeeWithTags \u003d new EmployeeBuilder().build();"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"        personCard \u003d new PersonCard(employeeWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        assertCardDisplay(personCard, employeeWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        PersonCard personCard \u003d new PersonCard(employee, 0);"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        // same employee, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        PersonCard copy \u003d new PersonCard(employee, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        // different employee, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        Employee differentEmployee \u003d new EmployeeBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        assertFalse(personCard.equals(new PersonCard(differentEmployee, 0)));"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        // same employee, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"        assertFalse(personCard.equals(new PersonCard(employee, 1)));"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedEmployee} correctly and matches"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    private void assertCardDisplay(PersonCard personCard, Employee expectedEmployee, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        // verify employee details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        assertCardDisplaysPerson(expectedEmployee, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":44,"-":28}},{"path":"src/test/java/seedu/address/ui/JobDisplayPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"public class JobDisplayPanelTest extends GuiUnitTest {"},{"lineNumber":4,"author":{"gitID":"-"},"content":"    /*private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"    private JobDisplayPanel jobDisplayPanel;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e jobDisplayPanel \u003d new JobDisplayPanel());"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(jobDisplayPanel);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(jobDisplayPanel.getRoot());"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        // associated web page of a employee"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(JobDisplayPanel.SEARCH_PAGE_URL"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":33}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        // verify that style is changed correctly even after multiple consecutive failed COMMANDS"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"        // two COMMANDS (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        // insert command in the middle of retrieving previous COMMANDS"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"        // two COMMANDS"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"        // insert command in the middle of retrieving previous COMMANDS"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":5,"-":152}},{"path":"src/test/java/seedu/address/ui/EmployeeListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"public class EmployeeListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    private static final ObservableList\u003cEmployee\u003e TYPICAL_EMPLOYEES \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_EMPLOYEES);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_EMPLOYEES.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_EMPLOYEES.get(i));"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"            Employee expectedEmployee \u003d TYPICAL_EMPLOYEES.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"            assertCardDisplaysPerson(expectedEmployee, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":8,"-":50}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEmployee}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    public static void assertCardDisplaysPerson(Employee expectedEmployee, PersonCardHandle actualCard) {"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee.getName().fullName, actualCard.getName());"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee.getPhone().value, actualCard.getPhone());"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee.getEmail().value, actualCard.getEmail());"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Employee... employees) {"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        for (int i \u003d 0; i \u003c employees.length; i++) {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"            assertCardDisplaysPerson(employees[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cEmployee\u003e employees) {"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"        assertListMatching(personListPanelHandle, employees.toArray(new Employee[0]));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":14,"-":57}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MECHANIC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECHNICIAN;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECHNICIAN;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + \" \" + TAG_DESC_MECHANIC + \" \";"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_MECHANIC).build();"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        /* Case: undo editing the last employee in the list -\u003e last employee restored */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        /* Case: redo editing the last employee in the list -\u003e last employee edited again */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedEmployee);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        /* Case: edit a employee with new values same as existing values -\u003e edited */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN + TAG_DESC_MECHANIC;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_TECHNICIAN;"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        Employee employeeToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags().build();"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, edit index within bounds of address book and employee list -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"        employeeToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"        /* Case: filtered employee list, edit index within bounds of address book but out of bounds of employee list"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getEmployeeList().size();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":"        /* ------------------- Performing edit operation while a employee card is selected ------------------------ */"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"        /* Case: selects first card in the employee list, edit a employee -\u003e edited, card selection"},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"         * remains unchanged but browser url changes"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"        // browser\u0027s url is updated to reflect the new employee\u0027s name"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"        /* -------------------------------- Performing invalid edit operation ------------------------------------- */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":153,"author":{"gitID":"yuhongherald"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":157,"author":{"gitID":"yuhongherald"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":161,"author":{"gitID":"yuhongherald"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":165,"author":{"gitID":"yuhongherald"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":169,"author":{"gitID":"whenzei"},"content":"        assertTrue(getModel().getAddressBook().getEmployeeList().contains(BOB));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN + TAG_DESC_MECHANIC;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"whenzei"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values"},{"lineNumber":177,"author":{"gitID":"whenzei"},"content":"         but with different tags -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"whenzei"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Employee, Index)} except that"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":187,"author":{"gitID":"whenzei"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Employee, Index)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"whenzei"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee) {"},{"lineNumber":190,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(command, toEdit, editedEmployee, null);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"whenzei"},"content":"     * 2. Asserts that the model related components are updated to reflect the employee at index {@code toEdit} being"},{"lineNumber":197,"author":{"gitID":"whenzei"},"content":"     * updated to values specified {@code editedEmployee}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"whenzei"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedEmployee);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":208,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException | EmployeeNotFoundException e) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":210,"author":{"gitID":"whenzei"},"content":"                    \"editedEmployee is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":214,"author":{"gitID":"whenzei"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee), expectedSelectedCardIndex);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":260,"author":{"gitID":"yuhongherald"},"content":"        assertApplicationDisplaysExpectedError(command, expectedResultMessage, expectedModel);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":40,"-":215,"yuhongherald":9}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"        String defaultConfigAsString \u003d \"App title : CarviciM\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"        assertNotNull(AppUtil.getImage(\"/images/car_spanner.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"yuhongherald":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"import seedu.address.storage.XmlAdaptedEmployee;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    private static final File MISSING_EMPLOYEE_FIELD_FILE \u003d"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"            new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    private static final File INVALID_EMPLOYEE_FIELD_FILE \u003d"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"            new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    private static final File VALID_EMPLOYEE_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"            Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        assertEquals(9, dataFromFile.getEmployeeList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"    public void xmlAdaptedEmployeeFromFile_fileWithMissingEmployeeField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee actualEmployee \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"                MISSING_EMPLOYEE_FIELD_FILE, XmlAdaptedEmployeeWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee expectedEmployee \u003d new XmlAdaptedEmployee("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee, actualEmployee);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"    public void xmlAdaptedEmployeeFromFile_fileWithInvalidEmployeeField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee actualEmployee \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"                INVALID_EMPLOYEE_FIELD_FILE, XmlAdaptedEmployeeWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee expectedEmployee \u003d new XmlAdaptedEmployee("},{"lineNumber":94,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee, actualEmployee);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"    public void xmlAdaptedEmployeeFromFile_fileWithValidEmployee_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee actualEmployee \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"                VALID_EMPLOYEE_FILE, XmlAdaptedEmployeeWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee expectedEmployee \u003d new XmlAdaptedEmployee("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"        assertEquals(expectedEmployee, actualEmployee);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"whenzei"},"content":"                builder.withEmployee(new EmployeeBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"whenzei"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data"},{"lineNumber":144,"author":{"gitID":"whenzei"},"content":"     * to {@code XmlAdaptedEmployee}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"whenzei"},"content":"    @XmlRootElement(name \u003d \"employee\")"},{"lineNumber":148,"author":{"gitID":"whenzei"},"content":"    private static class XmlAdaptedEmployeeWithRootElement extends XmlAdaptedEmployee {}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":30,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_THEME;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"//@author owzhenwei"},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    public void parse_validArgs_returnsThemeCommand() {"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        assertParseSuccess(parser, \"1\", new ThemeCommand(INDEX_FIRST_THEME));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":17,"-":14}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"ï»¿\u003d CarviciM - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B1/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `W09-GroupB1`      Since: `FEB 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"charmaineleehc"},"content":". Ensure that you have *JDK `1.8.0_60`* or later installed in your computer."},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":25,"author":{"gitID":"charmaineleehc"},"content":"If you do not already have *JDK `1.8.0_60`* or later installed, click http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[here] to do so."},{"lineNumber":26,"author":{"gitID":"charmaineleehc"},"content":"[WARNING]"},{"lineNumber":27,"author":{"gitID":"charmaineleehc"},"content":"CarviciM works only with this version of Java 8 or later, and not on earlier versions. +"},{"lineNumber":28,"author":{"gitID":"charmaineleehc"},"content":"Please http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[update your JDK] if your current version is earlier than the stated."},{"lineNumber":29,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"charmaineleehc"},"content":". You will need to use *IntelliJ* IDE for this project."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":35,"author":{"gitID":"charmaineleehc"},"content":"If you do not have *IntelliJ* IDE installed, click https://www.jetbrains.com/idea/download/#section\u003dwindows[here] to do so."},{"lineNumber":36,"author":{"gitID":"charmaineleehc"},"content":"[WARNING]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":52,"author":{"gitID":"charmaineleehc"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). You should see the `BUILD SUCCESSFUL` message. +"},{"lineNumber":53,"author":{"gitID":"charmaineleehc"},"content":"This will generate for you all resources required by the application and tests."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"charmaineleehc"},"content":"The code for CarviciM follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":68,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":74,"author":{"gitID":"charmaineleehc"},"content":"*Optional*"},{"lineNumber":75,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":76,"author":{"gitID":"charmaineleehc"},"content":"You can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":77,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"charmaineleehc"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo."},{"lineNumber":82,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":83,"author":{"gitID":"charmaineleehc"},"content":"If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":90,"author":{"gitID":"charmaineleehc"},"content":"*Optional*"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"charmaineleehc"},"content":". After setting up Travis, you can set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":93,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":94,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":95,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":96,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":97,"author":{"gitID":"charmaineleehc"},"content":". You can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":98,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":99,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":101,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":102,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":109,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":117,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":118,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"charmaineleehc"},"content":"The *_Architecture Diagram_* (figure 1) given above explains the high-level design of the App. Read this section (section 2) to get a quick overview of each component."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":124,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":125,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"charmaineleehc"},"content":"* At app launch:"},{"lineNumber":130,"author":{"gitID":"charmaineleehc"},"content":"** Initializing the components in the correct sequence, and connects them up with each other."},{"lineNumber":131,"author":{"gitID":"charmaineleehc"},"content":"* At shut down:"},{"lineNumber":132,"author":{"gitID":"charmaineleehc"},"content":"** Shutting down the components and invoking cleanup method where necessary."},{"lineNumber":133,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"charmaineleehc"},"content":"* Defines its \u003c\u003capi, _API_\u003e\u003e in an `interface` with the same name as the Component."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"charmaineleehc"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s \u003c\u003capi, API\u003e\u003e in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"charmaineleehc"},"content":"The _Sequence Diagram_ below (figure 3) shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":164,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":167,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":169,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"charmaineleehc"},"content":"The diagram below (figure 4) shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":178,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":180,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":188,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"charmaineleehc"},"content":"\u003c\u003capi, *API*\u003e\u003e : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"charmaineleehc"},"content":"The `UI` component uses https://en.wikipedia.org/wiki/JavaFX[JavaFx] UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":199,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":206,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":207,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":214,"author":{"gitID":"charmaineleehc"},"content":"\u003c\u003capi, *API*\u003e\u003e :"},{"lineNumber":215,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":218,"author":{"gitID":"charmaineleehc"},"content":"Here is what happens when the UI makes an `execute()` call to Logic:"},{"lineNumber":219,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":220,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":221,"author":{"gitID":"whenzei"},"content":".  The command execution can affect the `Model` (e.g. adding a employee) and/or raise events."},{"lineNumber":222,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":225,"author":{"gitID":"charmaineleehc"},"content":"For a more specific example of the steps above, given below (figure 8) is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` \u003c\u003capi, API\u003e\u003e call."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":228,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":237,"author":{"gitID":"charmaineleehc"},"content":"\u003c\u003capi, *API*\u003e\u003e : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":238,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":243,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":244,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":245,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":251,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":254,"author":{"gitID":"charmaineleehc"},"content":"\u003c\u003capi, *API*\u003e\u003e : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":255,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":260,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"// tag::addJob[]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add job feature"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"`Job` is part of the `Model` component which is made up of `Person`, `JobNumber, `VehicleNumber`, `Status`, `Date`, `UniqueEmployeeList` and `RemarkList` (refer to figure)."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":".Class Diagram of Model component"},{"lineNumber":278,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":279,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"`Person` represents the client of a job. `JobNumber` represents the number of a job and is responsible for generating a running number for each job. `Status` represents the status of a job which holds value of either `ongoing` or `closed` that is used for categorizing jobs. `Date` represents the date of creation for the job. `RemarkList` holds all `Remark` belonging to the job. `UniqueEmployeeList` of the job represents the employees assigned."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"The job adding mechanism is facilitated by a `AddJobCommand` which is an `UndoableCommand`. `AddJobCommandParser` is responsible for parsing the input arguments. It utilizes `ParserUtil` for the validation of `NAME`, `PHONE`, `EMAIL`, `VEHICLE_NUMBER` and `ASSIGNED_EMPLOYEE_INDEX` and creates `AddJobCommand` object which prepares the `Job` object."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If the parameters are invalid, `addj` command will return an invalid message, which shows the usage information to the user."},{"lineNumber":288,"author":{"gitID":"-"},"content":"(e.g. `addj n/John Doe p/9999999 e/john@example.com v/SHG123 w/-1`)."},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"`AddJobCommandParser` code snippet to validate the parameters, `NAME`, `PHONE`, `EMAIL`, `VEHICLE_NUMBER`, `ASSIGNED_EMPLOYEE_INDEX+`, which returns `AddJobCommand` object if valid, and invalid message otherwise:"},{"lineNumber":292,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":293,"author":{"gitID":"-"},"content":"----"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public AddJobCommand parse(String args) throws ParseException {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":296,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"},{"lineNumber":297,"author":{"gitID":"-"},"content":"                        PREFIX_EMAIL, PREFIX_VEHICLE_NUMBER, PREFIX_ASSIGNED_EMPLOYEE);"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"},{"lineNumber":300,"author":{"gitID":"-"},"content":"                PREFIX_EMAIL, PREFIX_VEHICLE_NUMBER, PREFIX_ASSIGNED_EMPLOYEE)) {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"            VehicleNumber vehicleNumber \u003d"},{"lineNumber":309,"author":{"gitID":"-"},"content":"                    ParserUtil.parseVehicleNumber(argMultimap.getValue(PREFIX_VEHICLE_NUMBER)).get();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            ArrayList\u003cIndex\u003e assignedEmployeeIndices \u003d"},{"lineNumber":311,"author":{"gitID":"-"},"content":"                    ParserUtil.parseIndices(argMultimap.getAllValues(PREFIX_ASSIGNED_EMPLOYEE));"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"            Person client \u003d new Person(name, phone, email);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"            return new AddJobCommand(client, vehicleNumber, assignedEmployeeIndices);"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"----"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"`preprocessUndoableCommand` method code snippet in `AddJobCommand` that checks if assigned employee exists for the indices given. It creates `Job` object only if valid, and throws an invalid message otherwise:"},{"lineNumber":323,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":324,"author":{"gitID":"-"},"content":"----"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        //Check for valid employee indices"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        for (Index targetIndex : targetIndices) {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":332,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"            for (Index targetIndex : targetIndices) {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"                assignedEmployees.add(lastShownList.get(targetIndex.getZeroBased()));"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":339,"author":{"gitID":"-"},"content":"            toAdd \u003d new Job(client, vehicleNumber, new JobNumber(), new Date(), assignedEmployees,"},{"lineNumber":340,"author":{"gitID":"-"},"content":"                    new Status(Status.STATUS_ONGOING), new RemarkList());"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"            throw new CommandException(\"Duplicate employee index\");"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":"----"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"The successful execution of `AddJobCommand` adds the `Job` to CarviciM."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Modelling jobs in CarviciM"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Current choice:** Adding a list to keep track of all jobs in CarviciM, and adding an attribute for keeping a list of assigned employees in `Job` class."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Finding assigned employees of a job, requires only going through the assigned employee list of the job. Removal of a job is done easily by removing it from the list of jobs."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: Additional list to maintain, other than the list of employees. Changes to an employee needs to be updated for all jobs that contains the respective employee."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* _Alternative:_ Add a new attribute in `Employee` class to keep a list of jobs."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Only need to maintain a single list of employees. Finding jobs that are assigned to an `Employee` object only requires going through the job list."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: Finding all employees belonging to a job, requires going through the job list of all employees. The removal of a job, requires going through all employees, as a job can be assigned to multiple employees."},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Checking if given employee indices point to valid employees in CarviciM"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"* **Current choice:** Perform check in the `preprocessUndoableCommand` method of `AddJobCommand`."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Pros: Does not introduce more coupling."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Cons: `AddJobCommand` will need to store more attributes, as a `Job` object is only created when `preprocessUndoableCommand` method is executed successfully."},{"lineNumber":366,"author":{"gitID":"-"},"content":"* _Alternative:_ Allow `ParserUtil` to hold employee list."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Pros: `AddJobCommandParser` determines if the employee indices point to valid employees, and creates the `Job` object."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Cons: Allowing `ParserUtil` to hold the list of employees introduce more coupling among the classes."},{"lineNumber":369,"author":{"gitID":"-"},"content":"// end::addJob[]"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"// tag::set[]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Set command feature"},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"charmaineleehc"},"content":".ClassDiagram of CommandWords at runtime"},{"lineNumber":376,"author":{"gitID":"charmaineleehc"},"content":"image::SetCommandObjectDiagram.png[width\u003d\"800\"]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"charmaineleehc"},"content":"`SetCommand` keeps 2 lists of command words:"},{"lineNumber":380,"author":{"gitID":"charmaineleehc"},"content":"* the default command words"},{"lineNumber":381,"author":{"gitID":"charmaineleehc"},"content":"** stored as a class level reference `COMMANDS`"},{"lineNumber":382,"author":{"gitID":"charmaineleehc"},"content":"* the custom user command words"},{"lineNumber":383,"author":{"gitID":"charmaineleehc"},"content":"** stored as a field `commands` in the object"},{"lineNumber":384,"author":{"gitID":"charmaineleehc"},"content":"Both are managed by the class `CommandWords`."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"`CommandWords` is in the `Logic` component, under `Commands`, as it is required to parse commands in `AddressBookParser`."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"`CommandWords` only deal with commands that have their default command word declared in the class level reference."},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"As you can see from figure 12, AddressBookParser makes a reference to CommandWords. However, `CommandWords` resides in `UserPrefs` in the `Model` component. This is to facilitate the saving of data. CommandWords also has a method checkIntegrity, which ensures that object command words are 1 to 1 with class command words. This allows forward compatibility, as well as protects against data corruption to some extent."},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to put CommandWords for storage"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Place `CommandWords` in `UserPrefs`"},{"lineNumber":397,"author":{"gitID":"-"},"content":"** Pros: Single Responsibility Principle is maintained as custom command words in `CommandWords` is a user preference."},{"lineNumber":398,"author":{"gitID":"-"},"content":"** Cons: More coupling is required for the AddressBook to retrieve the custom command words."},{"lineNumber":399,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Place `CommandWords` in `AddressBook`"},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: Direct access to custom words in commands."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: Single Responsibility Principle will be violated."},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Access to CommandWords"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Provide direct access to `CommandWords` when more details are needed and keep minimal \u003c\u003capi, API\u003e\u003e on `ModelManager`."},{"lineNumber":406,"author":{"gitID":"charmaineleehc"},"content":"** Pros: Easy to implement, and is neat."},{"lineNumber":407,"author":{"gitID":"charmaineleehc"},"content":"** Cons: Accidental modification can lead to bugs."},{"lineNumber":408,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ `ModelManager` and member variables gets access and provides \u003c\u003capi, API\u003e\u003e to access `CommandWords`."},{"lineNumber":409,"author":{"gitID":"-"},"content":"** Pros: Write protection."},{"lineNumber":410,"author":{"gitID":"charmaineleehc"},"content":"** Cons: `CommandWords` is frequently accessed, so many more \u003c\u003capi, APIs\u003e\u003e are required."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing the list of default command words"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Store the default list in `CommandWords`."},{"lineNumber":416,"author":{"gitID":"-"},"content":"** Pros: Easier to maintain the Open-Closed Principle, also follows the Single Responsibility Principle."},{"lineNumber":417,"author":{"gitID":"-"},"content":"** Cons: Increased coupling."},{"lineNumber":418,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Store the default list in `Commands`."},{"lineNumber":419,"author":{"gitID":"-"},"content":"** Pros: Reduced coupling."},{"lineNumber":420,"author":{"gitID":"-"},"content":"** Cons: `Commands` is an abstract class, it is not appropriate to reference class variables."},{"lineNumber":421,"author":{"gitID":"-"},"content":"// end::set[]"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"yuhongherald"},"content":"// tag::importexport[]"},{"lineNumber":424,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d Import/Export feature #Coming in v2.0#"},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"yuhongherald"},"content":"image::blank.png[width\u003d\"800\"]"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":430,"author":{"gitID":"yuhongherald"},"content":"// end::importexport[]"},{"lineNumber":431,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"// tag::theme[]"},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Theme setting feature"},{"lineNumber":434,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"The theme setting mechanism is facilitated by a `ThemeCommand`. `ThemeCommandParser` is responsible for parsing the input arguments. It utilizes `ParserUtil` for the validation of `INDEX` input of `1` to `2`, and creates the `ThemeCommand` object which selects the application\u0027s theme."},{"lineNumber":437,"author":{"gitID":"-"},"content":"The `UserPref` stores and retrieves the theme preference of the application."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"`ThemeCommand` relies on `SetThemeRequestEvent` which is handled by `MainWindow` to call the appropriate method for setting of theme."},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":442,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":443,"author":{"gitID":"-"},"content":"If there is no `INDEX` present, `theme` command will return an invalid message, which shows the usage information to the user."},{"lineNumber":444,"author":{"gitID":"-"},"content":"(e.g. theme \"\")."},{"lineNumber":445,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":446,"author":{"gitID":"-"},"content":"`ThemeCommand` code snippet to check for valid `INDEX` input and raises the `SetThemeRequestEvent` handler for setting of the desired theme, based on the `INDEX` input:"},{"lineNumber":447,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":448,"author":{"gitID":"-"},"content":"----"},{"lineNumber":449,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":450,"author":{"gitID":"-"},"content":"        if (selectedIndex.getZeroBased() \u003e\u003d NUMBER_OF_THEMES) {"},{"lineNumber":451,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_THEME_INDEX);"},{"lineNumber":452,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":453,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new SetThemeRequestEvent(selectedIndex));"},{"lineNumber":454,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGE_SUCCESS, selectedIndex.getOneBased()));"},{"lineNumber":455,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitID":"-"},"content":"----"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"`ThemeCommandParser` code snippet to validate `INDEX` input, which returns `ThemeCommand` object if valid, and invalid message otherwise:"},{"lineNumber":459,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":460,"author":{"gitID":"-"},"content":"----"},{"lineNumber":461,"author":{"gitID":"-"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":462,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":463,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":464,"author":{"gitID":"-"},"content":"            return new ThemeCommand(index);"},{"lineNumber":465,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":466,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":467,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":468,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":469,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":470,"author":{"gitID":"-"},"content":"----"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"`MainWindow` code snippet that handles `SetThemeRequestEvent` to set the theme of the application:"},{"lineNumber":473,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":474,"author":{"gitID":"-"},"content":"----"},{"lineNumber":475,"author":{"gitID":"-"},"content":"    private void handleSetThemeRequestEvent(SetThemeRequestEvent event) throws CommandException {"},{"lineNumber":476,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":477,"author":{"gitID":"-"},"content":"        setTheme(event.getSelectedIndex());"},{"lineNumber":478,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":479,"author":{"gitID":"-"},"content":"----"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"`setTheme` method code snippet in `MainWindow` that checks for file existence before removing current theme and applying the selected theme. Selected theme is then updated in the `UserPref`:"},{"lineNumber":482,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":483,"author":{"gitID":"-"},"content":"----"},{"lineNumber":484,"author":{"gitID":"-"},"content":"    private void setTheme(Index selectedIndex) throws CommandException {"},{"lineNumber":485,"author":{"gitID":"-"},"content":"        String themeName \u003d themes[selectedIndex.getZeroBased()];"},{"lineNumber":486,"author":{"gitID":"-"},"content":"        if (MainApp.class.getResource(FXML_FILE_FOLDER + themeName + \"Theme.css\") \u003d\u003d null) {"},{"lineNumber":487,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FILE_PATH);"},{"lineNumber":488,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"        getRoot().getScene().getStylesheets().clear();"},{"lineNumber":491,"author":{"gitID":"-"},"content":"        getRoot().getScene().getStylesheets().add(FXML_FILE_FOLDER + themeName + \"Theme.css\");"},{"lineNumber":492,"author":{"gitID":"-"},"content":"        getRoot().getScene().getStylesheets().add(FXML_FILE_FOLDER + \"Extensions\" + themeName + \".css\");"},{"lineNumber":493,"author":{"gitID":"-"},"content":"        prefs.setExtensionName(\"Extensions\" + themeName);"},{"lineNumber":494,"author":{"gitID":"-"},"content":"        prefs.setThemeName(themeName + \"Theme\");"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":497,"author":{"gitID":"-"},"content":"----"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"`setTheme` method code snippet in `MainApp` that initializes the application\u0027s last selected theme:"},{"lineNumber":500,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":501,"author":{"gitID":"-"},"content":"----"},{"lineNumber":502,"author":{"gitID":"-"},"content":"    private void setTheme(Stage primaryStage) {"},{"lineNumber":503,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":504,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(\"/view/\" + userPrefs.getThemeName() + \".css\");"},{"lineNumber":505,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(\"/view/\" + userPrefs.getExtensionName() + \".css\");"},{"lineNumber":506,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":507,"author":{"gitID":"-"},"content":"----"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":510,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ThemeCommand` +"},{"lineNumber":512,"author":{"gitID":"-"},"content":"* **Current choice:** Utilizing `SetThemRequestEvent` and allow `MainWindow` to handle the raised event to set the theme of the application."},{"lineNumber":513,"author":{"gitID":"-"},"content":"** Pros: Lesser responsibility for `ThemeCommand`."},{"lineNumber":514,"author":{"gitID":"-"},"content":"** Cons: Harder for new developer to understand the behavior of theme setting, as it utilizes event handling."},{"lineNumber":515,"author":{"gitID":"-"},"content":"* _Alternative:_ Instantiate `ThemeCommand` in `MainWindow` that passes `Stage` as a parameter. Then, perform theme setting in `ThemeCommand`."},{"lineNumber":516,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":517,"author":{"gitID":"-"},"content":"** Cons: Violates Law of Demeter as `ThemeCommand` has knowledge and access to `Stage`."},{"lineNumber":518,"author":{"gitID":"-"},"content":"// end::theme[]"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"charmaineleehc"},"content":".Inheritance diagram for commands"},{"lineNumber":529,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":530,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"charmaineleehc"},"content":"As you can see from the diagram above, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":535,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":536,"author":{"gitID":"-"},"content":"----"},{"lineNumber":537,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":538,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":539,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":540,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":541,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"-"},"content":"}"},{"lineNumber":543,"author":{"gitID":"-"},"content":"----"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":546,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"----"},{"lineNumber":548,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":549,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":550,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":554,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":555,"author":{"gitID":"-"},"content":"}"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":558,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":559,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":560,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":561,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":562,"author":{"gitID":"-"},"content":"}"},{"lineNumber":563,"author":{"gitID":"-"},"content":"----"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"charmaineleehc"},"content":"Suppose that the user has just launched the application. The steps below show the changes to the state of the stack for the `undo` command:"},{"lineNumber":566,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":567,"author":{"gitID":"charmaineleehc"},"content":"1. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"charmaineleehc"},"content":"2. The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th employee in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command), as shown in the figure below."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"charmaineleehc"},"content":".Step 1: `delete 5` command pushed onto the `undoStack`"},{"lineNumber":572,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":573,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"charmaineleehc"},"content":"3. As the user continues to use the program, more commands are added into the `undoStack`. For example, as shown in the figure below, the user may execute `add n/David ...` to add a new employee."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"charmaineleehc"},"content":".Step 2: execute `add n/David ...`"},{"lineNumber":578,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":579,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":582,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":584,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":585,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"charmaineleehc"},"content":"4. The user now decides that adding the employee was a mistake, and decides to undo that action using `undo`."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"charmaineleehc"},"content":"As shown in the diagram below, we will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"charmaineleehc"},"content":".Step 3: `undo` action"},{"lineNumber":592,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":593,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":596,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":597,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":598,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"charmaineleehc"},"content":".`undo` sequence diagram"},{"lineNumber":603,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":604,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"charmaineleehc"},"content":"The `redo` does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":609,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":610,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":611,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"charmaineleehc"},"content":".`clear` pushed into `undoStack`"},{"lineNumber":616,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":617,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"charmaineleehc"},"content":".`list` not added into `undoStack`"},{"lineNumber":622,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"charmaineleehc"},"content":".Stack activity diagram summary"},{"lineNumber":628,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":635,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":636,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":637,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Just override `execute()`"},{"lineNumber":638,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":639,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Saves the entire address book."},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":645,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":646,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Individual command knows how to undo/redo by itself."},{"lineNumber":647,"author":{"gitID":"whenzei"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the employee being deleted)."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":654,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":655,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":656,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Include all commands."},{"lineNumber":657,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":658,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":659,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"charmaineleehc"},"content":"* Current choice:** Use separate stack for undo and redo"},{"lineNumber":665,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":666,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":667,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Use `HistoryManager` for undo/redo"},{"lineNumber":668,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":669,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":670,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"// tag::sendemailtoemployee[]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Send Email to Employees about Job"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"charmaineleehc"},"content":"This feature is implemented using Gmail \u003c\u003capi, API\u003e\u003e."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"The following dependencies are used:"},{"lineNumber":680,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"* com.google.api-client:google-api-client:1.23.0"},{"lineNumber":682,"author":{"gitID":"-"},"content":"* com.google.oauth-client:google-oauth-client-jetty:1.23.0"},{"lineNumber":683,"author":{"gitID":"-"},"content":"* com.google.apis:google-api-services-gmail:v1-rev82-1.23.0"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d Authorization"},{"lineNumber":686,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"Suppose that the user typed the first email command."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"charmaineleehc"},"content":".Email authorization sequence diagram"},{"lineNumber":690,"author":{"gitID":"-"},"content":"image::EmailAuthorization.png[width\u003d\"650\"]"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"charmaineleehc"},"content":". `GoogleAuthorizationCodeFlow` is used to build the authorization code flow and trigger user authorization request. It then manages and persists user `Credential`."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"charmaineleehc"},"content":". `Credential` is then saved into a `File` so that the user need not repeatedly key in his or her authorization information before sending each email."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d Sending an email"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"charmaineleehc"},"content":". An empty `Properties` list is created, which is used to create an email `Session`"},{"lineNumber":699,"author":{"gitID":"charmaineleehc"},"content":". A `MimeMessage`, a class in the `javax.mail.internet` package is created using that `Session`."},{"lineNumber":700,"author":{"gitID":"charmaineleehc"},"content":". Attributes `from`, `recipient`, `subject` and `text` of the `MimeMessage` are set. The `Text` set contains information extracted from the particular `Job`."},{"lineNumber":701,"author":{"gitID":"charmaineleehc"},"content":". `MimeMessage` is encoded using base64url."},{"lineNumber":702,"author":{"gitID":"charmaineleehc"},"content":". A `Message` object is instantiated."},{"lineNumber":703,"author":{"gitID":"charmaineleehc"},"content":". The value of the `raw` property of the `Message` is set to the encoded `MimeMessage`."},{"lineNumber":704,"author":{"gitID":"charmaineleehc"},"content":". Make a call to `messages.send` to send the email."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Email content"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Email content contains job information extracted from the particular Job object only"},{"lineNumber":711,"author":{"gitID":"charmaineleehc"},"content":"** Pros: Easier to implement, and the email will be sent out very quickly, immediately after typing one line of command, making it more convenient for the user"},{"lineNumber":712,"author":{"gitID":"-"},"content":"** Cons: User has no ability to change or add to the contents of the email if the user wishes to."},{"lineNumber":713,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ User gets to edit or add to the email content"},{"lineNumber":714,"author":{"gitID":"-"},"content":"** Pros: Provides flexibility as the user is allowed to change and add details to the email content."},{"lineNumber":715,"author":{"gitID":"charmaineleehc"},"content":"** Cons: Need to direct user to an editor, thus more difficult to implement. User would also have to go through more steps than necessary if the user does not wish to change or add details to the email content"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Authorization information"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"charmaineleehc"},"content":"* **Current choice:** Stored in file system so subsequent executions will not prompt for authorization"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** Pros: More convenient for user as the user only needs to key in his or her authorization information once"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Cons: Unsafe"},{"lineNumber":722,"author":{"gitID":"charmaineleehc"},"content":"* _Alternative:_ Prompt for authorization for every subsequent executions"},{"lineNumber":723,"author":{"gitID":"-"},"content":"** Pros: Safe"},{"lineNumber":724,"author":{"gitID":"-"},"content":"** Cons: Inconvenient for user as user needs to always key in authorization information before sending each email"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"// end::sendemailtoemployee[]"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":729,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":740,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":741,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":746,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":747,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":748,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":751,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":761,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":762,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":763,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":768,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":769,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":770,"author":{"gitID":"charmaineleehc"},"content":"*Optional*"},{"lineNumber":771,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":773,"author":{"gitID":"charmaineleehc"},"content":"****"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":786,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":787,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":788,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":791,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":801,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":803,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":808,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":815,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":816,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":817,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"charmaineleehc"},"content":"[[Testing-TypesOfTests]]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":831,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":832,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":833,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":834,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":835,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":836,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":837,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":838,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":839,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":843,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":846,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":863,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":870,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":871,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":872,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"charmaineleehc"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing."},{"lineNumber":877,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":878,"author":{"gitID":"charmaineleehc"},"content":"Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":879,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":881,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":884,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":888,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":889,"author":{"gitID":"charmaineleehc"},"content":"If you are new to working on Java projects, here are some steps to get started:"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"charmaineleehc"},"content":". Start by adding small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to your project one component at a time. Here are some suggestions: \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":892,"author":{"gitID":"charmaineleehc"},"content":"** It is important to program incrementally, as to prepare yourself for the next step."},{"lineNumber":893,"author":{"gitID":"charmaineleehc"},"content":". Proceed to add your feature, touching multiple components. This is to familiarize yourself with the process of implementing an end-to-end feature across all components. You can read more under \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e."},{"lineNumber":894,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"charmaineleehc"},"content":"You can familiarize yourself with existing components through the proposed exercises below, 1 for each component (i.e. you would not need to modify the other components to get it to work). The Car Servicing Manager is divided into 4 main components:"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"charmaineleehc"},"content":"1. \u003c\u003cGetStartedProgramming-EachComponent-Logic,*`Logic`*\u003e\u003e"},{"lineNumber":902,"author":{"gitID":"charmaineleehc"},"content":"2. \u003c\u003cGetStartedProgramming-EachComponent-Model,*`Model`*\u003e\u003e"},{"lineNumber":903,"author":{"gitID":"charmaineleehc"},"content":"3. \u003c\u003cGetStartedProgramming-EachComponent-UI,*`UI`*\u003e\u003e"},{"lineNumber":904,"author":{"gitID":"charmaineleehc"},"content":"4. \u003c\u003cGetStartedProgramming-EachComponent-Storage,*`Storage`*\u003e\u003e"},{"lineNumber":905,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":906,"author":{"gitID":"charmaineleehc"},"content":"For each section, the exercises are structured in the following sequence:"},{"lineNumber":907,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":908,"author":{"gitID":"charmaineleehc"},"content":"*Scenario*"},{"lineNumber":909,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":910,"author":{"gitID":"charmaineleehc"},"content":"Tip"},{"lineNumber":911,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":912,"author":{"gitID":"charmaineleehc"},"content":"Hints"},{"lineNumber":913,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":914,"author":{"gitID":"charmaineleehc"},"content":"Proposed solution"},{"lineNumber":915,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":916,"author":{"gitID":"charmaineleehc"},"content":"**Whatâs important is that you should start practicing early!**"},{"lineNumber":917,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":918,"author":{"gitID":"charmaineleehc"},"content":"[[GetStartedProgramming-EachComponent-Logic]]"},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"charmaineleehc"},"content":"*Scenario:* You are in charge of `logic`. During \u003c\u003cdog-fooding, dog-fooding\u003e\u003e, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement \u003c\u003calias, aliases\u003e\u003e for the command words. Your job is to implement such \u003c\u003calias, aliases\u003e\u003e."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":924,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":925,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":926,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":927,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":928,"author":{"gitID":"charmaineleehc"},"content":". Begin by adding a shorthand equivalent \u003c\u003calias, alias\u003e\u003e for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all employees in the list."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"+"},{"lineNumber":931,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":932,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":933,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":934,"author":{"gitID":"charmaineleehc"},"content":"*Hints*"},{"lineNumber":935,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":936,"author":{"gitID":"charmaineleehc"},"content":"** Just like how we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for \u003c\u003calias, aliases\u003e\u003e as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":937,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":938,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":939,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":940,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":941,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":942,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":943,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":944,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":945,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":946,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":947,"author":{"gitID":"charmaineleehc"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and \u003c\u003calias, alias\u003e\u003e can be used to execute the same intended command."},{"lineNumber":948,"author":{"gitID":"charmaineleehc"},"content":"** Add new \u003c\u003cTesting-TypesOfTests, tests\u003e\u003e for each of the \u003c\u003calias, aliases\u003e\u003e that you have added."},{"lineNumber":949,"author":{"gitID":"charmaineleehc"},"content":"** Update the \u003c\u003cUserGuide#, User Guide\u003e\u003e to document the new \u003c\u003calias, aliases\u003e\u003e."},{"lineNumber":950,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":951,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":952,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"charmaineleehc"},"content":"[[GetStartedProgramming-EachComponent-Model]]"},{"lineNumber":955,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"charmaineleehc"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model \u003c\u003capi, API\u003e\u003e does not support such a functionality at the moment. Your job is to implement an \u003c\u003capi, API\u003e\u003e method, so that your teammate can use your \u003c\u003capi, API\u003e\u003e to implement his command."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":960,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":961,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":962,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":965,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"+"},{"lineNumber":967,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":968,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":969,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":970,"author":{"gitID":"charmaineleehc"},"content":"*Hints*"},{"lineNumber":971,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":972,"author":{"gitID":"charmaineleehc"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] \u003c\u003capi, API\u003e\u003e need to be updated."},{"lineNumber":973,"author":{"gitID":"charmaineleehc"},"content":"** Think about how you can use \u003c\u003cslap, SLAP\u003e\u003e to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":974,"author":{"gitID":"charmaineleehc"},"content":"**  Find out which of the existing \u003c\u003capi, API\u003e\u003e methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a employee, and link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`] allows you to update the tags."},{"lineNumber":975,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":977,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":978,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":979,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":980,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":981,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":982,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":983,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":984,"author":{"gitID":"whenzei"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each employee, and remove the `tag` from each employee."},{"lineNumber":985,"author":{"gitID":"charmaineleehc"},"content":"** Add a new \u003c\u003capi, API\u003e\u003e method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":986,"author":{"gitID":"charmaineleehc"},"content":"** Add new \u003c\u003cTesting-TypesOfTests, tests\u003e\u003e for each of the new public methods that you have added."},{"lineNumber":987,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":988,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":989,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":990,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":991,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"charmaineleehc"},"content":"[[GetStartedProgramming-EachComponent-UI]]"},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"charmaineleehc"},"content":"*Scenario:* You are in charge of `ui`. During a \u003c\u003cbeta-testing, beta testing\u003e\u003e session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last employee in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":999,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1001,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"whenzei"},"content":". Use different colors for different tags inside employee cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1004,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1012,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1014,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1015,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":1016,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1017,"author":{"gitID":"charmaineleehc"},"content":"*Hints*"},{"lineNumber":1018,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1020,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1021,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1022,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1023,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1024,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1025,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1026,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1027,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":1028,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1029,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":1030,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1032,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1033,"author":{"gitID":"charmaineleehc"},"content":"*** The PR uses the `*hash code*` of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the `*hash code*` algorithm changes."},{"lineNumber":1034,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1035,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1038,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1046,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1048,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1049,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":1050,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1051,"author":{"gitID":"charmaineleehc"},"content":"*Hints*"},{"lineNumber":1052,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1054,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1055,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1056,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1057,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1058,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1059,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1060,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":1061,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1062,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":1063,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1065,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1066,"author":{"gitID":"charmaineleehc"},"content":"** You can write two different kinds of \u003c\u003cTesting-TypesOfTests, tests\u003e\u003e to ensure that the functionality works:"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1068,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1069,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1070,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1071,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1072,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":1075,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1083,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1085,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1086,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":1087,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1088,"author":{"gitID":"charmaineleehc"},"content":"*Hints*"},{"lineNumber":1089,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":1092,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1093,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1094,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1095,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1096,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1097,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":1098,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1099,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":1100,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1101,"author":{"gitID":"whenzei"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of employees when the application just started."},{"lineNumber":1102,"author":{"gitID":"whenzei"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of employees whenever there are new changes to the addressbook."},{"lineNumber":1103,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1104,"author":{"gitID":"whenzei"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of employees status bar."},{"lineNumber":1105,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1106,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1107,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"charmaineleehc"},"content":"[[GetStartedProgramming-EachComponent-Storage]]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"charmaineleehc"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup \u003c\u003capi, API\u003e\u003e for the address book storage."},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1117,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1118,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":1119,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1121,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1122,"author":{"gitID":"charmaineleehc"},"content":"[NOTE]"},{"lineNumber":1123,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1124,"author":{"gitID":"charmaineleehc"},"content":"*Hint*"},{"lineNumber":1125,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1126,"author":{"gitID":"charmaineleehc"},"content":"** Add the \u003c\u003capi, API\u003e\u003e method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1127,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1128,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1129,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1130,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1131,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1132,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1133,"author":{"gitID":"charmaineleehc"},"content":"[TIP]"},{"lineNumber":1134,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1135,"author":{"gitID":"charmaineleehc"},"content":"*Proposed Solution*"},{"lineNumber":1136,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1138,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1139,"author":{"gitID":"charmaineleehc"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1149,"author":{"gitID":"whenzei"},"content":"Edits the remark for a employee specified in the `INDEX`. +"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1155,"author":{"gitID":"whenzei"},"content":"Edits the remark for the first employee to `Likes to drink coffee.`"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1157,"author":{"gitID":"whenzei"},"content":"Removes the remark for the first employee."},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"charmaineleehc"},"content":". Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1163,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1164,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"charmaineleehc"},"content":"1. Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1167,"author":{"gitID":"charmaineleehc"},"content":"2. Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"charmaineleehc"},"content":"1. Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1172,"author":{"gitID":"charmaineleehc"},"content":"2. Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"charmaineleehc"},"content":". Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1176,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1177,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"charmaineleehc"},"content":"1. Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1180,"author":{"gitID":"charmaineleehc"},"content":"2. Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1181,"author":{"gitID":"charmaineleehc"},"content":"3. Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"charmaineleehc"},"content":"1. Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1186,"author":{"gitID":"charmaineleehc"},"content":"2. Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1188,"author":{"gitID":"charmaineleehc"},"content":"3. Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"charmaineleehc"},"content":". Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1191,"author":{"gitID":"whenzei"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each employee later."},{"lineNumber":1192,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1193,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"charmaineleehc"},"content":"1. Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1196,"author":{"gitID":"charmaineleehc"},"content":"2. Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"charmaineleehc"},"content":"1. Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"charmaineleehc"},"content":". Model: Add `Remark` class"},{"lineNumber":1203,"author":{"gitID":"whenzei"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1204,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1205,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"charmaineleehc"},"content":"1. Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/employee/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1208,"author":{"gitID":"charmaineleehc"},"content":"2. Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"charmaineleehc"},"content":"1. Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"charmaineleehc"},"content":". Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1215,"author":{"gitID":"whenzei"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`]."},{"lineNumber":1216,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"charmaineleehc"},"content":"1. Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`]."},{"lineNumber":1220,"author":{"gitID":"charmaineleehc"},"content":"2. You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the employee will be created without a remark)."},{"lineNumber":1221,"author":{"gitID":"charmaineleehc"},"content":"3. Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"charmaineleehc"},"content":". Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1225,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1226,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"charmaineleehc"},"content":"1. Add a new Xml field for `Remark`."},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"charmaineleehc"},"content":"1. Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"charmaineleehc"},"content":". Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1235,"author":{"gitID":"whenzei"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/employee/Person.java[`Person`]."},{"lineNumber":1236,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1237,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"charmaineleehc"},"content":"1. Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the employee that it is currently building."},{"lineNumber":1240,"author":{"gitID":"charmaineleehc"},"content":"2. Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"charmaineleehc"},"content":". Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1244,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1245,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"charmaineleehc"},"content":"1. Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"charmaineleehc"},"content":"1. Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"charmaineleehc"},"content":". Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1255,"author":{"gitID":"charmaineleehc"},"content":"+"},{"lineNumber":1256,"author":{"gitID":"charmaineleehc"},"content":"* Main:"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"charmaineleehc"},"content":"1. Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a employee."},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"charmaineleehc"},"content":"* Tests:"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"charmaineleehc"},"content":"1. Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"charmaineleehc"},"content":"As a Car Servicing Manager::"},{"lineNumber":1274,"author":{"gitID":"charmaineleehc"},"content":"* has a need to manage a significant number of car servicing jobs"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"* has a need to assign employees to jobs with ease"},{"lineNumber":1276,"author":{"gitID":"charmaineleehc"},"content":"* has a need to keep an archive of completed job entries"},{"lineNumber":1277,"author":{"gitID":"charmaineleehc"},"content":"* has a need to monitor employeeâs performance"},{"lineNumber":1278,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1279,"author":{"gitID":"charmaineleehc"},"content":"For optimal use::"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"charmaineleehc"},"content":"*Value Proposition*::"},{"lineNumber":1286,"author":{"gitID":"charmaineleehc"},"content":"A convenient App for car servicing managers to organize servicing jobs and assign specific employees."},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"*Feature Contributions*:"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"* Changing of theme in the application. (Minor)"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"** The theme changing feature allow users to work on an environment that they are comfortable with."},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"* Managing of jobs which include - adding of jobs, closing of jobs and adding remarks to jobs. (Major)"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"** The feature to manage jobs is the basis of the application."},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"yuhongherald"},"content":"*Feature contributions*:"},{"lineNumber":1301,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1302,"author":{"gitID":"yuhongherald"},"content":"* Setting custom command keywords (Minor)"},{"lineNumber":1303,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1304,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1305,"author":{"gitID":"charmaineleehc"},"content":"** User can set a custom keyword that is not used on top of the original command word. This allows them to use shorthand."},{"lineNumber":1306,"author":{"gitID":"charmaineleehc"},"content":"** Custom command words are also easy to remember."},{"lineNumber":1307,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1308,"author":{"gitID":"yuhongherald"},"content":"* Importing job entries from an excel file (Major)"},{"lineNumber":1309,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1310,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1311,"author":{"gitID":"yuhongherald"},"content":"** User can import job entries, reviews them and comments on the changes before generating a feedback document."},{"lineNumber":1312,"author":{"gitID":"yuhongherald"},"content":"** This allows easy collation of data from their employee\u0027s progress reports into CarviciM, and providing feedback based on their reports."},{"lineNumber":1313,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"*Feature Contributions*:"},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"* Sorting the employee list. (Minor)"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"** The sort command arranges the employee list alphabetically according to their names."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"* Archiving and analysing job entries. (Major)"},{"lineNumber":1322,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1324,"author":{"gitID":"-"},"content":"** User can archive that may be needed for future reference. Job entries can also be analyse to keep track of the the employees\u0027 performance."},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"charmaineleehc"},"content":"Priorities::"},{"lineNumber":1331,"author":{"gitID":"charmaineleehc"},"content":"   High (must have)::: `* * *`"},{"lineNumber":1332,"author":{"gitID":"charmaineleehc"},"content":"   Medium (nice to have)::: `* *`"},{"lineNumber":1333,"author":{"gitID":"charmaineleehc"},"content":"   Low (unlikely to have)::: `*`"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"|`* * *` |user |undo my commands |reverse commands done in error"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"yuhongherald"},"content":"|`* * *` |user |redo my commands |reverse my undos if I changed my mind"},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"charmaineleehc"},"content":"|`* * *` |user |add a new employee |include in the new employee"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"|`* * *` |user |delete an employee |update the list of employees that are in the company"},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"|`* * *` |user |find an employee by name |locate details of an employee without having to go through the list of employees"},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"|`* * *` |user |view all employees |decide which employee to assign a job"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"|`* *` |user |sort by employees\u0027 name |sort employee list alphabetically"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"charmaineleehc"},"content":"|`* * *` |user |add a new job entry |manage job entries"},{"lineNumber":1356,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"|`* * *` |user |close an ongoing job entry |remove completed job and add it to jobs history"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"charmaineleehc"},"content":"|`* * *` |user |find a job entry by its assigned job id |locate details of a job without having to go through the list of ongoing jobs"},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":"|`* *` |user |find job entries by the assigned employee\u0027s name |locate details of all jobs that are handled by an employee without having to go through the lists of jobs"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"|`* *` |user |find job entries by client\u0027s name |locate details of all jobs belonging to a client without having to go through the lists of jobs"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"|`* *` |user |find job entries by car number |locate details of all jobs related to a car number without having to go through the lists of jobs"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"charmaineleehc"},"content":"|`* * *` |user |add remarks to ongoing job entry |take note of details that are specific to the job"},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"|`**` |user |archive job entries |extract job entries within the selected range for archiving"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"|`**` |user |analyse job entries |keep track of employees\u0027 performance"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"yuhongherald"},"content":"|`* * *` |user |import job entries |add multiple job entries at once"},{"lineNumber":1374,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1375,"author":{"gitID":"yuhongherald"},"content":"|`* *` |user |accept and reject imported changes |have control when over bulk imports"},{"lineNumber":1376,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1377,"author":{"gitID":"yuhongherald"},"content":"|`* *` |user |modify imported job entries |import incomplete or invalid job entries"},{"lineNumber":1378,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1379,"author":{"gitID":"yuhongherald"},"content":"|`* *` |user |add comments on job entries |record feedback to employees"},{"lineNumber":1380,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1381,"author":{"gitID":"yuhongherald"},"content":"|`* *` |user |export changes |provide feedback to employees regarding the changes"},{"lineNumber":1382,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"|`*` |user |export completed jobs to other formats |print out all the completed job entries and view it with a better program"},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"|`* *` |user |change the colour label of job status |easily differentiate between the job statuses"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":"|`* *` |user who likes customization |change the theme of the application |customize the theme to my preference"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"yuhongherald"},"content":"|`* *` |user who likes customization |change the command words of the application |improve ease of use"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"yuhongherald"},"content":"(For all use cases below, the *System* is the `CarviciM` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add remarks to an ongoing job entry"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1404,"author":{"gitID":"-"},"content":""},{"lineNumber":1405,"author":{"gitID":"-"},"content":"1.  User selects a job entry."},{"lineNumber":1406,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows logged remarks in the job."},{"lineNumber":1407,"author":{"gitID":"-"},"content":"3.  User requests to log a remark."},{"lineNumber":1408,"author":{"gitID":"yuhongherald"},"content":"4.  CarviciM reflects the added remark at end of log."},{"lineNumber":1409,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"* 2a. The remarks list is empty."},{"lineNumber":1416,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1418,"author":{"gitID":"yuhongherald"},"content":"** 2a1. CarviciM shows an empty list."},{"lineNumber":1419,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1420,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"* 3a. The given remark is empty."},{"lineNumber":1423,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Tab auto-complete commands"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"1.  User types incomplete argument in command."},{"lineNumber":1432,"author":{"gitID":"-"},"content":"2.  User presses tab key."},{"lineNumber":1433,"author":{"gitID":"yuhongherald"},"content":"3.  CarviciM completes the command."},{"lineNumber":1434,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1440,"author":{"gitID":"-"},"content":"* 2a. Argument has more than one possible auto-complete."},{"lineNumber":1441,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1443,"author":{"gitID":"-"},"content":""},{"lineNumber":1444,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1445,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add employee"},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"1.  User requests to add an employee in the list."},{"lineNumber":1450,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM adds the employee and updates the list."},{"lineNumber":1451,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1452,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1453,"author":{"gitID":"-"},"content":""},{"lineNumber":1454,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1455,"author":{"gitID":"-"},"content":""},{"lineNumber":1456,"author":{"gitID":"-"},"content":"* 2a. The employee details are not valid."},{"lineNumber":1457,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1458,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1459,"author":{"gitID":"yuhongherald"},"content":"** 2a1. CarviciM shows an error message."},{"lineNumber":1460,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete employee"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":"1.  User requests to list employees."},{"lineNumber":1469,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows a list of employees."},{"lineNumber":1470,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific employee in the list."},{"lineNumber":1471,"author":{"gitID":"yuhongherald"},"content":"4.  CarviciM deletes the employee and updates the list."},{"lineNumber":1472,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1476,"author":{"gitID":"-"},"content":""},{"lineNumber":1477,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1478,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1479,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1480,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1483,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1485,"author":{"gitID":"yuhongherald"},"content":"** 3a1. CarviciM shows an error message."},{"lineNumber":1486,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1487,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find an employee by name"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"1.  User requests to find an employee by name."},{"lineNumber":1495,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows a list of employees whose name contain the provided name."},{"lineNumber":1496,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1503,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1504,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Customize the colour label of job status"},{"lineNumber":1508,"author":{"gitID":"-"},"content":""},{"lineNumber":1509,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1510,"author":{"gitID":"-"},"content":""},{"lineNumber":1511,"author":{"gitID":"-"},"content":"1.  User specifies color label of a job status."},{"lineNumber":1512,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM updates the label colors displayed."},{"lineNumber":1513,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1514,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1519,"author":{"gitID":"-"},"content":"* 1a. The label provided is not valid."},{"lineNumber":1520,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1521,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1522,"author":{"gitID":"yuhongherald"},"content":"** 1a1. CarviciM shows an error message."},{"lineNumber":1523,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1524,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1527,"author":{"gitID":"-"},"content":"* 1b. The color provided is not valid."},{"lineNumber":1528,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1529,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1530,"author":{"gitID":"yuhongherald"},"content":"** 1b1. CarviciM shows an error message."},{"lineNumber":1531,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1532,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add job entry"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"1.  User requests to list the employees."},{"lineNumber":1540,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows a list of employees."},{"lineNumber":1541,"author":{"gitID":"-"},"content":"3.  User requests to add a job entry."},{"lineNumber":1542,"author":{"gitID":"yuhongherald"},"content":"4.  CarviciM adds the job entry."},{"lineNumber":1543,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1544,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1545,"author":{"gitID":"-"},"content":""},{"lineNumber":1546,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1547,"author":{"gitID":"-"},"content":""},{"lineNumber":1548,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1549,"author":{"gitID":"-"},"content":"* 2a. The list of employees is empty."},{"lineNumber":1550,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1551,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1554,"author":{"gitID":"-"},"content":"* 3a. Format of details is invalid."},{"lineNumber":1555,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1556,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1557,"author":{"gitID":"yuhongherald"},"content":"** 3a1. CarviciM shows an error message."},{"lineNumber":1558,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1559,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1560,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1561,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1564,"author":{"gitID":"-"},"content":"* 3b. The given employee index is invalid."},{"lineNumber":1565,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1566,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1567,"author":{"gitID":"yuhongherald"},"content":"** 3b1. CarviciM shows an error message."},{"lineNumber":1568,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1569,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1570,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1571,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1572,"author":{"gitID":"-"},"content":""},{"lineNumber":1573,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Close job entry"},{"lineNumber":1575,"author":{"gitID":"-"},"content":""},{"lineNumber":1576,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1577,"author":{"gitID":"-"},"content":""},{"lineNumber":1578,"author":{"gitID":"-"},"content":"1.  User requests to list the job entries."},{"lineNumber":1579,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows a list of job entries."},{"lineNumber":1580,"author":{"gitID":"-"},"content":"3.  User requests to close a specific job entry in the list."},{"lineNumber":1581,"author":{"gitID":"yuhongherald"},"content":"4.  CarviciM close the job entry."},{"lineNumber":1582,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1584,"author":{"gitID":"-"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1588,"author":{"gitID":"-"},"content":"* 2a. The list of jobs is empty."},{"lineNumber":1589,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1590,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1591,"author":{"gitID":"-"},"content":""},{"lineNumber":1592,"author":{"gitID":"-"},"content":"* 3a. The given job id is invalid."},{"lineNumber":1593,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1595,"author":{"gitID":"yuhongherald"},"content":"** 3a1. CarviciM shows an error message."},{"lineNumber":1596,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1597,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1598,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1599,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1600,"author":{"gitID":"-"},"content":""},{"lineNumber":1601,"author":{"gitID":"yuhongherald"},"content":"[discrete]"},{"lineNumber":1602,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d Use case: Import job entries"},{"lineNumber":1603,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1604,"author":{"gitID":"yuhongherald"},"content":"*MSS*"},{"lineNumber":1605,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1606,"author":{"gitID":"yuhongherald"},"content":"1.  User specifies the path to a file to import."},{"lineNumber":1607,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM shows the user the new job entries."},{"lineNumber":1608,"author":{"gitID":"yuhongherald"},"content":"3.  User approves the new job entries."},{"lineNumber":1609,"author":{"gitID":"yuhongherald"},"content":"4.  CarviciM imports the approved entries."},{"lineNumber":1610,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1616,"author":{"gitID":"yuhongherald"},"content":"* 1a. The file specified in the path is invalid or does not have read permission."},{"lineNumber":1617,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1618,"author":{"gitID":"yuhongherald"},"content":"** 1a1. CarviciM shows an error message."},{"lineNumber":1619,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1620,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1621,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1622,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1623,"author":{"gitID":"yuhongherald"},"content":"* 1b. The file specified in the path has formatting errors."},{"lineNumber":1624,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1625,"author":{"gitID":"yuhongherald"},"content":"** 1b1. CarviciM shows an error message."},{"lineNumber":1626,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1627,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1628,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1629,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1630,"author":{"gitID":"yuhongherald"},"content":"* 2a. The file contains conflict job entries with the application data."},{"lineNumber":1631,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1632,"author":{"gitID":"yuhongherald"},"content":"** 2a1. CarviciM shows the users the conflicts."},{"lineNumber":1633,"author":{"gitID":"yuhongherald"},"content":"** 2a2. The user reviews the conflicts and chooses which copy to keep."},{"lineNumber":1634,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1635,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1636,"author":{"gitID":"-"},"content":""},{"lineNumber":1637,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1638,"author":{"gitID":"yuhongherald"},"content":"* 3a. User rejects some job entries."},{"lineNumber":1639,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1640,"author":{"gitID":"yuhongherald"},"content":"** CarviciM discards rejected job entries while importing the remaining new job entries."},{"lineNumber":1641,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1642,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1643,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1644,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1645,"author":{"gitID":"yuhongherald"},"content":"[discrete]"},{"lineNumber":1646,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d Use case: Export feedback for imported job entries"},{"lineNumber":1647,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1648,"author":{"gitID":"yuhongherald"},"content":"*MSS*"},{"lineNumber":1649,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1650,"author":{"gitID":"yuhongherald"},"content":"1.  User imports job entries from a file."},{"lineNumber":1651,"author":{"gitID":"yuhongherald"},"content":"2.    CarviciM imports the accepted new jobs."},{"lineNumber":1652,"author":{"gitID":"yuhongherald"},"content":"3.    User adds comments to reviewed new job entries."},{"lineNumber":1653,"author":{"gitID":"yuhongherald"},"content":"4.    User specifies path to export the comments."},{"lineNumber":1654,"author":{"gitID":"yuhongherald"},"content":"5.    CarviciM exports the comments of the reviewed new job entries."},{"lineNumber":1655,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1657,"author":{"gitID":"-"},"content":""},{"lineNumber":1658,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1659,"author":{"gitID":"-"},"content":""},{"lineNumber":1660,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1661,"author":{"gitID":"yuhongherald"},"content":"* 5a. CarviciM does not have write permission to file path."},{"lineNumber":1662,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1663,"author":{"gitID":"yuhongherald"},"content":"** 5a1. CarviciM shows an error message."},{"lineNumber":1664,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1665,"author":{"gitID":"yuhongherald"},"content":"Use case resumes at step 5."},{"lineNumber":1666,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1667,"author":{"gitID":"yuhongherald"},"content":"[discrete]"},{"lineNumber":1668,"author":{"gitID":"yuhongherald"},"content":"\u003d\u003d\u003d Use case: Set custom command word"},{"lineNumber":1669,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1670,"author":{"gitID":"yuhongherald"},"content":"*MSS*"},{"lineNumber":1671,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1672,"author":{"gitID":"yuhongherald"},"content":"1.  User specifies the old and new command word with set command."},{"lineNumber":1673,"author":{"gitID":"yuhongherald"},"content":"2.  CarviciM updates the command words."},{"lineNumber":1674,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1680,"author":{"gitID":"yuhongherald"},"content":"* 1a. The old command word is not used."},{"lineNumber":1681,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1682,"author":{"gitID":"yuhongherald"},"content":"** 1a1. CarviciM shows an error message."},{"lineNumber":1683,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1684,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1685,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1686,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1687,"author":{"gitID":"yuhongherald"},"content":"* 1b. The new command word is already used for a different command."},{"lineNumber":1688,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1689,"author":{"gitID":"yuhongherald"},"content":"** 1b1. CarviciM shows an error message."},{"lineNumber":1690,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1691,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1692,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1693,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"* 1c. The new command word is a default command word for another command."},{"lineNumber":1695,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"** 1c1. CarviciM shows an error message."},{"lineNumber":1697,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1698,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1699,"author":{"gitID":"-"},"content":""},{"lineNumber":1700,"author":{"gitID":"charmaineleehc"},"content":"[discrete]"},{"lineNumber":1701,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Use case: Set theme of application"},{"lineNumber":1702,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":1703,"author":{"gitID":"whenzei"},"content":"*MSS*"},{"lineNumber":1704,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":1705,"author":{"gitID":"whenzei"},"content":"1.  User request to change theme."},{"lineNumber":1706,"author":{"gitID":"whenzei"},"content":"2.  CarviciM changes the theme"},{"lineNumber":1707,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1709,"author":{"gitID":"-"},"content":""},{"lineNumber":1710,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1711,"author":{"gitID":"-"},"content":""},{"lineNumber":1712,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1713,"author":{"gitID":"whenzei"},"content":"* 1a. The list of theme is empty."},{"lineNumber":1714,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1715,"author":{"gitID":"yuhongherald"},"content":"** 1a1. CarviciM shows an error message."},{"lineNumber":1716,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1717,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1718,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1719,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1720,"author":{"gitID":"whenzei"},"content":"* 1b. The given theme index is invalid."},{"lineNumber":1721,"author":{"gitID":"yuhongherald"},"content":"[none]"},{"lineNumber":1722,"author":{"gitID":"yuhongherald"},"content":"** 1b1. CarviciM shows an error message."},{"lineNumber":1723,"author":{"gitID":"yuhongherald"},"content":"+"},{"lineNumber":1724,"author":{"gitID":"yuhongherald"},"content":"Use case ends."},{"lineNumber":1725,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":1726,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort employee list"},{"lineNumber":1728,"author":{"gitID":"-"},"content":""},{"lineNumber":1729,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1730,"author":{"gitID":"-"},"content":""},{"lineNumber":1731,"author":{"gitID":"-"},"content":"1.  User request to sort employee list."},{"lineNumber":1732,"author":{"gitID":"-"},"content":"2.  CarviciM sorts employee list alphabetically according to their names."},{"lineNumber":1733,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1734,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1735,"author":{"gitID":"-"},"content":""},{"lineNumber":1736,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Archiving of job entries"},{"lineNumber":1738,"author":{"gitID":"-"},"content":""},{"lineNumber":1739,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1740,"author":{"gitID":"-"},"content":""},{"lineNumber":1741,"author":{"gitID":"-"},"content":"1.  User specifies the date range for archiving."},{"lineNumber":1742,"author":{"gitID":"-"},"content":"2.  CarviciM extracts the job entries within the selected range and archive them."},{"lineNumber":1743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1744,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1749,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"charmaineleehc"},"content":"*  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1752,"author":{"gitID":"charmaineleehc"},"content":"*  Should be able to hold up to 1000 employees without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1753,"author":{"gitID":"charmaineleehc"},"content":"*  Should be able to hold up to 10000 jobs without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1754,"author":{"gitID":"charmaineleehc"},"content":"*  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1755,"author":{"gitID":"charmaineleehc"},"content":"*  Should work on both 32-bit and 64-bit environments."},{"lineNumber":1756,"author":{"gitID":"charmaineleehc"},"content":"*  Should have short and comprehensible English commands."},{"lineNumber":1757,"author":{"gitID":"charmaineleehc"},"content":"*  Should be able to retain information in event of crash or force shutdown."},{"lineNumber":1758,"author":{"gitID":"charmaineleehc"},"content":"*  Should respond to user command within 2 seconds."},{"lineNumber":1759,"author":{"gitID":"charmaineleehc"},"content":"*  Should be usable by a novice who has never used an electronic job management app before."},{"lineNumber":1760,"author":{"gitID":"charmaineleehc"},"content":"*  User interface should be intuitive enough for users who are not IT-savvy."},{"lineNumber":1761,"author":{"gitID":"charmaineleehc"},"content":"*  View should fit the screen of any computer with minimum screen size of 1024 by 768 pixels."},{"lineNumber":1762,"author":{"gitID":"-"},"content":""},{"lineNumber":1763,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1764,"author":{"gitID":"-"},"content":""},{"lineNumber":1765,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1769,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1770,"author":{"gitID":"-"},"content":""},{"lineNumber":1771,"author":{"gitID":"charmaineleehc"},"content":"[[api]]API::"},{"lineNumber":1772,"author":{"gitID":"charmaineleehc"},"content":"Application Programming Interface: a set of functions and procedures that allow the creation of applications which access the features or data of an operating system, application, or other service."},{"lineNumber":1773,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1774,"author":{"gitID":"charmaineleehc"},"content":"[[alias]]Alias::"},{"lineNumber":1775,"author":{"gitID":"charmaineleehc"},"content":"An alternate name"},{"lineNumber":1776,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1777,"author":{"gitID":"charmaineleehc"},"content":"[[beta-testing]]Beta testing::"},{"lineNumber":1778,"author":{"gitID":"charmaineleehc"},"content":"Final stage of development testing, carried out by a party unconnected with the development process., usually users of the final product."},{"lineNumber":1779,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1780,"author":{"gitID":"charmaineleehc"},"content":"[[dog-fooding]]Dog-fooding::"},{"lineNumber":1781,"author":{"gitID":"charmaineleehc"},"content":"Testing of a product before it is made available to customers"},{"lineNumber":1782,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1783,"author":{"gitID":"charmaineleehc"},"content":"[[javafx]]JavaFx::"},{"lineNumber":1784,"author":{"gitID":"charmaineleehc"},"content":"JavaFX is a software platform for creating and delivering desktop applications, as well as rich Internet applications that can run across a wide variety of devices."},{"lineNumber":1785,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1786,"author":{"gitID":"charmaineleehc"},"content":"[[jdk]]JDK::"},{"lineNumber":1787,"author":{"gitID":"charmaineleehc"},"content":"Java Development Kit: an implementation of either one of the Java Platform, Standard Edition, Java Platform, Enterprise Edition, or Java Platform, Micro Edition platforms released by Oracle Corporation in the form of a binary product aimed at Java developers on Solaris, Linux, macOS or Windows. The JDK includes a private JVM and a few other resources to finish the development of a Java Application."},{"lineNumber":1788,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1789,"author":{"gitID":"charmaineleehc"},"content":"[[pr]]PR::"},{"lineNumber":1790,"author":{"gitID":"charmaineleehc"},"content":"Pull Request"},{"lineNumber":1791,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1792,"author":{"gitID":"charmaineleehc"},"content":"[[slap]]SLAP::"},{"lineNumber":1793,"author":{"gitID":"charmaineleehc"},"content":"Single Layer of Abstraction Principle: extraction of methods, fields and constants to keep details at the same level in a method."},{"lineNumber":1794,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1795,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1796,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1801,"author":{"gitID":"-"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1803,"author":{"gitID":"-"},"content":""},{"lineNumber":1804,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1805,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1806,"author":{"gitID":"-"},"content":""},{"lineNumber":1807,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1810,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1811,"author":{"gitID":"-"},"content":""},{"lineNumber":1812,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1813,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1814,"author":{"gitID":"-"},"content":""},{"lineNumber":1815,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1816,"author":{"gitID":"-"},"content":""},{"lineNumber":1817,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1818,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1819,"author":{"gitID":"-"},"content":""},{"lineNumber":1820,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1821,"author":{"gitID":"-"},"content":""},{"lineNumber":1822,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1823,"author":{"gitID":"-"},"content":""},{"lineNumber":1824,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1825,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1827,"author":{"gitID":"-"},"content":""},{"lineNumber":1828,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1829,"author":{"gitID":"-"},"content":""},{"lineNumber":1830,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1831,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1832,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1835,"author":{"gitID":"-"},"content":""},{"lineNumber":1836,"author":{"gitID":"whenzei"},"content":"\u003d\u003d\u003d Deleting a employee"},{"lineNumber":1837,"author":{"gitID":"-"},"content":""},{"lineNumber":1838,"author":{"gitID":"whenzei"},"content":". Deleting a employee while all employees are listed"},{"lineNumber":1839,"author":{"gitID":"-"},"content":""},{"lineNumber":1840,"author":{"gitID":"whenzei"},"content":".. Prerequisites: List all employees using the `list` command. Multiple employees in the list."},{"lineNumber":1841,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1842,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1843,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1844,"author":{"gitID":"whenzei"},"content":"   Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1845,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1846,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1847,"author":{"gitID":"-"},"content":""},{"lineNumber":1848,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1849,"author":{"gitID":"-"},"content":""},{"lineNumber":1850,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1851,"author":{"gitID":"-"},"content":""},{"lineNumber":1852,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1853,"author":{"gitID":"-"},"content":""},{"lineNumber":1854,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1855,"author":{"gitID":"-"},"content":""},{"lineNumber":1856,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1857,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":1858,"author":{"gitID":"charmaineleehc"},"content":""}],"authorContributionMap":{"whenzei":26,"charmaineleehc":427,"-":1270,"yuhongherald":135}},{"path":"src/test/java/seedu/address/logic/parser/SetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"public class SetCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"    private SetCommandParser parser \u003d new SetCommandParser();"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    public void parse_twoCommandWords_success() {"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getWord();"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"        String args \u003d String.join(\" \", currentWord, newWord);"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"        assertParseSuccess(parser, args, new SetCommand(currentWord, newWord));"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    public void parse_noCommandWord_failure() {"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"        assertParseFailure(parser, currentWord, expectedMessage);"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    public void parse_oneCommandWord_failure() {"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"        assertParseFailure(parser, currentWord, expectedMessage);"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"    public static String getWord() {"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        return \"a\";"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":9,"yuhongherald":32}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(employee));"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        assertEquals(new AddCommand(employee), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(employee).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(employee));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":8,"-":136}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MECHANIC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECHNICIAN;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECHNICIAN;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Employee} being edited,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_TECHNICIAN + TAG_DESC_MECHANIC + TAG_EMPTY,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_TECHNICIAN + TAG_EMPTY + TAG_DESC_MECHANIC,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_TECHNICIAN + TAG_DESC_MECHANIC,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_MECHANIC"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_TECHNICIAN;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_MECHANIC, VALID_TAG_TECHNICIAN).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TECHNICIAN;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_TECHNICIAN"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_MECHANIC;"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_TECHNICIAN, VALID_TAG_MECHANIC)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":202}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MECHANIC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECHNICIAN;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECHNICIAN;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN, new AddCommand(expectedEmployee));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN, new AddCommand(expectedEmployee));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN, new AddCommand(expectedEmployee));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + TAG_DESC_TECHNICIAN, new AddCommand(expectedEmployee));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"        Employee expectedEmployeeMultipleTags \u003d new EmployeeBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_TECHNICIAN, VALID_TAG_MECHANIC).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + TAG_DESC_TECHNICIAN, new AddCommand(expectedEmployeeMultipleTags));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withTags().build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"                new AddCommand(expectedEmployee));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + TAG_DESC_TECHNICIAN, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + TAG_DESC_TECHNICIAN, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + TAG_DESC_TECHNICIAN, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_TECHNICIAN, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + EMAIL_DESC_BOB,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + TAG_DESC_MECHANIC + TAG_DESC_TECHNICIAN,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":6,"-":122}},{"path":"src/test/java/seedu/address/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"        // multiple COMMANDS in undoStack"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":"        // multiple COMMANDS in redoStack"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":245}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBookNonAlphabetically;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"public class SortCommandTest {"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"    private Model model;"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"    private Model expectedModel;"},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":"    private SortCommand sortCommand;"},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"        model \u003d new ModelManager(getTypicalAddressBookNonAlphabetically(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"        sortCommand \u003d new SortCommand();"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"    public void executeSuccess() {"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":21,"-":15}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        Employee employeeToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        expectedModel.deletePerson(employeeToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"        Employee employeeToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        expectedModel.deletePerson(employeeToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEmployeeList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        Employee employeeToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        // delete -\u003e first employee deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"        // redo -\u003e same first employee deleted again"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"        expectedModel.deletePerson(employeeToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"        // no COMMANDS in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"     * 1. Deletes a {@code Employee} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted employee in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the employee object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":"        Employee employeeToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"whenzei"},"content":"        // delete -\u003e deletes second employee in unfiltered employee list / first employee in filtered employee list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"whenzei"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"whenzei"},"content":"        expectedModel.deletePerson(employeeToDelete);"},{"lineNumber":146,"author":{"gitID":"whenzei"},"content":"        assertNotEquals(employeeToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"whenzei"},"content":"        // redo -\u003e deletes same second employee in unfiltered employee list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"whenzei"},"content":"        // different employee -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":24,"-":170}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedEmployee).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedEmployee);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"        Employee lastEmployee \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        EmployeeBuilder personInList \u003d new EmployeeBuilder(lastEmployee);"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_MECHANIC).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_MECHANIC).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        expectedModel.updatePerson(lastEmployee, editedEmployee);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        Employee employeeInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder(employeeInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedEmployee);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"        Employee firstEmployee \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstEmployee).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"        // edit employee in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"        Employee employeeInList \u003d model.getAddressBook().getEmployeeList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"                new EditPersonDescriptorBuilder(employeeInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"whenzei"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEmployeeList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":159,"author":{"gitID":"whenzei"},"content":"        Employee employeeToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"whenzei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedEmployee).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"whenzei"},"content":"        // edit -\u003e first employee edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"whenzei"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"whenzei"},"content":"        // redo -\u003e same first employee edited again"},{"lineNumber":172,"author":{"gitID":"whenzei"},"content":"        expectedModel.updatePerson(employeeToEdit, editedEmployee);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"        // no COMMANDS in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"     * 1. Edits a {@code Employee} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"whenzei"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited employee in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"whenzei"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the employee object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"whenzei"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedEmployee).build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":211,"author":{"gitID":"whenzei"},"content":"        Employee employeeToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"whenzei"},"content":"        // edit -\u003e edits second employee in unfiltered employee list / first employee in filtered employee list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"whenzei"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered employee list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"whenzei"},"content":"        expectedModel.updatePerson(employeeToEdit, editedEmployee);"},{"lineNumber":220,"author":{"gitID":"whenzei"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), employeeToEdit);"},{"lineNumber":221,"author":{"gitID":"whenzei"},"content":"        // redo -\u003e edits same second employee in unfiltered employee list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":42,"-":220}},{"path":"src/test/java/seedu/address/logic/commands/EditEmployeeDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"public class EditEmployeeDescriptorTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_MECHANIC).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"import static seedu.address.logic.commands.ThemeCommand.NUMBER_OF_THEMES;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_THEME;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.SetThemeRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"//@author owzhenwei"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"public class ThemeCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_setTheme_success() {"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        assertExecutionSuccess(INDEX_FIRST_THEME);"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_setTheme_failure() {"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(NUMBER_OF_THEMES + 1);"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_THEME_INDEX);"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"     * Executes a {@code ThemeCommand} with the given {@code index}, and checks that {@code SetThemeRequestEvent}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        ThemeCommand themeCommand \u003d prepareCommand(index);"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"            CommandResult commandResult \u003d themeCommand.execute();"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"            assertEquals(String.format(ThemeCommand.MESSAGE_THEME_CHANGE_SUCCESS, index.getOneBased()),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        SetThemeRequestEvent lastEvent \u003d (SetThemeRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        assertEquals(index, lastEvent.getSelectedIndex());"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     * Executes a {@code ThemeCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        ThemeCommand themeCommand \u003d prepareCommand(index);"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"            themeCommand.execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"     * Returns a {@code ThemeCommand} with parameters {@code index}."},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    private ThemeCommand prepareCommand(Index index) {"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"        ThemeCommand themeCommand \u003d new ThemeCommand(index);"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        return themeCommand;"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":44,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        expectedModel.addPerson(validEmployee);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        assertCommandSuccess(prepareCommand(validEmployee, model), model,"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"        Employee employeeInList \u003d model.getAddressBook().getEmployeeList().get(0);"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        assertCommandFailure(prepareCommand(employeeInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code employee} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    private AddCommand prepareCommand(Employee employee, Model model) {"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        AddCommand command \u003d new AddCommand(employee);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":11,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        // multiple COMMANDS in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNED_EMPLOYEE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEHICLE_NUMBER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":" * Contains helper methods for testing COMMANDS."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_MECHANIC \u003d \"mechanic\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_TECHNICIAN \u003d \"technician\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_VEHICLE_NUMBER_A \u003d \"SAT166A\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_VEHICLE_NUMBER_B \u003d \"ABC166Z\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ASSIGNED_EMPLOYEE_INDEX_A \u003d \"1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ASSIGNED_EMPLOYEE_INDEX_B \u003d \"2\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_TECHNICIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_TECHNICIAN;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_MECHANIC \u003d \" \" + PREFIX_TAG + VALID_TAG_MECHANIC;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VEHICLE_NUMBER_DESC_ONE \u003d \" \" + PREFIX_VEHICLE_NUMBER + VALID_VEHICLE_NUMBER_A;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VEHICLE_NUMBER_DESC_TWO \u003d \" \" + PREFIX_VEHICLE_NUMBER + VALID_VEHICLE_NUMBER_B;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String ASSIGNED_EMPLOYEE_INDEX_DESC_ONE \u003d \" \" + PREFIX_ASSIGNED_EMPLOYEE"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + VALID_ASSIGNED_EMPLOYEE_INDEX_A;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ASSIGNED_EMPLOYEE_INDEX_DESC_TWO \u003d \" \" + PREFIX_ASSIGNED_EMPLOYEE"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + VALID_ASSIGNED_EMPLOYEE_INDEX_A + \" \" + PREFIX_ASSIGNED_EMPLOYEE + VALID_ASSIGNED_EMPLOYEE_INDEX_B;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"mechanic*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_VEHICLE_NUM_DESC \u003d \" \" + PREFIX_VEHICLE_NUMBER; //empty string allowed"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_ASSIGNED_EMPLOYEE_INDEX_DESC \u003d \" \" + PREFIX_ASSIGNED_EMPLOYEE + \"-1\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_MECHANIC, VALID_TAG_TECHNICIAN).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"     * - the address book and the filtered employee list in the {@code actualModel} remain unchanged"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"     * Updates {@code model}\u0027s filtered list to show only the employee at the given {@code targetIndex} in the"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"        Employee employee \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"        final String[] splitName \u003d employee.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":"     * Deletes the first employee in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":139,"author":{"gitID":"whenzei"},"content":"        Employee firstEmployee \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":"            model.deletePerson(firstEmployee);"},{"lineNumber":142,"author":{"gitID":"whenzei"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":143,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"Employee in filtered list must exist in model.\", pnfe);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":13,"-":151}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"     * Deletes the first employee in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"            Employee employeeToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"                model.deletePerson(employeeToDelete);"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"            } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"                fail(\"Impossible: employeeToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":7,"-":61}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        // multiple COMMANDS in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getEmployeeList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        // different employee -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":139}},{"path":"src/test/java/seedu/address/logic/parser/AddJobCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ASSIGNED_EMPLOYEE_INDEX_DESC_ONE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ASSIGNED_EMPLOYEE_INDEX_DESC_TWO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ASSIGNED_EMPLOYEE_INDEX_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_VEHICLE_NUM_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNED_EMPLOYEE_INDEX_A;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VEHICLE_NUMBER_A;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VEHICLE_NUMBER_DESC_ONE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddJobCommand;"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddJobCommandParserTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private AddJobCommandParser parser \u003d new AddJobCommandParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person expectedClient \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // one assigned employee"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                + VEHICLE_NUMBER_DESC_ONE + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new AddJobCommand(expectedClient, new VehicleNumber(VALID_VEHICLE_NUMBER_A),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                        generateOneValidEmployeeIndex()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // two assigned employees"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        + VEHICLE_NUMBER_DESC_ONE + ASSIGNED_EMPLOYEE_INDEX_DESC_TWO,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                new AddJobCommand(expectedClient, new VehicleNumber(VALID_VEHICLE_NUMBER_A),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                        generateTwoValidEmployeeIndices()));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                        + VEHICLE_NUMBER_DESC_ONE + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE, expectedMessage);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                        + VEHICLE_NUMBER_DESC_ONE + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + VEHICLE_NUMBER_DESC_ONE + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE, expectedMessage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // missing vehicle number prefix"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + VALID_VEHICLE_NUMBER_A + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // missing assigned employee prefix"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                + VALID_VEHICLE_NUMBER_A + VALID_ASSIGNED_EMPLOYEE_INDEX_A, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        //invalid vehicle number"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                + INVALID_VEHICLE_NUM_DESC + ASSIGNED_EMPLOYEE_INDEX_DESC_ONE,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        //invalid assigned employee indices"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                        + VEHICLE_NUMBER_DESC_ONE + INVALID_ASSIGNED_EMPLOYEE_INDEX_DESC,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates an Arraylist of valid first assigned employee index"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private ArrayList\u003cIndex\u003e generateOneValidEmployeeIndex() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        indices.add(INDEX_FIRST_PERSON);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return indices;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Generates an Arraylist of valid first and second assigned employee index"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private ArrayList\u003cIndex\u003e generateTwoValidEmployeeIndices() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        indices.add(INDEX_FIRST_PERSON);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        indices.add(INDEX_SECOND_PERSON);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return indices;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":107,"yuhongherald":2}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        // different employee -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"     *     - the {@code FilteredList\u003cEmployee\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cEmployee\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":4,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/SetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.exceptions.CommandWordException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"public class SetCommandTest {"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeAdd_success() throws CommandWordException {"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(expectedModel, currentWord, newWord);"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(newCommand, actualModel, newCommand.getMessageSuccess(), expectedModel);"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeAddUsingDefault_success() throws CommandWordException {"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(actualModel, currentWord, newWord);"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(expectedModel, currentWord, newWord);"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(newCommand, actualModel, newCommand.getMessageSuccess(), expectedModel);"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeAddBackToDefault_success() throws CommandWordException {"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(actualModel, currentWord, newWord);"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, newWord, currentWord);"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(newCommand, actualModel, newCommand.getMessageSuccess(), expectedModel);"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeSet_success() throws CommandWordException {"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d SetCommand.COMMAND_WORD;"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(expectedModel, currentWord, newWord);"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(newCommand, actualModel, newCommand.getMessageSuccess(), expectedModel);"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(expectedModel, newWord, currentWord);"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand2 \u003d prepareCommand(actualModel, newWord, currentWord);"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"        assertCommandSuccess(newCommand2, actualModel, newCommand2.getMessageSuccess(), expectedModel);"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeCommand_failureUsed() throws CommandWordException {"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"        setCommandWord(actualModel, SetCommand.COMMAND_WORD, newWord);"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(newCommand, actualModel, newCommand.getMessageUsed());"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeCommand_failureDefault() throws CommandWordException {"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d SetCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(newCommand, actualModel, CommandWords.getMessageOverwriteDefault(newWord));"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":95,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":96,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeCommand_failureUnused() {"},{"lineNumber":98,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"        Model testModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d getUnusedCommandWord(actualModel);"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d getUnusedCommandWord(actualModel, currentWord);"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(newCommand, actualModel, newCommand.getMessageUnused());"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"    public void execute_changeCommand_failureNoChange() throws CommandWordException {"},{"lineNumber":109,"author":{"gitID":"yuhongherald"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":110,"author":{"gitID":"yuhongherald"},"content":"        String currentWord \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":111,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d currentWord;"},{"lineNumber":112,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":113,"author":{"gitID":"yuhongherald"},"content":"        SetCommand newCommand \u003d prepareCommand(actualModel, currentWord, newWord);"},{"lineNumber":114,"author":{"gitID":"yuhongherald"},"content":"        assertCommandFailure(newCommand, actualModel, CommandWords.getMessageNoChange());"},{"lineNumber":115,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"    private void setCommandWord(Model expectedModel, String currentWord, String newWord) throws CommandWordException {"},{"lineNumber":118,"author":{"gitID":"yuhongherald"},"content":"        expectedModel.getCommandWords().setCommandWord(currentWord, newWord);"},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":121,"author":{"gitID":"yuhongherald"},"content":"    public static String getUnusedCommandWord(Model actualModel) {"},{"lineNumber":122,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d \"a\";"},{"lineNumber":123,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d 0; i \u003c actualModel.getCommandWords().commands.size(); i++) {"},{"lineNumber":124,"author":{"gitID":"yuhongherald"},"content":"            if (!actualModel.getCommandWords().commands.containsValue(newWord)) {"},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"                return newWord;"},{"lineNumber":126,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"yuhongherald"},"content":"            newWord +\u003d \"a\";"},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"        return newWord;"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":132,"author":{"gitID":"yuhongherald"},"content":"    public static String getUnusedCommandWord(Model actualModel, String otherWord) {"},{"lineNumber":133,"author":{"gitID":"yuhongherald"},"content":"        if (otherWord \u003d\u003d null || otherWord.equals(\"\")) {"},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"            return  getUnusedCommandWord(actualModel);"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"        String newWord \u003d \"a\";"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d 0; i \u003c actualModel.getCommandWords().commands.size(); i++) {"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"            if (!actualModel.getCommandWords().commands.containsValue(newWord)"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"                    \u0026\u0026 !newWord.equals(otherWord)) {"},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":"                return newWord;"},{"lineNumber":141,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"            newWord +\u003d \"a\";"},{"lineNumber":143,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"yuhongherald"},"content":"        return newWord;"},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"yuhongherald"},"content":"     * Generates a new {@code SetCommand} which upon execution replaces (@code currentWord) with (@code newWord)."},{"lineNumber":149,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yuhongherald"},"content":"    private SetCommand prepareCommand(Model model, String currentWord, String newWord) {"},{"lineNumber":151,"author":{"gitID":"yuhongherald"},"content":"        SetCommand command \u003d new SetCommand(currentWord, newWord);"},{"lineNumber":152,"author":{"gitID":"yuhongherald"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":153,"author":{"gitID":"yuhongherald"},"content":"        return command;"},{"lineNumber":154,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":14,"yuhongherald":141}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded() {"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"            @Override"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"            public CommandWords getCommandWords() {"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"                return new CommandWords();"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        };"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validEmployee, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        assertEquals(Arrays.asList(validEmployee), modelStub.personsAdded);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException() {"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"            @Override"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"            public CommandWords getCommandWords() {"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"                return new CommandWords();"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"        };"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        getAddCommandForPerson(validEmployee, modelStub).execute();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"        Employee alice \u003d new EmployeeBuilder().withName(\"Alice\").build();"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"        Employee bob \u003d new EmployeeBuilder().withName(\"Bob\").build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        // different employee -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"     * Generates a new AddCommand with the details of the given employee."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"    private AddCommand getAddCommandForPerson(Employee employee, Model model) {"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        AddCommand command \u003d new AddCommand(employee);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"        public void addPerson(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":"        public void addJobs(List\u003cJob\u003e job) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"        public void addMissingEmployees(Set\u003cEmployee\u003e employees) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"        public void resetData(ReadOnlyAddressBook newData, CommandWords newCommandWords) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        public CommandWords getCommandWords() {"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"            return null;"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public void initJobNumber() {"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"        @Override public String appendCommandKeyToMessage(String message) {"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public void addJob(Job job) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void closeJob(Job target) throws JobNotFoundException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":"        public void deletePerson(Employee target) throws EmployeeNotFoundException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void sortPersonList() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"Richardson0694"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"Richardson0694"},"content":"        public void archiveJob(DateRange dateRange) {"},{"lineNumber":178,"author":{"gitID":"Richardson0694"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":179,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"whenzei"},"content":"        public void updatePerson(Employee target, Employee editedEmployee)"},{"lineNumber":183,"author":{"gitID":"whenzei"},"content":"                throws DuplicateEmployeeException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"        public ObservableList\u003cEmployee\u003e getFilteredPersonList() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"        public void updateFilteredPersonList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"whenzei"},"content":"     * A Model stub that always throw a DuplicateEmployeeException when trying to add a employee."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"whenzei"},"content":"        public void addPerson(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":216,"author":{"gitID":"whenzei"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"whenzei"},"content":"     * A Model stub that always accept the employee being added."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":229,"author":{"gitID":"whenzei"},"content":"        final ArrayList\u003cEmployee\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"whenzei"},"content":"        public void addPerson(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":233,"author":{"gitID":"whenzei"},"content":"            requireNonNull(employee);"},{"lineNumber":234,"author":{"gitID":"whenzei"},"content":"            personsAdded.add(employee);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":30,"Richardson0694":6,"-":177,"yuhongherald":30}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"        XmlArchiveJobStorage archiveJobStorage \u003d new XmlArchiveJobStorage(getTempFilePath(\"cd\"));"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, archiveJobStorage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":80,"author":{"gitID":"Richardson0694"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":81,"author":{"gitID":"Richardson0694"},"content":"                new XmlArchiveJobStorageExceptionThrowingStub(\"dummy\"));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Richardson0694"},"content":"    class XmlArchiveJobStorageExceptionThrowingStub extends XmlArchiveJobStorage {"},{"lineNumber":106,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":107,"author":{"gitID":"Richardson0694"},"content":"        public XmlArchiveJobStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"Richardson0694"},"content":"        public void saveArchiveJob(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Richardson0694":8,"-":109}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        original.addEmployee(HOON);"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        original.removeEmployee(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        original.addEmployee(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":122}},{"path":"src/test/java/seedu/address/storage/ImportSessionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"public class ImportSessionTest {"},{"lineNumber":4,"author":{"gitID":"charmaineleehc"},"content":"   /* @Test"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"    public void importTestFileWithErrorCorrection() throws Exception {"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"        ImportSession importSession \u003d ImportSession.getInstance();"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"        String path;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"        path \u003d new File(\".\").getCanonicalPath();"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"        importSession.initializeSession("},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"                path + \"\\\\src\\\\test\\\\resources\\\\model.session.ImportSessionTest\\\\CS2103-testsheet.xlsx\");"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"        importSession.reviewAllRemainingJobEntries(true);"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"        importSession.closeSession();"},{"lineNumber":13,"author":{"gitID":"charmaineleehc"},"content":"    }*/"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"charmaineleehc":2,"yuhongherald":12}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedEmployeeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static seedu.address.storage.XmlAdaptedEmployee.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"public class XmlAdaptedEmployeeTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee person \u003d new XmlAdaptedEmployee(BENSON);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee person \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new XmlAdaptedEmployee(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlAdaptedEmployee person \u003d new XmlAdaptedEmployee(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee person \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                new XmlAdaptedEmployee(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlAdaptedEmployee person \u003d new XmlAdaptedEmployee(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee person \u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                new XmlAdaptedEmployee(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedEmployee person \u003d new XmlAdaptedEmployee(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee person \u003d"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                new XmlAdaptedEmployee(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":7,"-":85}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withEmployee(ALICE).withEmployee(BENSON).build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":64}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.testutil.EmployeeBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        // different employee -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":9,"-":66}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        assertEquals(Collections.emptyList(), addressBook.getEmployeeList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        List\u003cJob\u003e newJobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":"        List\u003cJob\u003e newArchiveJobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newEmployees, newJobs, newTags, newArchiveJobs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        addressBook.getEmployeeList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"     * A stub ReadOnlyAddressBook whose employees and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"        private final ObservableList\u003cEmployee\u003e employees \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cJob\u003e jobs \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"Richardson0694"},"content":"        private final ObservableList\u003cJob\u003e archiveJobs \u003d FXCollections.observableArrayList();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Richardson0694"},"content":"        AddressBookStub(Collection\u003cEmployee\u003e employees, Collection\u003cJob\u003e jobs, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":84,"author":{"gitID":"Richardson0694"},"content":"                        Collection\u003cJob\u003e archiveJobs) {"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"            this.employees.setAll(employees);"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"            this.jobs.setAll(jobs);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":88,"author":{"gitID":"Richardson0694"},"content":"            this.archiveJobs.setAll(archiveJobs);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"            return employees;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return jobs;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":106,"author":{"gitID":"Richardson0694"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"Richardson0694"},"content":"        public ObservableList\u003cJob\u003e getArchiveJobList() {"},{"lineNumber":108,"author":{"gitID":"Richardson0694"},"content":"            return archiveJobs;"},{"lineNumber":109,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":9,"Richardson0694":11,"-":90,"yuhongherald":2}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code employee}\u0027s details"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    public EditPersonDescriptorBuilder(Employee employee) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        descriptor.setName(employee.getName());"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        descriptor.setPhone(employee.getPhone());"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        descriptor.setEmail(employee.getEmail());"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        descriptor.setTags(employee.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":7,"-":70}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withEmployee(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"     * Adds a new {@code Employee} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    public AddressBookBuilder withEmployee(Employee employee) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"            addressBook.addEmployee(employee);"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"            throw new IllegalArgumentException(\"employee is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":8,"-":45}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    public static final Index INDEX_FIRST_THEME \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"    public static final Index INDEX_SECOND_THEME \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":12}},{"path":"src/test/java/seedu/address/model/UniqueEmployeeListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"public class UniqueEmployeeListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"        UniqueEmployeeList uniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"        uniqueEmployeeList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":4,"-":15}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":" * A utility class for Employee."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"     * Returns an add command string for adding the {@code employee}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public static String getAddCommand(Employee employee) {"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(employee);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"     * Returns the part of command string for the given {@code employee}\u0027s details."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    public static String getPersonDetails(Employee employee) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        sb.append(PREFIX_NAME + employee.getName().fullName + \" \");"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"        sb.append(PREFIX_PHONE + employee.getPhone().value + \" \");"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"        sb.append(PREFIX_EMAIL + employee.getEmail().value + \" \");"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        employee.getTags().stream().forEach("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":11,"-":25}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"     * Returns the middle index of the employee in the {@code model}\u0027s employee list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        return Index.fromOneBased(model.getAddressBook().getEmployeeList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"     * Returns the last index of the employee in the {@code model}\u0027s employee list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        return Index.fromOneBased(model.getAddressBook().getEmployeeList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"     * Returns the employee in the {@code model}\u0027s employee list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    public static Employee getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"        return model.getAddressBook().getEmployeeList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":8,"-":46}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MECHANIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECHNICIAN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":" * A utility class containing a list of {@code Employee} objects to be used in tests."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    public static final Employee ALICE \u003d new EmployeeBuilder().withName(\"Alice Pauline\")"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withEmail(\"alice@example.com\").withTags(\"mechanic\").build();"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    public static final Employee BENSON \u003d new EmployeeBuilder().withName(\"Benson Meier\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withTags(\"technician\", \"mechanic\").build();"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    public static final Employee CARL \u003d new EmployeeBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").build();"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    public static final Employee DANIEL \u003d new EmployeeBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").build();"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    public static final Employee ELLE \u003d new EmployeeBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").build();"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    public static final Employee FIONA \u003d new EmployeeBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").build();"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    public static final Employee GEORGE \u003d new EmployeeBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    public static final Employee HOON \u003d new EmployeeBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").build();"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    public static final Employee IDA \u003d new EmployeeBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"    // Manually added - Employee\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    public static final Employee AMY \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_TECHNICIAN).build();"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"    public static final Employee BOB \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_MECHANIC, VALID_TAG_TECHNICIAN)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        for (Employee employee : getTypicalPersons()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"                ab.addEmployee(employee);"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":73,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Richardson0694"},"content":"     * Returns an {@code AddressBook} with all the typical persons\u0027 name non alphabetically."},{"lineNumber":75,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Richardson0694"},"content":"    public static AddressBook getTypicalAddressBookNonAlphabetically() {"},{"lineNumber":77,"author":{"gitID":"Richardson0694"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":78,"author":{"gitID":"Richardson0694"},"content":"        for (Employee employee : getTypicalPersonsNonAlphabetically()) {"},{"lineNumber":79,"author":{"gitID":"Richardson0694"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"Richardson0694"},"content":"                ab.addEmployee(employee);"},{"lineNumber":81,"author":{"gitID":"Richardson0694"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":82,"author":{"gitID":"Richardson0694"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":83,"author":{"gitID":"Richardson0694"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Richardson0694"},"content":"        return ab;"},{"lineNumber":86,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":88,"author":{"gitID":"Richardson0694"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"    public static List\u003cEmployee\u003e getTypicalPersons() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"    public static List\u003cEmployee\u003e getTypicalPersonsNonAlphabetically() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":20,"Richardson0694":17,"-":59}},{"path":"src/test/java/seedu/address/logic/commands/AddJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"public class AddJobCommandTest {"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public void constructor_nullAddJobFields_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        new AddJobCommand(null, null, null);"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    public void execute_jobAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        Person client \u003d new ClientBuilder().build();"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        ArrayList\u003cIndex\u003e indices \u003d generateValidEmployeeIndices();"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        AddJobCommand addJobCommand \u003d prepareCommand(client,"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"                new VehicleNumber(VehicleNumber.DEFAULT_VEHICLE_NUMBER), indices);"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"        JobNumber.initialize(0);"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        CommandResult commandResult \u003d addJobCommand.execute();"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"        Job validJob \u003d new JobBuilder(model.getFilteredPersonList()).build();"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        assertEquals(String.format(AddJobCommand.MESSAGE_SUCCESS, validJob), commandResult.feedbackToUser);"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"    public void equals() throws Exception {"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        Person aliceClient \u003d new ClientBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"        Person bobClient \u003d new ClientBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"        AddJobCommand addJobWithClientAliceCommand \u003d prepareCommand(aliceClient,"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"                new VehicleNumber(VehicleNumber.DEFAULT_VEHICLE_NUMBER), generateValidEmployeeIndices());"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"        AddJobCommand addJobWithClientBobCommand \u003d prepareCommand(bobClient,"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"                new VehicleNumber(VehicleNumber.DEFAULT_VEHICLE_NUMBER), generateValidEmployeeIndices());"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"        assertTrue(addJobWithClientAliceCommand.equals(addJobWithClientAliceCommand));"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        JobNumber.initialize(0);"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"        AddJobCommand addJobWithClientAliceCommandCopy \u003d new AddJobCommand(aliceClient,"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"                new VehicleNumber(VehicleNumber.DEFAULT_VEHICLE_NUMBER), generateValidEmployeeIndices());"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        assertTrue(addJobWithClientAliceCommand.equals(addJobWithClientAliceCommandCopy));"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        // different job -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        assertFalse(addJobWithClientAliceCommand.equals(addJobWithClientBobCommand));"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"    private class ModelStub implements Model {"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"        public void addPerson(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"        public void addJobs(List\u003cJob\u003e job) {"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"        public void addMissingEmployees(Set\u003cEmployee\u003e employees) {"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":"        public void resetData(ReadOnlyAddressBook newData, CommandWords newCommandWords) {"},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"        public CommandWords getCommandWords() {"},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":118,"author":{"gitID":"whenzei"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":121,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"        public void initJobNumber() {"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"        @Override public String appendCommandKeyToMessage(String message) {"},{"lineNumber":127,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should never be called\");"},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"            return null;"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":131,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"whenzei"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"whenzei"},"content":"            return null;"},{"lineNumber":135,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"whenzei"},"content":"        public void addJob(Job job) {"},{"lineNumber":139,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":142,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"whenzei"},"content":"        public void closeJob(Job target) throws JobNotFoundException {"},{"lineNumber":144,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":147,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"whenzei"},"content":"        public void archiveJob(DateRange dateRange) {"},{"lineNumber":149,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":150,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":152,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"whenzei"},"content":"        public void deletePerson(Employee target) throws EmployeeNotFoundException {"},{"lineNumber":154,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":157,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"whenzei"},"content":"        public void sortPersonList() {"},{"lineNumber":159,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":162,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"whenzei"},"content":"        public void updatePerson(Employee target, Employee editedEmployee)"},{"lineNumber":164,"author":{"gitID":"whenzei"},"content":"                throws DuplicateEmployeeException {"},{"lineNumber":165,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":168,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"whenzei"},"content":"        public ObservableList\u003cEmployee\u003e getFilteredPersonList() {"},{"lineNumber":170,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"whenzei"},"content":"            return null;"},{"lineNumber":172,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":174,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"whenzei"},"content":"        public void updateFilteredPersonList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":176,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":179,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"whenzei"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":181,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"whenzei"},"content":"            return null;"},{"lineNumber":183,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":185,"author":{"gitID":"whenzei"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"whenzei"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":187,"author":{"gitID":"whenzei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":191,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"whenzei"},"content":"     * Generates an Arraylist of valid assigned employee index"},{"lineNumber":193,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"    private ArrayList\u003cIndex\u003e generateValidEmployeeIndices() {"},{"lineNumber":195,"author":{"gitID":"whenzei"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":196,"author":{"gitID":"whenzei"},"content":"        indices.add(INDEX_FIRST_PERSON);"},{"lineNumber":197,"author":{"gitID":"whenzei"},"content":"        indices.add(INDEX_SECOND_PERSON);"},{"lineNumber":198,"author":{"gitID":"whenzei"},"content":"        return indices;"},{"lineNumber":199,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":201,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"whenzei"},"content":"     * Returns a {@code AddJobCommand} with the client, vehicleNumber and indices."},{"lineNumber":203,"author":{"gitID":"whenzei"},"content":"     * @param client"},{"lineNumber":204,"author":{"gitID":"whenzei"},"content":"     * @param vehicleNumber"},{"lineNumber":205,"author":{"gitID":"whenzei"},"content":"     * @param indices"},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"whenzei"},"content":"    private AddJobCommand prepareCommand(Person client, VehicleNumber vehicleNumber, ArrayList\u003cIndex\u003e indices) {"},{"lineNumber":208,"author":{"gitID":"whenzei"},"content":"        AddJobCommand addJobCommand \u003d new AddJobCommand(client, vehicleNumber, indices);"},{"lineNumber":209,"author":{"gitID":"whenzei"},"content":"        addJobCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":210,"author":{"gitID":"whenzei"},"content":"        return addJobCommand;"},{"lineNumber":211,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":177,"Richardson0694":1,"-":32,"yuhongherald":2}},{"path":"src/test/java/seedu/address/testutil/ClientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":" * A utility class to help with building Client objects."},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"public class ClientBuilder {"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    private Name name;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    private Phone phone;"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    private Email email;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    public ClientBuilder() {"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    public ClientBuilder withName(String name) {"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        return this;"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    public ClientBuilder withPhone(String phone) {"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    public ClientBuilder withEmail(String email) {"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    public Person build() {"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        return new Person(name, phone, email);"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":46,"-":7}},{"path":"src/test/java/seedu/address/testutil/EmployeeBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":" * A utility class to help with building Employee objects."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"public class EmployeeBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"mechanic\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"     * Initializes the EmployeeBuilder with the data of {@code employeeToCopy}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder(Employee employeeToCopy) {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        name \u003d employeeToCopy.getName();"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        phone \u003d employeeToCopy.getPhone();"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        email \u003d employeeToCopy.getEmail();"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        tags \u003d new HashSet\u003c\u003e(employeeToCopy.getTags());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Name} of the {@code Employee} that we are building."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder withName(String name) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Employee} that we are building."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder withTags(String ... tags) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Phone} of the {@code Employee} that we are building."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder withPhone(String phone) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"     * Sets the {@code Email} of the {@code Employee} that we are building."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    public EmployeeBuilder withEmail(String email) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"    public Employee build() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Employee(name, phone, email, tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":19,"-":62}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" * Provides a handle to a employee card in the employee list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":63}},{"path":"src/test/java/guitests/guihandles/PersonListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPersonCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Optional\u003cPersonCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle(ListView\u003cPersonCard\u003e personListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(personListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code PersonCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public PersonCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (personList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"Employee list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new PersonCardHandle(personList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"     * Navigates the listview to display and select the employee."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"    public void navigateToCard(Employee employee) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        Optional\u003cPersonCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.employee.equals(employee)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"            throw new IllegalArgumentException(\"Employee does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"     * Returns the employee card handle of a employee associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).employee);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code employee} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"    public PersonCardHandle getPersonCardHandle(Employee employee) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"                .filter(card -\u003e card.employee.equals(employee))"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .map(card -\u003e new PersonCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Employee does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Selects the {@code PersonCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code PersonCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":12,"-":122}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"            raise(new NewResultAvailableEvent(logic.appendCommandKeyToMessage(e.getMessage())));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":150,"yuhongherald":1}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/car_spanner.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":118,"yuhongherald":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.commons.events.ui.SetThemeRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    private final String[] themes \u003d {\"Teal\", \"Dark\"};"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private JobDisplayPanel jobDisplayPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"    private JobListPanel jobListPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane jobDisplayPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    private StackPane jobListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        jobDisplayPanel \u003d new JobDisplayPanel();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jobDisplayPlaceholder.getChildren().add(jobDisplayPanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        jobListPanel \u003d new JobListPanel(logic.getFilteredJobList());"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"        jobListPanelPlaceholder.getChildren().add(jobListPanel.getRoot());"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":207,"author":{"gitID":"whenzei"},"content":"    //@author owzhenwei"},{"lineNumber":208,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"whenzei"},"content":"     * Sets the the theme based on user\u0027s preference"},{"lineNumber":210,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"whenzei"},"content":"    private void setTheme(Index selectedIndex) throws CommandException {"},{"lineNumber":212,"author":{"gitID":"whenzei"},"content":"        String themeName \u003d themes[selectedIndex.getZeroBased()];"},{"lineNumber":213,"author":{"gitID":"whenzei"},"content":"        if (MainApp.class.getResource(FXML_FILE_FOLDER + themeName + \"Theme.css\") \u003d\u003d null) {"},{"lineNumber":214,"author":{"gitID":"whenzei"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FILE_PATH);"},{"lineNumber":215,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":217,"author":{"gitID":"whenzei"},"content":"        getRoot().getScene().getStylesheets().clear();"},{"lineNumber":218,"author":{"gitID":"whenzei"},"content":"        getRoot().getScene().getStylesheets().add(FXML_FILE_FOLDER + themeName + \"Theme.css\");"},{"lineNumber":219,"author":{"gitID":"whenzei"},"content":"        getRoot().getScene().getStylesheets().add(FXML_FILE_FOLDER + \"Extensions\" + themeName + \".css\");"},{"lineNumber":220,"author":{"gitID":"whenzei"},"content":"        prefs.setExtensionName(\"Extensions\" + themeName);"},{"lineNumber":221,"author":{"gitID":"whenzei"},"content":"        prefs.setThemeName(themeName + \"Theme\");"},{"lineNumber":222,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":223,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":225,"author":{"gitID":"whenzei"},"content":"    @Subscribe"},{"lineNumber":226,"author":{"gitID":"whenzei"},"content":"    private void handleSetThemeRequestEvent(SetThemeRequestEvent event) throws CommandException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":228,"author":{"gitID":"whenzei"},"content":"        setTheme(event.getSelectedIndex());"},{"lineNumber":229,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":29,"-":194,"yuhongherald":7}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    public PersonListPanel(ObservableList\u003cEmployee\u003e employeeList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        setConnections(employeeList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    private void setConnections(ObservableList\u003cEmployee\u003e employeeList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"                employeeList, (person) -\u003e new PersonCard(person, employeeList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"                        logger.fine(\"Selection in employee list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":6,"-":82}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    public final Employee employee;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    public PersonCard(Employee employee, int displayedIndex) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        this.employee \u003d employee;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        name.setText(employee.getName().fullName);"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        phone.setText(employee.getPhone().value);"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        email.setText(employee.getEmail().value);"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        employee.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 employee.equals(card.employee);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":10,"-":57}},{"path":"src/test/java/seedu/address/testutil/JobBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":" * A utility class to help with building Job objects."},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"public class JobBuilder {"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    private Person client;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    private VehicleNumber vehicleNumber;"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    private UniqueEmployeeList assignedEmployees;"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    private Status status;"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    private Date date;"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    private RemarkList remarks;"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    private JobNumber jobNumber;"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    public JobBuilder(ObservableList\u003cEmployee\u003e employees) throws Exception {"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        Name name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        Phone phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        Email email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        JobNumber.initialize(\"0\");"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"        client \u003d new Person(name, phone, email);"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        vehicleNumber \u003d new VehicleNumber(VehicleNumber.DEFAULT_VEHICLE_NUMBER);"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        status \u003d new Status(Status.STATUS_ONGOING);"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        date \u003d new Date();"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        jobNumber \u003d new JobNumber();"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        remarks \u003d new RemarkList();"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        assignedEmployees \u003d new UniqueEmployeeList();"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.add(employees.get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.add(employees.get(INDEX_SECOND_PERSON.getZeroBased()));"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    public Job build() {"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        return new Job(client, vehicleNumber, jobNumber, date, assignedEmployees, status, remarks);"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":41,"-":12,"yuhongherald":4}},{"path":"src/main/java/seedu/address/commons/GmailAuthenticator.java","lines":[{"lineNumber":1,"author":{"gitID":"charmaineleehc"},"content":"package seedu.address.commons;"},{"lineNumber":2,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":3,"author":{"gitID":"charmaineleehc"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"charmaineleehc"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"charmaineleehc"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"charmaineleehc"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"charmaineleehc"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":9,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":19,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":20,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.services.gmail.Gmail;"},{"lineNumber":21,"author":{"gitID":"charmaineleehc"},"content":"import com.google.api.services.gmail.GmailScopes;"},{"lineNumber":22,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":23,"author":{"gitID":"charmaineleehc"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"charmaineleehc"},"content":" * Allow for Gmail authentication process to take place"},{"lineNumber":25,"author":{"gitID":"charmaineleehc"},"content":" */"},{"lineNumber":26,"author":{"gitID":"charmaineleehc"},"content":"public class GmailAuthenticator {"},{"lineNumber":27,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":28,"author":{"gitID":"charmaineleehc"},"content":"    private static final String APPLICATION_NAME \u003d \"CarviciM\";"},{"lineNumber":29,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":30,"author":{"gitID":"charmaineleehc"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":31,"author":{"gitID":"charmaineleehc"},"content":"            System.getProperty(\"user.home\"), \".credentials/gmail-java-quickstart\");"},{"lineNumber":32,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":33,"author":{"gitID":"charmaineleehc"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":34,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":35,"author":{"gitID":"charmaineleehc"},"content":"    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"},{"lineNumber":36,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":37,"author":{"gitID":"charmaineleehc"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":38,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":39,"author":{"gitID":"charmaineleehc"},"content":"    private static final List\u003cString\u003e SCOPES \u003d Arrays.asList(GmailScopes.GMAIL_LABELS);"},{"lineNumber":40,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":41,"author":{"gitID":"charmaineleehc"},"content":"    static {"},{"lineNumber":42,"author":{"gitID":"charmaineleehc"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"charmaineleehc"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":44,"author":{"gitID":"charmaineleehc"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":45,"author":{"gitID":"charmaineleehc"},"content":"        } catch (Throwable t) {"},{"lineNumber":46,"author":{"gitID":"charmaineleehc"},"content":"            t.printStackTrace();"},{"lineNumber":47,"author":{"gitID":"charmaineleehc"},"content":"            System.exit(1);"},{"lineNumber":48,"author":{"gitID":"charmaineleehc"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"charmaineleehc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":51,"author":{"gitID":"charmaineleehc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"charmaineleehc"},"content":"     * Creates a GmailAuthenticator to authenticate user."},{"lineNumber":53,"author":{"gitID":"charmaineleehc"},"content":"     * @throws IOException"},{"lineNumber":54,"author":{"gitID":"charmaineleehc"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"charmaineleehc"},"content":"    public GmailAuthenticator() throws IOException {"},{"lineNumber":56,"author":{"gitID":"charmaineleehc"},"content":"        getGmailService();"},{"lineNumber":57,"author":{"gitID":"charmaineleehc"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":59,"author":{"gitID":"charmaineleehc"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"charmaineleehc"},"content":"     * Creates an authorized Credential object."},{"lineNumber":61,"author":{"gitID":"charmaineleehc"},"content":"     * @return an authorized Credential object."},{"lineNumber":62,"author":{"gitID":"charmaineleehc"},"content":"     * @throws IOException"},{"lineNumber":63,"author":{"gitID":"charmaineleehc"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"charmaineleehc"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":65,"author":{"gitID":"charmaineleehc"},"content":"        // Load client secrets."},{"lineNumber":66,"author":{"gitID":"charmaineleehc"},"content":"        InputStream in \u003d"},{"lineNumber":67,"author":{"gitID":"charmaineleehc"},"content":"                GmailAuthenticator.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":68,"author":{"gitID":"charmaineleehc"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":69,"author":{"gitID":"charmaineleehc"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":70,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":71,"author":{"gitID":"charmaineleehc"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":72,"author":{"gitID":"charmaineleehc"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":73,"author":{"gitID":"charmaineleehc"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":74,"author":{"gitID":"charmaineleehc"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":75,"author":{"gitID":"charmaineleehc"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":76,"author":{"gitID":"charmaineleehc"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":77,"author":{"gitID":"charmaineleehc"},"content":"                        .build();"},{"lineNumber":78,"author":{"gitID":"charmaineleehc"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":79,"author":{"gitID":"charmaineleehc"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":80,"author":{"gitID":"charmaineleehc"},"content":"        System.out.println("},{"lineNumber":81,"author":{"gitID":"charmaineleehc"},"content":"                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":82,"author":{"gitID":"charmaineleehc"},"content":"        return credential;"},{"lineNumber":83,"author":{"gitID":"charmaineleehc"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":85,"author":{"gitID":"charmaineleehc"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"charmaineleehc"},"content":"     * Build and return an authorized Gmail client service."},{"lineNumber":87,"author":{"gitID":"charmaineleehc"},"content":"     * @return an authorized Gmail client service"},{"lineNumber":88,"author":{"gitID":"charmaineleehc"},"content":"     * @throws IOException"},{"lineNumber":89,"author":{"gitID":"charmaineleehc"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"charmaineleehc"},"content":"    public static Gmail getGmailService() throws IOException {"},{"lineNumber":91,"author":{"gitID":"charmaineleehc"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":92,"author":{"gitID":"charmaineleehc"},"content":"        return new Gmail.Builder(httpTransport, JSON_FACTORY, credential)"},{"lineNumber":93,"author":{"gitID":"charmaineleehc"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":94,"author":{"gitID":"charmaineleehc"},"content":"                .build();"},{"lineNumber":95,"author":{"gitID":"charmaineleehc"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":97,"author":{"gitID":"charmaineleehc"},"content":"}"}],"authorContributionMap":{"charmaineleehc":97}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"    private String appTitle \u003d \"CarviciM\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"yuhongherald":1}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_THEME_INDEX \u003d \"The theme index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"The file path is invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":13}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"    public static void createEvenIfExist(File file) throws IOException {"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"        if (isFileExists(file)) {"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"            file.delete();"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"            createFile(file);"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":"        } else {"},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"            createFile(file);"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":"        if (file.exists()) {"},{"lineNumber":51,"author":{"gitID":"Richardson0694"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":"        return file.createNewFile();"},{"lineNumber":57,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":59,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Richardson0694"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":61,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"Richardson0694"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":63,"author":{"gitID":"Richardson0694"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":64,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Richardson0694"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":67,"author":{"gitID":"Richardson0694"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":68,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":71,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Richardson0694"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":73,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Richardson0694"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":75,"author":{"gitID":"Richardson0694"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":76,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":77,"author":{"gitID":"Richardson0694"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"Richardson0694"},"content":"            createDirs(parentDir);"},{"lineNumber":79,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":82,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Richardson0694"},"content":"     * Assumes file exists"},{"lineNumber":84,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Richardson0694"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":86,"author":{"gitID":"Richardson0694"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":87,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":89,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Richardson0694"},"content":"     * Writes given string to a file."},{"lineNumber":91,"author":{"gitID":"Richardson0694"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":92,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Richardson0694"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":94,"author":{"gitID":"Richardson0694"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":95,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":97,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Richardson0694"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":99,"author":{"gitID":"Richardson0694"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":100,"author":{"gitID":"Richardson0694"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":101,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"Richardson0694"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":103,"author":{"gitID":"Richardson0694"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":104,"author":{"gitID":"Richardson0694"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":105,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":107,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":78,"-":29}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":" * Represents a selection change in the Employee List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class PersonPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public PersonPanelSelectionChangedEvent(PersonCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":25}},{"path":"src/main/java/seedu/address/ui/JobCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"public class JobCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"    private static final String FXML \u003d \"JobListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    public final Job job;"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    private Label client;"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"    private Label vehicleNumber;"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"    private Label startDate;"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"    private Label status;"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    public JobCard(Job job) {"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        this.job \u003d job;"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"        id.setText(job.getJobNumber().toString());"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"        client.setText(job.getClient().getName().toString());"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"        vehicleNumber.setText(job.getVehicleNumber().toString());"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"        startDate.setText(job.getDate().toString());"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        status.setText(\"[\" + job.getStatus().toString() + \"]\");"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        if (job.getStatus().toString().equals(\"ongoing\")) {"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"            status.setStyle(\"-fx-text-fill: green\");"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"            status.setStyle(\"-fx-text-fill: red\");"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        // remarks are not supported in this version, might want to expand into new window due to space constraints"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"        // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"        if (!(other instanceof JobCard)) {"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"        // state check"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        JobCard card \u003d (JobCard) other;"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"                \u0026\u0026 job.equals(card.job);"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":6,"yuhongherald":67}},{"path":"src/main/java/seedu/address/ui/JobListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JobPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobList;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"//@author yuhongherald"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Panel containing the list of jobs."},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"public class JobListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    private static final String FXML \u003d \"JobListPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(JobListPanel.class);"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    private ObservableList\u003cJob\u003e jobList;"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    private ListView\u003cJobCard\u003e jobListView;"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    public JobListPanel(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        this.jobList \u003d jobList;"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"        setConnections(jobList);"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    private void setConnections(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"        ObservableList\u003cJobCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"                jobList, (job) -\u003e new JobCard(job));"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        jobListView.setItems(mappedList);"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        jobListView.setCellFactory(listView -\u003e new JobListViewCell());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        jobListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in job list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                        raise(new JobPanelSelectionChangedEvent(newValue));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"     * Scrolls to the {@code JobCard} at the {@code index} and selects it."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"            jobListView.scrollTo(index);"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"            jobListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code JobCard}."},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"    class JobListViewCell extends ListCell\u003cJobCard\u003e {"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":"        protected void updateItem(JobCard person, boolean empty) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"        updateList(event.getNewSelection().employee);"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":"    private void updateList(Employee employee) {"},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":"        ObservableList\u003cJob\u003e filteredList \u003d FXCollections.unmodifiableObservableList("},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"                jobList.filtered(JobList.filterByEmployee(jobList, employee)));"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"        setConnections(filteredList);"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":59,"yuhongherald":48}},{"path":"src/main/java/seedu/address/ui/JobDisplayPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JobPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":" * The Job Display Panel of the App."},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"public class JobDisplayPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    private static final String FXML \u003d \"JobDisplayPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    private GridPane jobDisplay;"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    private Label jobNumber;"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    private Label status;"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    private Label date;"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    private Label vehicleNumber;"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    private Label name;"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    private FlowPane remarks;"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"    private ListView assignedEmployees;"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public JobDisplayPanel() {"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    @Subscribe"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    private void handleJobPanelSelectionChangedEvent(JobPanelSelectionChangedEvent event) {"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.setVisible(true);"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.refresh();"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"        final Job job \u003d event.getJob();"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        jobNumber.setText(job.getJobNumber().toString());"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        status.setText(job.getStatus().toString());"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        date.setText(job.getDate().toString());"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"        vehicleNumber.setText(job.getVehicleNumber().toString());"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"        name.setText(job.getClient().getName().toString());"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        phone.setText(job.getClient().getPhone().toString());"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"        email.setText(job.getClient().getEmail().toString());"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.setItems(job.getAssignedEmployeesAsObservableList());"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":54,"-":16}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"        return \"number of persons \" + data.getEmployeeList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":18}},{"path":"src/main/java/seedu/address/logic/CommandHistory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" * Stores the history of COMMANDS executed."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandHistory {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private LinkedList\u003cString\u003e userInputHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public CommandHistory() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        userInputHistory \u003d new LinkedList\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Appends {@code userInput} to the list of user input entered."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void add(String userInput) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireNonNull(userInput);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        userInputHistory.add(userInput);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of {@code userInputHistory}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getHistory() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new LinkedList\u003c\u003e(userInputHistory);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":31}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    /** Returns the command words set by the user. */"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    String appendCommandKeyToMessage(String message);"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    ObservableList\u003cEmployee\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of jobs */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":29,"yuhongherald":3}},{"path":"src/main/java/seedu/address/commons/events/ui/JobPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.ui.JobCard;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" * Represents a selection change in the Job List Panel"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"public class JobPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    private final JobCard newSelection;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"    public JobPanelSelectionChangedEvent(JobCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    public Job getJob() {"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"        return newSelection.job;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    public JobCard getNewSelection() {"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        return newSelection;"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":24,"-":6}},{"path":"src/main/java/seedu/address/commons/events/ui/SetThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":" * An event request to set a new theme"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"public class SetThemeRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    private final Index selectedIndex;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"    public SetThemeRequestEvent(Index selectedIndex) {"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"        this.selectedIndex \u003d selectedIndex;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    public Index getSelectedIndex() {"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"        return selectedIndex;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":21,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Employee employee \u003d new Employee(name, phone, email, tagList);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"            return new AddCommand(employee);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":60}},{"path":"src/main/java/seedu/address/logic/UndoRedoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" * Maintains the undo-stack (the stack of COMMANDS that can be undone) and the redo-stack (the stack of"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":" * COMMANDS that can be undone)."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoRedoStack {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e redoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UndoRedoStack() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}. Clears the redo-stack"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * if {@code command} is not of type {@code UndoCommand} or {@code RedoCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            redoStack.clear();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoableCommand toUndo \u003d undoStack.pop();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoStack.push(toUndo);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return toUndo;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be redone in the stack."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public UndoableCommand popRedo() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UndoableCommand toRedo \u003d redoStack.pop();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        undoStack.push(toRedo);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return toRedo;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"     * Returns true if there are more COMMANDS that can be undone."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"     * Returns true if there are more COMMANDS that can be redone."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean canRedo() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return !redoStack.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof UndoRedoStack)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UndoRedoStack stack \u003d (UndoRedoStack) other;"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return undoStack.equals(stack.undoStack)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                \u0026\u0026 redoStack.equals(stack.redoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":4,"-":85}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddJobCommand;"},{"lineNumber":11,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.logic.commands.ArchiveCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.CommandWords;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.ImportAllCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"charmaineleehc"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.exceptions.CommandWordException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"     * Reference to command words used."},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    private final CommandWords commandWords;"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"     * Used only for testing purposes."},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"    public AddressBookParser() {"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        this.commandWords \u003d new CommandWords();"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    public AddressBookParser(CommandWords commandWords) {"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"        this.commandWords \u003d commandWords;"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"        String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"            commandWord \u003d commandWords.getCommandKey(commandWord);"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        } catch (CommandWordException e) {"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"            // do nothing, default throws parseException"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        switch (commandWord) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"        case ImportAllCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":"            return new ImportAllCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":"        case SetCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"            return new SetCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"Richardson0694"},"content":"        case ArchiveCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"Richardson0694"},"content":"            return new ArchiveCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case AddJobCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return new AddJobCommandParser().parse(arguments);"},{"lineNumber":136,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":137,"author":{"gitID":"charmaineleehc"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"charmaineleehc"},"content":"            return new LoginCommand();"},{"lineNumber":139,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Richardson0694":4,"charmaineleehc":5,"-":104,"yuhongherald":32}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple COMMANDS"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_VEHICLE_NUMBER \u003d new Prefix(\"v/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ASSIGNED_EMPLOYEE \u003d new Prefix(\"w/\");"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":"    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"Richardson0694":2,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_INSUFFICIENT_WORDS \u003d \"Command word to be changed and new command word must \""},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"            + \"be provided, separated by a space.\";"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_INVALID_FILENAME \u003d \"File name must be the path to an existing file, in the \""},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"            + \"same folder as this application\";"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"    public static final String WHITESPACE \u003d \"\\\\s+\";"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    public static final String APPLICATION_DIRECTORY \u003d \".\\\\\";"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"     * Parses {@code multipleWordString} into an {@code String[]} containing command words and returns it."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"     * @throws IllegalValueException if words found is not equal to 2"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    public static String[] parseWords(String multipleWordString) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        String[] commandWords \u003d multipleWordString.trim().split(WHITESPACE);"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        if (commandWords.length !\u003d 2) {"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"            throw new IllegalValueException(MESSAGE_INSUFFICIENT_WORDS);"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        return commandWords;"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"     * Parses {@code filePath} and checks if (@code file) specified exists."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"     * @throws IllegalValueException if file does not exist"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    public static String parseFilename(String filePath) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"        File file \u003d new File(filePath.trim());"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"        if (!file.exists()) {"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_FILENAME);"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"        return APPLICATION_DIRECTORY + filePath.trim();"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static ArrayList\u003cIndex\u003e parseIndices(Collection\u003cString\u003e indices) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(indices);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        final ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (String index : indices) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            indexList.add(parseIndex(index));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return indexList;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Parses a {@code String vehicleNumber} into a {@code VehicleNumber}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code vehicleNumber} is invalid."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static VehicleNumber parseVehicleNumber(String vehicleNumber) throws IllegalValueException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        requireNonNull(vehicleNumber);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        String trimmedVehicleNumber \u003d vehicleNumber.trim();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        if (!VehicleNumber.isValidVehicleNumber(trimmedVehicleNumber)) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(VehicleNumber.MESSAGE_VEHICLE_ID_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return new VehicleNumber(vehicleNumber);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e vehicleNumber} into an {@code Optional\u003cVehicleNumber\u003e}"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * if {@code vehicleNumber} is present."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public static Optional\u003cVehicleNumber\u003e parseVehicleNumber("},{"lineNumber":216,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e vehicleNumber) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        requireNonNull(vehicleNumber);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return vehicleNumber.isPresent() ? Optional.of(parseVehicleNumber(vehicleNumber.get())) : Optional.empty();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":222,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":223,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"Richardson0694"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":225,"author":{"gitID":"Richardson0694"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":226,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":227,"author":{"gitID":"Richardson0694"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":228,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"Richardson0694"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(date);"},{"lineNumber":231,"author":{"gitID":"Richardson0694"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":232,"author":{"gitID":"Richardson0694"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":233,"author":{"gitID":"Richardson0694"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"Richardson0694"},"content":"        return new Date(date);"},{"lineNumber":236,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":238,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"Richardson0694"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e}"},{"lineNumber":240,"author":{"gitID":"Richardson0694"},"content":"     * if {@code date} is present."},{"lineNumber":241,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":242,"author":{"gitID":"Richardson0694"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":243,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"Richardson0694"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":245,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(date);"},{"lineNumber":246,"author":{"gitID":"Richardson0694"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":247,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":249,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":30,"-":186,"yuhongherald":33}},{"path":"src/main/java/seedu/address/logic/parser/SetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.logic.parser.ParserUtil.parseWords;"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"public class SetCommandParser implements Parser\u003cSetCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"     * Parses the given {@code String} of arg"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"     * uments in the context of the SetCommand"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"     * and returns a SetCommand object for execution."},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"    public SetCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"            String[] commandWords \u003d parseWords(args);"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"            return new SetCommand(commandWords[0], commandWords[1]);"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":3,"yuhongherald":28}},{"path":"src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Richardson0694"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"Richardson0694"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":6,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.logic.commands.ArchiveCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":13,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":" * Parses input arguments and creates a new ArchiveCommand object"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"     * and returns an ArchiveCommand object for execution."},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"    public ArchiveCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE);"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"            Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE)).get();"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"            Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"            DateRange dateRange \u003d new DateRange(startDate, endDate);"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":"            return new ArchiveCommand(dateRange);"},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":46,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":" * Deletes a employee identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"            + \": Deletes the employee identified by the index number used in the last employee listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Employee: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    private Employee employeeToDelete;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        requireNonNull(employeeToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"            model.deletePerson(employeeToDelete);"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, employeeToDelete));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        employeeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(this.employeeToDelete, ((DeleteCommand) other).employeeToDelete));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":14,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/ImportAllCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.logic.parser.ParserUtil.parseFilename;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.ImportAllCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"public class ImportAllCommandParser implements Parser\u003cImportAllCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"     * Parses the given {@code String} of arg"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"     * uments in the context of the ImportAllCommand"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"     * and returns an ImportAllCommand object for execution."},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    public ImportAllCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"            String filePath \u003d parseFilename(args);"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"            return new ImportAllCommand(filePath);"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportAllCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":7,"yuhongherald":25}},{"path":"src/main/java/seedu/address/logic/parser/AddJobCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNED_EMPLOYEE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEHICLE_NUMBER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddJobCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":" * Parses the input arguments and creates a new AddJobCommand object"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"public class AddJobCommandParser implements Parser\u003cAddJobCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"     * Parses the given {@code String} of arguments in the context of the AddJobCommand"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"     * and returns an AddJobCommand object for execution."},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    public AddJobCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"                        PREFIX_EMAIL, PREFIX_VEHICLE_NUMBER, PREFIX_ASSIGNED_EMPLOYEE);"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"                PREFIX_EMAIL, PREFIX_VEHICLE_NUMBER, PREFIX_ASSIGNED_EMPLOYEE)) {"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"            VehicleNumber vehicleNumber \u003d"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"                    ParserUtil.parseVehicleNumber(argMultimap.getValue(PREFIX_VEHICLE_NUMBER)).get();"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"            ArrayList\u003cIndex\u003e assignedEmployeeIndices \u003d"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"                    ParserUtil.parseIndices(argMultimap.getAllValues(PREFIX_ASSIGNED_EMPLOYEE));"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"            Person client \u003d new Person(name, phone, email);"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"            return new AddJobCommand(client, vehicleNumber, assignedEmployeeIndices);"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddJobCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":46,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ArchiveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Richardson0694"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"Richardson0694"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":6,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":7,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":8,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":9,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":10,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Richardson0694"},"content":" * Archives job entries within selected date range."},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Richardson0694"},"content":"public class ArchiveCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":"    public static final String COMMAND_WORD \u003d \"archive\";"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Archives job entries within selected date range. \""},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"            + PREFIX_START_DATE + \"DATE \""},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"            + PREFIX_END_DATE + \"DATE \""},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"            + PREFIX_START_DATE + \"01/03/2018 \""},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"            + PREFIX_END_DATE + \"25/03/2018 \";"},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Archived successfully\";"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":"    private final DateRange toArchive;"},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"     * Creates an ArchiveCommand to archive the job entries within the specified {@code DateRange}"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    public ArchiveCommand(DateRange dateRange) {"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(dateRange);"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"        toArchive \u003d dateRange;"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"    public CommandResult execute() {"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":"        model.archiveJob(toArchive);"},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"                || (other instanceof ArchiveCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":"                \u0026\u0026 toArchive.equals(((ArchiveCommand) other).toArchive));"},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":46,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more COMMANDS to redo!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"charmaineleehc"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":3,"author":{"gitID":"charmaineleehc"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":5,"author":{"gitID":"charmaineleehc"},"content":"import seedu.address.commons.GmailAuthenticator;"},{"lineNumber":6,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":7,"author":{"gitID":"charmaineleehc"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"charmaineleehc"},"content":" * Directs user to the login page of Gmail for user to log in."},{"lineNumber":9,"author":{"gitID":"charmaineleehc"},"content":" */"},{"lineNumber":10,"author":{"gitID":"charmaineleehc"},"content":"public class LoginCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":12,"author":{"gitID":"charmaineleehc"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":13,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":14,"author":{"gitID":"charmaineleehc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs in user into Gmail account.\\n\""},{"lineNumber":15,"author":{"gitID":"charmaineleehc"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":17,"author":{"gitID":"charmaineleehc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have successfully logged into your Gmail account!\";"},{"lineNumber":18,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"charmaineleehc"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"charmaineleehc"},"content":"            new GmailAuthenticator();"},{"lineNumber":23,"author":{"gitID":"charmaineleehc"},"content":"        } catch (IOException ioe) {"},{"lineNumber":24,"author":{"gitID":"charmaineleehc"},"content":"            System.exit(1);"},{"lineNumber":25,"author":{"gitID":"charmaineleehc"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"charmaineleehc"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitID":"charmaineleehc"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"charmaineleehc"},"content":""},{"lineNumber":29,"author":{"gitID":"charmaineleehc"},"content":"}"}],"authorContributionMap":{"charmaineleehc":27,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":6,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Richardson0694"},"content":" * Sorts all persons alphabetically by names in the address book to the user."},{"lineNumber":8,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Richardson0694"},"content":"public class SortCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":11,"author":{"gitID":"Richardson0694"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":13,"author":{"gitID":"Richardson0694"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":"            + \": Displays all persons in the address book as a list in alphabetical order.\\n\""},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons\";"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"    protected AddressBook addressBook;"},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"        model.sortPersonList();"},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":23,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"        model.resetData(new AddressBook(), new CommandWords());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":21,"yuhongherald":1}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"yuhongherald":1}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":" * Adds a employee to the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a employee to the address book. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the address book\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    private final Employee toAdd;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"     * Creates an AddCommand to add the specified {@code Employee}"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    public AddCommand(Employee employee) {"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        requireNonNull(employee);"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"        toAdd \u003d employee;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":12,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/SetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.exceptions.CommandWordException;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":" * Sets a command word to user preferred command word"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"public class SetCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"    public static final String COMMAND_WORD \u003d \"set\";"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a command word to user preference. \""},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"            + \"Parameters: CURRENT_COMMAND_WORD NEW_COMMAND_WORD\\n\""},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"            + \"Example: \" + COMMAND_WORD + \" set st\";"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s has been replaced with %s!\";"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"    private final String currentWord;"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    private final String newWord;"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"     * Creates an SetCommand to set the specified {@code CommandWords}"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    public SetCommand(String currentWord, String newWord) {"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"        this.currentWord \u003d currentWord;"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"        this.newWord \u003d newWord;"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    public String getMessageSuccess() {"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        return String.format(MESSAGE_SUCCESS, currentWord, newWord);"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    public String getMessageUsed() {"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        return CommandWords.getMessageUsed(newWord);"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"    public String getMessageUnused() {"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        return CommandWords.getMessageUnused(currentWord);"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"            model.getCommandWords().setCommandWord(currentWord, newWord);"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"        } catch (CommandWordException e) {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        return new CommandResult(getMessageSuccess());"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"                || (other instanceof SetCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"                \u0026\u0026 currentWord.equals(((SetCommand) other).currentWord)"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"                \u0026\u0026 newWord.equals(((SetCommand) other).newWord));"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":5,"yuhongherald":58}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandWordException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" * Represents an error which occurs during execution of {@link seedu.address.logic.commands.SetCommand}."},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"public class CommandWordException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    public CommandWordException(String message) {"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":2,"yuhongherald":9}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":" * Lists all the COMMANDS entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered COMMANDS (from most recent to earliest):\\n%1$s\";"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any COMMANDS.\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/ImportAllCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.ImportSession;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileAccessException;"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileFormatException;"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":" * Attempts to import all (@code JobEntry) into Servicing Manager"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"public class ImportAllCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    public static final String COMMAND_WORD \u003d \"importAll\";"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports job entries from from an excel file. \""},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"            + \"Parameters: FILEPATH\\n\""},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"            + \"Example: \" + COMMAND_WORD + \"yourfile.xls\";"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s has been imported, with %d job entries!\";"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    private final String filePath;"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    public ImportAllCommand(String filePath) {"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(filePath);"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"    public String getMessageSuccess(int entries) {"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        return String.format(MESSAGE_SUCCESS, filePath, entries);"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"        ImportSession importSession \u003d ImportSession.getInstance();"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"            importSession.initializeSession(filePath);"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        } catch (FileAccessException e) {"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"            e.printStackTrace();"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        } catch (FileFormatException e) {"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandException(\"Excel file first row headers are not defined properly. \""},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"                    + \"Type \u0027help\u0027 to read more.\");"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"            importSession.reviewAllRemainingJobEntries(true);"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"            List\u003cJob\u003e jobs \u003d new ArrayList\u003c\u003e(importSession.getSessionData().getReviewedJobEntries());"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"            model.addJobs(jobs);"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"            importSession.closeSession();"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"            return new CommandResult(getMessageSuccess(jobs.size()));"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"        } catch (DataIndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandException(\"Excel file has bad format. Try copying the cell values into a new excel file \""},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"                    + \"before trying again\");"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"        } catch (IOException e) {"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandException(\"Unable to export file. Please close the application and try again.\");"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"                || (other instanceof ImportAllCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"                \u0026\u0026 filePath.equals(((ImportAllCommand) other).filePath));"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":8,"yuhongherald":66}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":" * Selects a employee identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"            + \": Selects the employee identified by the index number used in the last employee listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Employee: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":5,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.SetThemeRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"content":"//@@author owzhenwei"},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Changes the theme of the application"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    public static final int NUMBER_OF_THEMES \u003d 2;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_THEME_CHANGE_SUCCESS \u003d \"Theme updated: %1$s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Applies selected theme\\n\""},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"            + \"1. Teal theme\\n\""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"            + \"2. Dark theme\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index selectedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ThemeCommand(Index selectedIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.selectedIndex \u003d selectedIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (selectedIndex.getZeroBased() \u003e\u003d NUMBER_OF_THEMES) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_THEME_INDEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new SetThemeRequestEvent(selectedIndex));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGE_SUCCESS, selectedIndex.getOneBased()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.selectedIndex.equals(((ThemeCommand) other).selectedIndex)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"whenzei":5,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":" * Edits the details of an existing employee in the address book."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"            + \"by the index number used in the last employee listing. \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Employee: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the address book.\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    private Employee employeeToEdit;"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    private Employee editedEmployee;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"     * @param index of the employee in the filtered employee list to edit"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"     * @param editPersonDescriptor details to edit the employee with"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"            model.updatePerson(employeeToEdit, editedEmployee);"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEmployee));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"        employeeToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        editedEmployee \u003d createEditedPerson(employeeToEdit, editPersonDescriptor);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"     * Creates and returns a {@code Employee} with the details of {@code employeeToEdit}"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"    private static Employee createEditedPerson(Employee employeeToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"        assert employeeToEdit !\u003d null;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(employeeToEdit.getName());"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(employeeToEdit.getPhone());"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(employeeToEdit.getEmail());"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(employeeToEdit.getTags());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Employee(updatedName, updatedPhone, updatedEmail, updatedTags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(employeeToEdit, e.employeeToEdit);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":"     * Stores the details to edit the employee with. Each non-empty field value will replace the"},{"lineNumber":131,"author":{"gitID":"whenzei"},"content":"     * corresponding field value of the employee."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":144,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":154,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":186,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":193,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":194,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":195,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":30,"-":191}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    private CommandWords previousCommandWords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        this.previousCommandWords \u003d new CommandWords(model.getCommandWords());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"     * was executed and updates the filtered employee list to"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        model.resetData(previousAddressBook, previousCommandWords);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"     * Executes the command and updates the filtered employee"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":62,"yuhongherald":3}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more COMMANDS to undo!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":35}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"        addressBookParser \u003d new AddressBookParser(model.getCommandWords());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"    public String appendCommandKeyToMessage(String message) {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"        return model.appendCommandKeyToMessage(message);"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredPersonList() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return model.getFilteredJobList();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":60,"yuhongherald":6}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, ArchiveJobStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"    String getArchiveJobFilePath();"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readArchiveJob() throws DataConversionException, IOException;"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":"    void saveArchiveJob(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Richardson0694":10,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/CommandWords.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.io.Serializable;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.exceptions.CommandWordException;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":" * A serializable data structure used to contain the mappings of a command to a word"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"public class CommandWords implements Serializable {"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_UNUSED \u003d \"%s is not an active command.\";"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_USED \u003d \"%s is already used.\";"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_NO_CHANGE \u003d \"Old and new command word is the same.\";"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_OVERWRITE_DEFAULT \u003d \"%s is a default command.\";"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"     * Stores a list of COMMANDS by their command word"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    public static final String[] COMMANDS \u003d {"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"        AddCommand.COMMAND_WORD,"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        ArchiveCommand.COMMAND_WORD,"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        ClearCommand.COMMAND_WORD,"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"        DeleteCommand.COMMAND_WORD,"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"        EditCommand.COMMAND_WORD,"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"        ExitCommand.COMMAND_WORD,"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"        FindCommand.COMMAND_WORD,"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"        HelpCommand.COMMAND_WORD,"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"        HistoryCommand.COMMAND_WORD,"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        ImportAllCommand.COMMAND_WORD,"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"        ListCommand.COMMAND_WORD,"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"        RedoCommand.COMMAND_WORD,"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"        SelectCommand.COMMAND_WORD,"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        SetCommand.COMMAND_WORD,"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        UndoCommand.COMMAND_WORD,"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"        ThemeCommand.COMMAND_WORD,"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        SortCommand.COMMAND_WORD"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    };"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    public final HashMap\u003cString, String\u003e commands;"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"     * Creates a data structure to maintain used command words."},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"    public CommandWords() {"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        commands \u003d new HashMap\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"        for (String command : COMMANDS) {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"            commands.put(command, command);"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"    public CommandWords(CommandWords commandWords) {"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(commandWords);"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"        commands \u003d new HashMap\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"        commands.putAll(commandWords.commands);"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"     * Returns whether (@code commandWord) is in (@code COMMANDS)"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"    public static boolean isDefaultCommandWord(String commandWord) {"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"        for (String command: COMMANDS) {"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"            if (command.equals(commandWord)) {"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"                return true;"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"        return false;"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"    public static String getMessageUnused(String commandWord) {"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"        return String.format(MESSAGE_UNUSED, commandWord);"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"    public static String getMessageOverwriteDefault(String commandWord) {"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        return String.format(MESSAGE_OVERWRITE_DEFAULT, commandWord);"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"    public static String getMessageUsed(String commandWord) {"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        return String.format(MESSAGE_USED, commandWord);"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"    public static String getMessageNoChange() {"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"        return MESSAGE_NO_CHANGE;"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"     * Retrieves a command word using a key"},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"     * @param key"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"     * @return command"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"     * @throws CommandWordException"},{"lineNumber":94,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yuhongherald"},"content":"    public String getCommandWord(String key) throws CommandWordException {"},{"lineNumber":96,"author":{"gitID":"yuhongherald"},"content":"        String commandWord \u003d commands.get(key);"},{"lineNumber":97,"author":{"gitID":"yuhongherald"},"content":"        if (commandWord \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandWordException(getMessageUnused(key));"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"        return commandWord;"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"     * Retrieves a command key using word"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"     * @param value"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":"     * @return command"},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":"     * @throws CommandWordException"},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"yuhongherald"},"content":"    public String getCommandKey(String value) throws CommandWordException {"},{"lineNumber":110,"author":{"gitID":"yuhongherald"},"content":"        Iterator\u003cMap.Entry\u003cString, String\u003e\u003e commandList \u003d commands.entrySet().iterator();"},{"lineNumber":111,"author":{"gitID":"yuhongherald"},"content":"        Map.Entry\u003cString, String\u003e currentCommand;"},{"lineNumber":112,"author":{"gitID":"yuhongherald"},"content":"        while (commandList.hasNext()) {"},{"lineNumber":113,"author":{"gitID":"yuhongherald"},"content":"            currentCommand \u003d commandList.next();"},{"lineNumber":114,"author":{"gitID":"yuhongherald"},"content":"            if (currentCommand.getValue().equals(value)) {"},{"lineNumber":115,"author":{"gitID":"yuhongherald"},"content":"                return currentCommand.getKey();"},{"lineNumber":116,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"yuhongherald"},"content":"        throw new CommandWordException(getMessageUnused(value));"},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":121,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yuhongherald"},"content":"     * Sets currentWord to newWord"},{"lineNumber":123,"author":{"gitID":"yuhongherald"},"content":"     * @param currentWord Active command word to be replaced"},{"lineNumber":124,"author":{"gitID":"yuhongherald"},"content":"     * @param newWord Command word to be replaced with"},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"     * @throws CommandWordException currentWord is not valid"},{"lineNumber":126,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"yuhongherald"},"content":"    public void setCommandWord(String currentWord, String newWord) throws CommandWordException {"},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(currentWord, newWord);"},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"        checkCommandWordValidity(currentWord, newWord);"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"        if (isDefaultCommandWord(currentWord)) {"},{"lineNumber":131,"author":{"gitID":"yuhongherald"},"content":"            commands.remove(currentWord);"},{"lineNumber":132,"author":{"gitID":"yuhongherald"},"content":"            commands.put(currentWord, newWord);"},{"lineNumber":133,"author":{"gitID":"yuhongherald"},"content":"            return;"},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        Iterator\u003cMap.Entry\u003cString, String\u003e\u003e commandList \u003d commands.entrySet().iterator();"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"        Map.Entry\u003cString, String\u003e currentCommand;"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"        while (commandList.hasNext()) {"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"            currentCommand \u003d commandList.next();"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"            if (currentCommand.getValue().equals(currentWord)) {"},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":"                commands.remove(currentCommand.getKey());"},{"lineNumber":141,"author":{"gitID":"yuhongherald"},"content":"                commands.put(currentCommand.getKey(), newWord);"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"                return;"},{"lineNumber":143,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"        throw new CommandWordException(getMessageUnused(currentWord));"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":148,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"yuhongherald"},"content":"     * throws a (@code CommandWordException) if (@code currentWord) or (@code newWord) is not valid"},{"lineNumber":150,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"yuhongherald"},"content":"    private void checkCommandWordValidity(String currentWord, String newWord) throws CommandWordException {"},{"lineNumber":152,"author":{"gitID":"yuhongherald"},"content":"        if (currentWord.equals(newWord)) {"},{"lineNumber":153,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandWordException(getMessageNoChange());"},{"lineNumber":154,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"yuhongherald"},"content":"        if (isDefaultCommandWord(newWord)"},{"lineNumber":156,"author":{"gitID":"yuhongherald"},"content":"                \u0026\u0026 !commands.get(newWord).equals(currentWord)) {"},{"lineNumber":157,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandWordException(getMessageOverwriteDefault(newWord));"},{"lineNumber":158,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"yuhongherald"},"content":"        if (commands.containsValue(newWord)) {"},{"lineNumber":160,"author":{"gitID":"yuhongherald"},"content":"            throw new CommandWordException(getMessageUsed(newWord));"},{"lineNumber":161,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":164,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"yuhongherald"},"content":"     * Copies key and value of (@code command) from (@code commands)"},{"lineNumber":166,"author":{"gitID":"yuhongherald"},"content":"     * to (@code verifiedCommands). Creates a new entry with default"},{"lineNumber":167,"author":{"gitID":"yuhongherald"},"content":"     * key \u003d value if missing."},{"lineNumber":168,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"yuhongherald"},"content":"    private void moveVerifiedWord(String command, HashMap\u003cString, String\u003e verifiedCommands) {"},{"lineNumber":170,"author":{"gitID":"yuhongherald"},"content":"        verifiedCommands.put(command, commands.getOrDefault(command, command));"},{"lineNumber":171,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":173,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"yuhongherald"},"content":"     * Checks if hashmap contains invalid command keys and adds any missing"},{"lineNumber":175,"author":{"gitID":"yuhongherald"},"content":"     * command keys"},{"lineNumber":176,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"yuhongherald"},"content":"    public void checkIntegrity() {"},{"lineNumber":178,"author":{"gitID":"yuhongherald"},"content":"        HashMap\u003cString, String\u003e verifiedCommands \u003d new HashMap\u003c\u003e();"},{"lineNumber":179,"author":{"gitID":"yuhongherald"},"content":"        for (String command : COMMANDS) {"},{"lineNumber":180,"author":{"gitID":"yuhongherald"},"content":"            moveVerifiedWord(command, verifiedCommands);"},{"lineNumber":181,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"yuhongherald"},"content":"        commands.clear();"},{"lineNumber":183,"author":{"gitID":"yuhongherald"},"content":"        commands.putAll(verifiedCommands);"},{"lineNumber":184,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":186,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":187,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"yuhongherald"},"content":"     * Resets the existing data of this {@code CommandWords} with {@code newCommandWords}."},{"lineNumber":189,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"yuhongherald"},"content":"    public void resetData(CommandWords newCommandWords) {"},{"lineNumber":191,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(newCommandWords);"},{"lineNumber":192,"author":{"gitID":"yuhongherald"},"content":"        commands.clear();"},{"lineNumber":193,"author":{"gitID":"yuhongherald"},"content":"        commands.putAll(newCommandWords.commands);"},{"lineNumber":194,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":196,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"yuhongherald"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":198,"author":{"gitID":"yuhongherald"},"content":"        // short circuit if same object"},{"lineNumber":199,"author":{"gitID":"yuhongherald"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":200,"author":{"gitID":"yuhongherald"},"content":"            return true;"},{"lineNumber":201,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":203,"author":{"gitID":"yuhongherald"},"content":"        // instanceof handles nulls"},{"lineNumber":204,"author":{"gitID":"yuhongherald"},"content":"        if (!(obj instanceof CommandWords)) {"},{"lineNumber":205,"author":{"gitID":"yuhongherald"},"content":"            return false;"},{"lineNumber":206,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":208,"author":{"gitID":"yuhongherald"},"content":"        // state check"},{"lineNumber":209,"author":{"gitID":"yuhongherald"},"content":"        CommandWords other \u003d (CommandWords) obj;"},{"lineNumber":210,"author":{"gitID":"yuhongherald"},"content":"        for (String commandKey : commands.keySet()) {"},{"lineNumber":211,"author":{"gitID":"yuhongherald"},"content":"            if (!commands.get(commandKey).equals(other.commands.get(commandKey))) {"},{"lineNumber":212,"author":{"gitID":"yuhongherald"},"content":"                return false;"},{"lineNumber":213,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":214,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"yuhongherald"},"content":"        return commands.size() \u003d\u003d other.commands.size();"},{"lineNumber":216,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":218,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":219,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":220,"author":{"gitID":"yuhongherald"},"content":"    public String toString() {"},{"lineNumber":221,"author":{"gitID":"yuhongherald"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":222,"author":{"gitID":"yuhongherald"},"content":"        builder.append(\"Commands: \\n\");"},{"lineNumber":223,"author":{"gitID":"yuhongherald"},"content":"        Iterator\u003cMap.Entry\u003cString, String\u003e\u003e commandList \u003d commands.entrySet().iterator();"},{"lineNumber":224,"author":{"gitID":"yuhongherald"},"content":"        Map.Entry\u003cString, String\u003e currentCommand;"},{"lineNumber":225,"author":{"gitID":"yuhongherald"},"content":"        while (commandList.hasNext()) {"},{"lineNumber":226,"author":{"gitID":"yuhongherald"},"content":"            currentCommand \u003d commandList.next();"},{"lineNumber":227,"author":{"gitID":"yuhongherald"},"content":"            builder.append(currentCommand.getKey() + \":\" + currentCommand.getValue() + \"\\n\");"},{"lineNumber":228,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"yuhongherald"},"content":"        return builder.toString();"},{"lineNumber":230,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":232,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":3,"yuhongherald":229}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEmployee.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":" * JAXB-friendly version of the Employee."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"public class XmlAdaptedEmployee {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Employee\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"     * Constructs an XmlAdaptedEmployee."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedEmployee() {}"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"     * Constructs an {@code XmlAdaptedEmployee} with the given employee details."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlAdaptedEmployee(String name, String phone, String email, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     * Converts a given Employee into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEmployee"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedEmployee(Employee source) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"     * Converts this jaxb-friendly adapted employee object into the model\u0027s Employee object."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted employee"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"    public Employee toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return new Employee(name, phone, email, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof XmlAdaptedEmployee)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedEmployee otherPerson \u003d (XmlAdaptedEmployee) other;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":15,"-":108}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted employee"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":1,"-":61}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"    private ArchiveJobStorage archiveJobStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"                          ArchiveJobStorage archiveJobStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"        this.archiveJobStorage \u003d archiveJobStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":89,"author":{"gitID":"Richardson0694"},"content":"            saveArchiveJob(event.data);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":96,"author":{"gitID":"Richardson0694"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ArchiveJob methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":98,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Richardson0694"},"content":"    public String getArchiveJobFilePath() {"},{"lineNumber":100,"author":{"gitID":"Richardson0694"},"content":"        return archiveJobStorage.getArchiveJobFilePath();"},{"lineNumber":101,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":103,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"Richardson0694"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readArchiveJob() throws DataConversionException, IOException {"},{"lineNumber":105,"author":{"gitID":"Richardson0694"},"content":"        return readArchiveJob(archiveJobStorage.getArchiveJobFilePath());"},{"lineNumber":106,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":108,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"Richardson0694"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readArchiveJob(String filePath) throws DataConversionException, IOException {"},{"lineNumber":110,"author":{"gitID":"Richardson0694"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":111,"author":{"gitID":"Richardson0694"},"content":"        return archiveJobStorage.readArchiveJob(filePath);"},{"lineNumber":112,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":114,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"Richardson0694"},"content":"    public void saveArchiveJob(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":116,"author":{"gitID":"Richardson0694"},"content":"        saveArchiveJob(addressBook, archiveJobStorage.getArchiveJobFilePath());"},{"lineNumber":117,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":119,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Richardson0694"},"content":"    public void saveArchiveJob(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":121,"author":{"gitID":"Richardson0694"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":122,"author":{"gitID":"Richardson0694"},"content":"        archiveJobStorage.saveArchiveJob(addressBook, filePath);"},{"lineNumber":123,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":125,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":36,"-":89}},{"path":"src/main/java/seedu/address/storage/XmlSerializableArchiveJob.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":" * An Immutable Archive that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"@XmlRootElement(name \u003d \"archive\")"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"public class XmlSerializableArchiveJob {"},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"    private List\u003cXmlAdaptedJob\u003e jobs;"},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"     * Creates an empty XmlSerializableArchiveJob."},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"    public XmlSerializableArchiveJob() {"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"        jobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"     * Conversion"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"    public XmlSerializableArchiveJob(ReadOnlyAddressBook src) {"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"        this();"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"        jobs.addAll(src.getArchiveJobList().stream().map(XmlAdaptedJob::new).collect(Collectors.toList()));"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":"     * {@code XmlAdaptedJob}."},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"        for (XmlAdaptedJob j : jobs) {"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"            addressBook.addJob(j.toModelType());"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Richardson0694"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"Richardson0694"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":60,"author":{"gitID":"Richardson0694"},"content":"        if (!(other instanceof XmlSerializableArchiveJob)) {"},{"lineNumber":61,"author":{"gitID":"Richardson0694"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":64,"author":{"gitID":"Richardson0694"},"content":"        XmlSerializableArchiveJob otherAb \u003d (XmlSerializableArchiveJob) other;"},{"lineNumber":65,"author":{"gitID":"Richardson0694"},"content":"        return jobs.equals(otherAb.jobs);"},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":54,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/AddJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNED_EMPLOYEE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEHICLE_NUMBER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":" * Adds a job to CarviciM"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"public class AddJobCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    public static final String COMMAND_WORD \u003d \"addj\";"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a job to the CarviciM. \""},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"            + \"Parameters: \""},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"            + PREFIX_NAME + \"CLIENT_NAME \""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"            + PREFIX_VEHICLE_NUMBER + \"VEHICLE_NUMBER \""},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"            + PREFIX_ASSIGNED_EMPLOYEE + \"ASSIGNED_EMPLOYEE_INDEX+ (must be a positive integer)\\n\""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"            + PREFIX_VEHICLE_NUMBER + \"SHG123A \""},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"            + PREFIX_ASSIGNED_EMPLOYEE + \"3 \""},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"            + PREFIX_ASSIGNED_EMPLOYEE + \"6 \";"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New job added: %1$s\";"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    private final Person client;"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    private final VehicleNumber vehicleNumber;"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    private final ArrayList\u003cIndex\u003e targetIndices;"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"    private final UniqueEmployeeList assignedEmployees;"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"    private Job toAdd;"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"     * Creates an AddJobCommand to add the specified {@code Job}"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"    public AddJobCommand(Person client, VehicleNumber vehicleNumber, ArrayList\u003cIndex\u003e targetIndices) {"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(client, vehicleNumber, targetIndices);"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"        this.client \u003d client;"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"        this.vehicleNumber \u003d vehicleNumber;"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        this.targetIndices \u003d targetIndices;"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        assignedEmployees \u003d new UniqueEmployeeList();"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"        //Check for valid employee indices"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        for (Index targetIndex : targetIndices) {"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"            for (Index targetIndex : targetIndices) {"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"                assignedEmployees.add(lastShownList.get(targetIndex.getZeroBased()));"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"            toAdd \u003d new Job(client, vehicleNumber, new JobNumber(), new Date(), assignedEmployees,"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"                    new Status(Status.STATUS_ONGOING), new RemarkList());"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"            throw new CommandException(\"Duplicate employee index\");"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        requireNonNull(model);"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        model.addJob(toAdd);"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"                || (other instanceof AddJobCommand // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 client.equals(((AddJobCommand) other).client)"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 vehicleNumber.equals(((AddJobCommand) other).vehicleNumber)"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 targetIndices.equals(((AddJobCommand) other).targetIndices)"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 assignedEmployees.equals(((AddJobCommand) other).assignedEmployees)"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(this.toAdd, ((AddJobCommand) other).toAdd));"},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":90,"-":23}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":" * Stores addressbook and archivejob data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"     * Saves the given archivejob data to the specified file."},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    public static void saveDataToFile(File file, XmlSerializableArchiveJob archiveJob)"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"            throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"            XmlUtil.saveDataToFile(file, archiveJob);"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":"     * Returns archive job in the file or an empty address book"},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Richardson0694"},"content":"    public static XmlSerializableArchiveJob loadDataFromArchiveFile(File file) throws DataConversionException,"},{"lineNumber":58,"author":{"gitID":"Richardson0694"},"content":"            FileNotFoundException {"},{"lineNumber":59,"author":{"gitID":"Richardson0694"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"Richardson0694"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableArchiveJob.class);"},{"lineNumber":61,"author":{"gitID":"Richardson0694"},"content":"        } catch (JAXBException e) {"},{"lineNumber":62,"author":{"gitID":"Richardson0694"},"content":"            throw new DataConversionException(e);"},{"lineNumber":63,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":29,"-":37}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    private List\u003cXmlAdaptedEmployee\u003e employees;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedJob\u003e jobs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        jobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        employees.addAll(src.getEmployeeList().stream().map(XmlAdaptedEmployee::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        jobs.addAll(src.getJobList().stream().map(XmlAdaptedJob::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"     * {@code XmlAdaptedEmployee} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        for (XmlAdaptedEmployee p : employees) {"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"            addressBook.addEmployee(p.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedJob j : jobs) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addJob(j.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return employees.equals(otherAb.employees) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 jobs.equals(otherAb.jobs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":6,"-":74}},{"path":"src/main/java/seedu/address/storage/session/RowData.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.DataFormatter;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Row;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Sheet;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Workbook;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":" * Represents a field that spans one or more columns"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"public class RowData implements ExcelColumnSpannable {"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    private final int startIndex;"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"    private final int endIndex;"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    public RowData(int startIndex, int endIndex) {"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"        this.startIndex \u003d startIndex;"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"        this.endIndex \u003d endIndex;"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"    public int getStartIndex() {"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        return startIndex;"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    public int getEndIndex() {"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"        return endIndex;"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"    public ArrayList\u003cString\u003e readData(Workbook workbook, int sheetNumber, int rowNumber)"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"            throws DataIndexOutOfBoundsException {"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        if (sheetNumber \u003c workbook.getFirstVisibleTab()"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"                || sheetNumber \u003e\u003d workbook.getNumberOfSheets() + workbook.getFirstVisibleTab()) {"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"            throw new DataIndexOutOfBoundsException(\"Sheets\", workbook.getFirstVisibleTab(),"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"                    workbook.getNumberOfSheets() + workbook.getFirstVisibleTab(), sheetNumber);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"        Sheet sheet \u003d workbook.getSheetAt(sheetNumber);"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"        return readDataFromSheet(sheet, rowNumber);"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"    public ArrayList\u003cString\u003e readDataFromSheet(Sheet sheet, int rowNumber)"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        throws DataIndexOutOfBoundsException {"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"        if (rowNumber \u003c sheet.getFirstRowNum() || rowNumber \u003e sheet.getLastRowNum()) {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"            throw new DataIndexOutOfBoundsException(\"Rows\", sheet.getFirstRowNum(), sheet.getLastRowNum(), rowNumber);"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"        Row row \u003d sheet.getRow(rowNumber);"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"        DataFormatter dataFormatter \u003d new DataFormatter();"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d startIndex; i \u003c\u003d endIndex; i++) {"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"            data.add(dataFormatter.formatCellValue(row.getCell(i)));"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"        return data;"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":61}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedRemark.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" * JAXB-friendly adapted version of the Remark."},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"public class XmlAdaptedRemark {"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    @XmlValue"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    private String remark;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"     * Constructs an XmlAdaptedRemark."},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"     * This is the no-arg constructor that is required by JAXB"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedRemark() {}"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"     * Construct a {@code XmlAdaptedRemark} with the given {@code remark}."},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedRemark(String remark) {"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        this.remark \u003d remark;"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedRemark(Remark source) {"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        remark \u003d source.value;"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Remark object."},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted job"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    public Remark toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        if (!Remark.isValidRemark(remark)) {"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARKS_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        return new Remark(remark);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"            return true;"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof  XmlAdaptedRemark)) {"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        return remark.equals(((XmlAdaptedRemark) other).remark);"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":62,"-":2}},{"path":"src/main/java/seedu/address/storage/ArchiveJobStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":10,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Richardson0694"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Richardson0694"},"content":"public interface ArchiveJobStorage {"},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"    String getArchiveJobFilePath();"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readArchiveJob() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"     * @see #getArchiveJobFilePath()"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readArchiveJob(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"    void saveArchiveJob(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"     * @see #saveArchiveJob(ReadOnlyAddressBook)"},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"    void saveArchiveJob(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":37,"-":8}},{"path":"src/main/java/seedu/address/storage/session/ImportSession.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"import java.io.FileOutputStream;"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.openxml4j.exceptions.InvalidFormatException;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Sheet;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Workbook;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.WorkbookFactory;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileAccessException;"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileFormatException;"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":" * Used to store data relevant to importing of (@code Job) from (@code inFile) and"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":" * exporting (@code Job) with commens to (@code outFile). Implements a Singleton design pattern."},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"public class ImportSession {"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_FILE_OPEN \u003d \"An excel file is already open.\";"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_INVALID_FILEPATH \u003d \"Please check the path to your file.\";"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_READ_PERMISSION \u003d \"Please enable file read permission.\";"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_FILE_FORMAT \u003d \"Unable to read the format of file. \""},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"            + \"Please ensure the file is in .xls or .xlsx format\";"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_IO_EXCEPTION \u003d \"Unable to read file. Please close the file and try again.\";"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    private static ImportSession session;"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    private boolean initialized;"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    private File inFile;"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"    private File tempFile;"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    private Workbook workbook; // write comments to column after last row, with approval status"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"    private SessionData sessionData;"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    private File outFile;"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"    private ImportSession() {"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"        initialized \u003d false;"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":"    public static ImportSession getInstance() {"},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"        if (session \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"            session \u003d new ImportSession();"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"        return session;"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"    public static String getTimeStamp() {"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"        return new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\").format(new Date());"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"     * Returns whether (@code ImportSession) has been initialized with an excel spreadsheet"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"    public boolean isInitialized() {"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"        return initialized;"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"     *  Opens excel file specified by (@code filepath) and initializes (@code SessionData) to support import operations"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"    public void initializeSession(String filePath) throws FileAccessException, FileFormatException {"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"        if (inFile !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"            throw new FileAccessException(ERROR_MESSAGE_FILE_OPEN);"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"        File file \u003d new File (filePath);"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        if (!file.exists()) {"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"            throw new FileAccessException(ERROR_MESSAGE_INVALID_FILEPATH);"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"        } else if (!file.canRead()) {"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(ERROR_MESSAGE_READ_PERMISSION);"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"            workbook \u003d createWorkBook(file);"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(ERROR_MESSAGE_FILE_FORMAT);"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(ERROR_MESSAGE_IO_EXCEPTION);"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"        // the file is good to go"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        inFile \u003d file;"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"        initializeSessionData();"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":"        initialized \u003d true;"},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":"     * Attempts to parse the column headers and retrieve job entries"},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"    private void initializeSessionData() throws FileFormatException {"},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"        SheetWithHeaderFields sheetWithHeaderFields;"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"        SheetParser sheetParser;"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"        Sheet sheet;"},{"lineNumber":94,"author":{"gitID":"yuhongherald"},"content":"        sessionData \u003d new SessionData();"},{"lineNumber":95,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":96,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d 0; i \u003c workbook.getNumberOfSheets(); i++) {"},{"lineNumber":97,"author":{"gitID":"yuhongherald"},"content":"            sheet \u003d workbook.getSheetAt(workbook.getFirstVisibleTab() + i);"},{"lineNumber":98,"author":{"gitID":"yuhongherald"},"content":"            sheetParser \u003d new SheetParser(sheet);"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"            sheetWithHeaderFields \u003d sheetParser.parseSheetWithHeaderField();"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"            sessionData.addSheet(sheetWithHeaderFields);"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"     * Attempts to create a (@code Workbook) for a given (@code File)"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":"    private Workbook createWorkBook(File file) throws IOException, InvalidFormatException {"},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"        tempFile \u003d new File(file.getPath() + getTimeStamp() + file.getName());"},{"lineNumber":109,"author":{"gitID":"yuhongherald"},"content":"        FileOutputStream fileOutputStream \u003d new FileOutputStream(tempFile);"},{"lineNumber":110,"author":{"gitID":"yuhongherald"},"content":"        Workbook workbook \u003d WorkbookFactory.create(file);"},{"lineNumber":111,"author":{"gitID":"yuhongherald"},"content":"        workbook.write(fileOutputStream);"},{"lineNumber":112,"author":{"gitID":"yuhongherald"},"content":"        workbook.close();"},{"lineNumber":113,"author":{"gitID":"yuhongherald"},"content":"        workbook \u003d WorkbookFactory.create(tempFile);"},{"lineNumber":114,"author":{"gitID":"yuhongherald"},"content":"        return workbook;"},{"lineNumber":115,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"    public void reviewAllRemainingJobEntries(boolean approve) throws DataIndexOutOfBoundsException {"},{"lineNumber":118,"author":{"gitID":"yuhongherald"},"content":"        sessionData.reviewAllRemainingJobEntries(approve, \"Imported with no comments.\");"},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":121,"author":{"gitID":"yuhongherald"},"content":"    public SessionData getSessionData() {"},{"lineNumber":122,"author":{"gitID":"yuhongherald"},"content":"        return sessionData;"},{"lineNumber":123,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"yuhongherald"},"content":"     * Flushes feedback to (@code outFile) and releases resources. Currently not persistent."},{"lineNumber":127,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":"    public void closeSession() throws DataIndexOutOfBoundsException, IOException {"},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"        if (!initialized) {"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"            return;"},{"lineNumber":131,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"yuhongherald"},"content":"        if (outFile \u003d\u003d null) { // does not check if a file exists"},{"lineNumber":133,"author":{"gitID":"yuhongherald"},"content":"            String timeStamp \u003d getTimeStamp();"},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"            outFile \u003d new File(inFile.getPath() + timeStamp + inFile.getName());"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"        FileOutputStream fileOut \u003d new FileOutputStream(outFile);"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"        System.out.println(outFile.getName());"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"        workbook.write(fileOut);"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"        fileOut.close();"},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":"        workbook.close();"},{"lineNumber":141,"author":{"gitID":"yuhongherald"},"content":"        tempFile.deleteOnExit();"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"        freeResources();"},{"lineNumber":143,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":"     * Releases resources associated with ImportSession by nulling field"},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"yuhongherald"},"content":"    private void freeResources() {"},{"lineNumber":149,"author":{"gitID":"yuhongherald"},"content":"        workbook \u003d null;"},{"lineNumber":150,"author":{"gitID":"yuhongherald"},"content":"        sessionData \u003d null;"},{"lineNumber":151,"author":{"gitID":"yuhongherald"},"content":"        inFile \u003d null;"},{"lineNumber":152,"author":{"gitID":"yuhongherald"},"content":"        outFile \u003d null;"},{"lineNumber":153,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":155,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"yuhongherald"},"content":"     * For localized testing purposes"},{"lineNumber":157,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"yuhongherald"},"content":"    public static void main(String[] args) {"},{"lineNumber":159,"author":{"gitID":"yuhongherald"},"content":"        ImportSession importSession \u003d getInstance();"},{"lineNumber":160,"author":{"gitID":"yuhongherald"},"content":"        String path;"},{"lineNumber":161,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"yuhongherald"},"content":"            path \u003d new File(\".\").getCanonicalPath();"},{"lineNumber":163,"author":{"gitID":"yuhongherald"},"content":"            System.out.println(path);"},{"lineNumber":164,"author":{"gitID":"yuhongherald"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitID":"yuhongherald"},"content":"            e.printStackTrace();"},{"lineNumber":166,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":168,"author":{"gitID":"yuhongherald"},"content":"            importSession.initializeSession("},{"lineNumber":169,"author":{"gitID":"yuhongherald"},"content":"                    \".\\\\src\\\\test\\\\resources\\\\model.session.ImportSessionTest\\\\CS2103-testsheet.xlsx\");"},{"lineNumber":170,"author":{"gitID":"yuhongherald"},"content":"            importSession.reviewAllRemainingJobEntries(true);"},{"lineNumber":171,"author":{"gitID":"yuhongherald"},"content":"            importSession.closeSession();"},{"lineNumber":172,"author":{"gitID":"yuhongherald"},"content":"        } catch (Exception e) {"},{"lineNumber":173,"author":{"gitID":"yuhongherald"},"content":"            e.printStackTrace();"},{"lineNumber":174,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":176,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":177}},{"path":"src/main/java/seedu/address/storage/session/exceptions/FileFormatException.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session.exceptions;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" * Represents an error from attempting to read an excel file in {@link seedu.address.storage.session.ImportSession}."},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"public class FileFormatException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    public FileFormatException(String message) {"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":11}},{"path":"src/main/java/seedu/address/storage/session/exceptions/DataIndexOutOfBoundsException.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session.exceptions;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" * Represents an error which occurs when trying to access data out of specified range."},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"public class DataIndexOutOfBoundsException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE \u003d \"%s expected index %d to %d, but got %d\";"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"    public DataIndexOutOfBoundsException(String field, int lower, int upper, int actual) {"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"        super(String.format(ERROR_MESSAGE, field, lower, upper, actual));"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":13}},{"path":"src/main/java/seedu/address/storage/session/exceptions/InvalidDataException.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session.exceptions;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" * Represents an error when data supplied to {@link seedu.address.storage.session.SessionData} is in wrong format."},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"public class InvalidDataException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    public InvalidDataException(String message) {"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":11}},{"path":"src/main/java/seedu/address/storage/session/ExcelRowReference.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":" * For row entries of an excel sheet"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"public interface ExcelRowReference {"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"     * Returns the excel sheet number of this element."},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"    public int getSheetNumber();"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"     * Returns the excel row number of this element"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"     * @return"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    public int getRowNumber();"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":18}},{"path":"src/main/java/seedu/address/storage/session/exceptions/FileAccessException.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session.exceptions;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":" * Represents an error from attempting to read an excel file in {@link seedu.address.storage.session.ImportSession}."},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"public class FileAccessException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"    public FileAccessException(String message) {"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":11}},{"path":"src/main/java/seedu/address/storage/XmlArchiveJobStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":" * A class to access Archive data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"public class XmlArchiveJobStorage implements ArchiveJobStorage {"},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlArchiveJobStorage.class);"},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"    public XmlArchiveJobStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    public String getArchiveJobFilePath() {"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readArchiveJob() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"        return readArchiveJob(filePath);"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"     * Similar to {@link #readArchiveJob()}"},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readArchiveJob(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"            FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"        File archiveJobFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":51,"author":{"gitID":"Richardson0694"},"content":"        if (!archiveJobFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"Richardson0694"},"content":"            logger.info(\"ArchiveJob file \"  + archiveJobFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":"        XmlSerializableArchiveJob xmlArchiveJob \u003d XmlFileStorage.loadDataFromArchiveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"Richardson0694"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"Richardson0694"},"content":"            return Optional.of(xmlArchiveJob.toModelType());"},{"lineNumber":59,"author":{"gitID":"Richardson0694"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"Richardson0694"},"content":"            logger.info(\"Illegal values found in \" + archiveJobFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"Richardson0694"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":65,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"    public void saveArchiveJob(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":67,"author":{"gitID":"Richardson0694"},"content":"        saveArchiveJob(addressBook, filePath);"},{"lineNumber":68,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":70,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Richardson0694"},"content":"     * Similar to {@link #saveArchiveJob(ReadOnlyAddressBook)}"},{"lineNumber":72,"author":{"gitID":"Richardson0694"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":73,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Richardson0694"},"content":"    public void saveArchiveJob(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":75,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(addressBook);"},{"lineNumber":76,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":78,"author":{"gitID":"Richardson0694"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":79,"author":{"gitID":"Richardson0694"},"content":"        FileUtil.createEvenIfExist(file);"},{"lineNumber":80,"author":{"gitID":"Richardson0694"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableArchiveJob(addressBook));"},{"lineNumber":81,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":83,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":67,"-":16}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedJob.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":" * JAXB-friendly version of the Job"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"public class XmlAdaptedJob {"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Job\u0027s %s field is missing!\";"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    private String jobNumber;"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    private String name;"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    private String phone;"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"    private String email;"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    private String vehicleNumber;"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    private String status;"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    private String date;"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    private List\u003cXmlAdaptedEmployee\u003e assignedEmployees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    private List\u003cXmlAdaptedRemark\u003e remarks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"     * Constructs an XmlAdaptedJob."},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     * This is the no-arg constructor that is required by JAXB"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedJob() {}"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"     * Constructs an {@code XmlAdaptedJob} with the given job details."},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedJob(String jobNumber, String name, String phone, String email, String vehicleNumber,"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"                         String status, String date, List\u003cXmlAdaptedEmployee\u003e assignedEmployees,"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"                         List\u003cXmlAdaptedRemark\u003e remarks) {"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        this.jobNumber \u003d jobNumber;"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"        this.name \u003d name;"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"        this.phone \u003d phone;"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        this.email \u003d email;"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        this.vehicleNumber \u003d vehicleNumber;"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        this.status \u003d status;"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"        this.date \u003d date;"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        if (assignedEmployees !\u003d null) {"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"            this.assignedEmployees \u003d new ArrayList\u003c\u003e(assignedEmployees);"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"        if (remarks !\u003d null) {"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"            this.remarks \u003d new ArrayList\u003c\u003e(remarks);"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"     * Converts a given Job into this class for JAXB use."},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEmployee"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"    public XmlAdaptedJob(Job source) {"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"        jobNumber \u003d source.getJobNumber().value;"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        name \u003d source.getClient().getName().fullName;"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        phone \u003d source.getClient().getPhone().value;"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        email \u003d source.getClient().getEmail().value;"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"        vehicleNumber \u003d source.getVehicleNumber().value;"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        date \u003d source.getDate().value;"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        for (Employee employee : source.getAssignedEmployees()) {"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"            assignedEmployees.add(new XmlAdaptedEmployee(employee));"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"        for (Remark remark : source.getRemarks()) {"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"            remarks.add(new XmlAdaptedRemark(remark));"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"     * Converts this jaxb-friendly adapted job object into the model\u0027s Job object."},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted job"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"    public Job toModelType() throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"        final List\u003cRemark\u003e jobRemarks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"        final List\u003cEmployee\u003e jobAssignedEmployees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"        for (XmlAdaptedRemark remark : remarks) {"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"            jobRemarks.add(remark.toModelType());"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"        for (XmlAdaptedEmployee assignedEmployee : assignedEmployees) {"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"            jobAssignedEmployees.add(assignedEmployee.toModelType());"},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"        if (this.jobNumber \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":118,"author":{"gitID":"whenzei"},"content":"                    JobNumber.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"        final JobNumber jobNumber \u003d new JobNumber(this.jobNumber);"},{"lineNumber":121,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":132,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":134,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":138,"author":{"gitID":"whenzei"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":140,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":142,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"whenzei"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":145,"author":{"gitID":"whenzei"},"content":"        final Person client \u003d new Person(name, phone, email);"},{"lineNumber":146,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":147,"author":{"gitID":"whenzei"},"content":"        if (this.vehicleNumber \u003d\u003d null) {"},{"lineNumber":148,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":149,"author":{"gitID":"whenzei"},"content":"                    VehicleNumber.class.getSimpleName()));"},{"lineNumber":150,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"whenzei"},"content":"        if (!VehicleNumber.isValidVehicleNumber(this.vehicleNumber)) {"},{"lineNumber":152,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(VehicleNumber.MESSAGE_VEHICLE_ID_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"whenzei"},"content":"        final VehicleNumber vehicleNumber \u003d new VehicleNumber(this.vehicleNumber);"},{"lineNumber":155,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":156,"author":{"gitID":"whenzei"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":157,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":158,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"whenzei"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":160,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":161,"author":{"gitID":"whenzei"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitID":"whenzei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":163,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"whenzei"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":165,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":166,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":"        final RemarkList remarks \u003d new RemarkList(new HashSet\u003c\u003e(jobRemarks));"},{"lineNumber":168,"author":{"gitID":"whenzei"},"content":"        final UniqueEmployeeList assignedEmployees \u003d new UniqueEmployeeList();"},{"lineNumber":169,"author":{"gitID":"whenzei"},"content":"        assignedEmployees.setEmployees(jobAssignedEmployees);"},{"lineNumber":170,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":171,"author":{"gitID":"whenzei"},"content":"        return new Job(client, vehicleNumber, jobNumber, date, assignedEmployees, status, remarks);"},{"lineNumber":172,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":174,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":176,"author":{"gitID":"whenzei"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":177,"author":{"gitID":"whenzei"},"content":"            return true;"},{"lineNumber":178,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":180,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof XmlAdaptedJob)) {"},{"lineNumber":181,"author":{"gitID":"whenzei"},"content":"            return false;"},{"lineNumber":182,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":184,"author":{"gitID":"whenzei"},"content":"        XmlAdaptedJob otherJob \u003d (XmlAdaptedJob) other;"},{"lineNumber":185,"author":{"gitID":"whenzei"},"content":"        return Objects.equals(jobNumber, otherJob.jobNumber)"},{"lineNumber":186,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(name, otherJob.name)"},{"lineNumber":187,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(phone, otherJob.phone)"},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(email, otherJob.email)"},{"lineNumber":189,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(date, otherJob.date)"},{"lineNumber":190,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(vehicleNumber, otherJob.vehicleNumber)"},{"lineNumber":191,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(status, otherJob.status)"},{"lineNumber":192,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 assignedEmployees.equals(otherJob.assignedEmployees)"},{"lineNumber":193,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 remarks.equals(otherJob.remarks);"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":175,"-":16,"yuhongherald":4}},{"path":"src/main/java/seedu/address/storage/session/ExcelColumnSpannable.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Sheet;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Workbook;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":" * For fields that resides in one or more columns"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"public interface ExcelColumnSpannable {"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"    public int getStartIndex();"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    public int getEndIndex();"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    public ArrayList\u003cString\u003e readData(Workbook workbook, int sheetNumber, int rowNumber)"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"            throws DataIndexOutOfBoundsException;"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    public ArrayList\u003cString\u003e readDataFromSheet(Sheet sheet, int rowNumber) throws DataIndexOutOfBoundsException;"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":20}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.storage.ArchiveJobStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.storage.XmlArchiveJobStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"        ArchiveJobStorage archiveJobStorage \u003d new XmlArchiveJobStorage(userPrefs.getArchiveJobFilePath());"},{"lineNumber":67,"author":{"gitID":"Richardson0694"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, archiveJobStorage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        model.initJobNumber();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":138,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":166,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"yuhongherald"},"content":"        initializedPrefs.checkIntegrity();"},{"lineNumber":174,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":193,"author":{"gitID":"whenzei"},"content":"        setTheme(primaryStage);"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":196,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"whenzei"},"content":"     * Sets the theme of the main app based on user preference"},{"lineNumber":198,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"whenzei"},"content":"    private void setTheme(Stage primaryStage) {"},{"lineNumber":200,"author":{"gitID":"whenzei"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":201,"author":{"gitID":"whenzei"},"content":"        primaryStage.getScene().getStylesheets().add(\"/view/\" + userPrefs.getThemeName() + \".css\");"},{"lineNumber":202,"author":{"gitID":"whenzei"},"content":"        primaryStage.getScene().getStylesheets().add(\"/view/\" + userPrefs.getExtensionName() + \".css\");"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":10,"Richardson0694":4,"-":211,"yuhongherald":2}},{"path":"src/main/java/seedu/address/storage/session/SessionData.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":" * A data structure used to keep track of job entries in an (@code ImportSession)"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"public class SessionData {"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_EMPTY_UNREVIWED_JOB_LIST \u003d \"There are no unreviewed job entries left!\";"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cJobEntry\u003e unreviewedJobEntries;"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cJobEntry\u003e reviewedJobEntries;"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cSheetWithHeaderFields\u003e sheets;"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"    // will be using an ObservableList"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    SessionData() {"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"        unreviewedJobEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"        reviewedJobEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"        sheets \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"     * @return a copy of unreviewed job entries stored in this sheet"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    public List\u003cJobEntry\u003e getUnreviewedJobEntries() {"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        return Collections.unmodifiableList(unreviewedJobEntries);"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"     * @return a copy of reviewed job entries stored in this sheet"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    public List\u003cJobEntry\u003e getReviewedJobEntries() {"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        return Collections.unmodifiableList(reviewedJobEntries);"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"     * Adds job entries from (@code sheetWithHeaderFields) into (@code SessionData)"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    public void addSheet(SheetWithHeaderFields sheetWithHeaderFields) {"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        Iterator\u003cJobEntry\u003e jobEntryIterator \u003d sheetWithHeaderFields.iterator();"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"        while (jobEntryIterator.hasNext()) {"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"            unreviewedJobEntries.add(jobEntryIterator.next());"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        sheets.add(sheetWithHeaderFields.getSheetIndex(), sheetWithHeaderFields);"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"     * Reviews all remaining jobs using (@code reviewJobEntry)"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    void reviewAllRemainingJobEntries(boolean approved, String comments) throws DataIndexOutOfBoundsException {"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"        while (!getUnreviewedJobEntries().isEmpty()) {"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"            reviewJobEntry(0, approved, comments);"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"     * Reviews a (@code JobEntry) specified by (@code listIndex)"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"     * @param listIndex index of (@code JobEntry) in (@code unreviewedJobEntries)"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"     * @param approved whether job entry will be added to CarviciM"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"     * @param comments feedback in string representation"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"    void reviewJobEntry(int listIndex, boolean approved, String comments) throws DataIndexOutOfBoundsException {"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"        if (unreviewedJobEntries.isEmpty()) {"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"            throw new IllegalStateException(ERROR_MESSAGE_EMPTY_UNREVIWED_JOB_LIST);"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"        } else if (listIndex \u003c 0 || listIndex \u003e\u003d unreviewedJobEntries.size()) {"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"            throw new DataIndexOutOfBoundsException(\"Rows\", 0, unreviewedJobEntries.size(), listIndex);"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"        JobEntry jobEntry \u003d unreviewedJobEntries.get(listIndex);"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        jobEntry.review(approved, comments);"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"        unreviewedJobEntries.remove(jobEntry);"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"        reviewedJobEntries.add(jobEntry);"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"        SheetWithHeaderFields sheet \u003d sheets.get(jobEntry.getSheetNumber());"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        sheet.commentJobEntry(jobEntry.getRowNumber(), jobEntry.getCommentsAsString());"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"        if (approved) {"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":"            sheet.approveJobEntry(jobEntry.getRowNumber());"},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"        } else {"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"            sheet.rejectJobEntry(jobEntry.getRowNumber());"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":3,"yuhongherald":86}},{"path":"src/main/java/seedu/address/storage/session/SheetParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.DataFormatter;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Row;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Sheet;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileFormatException;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":" * a"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"public class SheetParser {"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"    public static final String INVALID_FIELD \u003d \"INVALID_FIELD\";"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_MISSING_FIELDS \u003d \"Missing header fields: \";"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"    public static final String ERROR_MESSAGE_DUPLICATE_FIELDS \u003d \"Duplicate header field: \";"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"    // Compulsory header fields"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"    public static final String CLIENT_NAME \u003d \"client name\";"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    public static final String CLIENT_PHONE \u003d \"client phone\";"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    public static final String CLIENT_EMAIL \u003d \"client email\";"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"    public static final String VEHICLE_NUMBER \u003d \"vehicle number\";"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"    public static final String EMPLOYEE_NAME \u003d \"employee name\";"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    public static final String EMPLOYEE_PHONE \u003d \"employee phone\";"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    public static final String EMPLOYEE_EMAIL \u003d \"employee email\";"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    // Comment header fields"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    public static final String APPROVAL_STATUS \u003d \"approval status\";"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    public static final String COMMENTS \u003d \"comments\";"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"    public static final int APPROVAL_STATUS_INDEX \u003d 0;"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"    public static final int COMMENTS_INDEX \u003d 1;"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"    // Optional header fields"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"    // public static final String JOB_NUMBER \u003d \"job number\";"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"    // public static final String DATE \u003d \"date\";"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"    public static final String STATUS \u003d \"status\";"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"    public static final String REMARKS \u003d \"remarks\";"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    public static final String[] JOB_ENTRY_COMPULSORY_FIELDS \u003d { // ignore case when reading headings"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"        CLIENT_NAME, CLIENT_PHONE, CLIENT_EMAIL, VEHICLE_NUMBER, EMPLOYEE_NAME, EMPLOYEE_PHONE, EMPLOYEE_EMAIL"},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"    };"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    public static final String[] JOB_ENTRY_OPTIONAL_FIELDS \u003d { // ignore case when reading headings"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        STATUS, REMARKS"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"    };"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"    public static final String MESSAGE_SEPARATOR \u003d \", \";"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"    private final Sheet sheet;"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cString\u003e missingCompulsoryFields;"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cString\u003e missingOptionalFields;"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e compulsoryFields;"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e commentFields;"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e optionalFields;"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"    public SheetParser(Sheet sheet) {"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"        this.sheet \u003d sheet;"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"        missingCompulsoryFields \u003d new ArrayList\u003c\u003e("},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"                Arrays.asList(JOB_ENTRY_COMPULSORY_FIELDS));"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"        missingOptionalFields \u003d  new ArrayList\u003c\u003e("},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"                Arrays.asList(JOB_ENTRY_OPTIONAL_FIELDS));"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"        compulsoryFields \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"        commentFields \u003d new HashMap\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"        optionalFields \u003d new HashMap\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"     * Reads the (@code Sheet) and converts it into (@code SheetWithHeaderFields)"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"    public SheetWithHeaderFields parseSheetWithHeaderField() throws FileFormatException {"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"        parseFirstRow();"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"        if (!missingCompulsoryFields.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder(ERROR_MESSAGE_MISSING_FIELDS);"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"            for (String field : missingCompulsoryFields) {"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"                stringBuilder.append(field);"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"                stringBuilder.append(MESSAGE_SEPARATOR);"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(stringBuilder.toString());"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":"        createCommentField(APPROVAL_STATUS, APPROVAL_STATUS_INDEX);"},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"        createCommentField(COMMENTS, COMMENTS_INDEX);"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"        return new SheetWithHeaderFields(sheet, compulsoryFields, commentFields, optionalFields);"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"     * Creates a new column with header (@code name) (@code offset) columns after last column."},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"     * @param offset"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"    private void createCommentField(String name, int offset) {"},{"lineNumber":94,"author":{"gitID":"yuhongherald"},"content":"        int index \u003d sheet.getRow(sheet.getFirstRowNum()).getLastCellNum() + offset;"},{"lineNumber":95,"author":{"gitID":"yuhongherald"},"content":"        commentFields.put(name, new RowData(index, index));"},{"lineNumber":96,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":98,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"     * Processes the header fields in the first row into (@code headerFields) and throws (@code FileFormatException)"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"     * if there are missing compulsory header fields"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":"    private void parseFirstRow() throws FileFormatException {"},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":"        Row firstRow \u003d sheet.getRow(sheet.getFirstRowNum());"},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"        DataFormatter dataFormatter \u003d new DataFormatter();"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"        int lastFieldIndex \u003d firstRow.getLastCellNum();"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":"        String lastField \u003d INVALID_FIELD;"},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":"        String currentField;"},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"        // traverse the row from the back to assist detecting end of row"},{"lineNumber":109,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d firstRow.getLastCellNum(); i \u003e\u003d firstRow.getFirstCellNum(); i--) {"},{"lineNumber":110,"author":{"gitID":"yuhongherald"},"content":"            currentField \u003d dataFormatter.formatCellValue(firstRow.getCell(i)).toLowerCase();"},{"lineNumber":111,"author":{"gitID":"yuhongherald"},"content":"            if (currentField.equals(lastField)) {"},{"lineNumber":112,"author":{"gitID":"yuhongherald"},"content":"                continue;"},{"lineNumber":113,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"yuhongherald"},"content":"            if (!isFieldPresent(currentField)) {"},{"lineNumber":115,"author":{"gitID":"yuhongherald"},"content":"                lastField \u003d INVALID_FIELD;"},{"lineNumber":116,"author":{"gitID":"yuhongherald"},"content":"                lastFieldIndex \u003d i - 1;"},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"                continue;"},{"lineNumber":118,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"            addHeaderField(currentField, new RowData(i, lastFieldIndex));"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":"            lastField \u003d currentField;"},{"lineNumber":121,"author":{"gitID":"yuhongherald"},"content":"            lastFieldIndex \u003d i - 1;"},{"lineNumber":122,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"yuhongherald"},"content":"     * Removes header field from (@code missingCompulsoryFields) or (@code missingOptionalFields) and"},{"lineNumber":127,"author":{"gitID":"yuhongherald"},"content":"     * places it into (@code headerFields)"},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"    private void addHeaderField(String currentField, RowData rowData) throws FileFormatException {"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"        if (missingCompulsoryFields.contains(currentField)) {"},{"lineNumber":131,"author":{"gitID":"yuhongherald"},"content":"            missingCompulsoryFields.remove(currentField);"},{"lineNumber":132,"author":{"gitID":"yuhongherald"},"content":"            compulsoryFields.put(currentField, rowData);"},{"lineNumber":133,"author":{"gitID":"yuhongherald"},"content":"        } else if (missingOptionalFields.contains(currentField)) {"},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"            missingOptionalFields.remove(currentField);"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"            optionalFields.put(currentField, rowData);"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"        } else {"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(ERROR_MESSAGE_DUPLICATE_FIELDS + currentField);"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":141,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"     * Checks if (@code field) is present in (@code fields), ignoring case"},{"lineNumber":143,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"yuhongherald"},"content":"    private boolean isFieldPresent(String field) {"},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"        return missingCompulsoryFields.contains(field) || missingOptionalFields.contains(field);"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"-":3,"yuhongherald":144}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public static Employee[] getSamplePersons() {"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"        return new Employee[] {"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                getTagSet(\"mechanic\")),"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                getTagSet(\"technician\", \"mechanic\")),"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                getTagSet(\"technician\")),"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"technician\")),"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                getTagSet(\"technician\")),"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"            new Employee(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                getTagSet(\"technician\"))"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"            for (Employee sampleEmployee : getSamplePersons()) {"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"                sampleAb.addEmployee(sampleEmployee);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":13,"-":47}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":" * Represents a Employee\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" *"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid employee phone number."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"-":52}},{"path":"src/main/java/seedu/address/model/person/Customer.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"//@author yuhongherald"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":" * Represents a customer in the servicing manager."},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"public class Customer extends Person {"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"     * Every field must be present and not null."},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"    public Customer(Name name, Phone phone, Email email, Address address) {"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"        super(name, phone, email);"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"     * Generates a valid cutomer"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"    public static Customer generateCustomer() {"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"        Name name \u003d new Name(\"name\");"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"        Phone phone \u003d new Phone(\"91234567\");"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"        Email email \u003d new Email(\"name@example.com\");"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"        Address address \u003d new Address(\"randomAddress\");"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"        return new Customer(name, phone, email, address);"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"yuhongherald":26}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":" * Represents a Employee\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"            \"Employee addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid employee email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":55}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":" * Represents a Employee\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" *"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Employee emails should be of the format local-part@domain \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"     * Returns if a given string is a valid employee email."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":65}},{"path":"src/main/java/seedu/address/storage/session/JobEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.remark.Remark.isValidRemark;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"//@@author yuhongherald"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":" * Represents a job entry in an (@link ImportSession)"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"public class JobEntry extends Job implements ExcelRowReference {"},{"lineNumber":24,"author":{"gitID":"yuhongherald"},"content":"    public static final String NEWLINE \u003d \"\\n\";"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"    private final int sheetNumber;"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"    private final int rowNumber;"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    private boolean reviewed;"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    private boolean approved;"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    private final ArrayList\u003cString\u003e comments;"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    public JobEntry (Person client, VehicleNumber vehicleNumber, JobNumber jobNumber, Date date,"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"                     UniqueEmployeeList assignedEmployees, Status status, RemarkList remarks,"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"                     int sheetNumber, int rowNumber, String importComment) {"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"        super(client, vehicleNumber, jobNumber, date, assignedEmployees, status, remarks);"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"        this.sheetNumber \u003d sheetNumber;"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        this.rowNumber \u003d rowNumber;"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"        comments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":"        addComment(importComment);"},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"        reviewed \u003d false;"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":44,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yuhongherald"},"content":"     * Adds a non-empty comment to both remarks and comments."},{"lineNumber":46,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yuhongherald"},"content":"    private void addComment(String comment) {"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"        if (comment !\u003d null \u0026\u0026 isValidRemark(comment)) {"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"            remarks.add(new Remark(comment));"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":"            comments.add(comment);"},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":"    public boolean isReviewed() {"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"        return reviewed;"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    public boolean isApproved() {"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"        return approved;"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"     * Marks (@code JobEntry) as reviewed."},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"     * @param approved whether (@code JobEntry) is going to be added to CarviciM"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"     * @param comment feedback for (@code JobEntry) in String representation"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"    public void review(boolean approved, String comment) {"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"        this.approved \u003d approved;"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"        addComment(comment);"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"    public List\u003cString\u003e getComments() {"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"        return Collections.unmodifiableList(comments);"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"    public String getCommentsAsString() {"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"        for (String comment : comments) {"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"            stringBuilder.append(comment);"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"            stringBuilder.append(NEWLINE);"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        return stringBuilder.toString();"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"    @Override public int getSheetNumber() {"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"        return sheetNumber;"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"    @Override public int getRowNumber() {"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"        return rowNumber;"},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"whenzei":4,"-":6,"yuhongherald":82}},{"path":"src/main/java/seedu/address/model/person/exceptions/EmployeeNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":" * Signals that the operation is unable to find the specified employee."},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"public class EmployeeNotFoundException extends Exception {}"}],"authorContributionMap":{"whenzei":3,"-":3}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateEmployeeException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":" * Signals that the operation will result in duplicate Employee objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"public class DuplicateEmployeeException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"    public DuplicateEmployeeException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":9}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" * Tests that a {@code Employee}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cEmployee\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public boolean test(Employee employee) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(employee.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":4,"-":27}},{"path":"src/main/java/seedu/address/storage/session/SheetWithHeaderFields.java","lines":[{"lineNumber":1,"author":{"gitID":"yuhongherald"},"content":"package seedu.address.storage.session;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.job.Status.STATUS_CLOSED;"},{"lineNumber":5,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.job.Status.STATUS_ONGOING;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.job.VehicleNumber.isValidVehicleNumber;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.person.Email.isValidEmail;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.person.Name.isValidName;"},{"lineNumber":9,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.person.Phone.isValidPhone;"},{"lineNumber":10,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.model.remark.Remark.isValidRemark;"},{"lineNumber":11,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.APPROVAL_STATUS;"},{"lineNumber":12,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.CLIENT_EMAIL;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.CLIENT_NAME;"},{"lineNumber":14,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.CLIENT_PHONE;"},{"lineNumber":15,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.COMMENTS;"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.EMPLOYEE_EMAIL;"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.EMPLOYEE_NAME;"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.EMPLOYEE_PHONE;"},{"lineNumber":19,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.REMARKS;"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.STATUS;"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"import static seedu.address.storage.session.SheetParser.VEHICLE_NUMBER;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"import java.util.HashMap;"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"import java.util.Iterator;"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Cell;"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.CellStyle;"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Font;"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.IndexedColors;"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"import org.apache.poi.ss.usermodel.Sheet;"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":48,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.DataIndexOutOfBoundsException;"},{"lineNumber":49,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.storage.session.exceptions.FileFormatException;"},{"lineNumber":50,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":51,"author":{"gitID":"yuhongherald"},"content":"//@@uathor yuhongherald"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"/**"},{"lineNumber":53,"author":{"gitID":"yuhongherald"},"content":" * A data structure used to store header field information of a given excel sheet"},{"lineNumber":54,"author":{"gitID":"yuhongherald"},"content":" */"},{"lineNumber":55,"author":{"gitID":"yuhongherald"},"content":"public class SheetWithHeaderFields implements Iterable\u003cJobEntry\u003e {"},{"lineNumber":56,"author":{"gitID":"yuhongherald"},"content":"    public static final String SEPARATOR \u003d \", \";"},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    private static final String ERROR_MESSAGE_EMPTY_SHEET \u003d \"Sheet %d contains no valid job entries!\";"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":"    private static final String ERROR_MESSAGE_CORRUPT_JOB_ENTRY \u003d \"The following fields are corrupt: \";"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    private final Sheet sheet;"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e compulsoryFields;"},{"lineNumber":63,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e commentFields;"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"    private final HashMap\u003cString, RowData\u003e optionalFields;"},{"lineNumber":65,"author":{"gitID":"yuhongherald"},"content":"    private final JobEntry firstJobEntry;"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":67,"author":{"gitID":"yuhongherald"},"content":"    SheetWithHeaderFields(Sheet sheet, HashMap\u003cString, RowData\u003e compulsoryFields,"},{"lineNumber":68,"author":{"gitID":"yuhongherald"},"content":"                          HashMap\u003cString, RowData\u003e commentFields,"},{"lineNumber":69,"author":{"gitID":"yuhongherald"},"content":"                          HashMap\u003cString, RowData\u003e optionalFields) throws FileFormatException {"},{"lineNumber":70,"author":{"gitID":"yuhongherald"},"content":"        this.sheet \u003d sheet;"},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"        this.compulsoryFields \u003d new HashMap\u003c\u003e(compulsoryFields);"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"        this.commentFields \u003d new HashMap\u003c\u003e(commentFields);"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"        this.optionalFields \u003d new HashMap\u003c\u003e(optionalFields);"},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"        firstJobEntry \u003d getFirstJobEntry();"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"        if (firstJobEntry \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"            throw new FileFormatException(getEmptySheetMessage());"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"     * Marks job at (@code row) as rejected"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"    public void rejectJobEntry(int row) {"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":"        int index \u003d commentFields.get(APPROVAL_STATUS).getStartIndex();"},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"        Cell cell \u003d sheet.getRow(row).createCell(index);"},{"lineNumber":86,"author":{"gitID":"yuhongherald"},"content":"        Font fontStyle \u003d sheet.getWorkbook().createFont();"},{"lineNumber":87,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setBold(true);"},{"lineNumber":88,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setFontHeightInPoints((short) 14);"},{"lineNumber":89,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setColor(IndexedColors.RED.getIndex());"},{"lineNumber":90,"author":{"gitID":"yuhongherald"},"content":"        CellStyle cellStyle \u003d sheet.getWorkbook().createCellStyle();"},{"lineNumber":91,"author":{"gitID":"yuhongherald"},"content":"        cellStyle.setFont(fontStyle);"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"        cell.setCellValue(\"rejected\");"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":95,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"yuhongherald"},"content":"     * Marks job at (@code row) as accepted"},{"lineNumber":97,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"yuhongherald"},"content":"    public void approveJobEntry(int row) {"},{"lineNumber":99,"author":{"gitID":"yuhongherald"},"content":"        int index \u003d commentFields.get(APPROVAL_STATUS).getStartIndex();"},{"lineNumber":100,"author":{"gitID":"yuhongherald"},"content":"        Cell cell \u003d sheet.getRow(row).createCell(index);"},{"lineNumber":101,"author":{"gitID":"yuhongherald"},"content":"        Font fontStyle \u003d sheet.getWorkbook().createFont();"},{"lineNumber":102,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setBold(true);"},{"lineNumber":103,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setFontHeightInPoints((short) 14);"},{"lineNumber":104,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setColor(IndexedColors.GREEN.getIndex());"},{"lineNumber":105,"author":{"gitID":"yuhongherald"},"content":"        CellStyle cellStyle \u003d sheet.getWorkbook().createCellStyle();"},{"lineNumber":106,"author":{"gitID":"yuhongherald"},"content":"        cellStyle.setFont(fontStyle);"},{"lineNumber":107,"author":{"gitID":"yuhongherald"},"content":"        cell.setCellValue(\"accepted\");"},{"lineNumber":108,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":110,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"yuhongherald"},"content":"     * Appends a comment for job at (@oode row)"},{"lineNumber":112,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"yuhongherald"},"content":"    public void commentJobEntry(int row, String comment) {"},{"lineNumber":114,"author":{"gitID":"yuhongherald"},"content":"        int index \u003d commentFields.get(COMMENTS).getStartIndex();"},{"lineNumber":115,"author":{"gitID":"yuhongherald"},"content":"        Cell cell \u003d sheet.getRow(row).createCell(index);"},{"lineNumber":116,"author":{"gitID":"yuhongherald"},"content":"        Font fontStyle \u003d sheet.getWorkbook().createFont();"},{"lineNumber":117,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setBold(true);"},{"lineNumber":118,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setFontHeightInPoints((short) 14);"},{"lineNumber":119,"author":{"gitID":"yuhongherald"},"content":"        fontStyle.setColor(IndexedColors.BLUE.getIndex());"},{"lineNumber":120,"author":{"gitID":"yuhongherald"},"content":"        CellStyle cellStyle \u003d sheet.getWorkbook().createCellStyle();"},{"lineNumber":121,"author":{"gitID":"yuhongherald"},"content":"        cellStyle.setFont(fontStyle);"},{"lineNumber":122,"author":{"gitID":"yuhongherald"},"content":"        cell.setCellValue(comment);"},{"lineNumber":123,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":125,"author":{"gitID":"yuhongherald"},"content":"    public int getSheetIndex() {"},{"lineNumber":126,"author":{"gitID":"yuhongherald"},"content":"        return sheet.getWorkbook().getSheetIndex(sheet);"},{"lineNumber":127,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":129,"author":{"gitID":"yuhongherald"},"content":"    public String getEmptySheetMessage() {"},{"lineNumber":130,"author":{"gitID":"yuhongherald"},"content":"        return String.format(ERROR_MESSAGE_EMPTY_SHEET, getSheetIndex());"},{"lineNumber":131,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":133,"author":{"gitID":"yuhongherald"},"content":"    public String getCorruptedFieldsMessage(Person client, VehicleNumber vehicleNumber, Employee employee) {"},{"lineNumber":134,"author":{"gitID":"yuhongherald"},"content":"        StringBuilder corruptedComponents \u003d new StringBuilder(ERROR_MESSAGE_CORRUPT_JOB_ENTRY);"},{"lineNumber":135,"author":{"gitID":"yuhongherald"},"content":"        if (client \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(\"client\");"},{"lineNumber":137,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(SEPARATOR);"},{"lineNumber":138,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"yuhongherald"},"content":"        if (vehicleNumber \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(\"vehicle number\");"},{"lineNumber":141,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(SEPARATOR);"},{"lineNumber":142,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"yuhongherald"},"content":"        if (employee \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(\"employee\");"},{"lineNumber":145,"author":{"gitID":"yuhongherald"},"content":"            corruptedComponents.append(SEPARATOR);"},{"lineNumber":146,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"yuhongherald"},"content":"        return corruptedComponents.toString();"},{"lineNumber":148,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":150,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"yuhongherald"},"content":"     * Looks for first (@code JobEtnry) with no missing fields and returns it"},{"lineNumber":152,"author":{"gitID":"yuhongherald"},"content":"     * @throws FileFormatException if no valid job entries"},{"lineNumber":153,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"yuhongherald"},"content":"    private JobEntry getFirstJobEntry() throws FileFormatException {"},{"lineNumber":155,"author":{"gitID":"yuhongherald"},"content":"        Person client;"},{"lineNumber":156,"author":{"gitID":"yuhongherald"},"content":"        VehicleNumber vehicleNumber;"},{"lineNumber":157,"author":{"gitID":"yuhongherald"},"content":"        Employee employee;"},{"lineNumber":158,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":159,"author":{"gitID":"yuhongherald"},"content":"        UniqueEmployeeList employeeList;"},{"lineNumber":160,"author":{"gitID":"yuhongherald"},"content":"        Status status;"},{"lineNumber":161,"author":{"gitID":"yuhongherald"},"content":"        RemarkList remarkList;"},{"lineNumber":162,"author":{"gitID":"yuhongherald"},"content":"        for (int i \u003d sheet.getFirstRowNum() + 1; i \u003c\u003d sheet.getLastRowNum(); i++) {"},{"lineNumber":163,"author":{"gitID":"yuhongherald"},"content":"            client \u003d getClient(i);"},{"lineNumber":164,"author":{"gitID":"yuhongherald"},"content":"            vehicleNumber \u003d getVehicleNumber(i);"},{"lineNumber":165,"author":{"gitID":"yuhongherald"},"content":"            employee \u003d getEmployee(i);"},{"lineNumber":166,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":167,"author":{"gitID":"yuhongherald"},"content":"            if (client \u003d\u003d null || vehicleNumber \u003d\u003d null || employee \u003d\u003d null) {"},{"lineNumber":168,"author":{"gitID":"yuhongherald"},"content":"                rejectJobEntry(i);"},{"lineNumber":169,"author":{"gitID":"yuhongherald"},"content":"                commentJobEntry(i, getCorruptedFieldsMessage(client, vehicleNumber, employee));"},{"lineNumber":170,"author":{"gitID":"yuhongherald"},"content":"                continue;"},{"lineNumber":171,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":172,"author":{"gitID":"yuhongherald"},"content":"            employeeList \u003d new UniqueEmployeeList();"},{"lineNumber":173,"author":{"gitID":"yuhongherald"},"content":"            try {"},{"lineNumber":174,"author":{"gitID":"yuhongherald"},"content":"                employeeList.add(employee);"},{"lineNumber":175,"author":{"gitID":"yuhongherald"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":176,"author":{"gitID":"yuhongherald"},"content":"                e.printStackTrace(); // should not happen"},{"lineNumber":177,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"yuhongherald"},"content":"            status \u003d getStatus(i);"},{"lineNumber":179,"author":{"gitID":"yuhongherald"},"content":"            remarkList \u003d getRemarks(i);"},{"lineNumber":180,"author":{"gitID":"yuhongherald"},"content":"            return new JobEntry(client, vehicleNumber, new JobNumber(), new Date(), employeeList, status, remarkList,"},{"lineNumber":181,"author":{"gitID":"yuhongherald"},"content":"                getSheetIndex(), i, \"\");"},{"lineNumber":182,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"yuhongherald"},"content":"        throw new FileFormatException(getEmptySheetMessage());"},{"lineNumber":184,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":186,"author":{"gitID":"yuhongherald"},"content":"    private Person getClient(int rowNumber) {"},{"lineNumber":187,"author":{"gitID":"yuhongherald"},"content":"        String name \u003d readFirstData(compulsoryFields.get(CLIENT_NAME), rowNumber);"},{"lineNumber":188,"author":{"gitID":"yuhongherald"},"content":"        String phone \u003d readFirstData(compulsoryFields.get(CLIENT_PHONE), rowNumber);"},{"lineNumber":189,"author":{"gitID":"yuhongherald"},"content":"        String email \u003d readFirstData(compulsoryFields.get(CLIENT_EMAIL), rowNumber);"},{"lineNumber":190,"author":{"gitID":"yuhongherald"},"content":"        if (isValidName(name) \u0026\u0026 isValidPhone(phone) \u0026\u0026 isValidEmail(email)) {"},{"lineNumber":191,"author":{"gitID":"yuhongherald"},"content":"            return new Person(new Name(name), new Phone(phone), new Email(email));"},{"lineNumber":192,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"yuhongherald"},"content":"        return null;"},{"lineNumber":194,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":196,"author":{"gitID":"yuhongherald"},"content":"    private VehicleNumber getVehicleNumber(int rowNumber) {"},{"lineNumber":197,"author":{"gitID":"yuhongherald"},"content":"        String vehicleNumber \u003d readFirstData(compulsoryFields.get(VEHICLE_NUMBER), rowNumber);"},{"lineNumber":198,"author":{"gitID":"yuhongherald"},"content":"        if (vehicleNumber !\u003d null \u0026\u0026 !vehicleNumber.isEmpty() \u0026\u0026 isValidVehicleNumber(vehicleNumber)) {"},{"lineNumber":199,"author":{"gitID":"yuhongherald"},"content":"            return new VehicleNumber(vehicleNumber);"},{"lineNumber":200,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"yuhongherald"},"content":"        return null;"},{"lineNumber":202,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":204,"author":{"gitID":"yuhongherald"},"content":"    private Employee getEmployee(int rowNumber) {"},{"lineNumber":205,"author":{"gitID":"yuhongherald"},"content":"        String name \u003d readFirstData(compulsoryFields.get(EMPLOYEE_NAME), rowNumber);"},{"lineNumber":206,"author":{"gitID":"yuhongherald"},"content":"        String phone \u003d readFirstData(compulsoryFields.get(EMPLOYEE_PHONE), rowNumber);"},{"lineNumber":207,"author":{"gitID":"yuhongherald"},"content":"        String email \u003d readFirstData(compulsoryFields.get(EMPLOYEE_EMAIL), rowNumber);"},{"lineNumber":208,"author":{"gitID":"yuhongherald"},"content":"        if (isValidName(name) \u0026\u0026 isValidPhone(phone) \u0026\u0026 isValidEmail(email)) {"},{"lineNumber":209,"author":{"gitID":"yuhongherald"},"content":"            return new Employee(new Name(name), new Phone(phone), new Email(email), Collections.emptySet());"},{"lineNumber":210,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"yuhongherald"},"content":"        return null;"},{"lineNumber":212,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":214,"author":{"gitID":"yuhongherald"},"content":"    private Status getStatus(int rowNumber) {"},{"lineNumber":215,"author":{"gitID":"yuhongherald"},"content":"        RowData optionalStatus \u003d optionalFields.get(STATUS);"},{"lineNumber":216,"author":{"gitID":"yuhongherald"},"content":"        if (optionalStatus \u003d\u003d null) {"},{"lineNumber":217,"author":{"gitID":"yuhongherald"},"content":"            return new Status(STATUS_ONGOING);"},{"lineNumber":218,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"yuhongherald"},"content":"        String status \u003d readFirstData(optionalStatus, rowNumber).toLowerCase();"},{"lineNumber":220,"author":{"gitID":"yuhongherald"},"content":"        if (status.equals((STATUS_CLOSED))) {"},{"lineNumber":221,"author":{"gitID":"yuhongherald"},"content":"            return new Status(status);"},{"lineNumber":222,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"yuhongherald"},"content":"        return new Status(STATUS_ONGOING);"},{"lineNumber":224,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":226,"author":{"gitID":"yuhongherald"},"content":"    private RemarkList getRemarks(int rowNumber) {"},{"lineNumber":227,"author":{"gitID":"yuhongherald"},"content":"        RowData optionalRemarks \u003d optionalFields.get(REMARKS);"},{"lineNumber":228,"author":{"gitID":"yuhongherald"},"content":"        if (optionalRemarks \u003d\u003d null) {"},{"lineNumber":229,"author":{"gitID":"yuhongherald"},"content":"            return new RemarkList();"},{"lineNumber":230,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"yuhongherald"},"content":"        RemarkList remarkList \u003d new RemarkList();"},{"lineNumber":232,"author":{"gitID":"yuhongherald"},"content":"        ArrayList\u003cString\u003e remarks \u003d readListData(optionalFields.get(REMARKS), rowNumber);"},{"lineNumber":233,"author":{"gitID":"yuhongherald"},"content":"        for (String remark : remarks) {"},{"lineNumber":234,"author":{"gitID":"yuhongherald"},"content":"            if (isValidRemark(remark)) {"},{"lineNumber":235,"author":{"gitID":"yuhongherald"},"content":"                remarkList.add(new Remark(remark));"},{"lineNumber":236,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":237,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"yuhongherald"},"content":"        return remarkList;"},{"lineNumber":239,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":241,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"yuhongherald"},"content":"     * Reads single entry (@ocde rowDta) from row (@code rowNumber)"},{"lineNumber":243,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"yuhongherald"},"content":"    private String readFirstData(RowData rowData, int rowNumber) {"},{"lineNumber":245,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(rowData);"},{"lineNumber":246,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"yuhongherald"},"content":"            return rowData.readDataFromSheet(sheet, rowNumber).get(0);"},{"lineNumber":248,"author":{"gitID":"yuhongherald"},"content":"        } catch (DataIndexOutOfBoundsException e) {"},{"lineNumber":249,"author":{"gitID":"yuhongherald"},"content":"            throw new IndexOutOfBoundsException(e.getMessage()); // should be within bounds"},{"lineNumber":250,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":253,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"yuhongherald"},"content":"     * Reads all entries (@ocde rowDta) from row (@code rowNumber)"},{"lineNumber":255,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"yuhongherald"},"content":"    private ArrayList\u003cString\u003e readListData(RowData rowData, int rowNumber) {"},{"lineNumber":257,"author":{"gitID":"yuhongherald"},"content":"        requireNonNull(rowData);"},{"lineNumber":258,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":259,"author":{"gitID":"yuhongherald"},"content":"            return rowData.readDataFromSheet(sheet, rowNumber);"},{"lineNumber":260,"author":{"gitID":"yuhongherald"},"content":"        } catch (DataIndexOutOfBoundsException e) {"},{"lineNumber":261,"author":{"gitID":"yuhongherald"},"content":"            throw new IndexOutOfBoundsException(e.getMessage()); // should be within bounds"},{"lineNumber":262,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"yuhongherald"},"content":"     * Retrieves the job at (@code rowNumber), and missing details from those in first job entry."},{"lineNumber":266,"author":{"gitID":"yuhongherald"},"content":"     * Adds missing detail in remarks."},{"lineNumber":267,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"yuhongherald"},"content":"    private JobEntry getJobEntryAt(int rowNumber, JobEntry previousEntry) {"},{"lineNumber":269,"author":{"gitID":"yuhongherald"},"content":"        Person client \u003d getClient(rowNumber);"},{"lineNumber":270,"author":{"gitID":"yuhongherald"},"content":"        VehicleNumber vehicleNumber \u003d getVehicleNumber(rowNumber);"},{"lineNumber":271,"author":{"gitID":"yuhongherald"},"content":"        Employee employee \u003d getEmployee(rowNumber);"},{"lineNumber":272,"author":{"gitID":"yuhongherald"},"content":"        String importMessage \u003d \"\";"},{"lineNumber":273,"author":{"gitID":"yuhongherald"},"content":"        if (client \u003d\u003d null || vehicleNumber \u003d\u003d null || employee \u003d\u003d null) {"},{"lineNumber":274,"author":{"gitID":"yuhongherald"},"content":"            importMessage \u003d getCorruptedFieldsMessage(client, vehicleNumber, employee);"},{"lineNumber":275,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"yuhongherald"},"content":"        // commentJobEntry(rowNumber, importMessage); moved to SessionData when reviewing"},{"lineNumber":277,"author":{"gitID":"yuhongherald"},"content":"        if (client \u003d\u003d null) {"},{"lineNumber":278,"author":{"gitID":"yuhongherald"},"content":"            client \u003d previousEntry.getClient();"},{"lineNumber":279,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"yuhongherald"},"content":"        if (vehicleNumber \u003d\u003d null) {"},{"lineNumber":281,"author":{"gitID":"yuhongherald"},"content":"            vehicleNumber \u003d previousEntry.getVehicleNumber();"},{"lineNumber":282,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"yuhongherald"},"content":"        if (employee \u003d\u003d null) {"},{"lineNumber":284,"author":{"gitID":"yuhongherald"},"content":"            employee \u003d previousEntry.getAssignedEmployees().iterator().next();"},{"lineNumber":285,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":287,"author":{"gitID":"yuhongherald"},"content":"        UniqueEmployeeList employeeList \u003d new UniqueEmployeeList();"},{"lineNumber":288,"author":{"gitID":"yuhongherald"},"content":"        try {"},{"lineNumber":289,"author":{"gitID":"yuhongherald"},"content":"            employeeList.add(employee);"},{"lineNumber":290,"author":{"gitID":"yuhongherald"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":291,"author":{"gitID":"yuhongherald"},"content":"            e.printStackTrace(); // should not happen"},{"lineNumber":292,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"yuhongherald"},"content":"        Status status \u003d getStatus(rowNumber);"},{"lineNumber":294,"author":{"gitID":"yuhongherald"},"content":"        RemarkList remarkList \u003d getRemarks(rowNumber);"},{"lineNumber":295,"author":{"gitID":"yuhongherald"},"content":"        return new JobEntry(client, vehicleNumber, new JobNumber(), new Date(), employeeList, status, remarkList,"},{"lineNumber":296,"author":{"gitID":"yuhongherald"},"content":"                sheet.getWorkbook().getSheetIndex(sheet), rowNumber, importMessage);"},{"lineNumber":297,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":299,"author":{"gitID":"yuhongherald"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"yuhongherald"},"content":"    public Iterator\u003cJobEntry\u003e iterator() {"},{"lineNumber":301,"author":{"gitID":"yuhongherald"},"content":"        return new Iterator\u003cJobEntry\u003e() {"},{"lineNumber":302,"author":{"gitID":"yuhongherald"},"content":"            private int currentRow \u003d firstJobEntry.getRowNumber();"},{"lineNumber":303,"author":{"gitID":"yuhongherald"},"content":"            private JobEntry previousEntry;"},{"lineNumber":304,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":305,"author":{"gitID":"yuhongherald"},"content":"            @Override public boolean hasNext() {"},{"lineNumber":306,"author":{"gitID":"yuhongherald"},"content":"                return (currentRow \u003c\u003d sheet.getLastRowNum());"},{"lineNumber":307,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":308,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":309,"author":{"gitID":"yuhongherald"},"content":"            @Override public JobEntry next() {"},{"lineNumber":310,"author":{"gitID":"yuhongherald"},"content":"                if (!hasNext()) {"},{"lineNumber":311,"author":{"gitID":"yuhongherald"},"content":"                    return null;"},{"lineNumber":312,"author":{"gitID":"yuhongherald"},"content":"                }"},{"lineNumber":313,"author":{"gitID":"yuhongherald"},"content":"                previousEntry \u003d getJobEntryAt(currentRow, previousEntry);"},{"lineNumber":314,"author":{"gitID":"yuhongherald"},"content":"                currentRow++;"},{"lineNumber":315,"author":{"gitID":"yuhongherald"},"content":"                return previousEntry;"},{"lineNumber":316,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":317,"author":{"gitID":"yuhongherald"},"content":"        };"},{"lineNumber":318,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"yuhongherald"},"content":"}"}],"authorContributionMap":{"whenzei":5,"-":9,"yuhongherald":305}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":" * Represents a Employee\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" *"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"            \"Employee names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid employee name."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":3,"-":57}},{"path":"src/main/java/seedu/address/model/remark/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"package seedu.address.model.remark;"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":" * Represents a remark for a job in the car servicing manager"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_REMARKS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"            \"Remark can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"     * Remark argument should be anything, except just whitespace or newline"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"/.*\\\\S.*/\";"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"     * Constructs a {@code Remark}."},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"     * @param remark A valid remark."},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    public Remark(String remark) {"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"        requireNonNull(remark);"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARKS_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"        this.value \u003d remark;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        return test.matches(REMARK_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        return value;"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        return value.hashCode();"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":55}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    ObservableList\u003cEmployee\u003e getEmployeeList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the jobs list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getJobList();"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"     * Returns an unmodifiable view of the archive jobs list."},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"    ObservableList\u003cJob\u003e getArchiveJobList();"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":2,"Richardson0694":6,"-":27}},{"path":"src/main/java/seedu/address/model/remark/RemarkList.java","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"package seedu.address.model.remark;"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":" * Represents a list of remarks that enforces no nulls"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"public class RemarkList implements Iterable\u003cRemark\u003e {"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    private final ObservableList\u003cRemark\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"     * Constructs empty RemarkList."},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    public RemarkList() {}"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"     * Creates a RemarkList using given remarks."},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"     * Enforces no nulls."},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    public RemarkList(Set\u003cRemark\u003e remarks) {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(remarks);"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        internalList.addAll(remarks);"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"     * Returns all remarks in this list as a Set."},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"    public Set\u003cRemark\u003e toSet() {"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"     * Replaces the remarks in this list with those in the argument remark list"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"     * @param remarks"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    public void setRemarks(Set\u003cRemark\u003e remarks) {"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(remarks);"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        internalList.setAll(remarks);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"     * Adds a Remark to the list."},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    public void add(Remark toAdd) {"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toAdd);"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        internalList.add(toAdd);"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    public Iterator\u003cRemark\u003e iterator() {"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        return internalList.iterator();"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"     * Returns the backing list as an unmodifiable {@code RemarkList}."},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cRemark\u003e asObservableList() {"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"                || (other instanceof RemarkList // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"                        \u0026\u0026 this.internalList.equals(((RemarkList) other).internalList));"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        return internalList.hashCode();"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":82,"-":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.CommandWords;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"    private String archiveJobFilePath \u003d \"data/archivejob.xml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":17,"author":{"gitID":"yuhongherald"},"content":"    private CommandWords commandWords;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    private String themeName;"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    private String extensionName;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"        setGuiSettingsDefault();"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"        setDefaultExtensionName();"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        setDefaultThemeName();"},{"lineNumber":25,"author":{"gitID":"yuhongherald"},"content":"        commandWords \u003d new CommandWords();"},{"lineNumber":26,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"     * Checks the integrity of the user preferences file and reinitializes any corrupted fields."},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":"    public void checkIntegrity() {"},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"        if (commandWords \u003d\u003d null) {"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"            commandWords \u003d new CommandWords();"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"yuhongherald"},"content":"        if (guiSettings \u003d\u003d null) {"},{"lineNumber":36,"author":{"gitID":"yuhongherald"},"content":"            setGuiSettingsDefault();"},{"lineNumber":37,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"        commandWords.checkIntegrity();"},{"lineNumber":39,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":41,"author":{"gitID":"yuhongherald"},"content":"    public CommandWords getCommandWords() {"},{"lineNumber":42,"author":{"gitID":"yuhongherald"},"content":"        return commandWords \u003d\u003d null ? new CommandWords() : commandWords;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"    public String getThemeName() {"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        return themeName;"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    public String getExtensionName() {"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"        return extensionName;"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"    public void setThemeName(String themeName) {"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"        this.themeName \u003d themeName;"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    public void setExtensionName(String extensionName) {"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"        this.extensionName \u003d  extensionName;"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"    public void setDefaultThemeName() {"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        this.themeName \u003d \"DarkTheme\";"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"    public void setDefaultExtensionName() {"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"        this.extensionName \u003d \"ExtensionsDark\";"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"    public void setGuiSettingsDefault() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Richardson0694"},"content":"    public String getArchiveJobFilePath() {"},{"lineNumber":95,"author":{"gitID":"Richardson0694"},"content":"        return archiveJobFilePath;"},{"lineNumber":96,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":98,"author":{"gitID":"Richardson0694"},"content":"    public void setArchiveJobFilePath(String archiveJobFilePath) {"},{"lineNumber":99,"author":{"gitID":"Richardson0694"},"content":"        this.archiveJobFilePath \u003d archiveJobFilePath;"},{"lineNumber":100,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName)"},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(themeName, o.themeName)"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 Objects.equals(extensionName, o.extensionName);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":139,"author":{"gitID":"whenzei"},"content":"        sb.append(\"\\nTheme : \" + themeName);"},{"lineNumber":140,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":34,"Richardson0694":9,"-":79,"yuhongherald":22}},{"path":"src/main/java/seedu/address/model/person/Employee.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":" * Represents a Employee in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" *"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"public class Employee extends Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Employee(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        super(name, phone, email);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, tags);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof Employee)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        Employee otherEmployee \u003d (Employee) other;"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        return otherEmployee.getName().equals(this.getName())"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherEmployee.getPhone().equals(this.getPhone())"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherEmployee.getEmail().equals(this.getEmail());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, tags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":6,"-":67}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":" * Represents a person in the car servicing manager"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"public class Person {"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"    protected final Name name;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    protected final Phone phone;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"    protected final Email email;"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"     * Every field must be present and not null."},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .append(getEmail());"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        return builder.toString();"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":24,"-":46}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"Richardson0694"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Date;"},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobList;"},{"lineNumber":20,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":21,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.Status;"},{"lineNumber":22,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.job.VehicleNumber;"},{"lineNumber":23,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.person.Customer;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    private final UniqueEmployeeList employees;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final JobList jobs;"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":"    private JobList archiveJobs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        employees \u003d new UniqueEmployeeList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        jobs \u003d new JobList();"},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"        archiveJobs \u003d new JobList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"     * Creates an AddressBook using the Persons, Jobs and Tags in the {@code toBeCopied}"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":64,"author":{"gitID":"yuhongherald"},"content":"        // For initial testing, a random job will be created for each employee"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":66,"author":{"gitID":"yuhongherald"},"content":"        //createRandomJobForEachEmployee();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        this.employees.setEmployees(employees);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setJobs(List\u003cJob\u003e jobs) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.jobs.setJobs(jobs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"        List\u003cEmployee\u003e syncedEmployeeList \u003d newData.getEmployeeList().stream()"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitID":"yuhongherald"},"content":"        List\u003cJob\u003e syncedJobList \u003d newData.getJobList();"},{"lineNumber":93,"author":{"gitID":"yuhongherald"},"content":"        setJobs(syncedJobList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"            setEmployees(syncedEmployeeList);"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate employees\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    //// job-level operations"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"    //@@author whenzei"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"     * Adds a job to CarviciM."},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"    public void addJob(Job job) {"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"        jobs.add(job);"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":112,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":113,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Richardson0694"},"content":"     * Archives job entries in CarviciM."},{"lineNumber":115,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"Richardson0694"},"content":"    public void archiveJob(DateRange dateRange) {"},{"lineNumber":117,"author":{"gitID":"Richardson0694"},"content":"        archiveJobs \u003d new JobList();"},{"lineNumber":118,"author":{"gitID":"Richardson0694"},"content":"        Iterator\u003cJob\u003e iterator \u003d jobs.iterator();"},{"lineNumber":119,"author":{"gitID":"Richardson0694"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":120,"author":{"gitID":"Richardson0694"},"content":"            Job job \u003d iterator.next();"},{"lineNumber":121,"author":{"gitID":"Richardson0694"},"content":"            Date date \u003d job.getDate();"},{"lineNumber":122,"author":{"gitID":"Richardson0694"},"content":"            Date startDate \u003d dateRange.getStartDate();"},{"lineNumber":123,"author":{"gitID":"Richardson0694"},"content":"            Date endDate \u003d dateRange.getEndDate();"},{"lineNumber":124,"author":{"gitID":"Richardson0694"},"content":"            if (dateRange.compareTo(date, startDate) \u003e\u003d 0 \u0026\u0026 dateRange.compareTo(date, endDate) \u003c\u003d 0) {"},{"lineNumber":125,"author":{"gitID":"Richardson0694"},"content":"                archiveJobs.add(job);"},{"lineNumber":126,"author":{"gitID":"Richardson0694"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":130,"author":{"gitID":"Richardson0694"},"content":"    //// employee-level operations"},{"lineNumber":131,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":132,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"Richardson0694"},"content":"     * Adds a employee to the address book."},{"lineNumber":134,"author":{"gitID":"Richardson0694"},"content":"     * Also checks the new employee\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":135,"author":{"gitID":"Richardson0694"},"content":"     * and updates the Tag objects in the employee to point to those in {@link #tags}."},{"lineNumber":136,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"Richardson0694"},"content":"     * @throws DuplicateEmployeeException if an equivalent employee already exists."},{"lineNumber":138,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"Richardson0694"},"content":"    public void addEmployee(Employee p) throws DuplicateEmployeeException {"},{"lineNumber":140,"author":{"gitID":"Richardson0694"},"content":"        Employee employee \u003d syncWithMasterTagList(p);"},{"lineNumber":141,"author":{"gitID":"Richardson0694"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":142,"author":{"gitID":"Richardson0694"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":143,"author":{"gitID":"Richardson0694"},"content":"        // in the employee list."},{"lineNumber":144,"author":{"gitID":"Richardson0694"},"content":"        employees.add(employee);"},{"lineNumber":145,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":147,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Richardson0694"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":149,"author":{"gitID":"Richardson0694"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":150,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"Richardson0694"},"content":"     * @throws DuplicateEmployeeException if updating the employee\u0027s details causes the employee to be equivalent to"},{"lineNumber":152,"author":{"gitID":"Richardson0694"},"content":"     *      another existing person in the list."},{"lineNumber":153,"author":{"gitID":"Richardson0694"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":154,"author":{"gitID":"Richardson0694"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"Richardson0694"},"content":"     * @see #syncWithMasterTagList(Employee)"},{"lineNumber":156,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Richardson0694"},"content":"    public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":158,"author":{"gitID":"Richardson0694"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":159,"author":{"gitID":"Richardson0694"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":160,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":161,"author":{"gitID":"Richardson0694"},"content":"        Employee syncedEditedEmployee \u003d syncWithMasterTagList(editedEmployee);"},{"lineNumber":162,"author":{"gitID":"Richardson0694"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":163,"author":{"gitID":"Richardson0694"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":164,"author":{"gitID":"Richardson0694"},"content":"        // in the employee list."},{"lineNumber":165,"author":{"gitID":"Richardson0694"},"content":"        employees.setEmployee(target, syncedEditedEmployee);"},{"lineNumber":166,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":168,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"Richardson0694"},"content":"     *  Updates the master tag list to include tags in {@code employee} that are not in the list."},{"lineNumber":170,"author":{"gitID":"Richardson0694"},"content":"     *  @return a copy of this {@code employee} such that every tag in this employee points"},{"lineNumber":171,"author":{"gitID":"Richardson0694"},"content":"     *  to a Tag object in the master list."},{"lineNumber":172,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"Richardson0694"},"content":"    private Employee syncWithMasterTagList(Employee employee) {"},{"lineNumber":174,"author":{"gitID":"Richardson0694"},"content":"        final UniqueTagList employeeTags \u003d new UniqueTagList(employee.getTags());"},{"lineNumber":175,"author":{"gitID":"Richardson0694"},"content":"        tags.mergeFrom(employeeTags);"},{"lineNumber":176,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":177,"author":{"gitID":"Richardson0694"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":178,"author":{"gitID":"Richardson0694"},"content":"        // used for checking employee tag references"},{"lineNumber":179,"author":{"gitID":"Richardson0694"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"Richardson0694"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":181,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":182,"author":{"gitID":"Richardson0694"},"content":"        // Rebuild the list of employee tags to point to the relevant tags in the master tag list."},{"lineNumber":183,"author":{"gitID":"Richardson0694"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":184,"author":{"gitID":"Richardson0694"},"content":"        employeeTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":185,"author":{"gitID":"Richardson0694"},"content":"        return new Employee(employee.getName(), employee.getPhone(), employee.getEmail(),"},{"lineNumber":186,"author":{"gitID":"Richardson0694"},"content":"                correctTagReferences);"},{"lineNumber":187,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":189,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Richardson0694"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":191,"author":{"gitID":"Richardson0694"},"content":"     * @throws EmployeeNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":192,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"Richardson0694"},"content":"    public boolean removeEmployee(Employee key) throws EmployeeNotFoundException {"},{"lineNumber":194,"author":{"gitID":"Richardson0694"},"content":"        if (employees.remove(key)) {"},{"lineNumber":195,"author":{"gitID":"Richardson0694"},"content":"            return true;"},{"lineNumber":196,"author":{"gitID":"Richardson0694"},"content":"        } else {"},{"lineNumber":197,"author":{"gitID":"Richardson0694"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":198,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":201,"author":{"gitID":"Richardson0694"},"content":"    //// tag-level operations"},{"lineNumber":202,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":203,"author":{"gitID":"Richardson0694"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":204,"author":{"gitID":"Richardson0694"},"content":"        tags.add(t);"},{"lineNumber":205,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":207,"author":{"gitID":"Richardson0694"},"content":"    //@@author richardson0694"},{"lineNumber":208,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"Richardson0694"},"content":"     * Sort all employees\u0027 name in list alphabetically."},{"lineNumber":210,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"Richardson0694"},"content":"    public UniqueEmployeeList sortList() {"},{"lineNumber":212,"author":{"gitID":"Richardson0694"},"content":"        employees.sortName(new Comparator\u003cEmployee\u003e() {"},{"lineNumber":213,"author":{"gitID":"Richardson0694"},"content":"            @Override"},{"lineNumber":214,"author":{"gitID":"Richardson0694"},"content":"            public int compare(Employee employee1, Employee employee2) {"},{"lineNumber":215,"author":{"gitID":"Richardson0694"},"content":"                return employee1.getName().toString().compareToIgnoreCase(employee2.getName().toString());"},{"lineNumber":216,"author":{"gitID":"Richardson0694"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"Richardson0694"},"content":"        });"},{"lineNumber":218,"author":{"gitID":"Richardson0694"},"content":"        return employees;"},{"lineNumber":219,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":221,"author":{"gitID":"yuhongherald"},"content":"    //@@author yuhongherald"},{"lineNumber":222,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"yuhongherald"},"content":"     * Generates a random job for each employee"},{"lineNumber":224,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"yuhongherald"},"content":"    private void createRandomJobForEachEmployee() {"},{"lineNumber":226,"author":{"gitID":"yuhongherald"},"content":"        Job newJob;"},{"lineNumber":227,"author":{"gitID":"yuhongherald"},"content":"        for (Employee employee : employees) {"},{"lineNumber":228,"author":{"gitID":"yuhongherald"},"content":"            Customer customer \u003d Customer.generateCustomer();"},{"lineNumber":229,"author":{"gitID":"yuhongherald"},"content":"            VehicleNumber vehicleNumber \u003d new VehicleNumber(\"SXX0000X\");"},{"lineNumber":230,"author":{"gitID":"yuhongherald"},"content":"            JobNumber jobNumber \u003d new JobNumber();"},{"lineNumber":231,"author":{"gitID":"yuhongherald"},"content":"            Date date \u003d new Date();"},{"lineNumber":232,"author":{"gitID":"yuhongherald"},"content":"            UniqueEmployeeList assignedEmployees \u003d new UniqueEmployeeList();"},{"lineNumber":233,"author":{"gitID":"yuhongherald"},"content":"            try {"},{"lineNumber":234,"author":{"gitID":"yuhongherald"},"content":"                assignedEmployees.add(employee);"},{"lineNumber":235,"author":{"gitID":"yuhongherald"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":236,"author":{"gitID":"yuhongherald"},"content":"                // we just ignore"},{"lineNumber":237,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":238,"author":{"gitID":"yuhongherald"},"content":"            Status status \u003d new Status(\"pending\");"},{"lineNumber":239,"author":{"gitID":"yuhongherald"},"content":"            RemarkList remarks \u003d new RemarkList();"},{"lineNumber":240,"author":{"gitID":"yuhongherald"},"content":"            newJob \u003d new Job(customer, vehicleNumber, jobNumber, date, assignedEmployees, status, remarks);"},{"lineNumber":241,"author":{"gitID":"yuhongherald"},"content":"            jobs.add(newJob);"},{"lineNumber":242,"author":{"gitID":"yuhongherald"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":245,"author":{"gitID":"yuhongherald"},"content":"    //// util methods"},{"lineNumber":246,"author":{"gitID":"yuhongherald"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":249,"author":{"gitID":"whenzei"},"content":"        return employees.asObservableList().size() + \" employees, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":254,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":255,"author":{"gitID":"whenzei"},"content":"        return employees.asObservableList();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return jobs.asObservableList();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"Richardson0694"},"content":"    public ObservableList\u003cJob\u003e getArchiveJobList() {"},{"lineNumber":270,"author":{"gitID":"Richardson0694"},"content":"        return archiveJobs.asObservableList();"},{"lineNumber":271,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":277,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.employees.equals(((AddressBook) other).employees)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":284,"author":{"gitID":"whenzei"},"content":"        return Objects.hash(employees, tags);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":25,"Richardson0694":118,"-":106,"yuhongherald":37}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yuhongherald"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"yuhongherald"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.CommandWords;"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobNumber;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ONE_AS_STRING \u003d \"1\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    private final FilteredList\u003cEmployee\u003e filteredEmployees;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cJob\u003e filteredJobs;"},{"lineNumber":38,"author":{"gitID":"yuhongherald"},"content":"    private final CommandWords commandWords;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        filteredEmployees \u003d new FilteredList\u003c\u003e(this.addressBook.getEmployeeList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        filteredJobs \u003d new FilteredList\u003c\u003e(this.addressBook.getJobList());"},{"lineNumber":52,"author":{"gitID":"yuhongherald"},"content":"        this.commandWords \u003d userPrefs.getCommandWords();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"    //@@author whenzei"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"     * Initializes the running job number based on the past job numbers."},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"    public void initJobNumber() {"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        if (filteredJobs.isEmpty()) {"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"            JobNumber.initialize(ONE_AS_STRING);"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"            return;"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        int largest \u003d filteredJobs.get(0).getJobNumber().asInteger();"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"        for (Job job : filteredJobs) {"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"            if (job.getJobNumber().asInteger() \u003e largest) {"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"                largest \u003d job.getJobNumber().asInteger();"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"        JobNumber.initialize(largest + 1);"},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"    public void resetData(ReadOnlyAddressBook newData, CommandWords newCommandWords) {"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"        addressBook.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        commandWords.resetData(newCommandWords);"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"    public CommandWords getCommandWords() {"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"        return commandWords;"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"    public String appendCommandKeyToMessage(String message) {"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        StringBuilder builder \u003d new StringBuilder(message);"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        builder.append(\"\\n\");"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        builder.append(commandWords.toString());"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        return builder.toString();"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"        return addressBook;"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":"    public synchronized void addJob(Job job) {"},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"        addressBook.addJob(job);"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":"        updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"    public synchronized void closeJob(Job target) throws JobNotFoundException {"},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"    public synchronized void archiveJob(DateRange dateRange) {"},{"lineNumber":121,"author":{"gitID":"whenzei"},"content":"        addressBook.archiveJob(dateRange);"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"    public synchronized void deletePerson(Employee target) throws EmployeeNotFoundException {"},{"lineNumber":127,"author":{"gitID":"whenzei"},"content":"        addressBook.removeEmployee(target);"},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":131,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"whenzei"},"content":"    public synchronized void addPerson(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"        addressBook.addEmployee(employee);"},{"lineNumber":134,"author":{"gitID":"whenzei"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":135,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":136,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":138,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"whenzei"},"content":"    public void addJobs(List\u003cJob\u003e jobs) {"},{"lineNumber":140,"author":{"gitID":"whenzei"},"content":"        for (Job job : jobs) {"},{"lineNumber":141,"author":{"gitID":"whenzei"},"content":"            addMissingEmployees(job.getAssignedEmployees());"},{"lineNumber":142,"author":{"gitID":"whenzei"},"content":"            addJob(job);"},{"lineNumber":143,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":146,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"whenzei"},"content":"    public void addMissingEmployees(Set\u003cEmployee\u003e employees) {"},{"lineNumber":148,"author":{"gitID":"whenzei"},"content":"        Iterator\u003cEmployee\u003e employeeIterator \u003d employees.iterator();"},{"lineNumber":149,"author":{"gitID":"whenzei"},"content":"        while (employeeIterator.hasNext()) {"},{"lineNumber":150,"author":{"gitID":"whenzei"},"content":"            try {"},{"lineNumber":151,"author":{"gitID":"whenzei"},"content":"                addPerson(employeeIterator.next());"},{"lineNumber":152,"author":{"gitID":"whenzei"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":153,"author":{"gitID":"whenzei"},"content":"                // discard the result"},{"lineNumber":154,"author":{"gitID":"whenzei"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":158,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"whenzei"},"content":"    public void updatePerson(Employee target, Employee editedEmployee)"},{"lineNumber":160,"author":{"gitID":"whenzei"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":161,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(target, editedEmployee);"},{"lineNumber":162,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":163,"author":{"gitID":"whenzei"},"content":"        addressBook.updateEmployee(target, editedEmployee);"},{"lineNumber":164,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":165,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":167,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"whenzei"},"content":"    public void sortPersonList() {"},{"lineNumber":169,"author":{"gitID":"whenzei"},"content":"        addressBook.sortList();"},{"lineNumber":170,"author":{"gitID":"whenzei"},"content":"        indicateAddressBookChanged();"},{"lineNumber":171,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":173,"author":{"gitID":"whenzei"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Employee List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":175,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"whenzei"},"content":"     * Returns an unmodifiable view of the list of {@code Employee} backed by the internal list of"},{"lineNumber":177,"author":{"gitID":"whenzei"},"content":"     * {@code addressBook}"},{"lineNumber":178,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredPersonList() {"},{"lineNumber":181,"author":{"gitID":"whenzei"},"content":"        return FXCollections.unmodifiableObservableList(filteredEmployees);"},{"lineNumber":182,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":184,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"whenzei"},"content":"    public void updateFilteredPersonList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":186,"author":{"gitID":"whenzei"},"content":"        requireNonNull(predicate);"},{"lineNumber":187,"author":{"gitID":"whenzei"},"content":"        filteredEmployees.setPredicate(predicate);"},{"lineNumber":188,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":190,"author":{"gitID":"whenzei"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":191,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":192,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"whenzei"},"content":"     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of"},{"lineNumber":194,"author":{"gitID":"whenzei"},"content":"     * {@code addressBook}"},{"lineNumber":195,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":198,"author":{"gitID":"whenzei"},"content":"        return FXCollections.unmodifiableObservableList(filteredJobs);"},{"lineNumber":199,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":201,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"whenzei"},"content":"    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":203,"author":{"gitID":"whenzei"},"content":"        requireNonNull(predicate);"},{"lineNumber":204,"author":{"gitID":"whenzei"},"content":"        filteredJobs.setPredicate(predicate);"},{"lineNumber":205,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":207,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":209,"author":{"gitID":"whenzei"},"content":"        // short circuit if same object"},{"lineNumber":210,"author":{"gitID":"whenzei"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":211,"author":{"gitID":"whenzei"},"content":"            return true;"},{"lineNumber":212,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":214,"author":{"gitID":"whenzei"},"content":"        // instanceof handles nulls"},{"lineNumber":215,"author":{"gitID":"whenzei"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":216,"author":{"gitID":"whenzei"},"content":"            return false;"},{"lineNumber":217,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":219,"author":{"gitID":"whenzei"},"content":"        // state check"},{"lineNumber":220,"author":{"gitID":"whenzei"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":221,"author":{"gitID":"whenzei"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":222,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 filteredEmployees.equals(other.filteredEmployees)"},{"lineNumber":223,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 filteredJobs.equals(other.filteredJobs)"},{"lineNumber":224,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 commandWords.equals(other.getCommandWords());"},{"lineNumber":225,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":227,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":174,"Richardson0694":1,"-":46,"yuhongherald":6}},{"path":"src/main/java/seedu/address/model/job/JobNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":" * Represent a job number in the servicing manager"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"public class JobNumber {"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"    private static int nextJobNumber;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"    public final String value;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    public JobNumber() {"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"        value \u003d Integer.toString(nextJobNumber);"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"        incrementNextJobNumber();"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public JobNumber(String jobNumber) {"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"        value \u003d jobNumber;"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"     * Initialize the next job number of the car servicing manager"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    public static void initialize(String arg) {"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        nextJobNumber \u003d Integer.parseInt(arg);"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    public static void initialize(int arg) {"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"        nextJobNumber \u003d arg;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    public static void incrementNextJobNumber() {"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"        nextJobNumber++;"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    public int asInteger() {"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        return Integer.parseInt(value);"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        return value;"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"                || (other instanceof JobNumber // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.value.equals(((JobNumber) other).value)); // state check"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":54,"-":2}},{"path":"src/main/java/seedu/address/model/job/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":3,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":" * Represents the status of a car servicing job"},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"public class Status {"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"    public static final String STATUS_ONGOING \u003d \"ongoing\";"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"    public static final String STATUS_CLOSED \u003d \"closed\";"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"    public Status(String value) {"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"        this.value \u003d value;"},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"        return value;"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.value.equals(((Status) other).value)); // state check"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"        return value.hashCode();"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":33}},{"path":"src/main/java/seedu/address/model/job/Job.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"whenzei"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.remark.RemarkList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":" * Represents a Job in the car servicing manager"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"public class Job {"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    protected final RemarkList remarks;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    private final Person client;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    private final VehicleNumber vehicleNumber;"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    private final JobNumber jobNumber;"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    private final Date date;"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    private final Status status;"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    private final UniqueEmployeeList assignedEmployees;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    public Job(Person client, VehicleNumber vehicleNumber, JobNumber jobNumber,"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"               Date date, UniqueEmployeeList assignedEmployees, Status status, RemarkList remarks) {"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(client, vehicleNumber, jobNumber, date, assignedEmployees, status);"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"        this.client \u003d client;"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        this.vehicleNumber \u003d vehicleNumber;"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        this.jobNumber \u003d jobNumber;"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        this.date \u003d date;"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        this.assignedEmployees \u003d assignedEmployees;"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        this.status \u003d status;"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    public JobNumber getJobNumber() {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        return jobNumber;"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public VehicleNumber getVehicleNumber() {"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        return vehicleNumber;"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    public Person getClient() {"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        return client;"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    public Date getDate() {"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"        return date;"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"    public Status getStatus() {"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        return status;"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"     * if modification is attempted."},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"    public Set\u003cEmployee\u003e getAssignedEmployees() {"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        return Collections.unmodifiableSet(assignedEmployees.toSet());"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    public ObservableList getAssignedEmployeesAsObservableList() {"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"        return assignedEmployees.asObservableList();"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"     * if modification is attempted."},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"    public Set\u003cRemark\u003e getRemarks() {"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        return Collections.unmodifiableSet(remarks.toSet());"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"        if (!(other instanceof Job)) {"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        Job otherJob \u003d (Job) other;"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        return otherJob.getClient().equals(this.getClient())"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getVehicleNumber().equals(this.getVehicleNumber())"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getJobNumber().equals(this.getJobNumber())"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getDate().equals(this.getDate())"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getAssignedEmployees().equals(this.getAssignedEmployees())"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getStatus().equals(this.getStatus())"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 otherJob.getRemarks().equals(this.getRemarks());"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"        return Objects.hash(client, vehicleNumber, jobNumber, date,"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"                assignedEmployees, status, remarks);"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":110,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitID":"whenzei"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"        builder.append(\"\\nJob Number: \")"},{"lineNumber":114,"author":{"gitID":"whenzei"},"content":"                .append(getJobNumber())"},{"lineNumber":115,"author":{"gitID":"whenzei"},"content":"                .append(\"[\" + getStatus() + \"]\")"},{"lineNumber":116,"author":{"gitID":"whenzei"},"content":"                .append(\" Start Date: \")"},{"lineNumber":117,"author":{"gitID":"whenzei"},"content":"                .append(getDate())"},{"lineNumber":118,"author":{"gitID":"whenzei"},"content":"                .append(\" \\nVehicle ID: \")"},{"lineNumber":119,"author":{"gitID":"whenzei"},"content":"                .append(getVehicleNumber())"},{"lineNumber":120,"author":{"gitID":"whenzei"},"content":"                .append(\" Client: \")"},{"lineNumber":121,"author":{"gitID":"whenzei"},"content":"                .append(getClient())"},{"lineNumber":122,"author":{"gitID":"whenzei"},"content":"                .append(\" \\nRemarks: \");"},{"lineNumber":123,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":124,"author":{"gitID":"whenzei"},"content":"        for (Remark remark : remarks) {"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"            builder.append(\"\\n\" + remark);"},{"lineNumber":126,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":128,"author":{"gitID":"whenzei"},"content":"        builder.append(\" \\nAssigned Employees:\");"},{"lineNumber":129,"author":{"gitID":"whenzei"},"content":"        for (Employee assignedEmployee : assignedEmployees) {"},{"lineNumber":130,"author":{"gitID":"whenzei"},"content":"            builder.append(\"\\n\" + assignedEmployee);"},{"lineNumber":131,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"        return builder.toString();"},{"lineNumber":134,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":127,"-":8}},{"path":"src/main/java/seedu/address/model/job/VehicleNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":" * Represents a Vehicle ID in the Job"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"public class VehicleNumber {"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"    public static final String DEFAULT_VEHICLE_NUMBER \u003d \"SAS123J\";"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_VEHICLE_ID_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"            \"Vehicle ID should only contain alphanumeric characters and should not be blank\";"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    public static final String VEHICLE_ID_VALIDATION_REGEX \u003d \"[a-zA-Z]+[0-9]+[a-zA-Z0-9]*|[0-9]+[a-zA-Z][a-zA-Z0-9]*\";"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"    public VehicleNumber(String value) {"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"        requireNonNull(value);"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"        checkArgument(isValidVehicleNumber(value), MESSAGE_VEHICLE_ID_CONSTRAINTS);"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"        this.value \u003d value;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid vehicle ID"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    public static boolean isValidVehicleNumber(String test) {"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"        return test.matches(VEHICLE_ID_VALIDATION_REGEX);"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"        return value;"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"                || (other instanceof VehicleNumber // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.value.equals(((VehicleNumber) other).value)); // state check"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        return value.hashCode();"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":45,"-":5}},{"path":"src/main/java/seedu/address/model/job/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"whenzei"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":" * Represent the date of job creation in the servicing manager"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"public class Date {"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be of the format MMM D YYYY\";"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\w\\\\w\\\\w\\\\s(0[1-9]|[12][0-9]|3[01])\\\\s(19|20)\\\\d\\\\d\";"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":"    private static final String DATE_FORMATTER_PATTERN \u003d \"MMM d yyy\";"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":"    private static final String DATE_SPLIT_REGEX \u003d \" \";"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    private static final int DATE_DATA_INDEX_DAY \u003d 1;"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":"    private static final int DATE_DATA_INDEX_MONTH \u003d 0;"},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    private static final int DATE_DATA_INDEX_YEAR \u003d 2;"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"    private static final String[] monthAbbreviation \u003d {\"Jan\", \"Feb\", \"Mar\", \"Apr\","},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"        \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"    public final String value;"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"    private int day;"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    private int month;"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":"    private int year;"},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"    public Date() {"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"        value \u003d generateDate();"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"    public Date(String date) {"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        requireNonNull(date);"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        String[] splitAddress \u003d trimmedDate.split(DATE_SPLIT_REGEX);"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        this.day \u003d Integer.parseInt(splitAddress[DATE_DATA_INDEX_DAY]);"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"        this.month \u003d convertMonth(splitAddress[DATE_DATA_INDEX_MONTH]);"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"        this.year \u003d Integer.parseInt(splitAddress[DATE_DATA_INDEX_YEAR]);"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"        this.value \u003d date;"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"     * Generates the string representation of the current date on the system"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    private String generateDate() {"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"        LocalDate localDate \u003d LocalDate.now();"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER_PATTERN);"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"        return localDate.format(formatter);"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"     * Returns true if a given string is a valid date"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"     * Generates the string representation of the current date on the system"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"    private int convertMonth(String month) {"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"        int i;"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        for (i \u003d 0; i \u003c 12; i++) {"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"            if (month.equals(monthAbbreviation[i])) {"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"                break;"},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"        return i + 1;"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"    public int getDay() {"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"        return day;"},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"    public int getMonth() {"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        return month;"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"    public int getYear() {"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        return year;"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"whenzei"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitID":"whenzei"},"content":"        return value;"},{"lineNumber":91,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"                \u0026\u0026 this.value.equals(((Date) other).value)); // state check"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"    public int hashCode() {"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"        return value.hashCode();"},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"}"}],"authorContributionMap":{"whenzei":102,"-":3}},{"path":"src/main/java/seedu/address/model/person/UniqueEmployeeList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"whenzei"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"whenzei"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"whenzei"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"whenzei"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"whenzei"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"whenzei"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":" * @see Employee#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e {"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    private final ObservableList\u003cEmployee\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"     * Returns true if the list contains an equivalent employee as the given argument."},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":"    public boolean contains(Employee toCheck) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"     * Adds a employee to the list."},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"     * @throws DuplicateEmployeeException if the employee to add is a duplicate of an existing employee in the list."},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    public void add(Employee toAdd) throws DuplicateEmployeeException {"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"     * Replaces the employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"     * @throws DuplicateEmployeeException if the replacement is equivalent to another existing employee in the list."},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    public void setEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"        if (!target.equals(editedEmployee) \u0026\u0026 internalList.contains(editedEmployee)) {"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"        internalList.set(index, editedEmployee);"},{"lineNumber":72,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"whenzei"},"content":"     * Removes the equivalent employee from the list."},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"     * @throws EmployeeNotFoundException if no such employee could be found in the list."},{"lineNumber":78,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"whenzei"},"content":"    public boolean remove(Employee toRemove) throws EmployeeNotFoundException {"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toRemove);"},{"lineNumber":81,"author":{"gitID":"whenzei"},"content":"        final boolean employeeFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":82,"author":{"gitID":"whenzei"},"content":"        if (!employeeFoundAndDeleted) {"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":84,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"whenzei"},"content":"        return employeeFoundAndDeleted;"},{"lineNumber":86,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":88,"author":{"gitID":"whenzei"},"content":"    public void setEmployees(UniqueEmployeeList replacement) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"whenzei"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"},{"lineNumber":93,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(employees);"},{"lineNumber":94,"author":{"gitID":"whenzei"},"content":"        final UniqueEmployeeList replacement \u003d new UniqueEmployeeList();"},{"lineNumber":95,"author":{"gitID":"whenzei"},"content":"        for (final Employee employee : employees) {"},{"lineNumber":96,"author":{"gitID":"whenzei"},"content":"            replacement.add(employee);"},{"lineNumber":97,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"whenzei"},"content":"        setEmployees(replacement);"},{"lineNumber":99,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":101,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"whenzei"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":103,"author":{"gitID":"whenzei"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":104,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"whenzei"},"content":"    public Set\u003cEmployee\u003e toSet() {"},{"lineNumber":106,"author":{"gitID":"whenzei"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"whenzei"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":108,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cEmployee\u003e asObservableList() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Sort all persons\u0027 name in list alphabetically."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void sortName(Comparator comparator) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Collections.sort(internalList, comparator);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"whenzei"},"content":"    public Iterator\u003cEmployee\u003e iterator() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"whenzei"},"content":"                || (other instanceof UniqueEmployeeList // instanceof handles nulls"},{"lineNumber":133,"author":{"gitID":"whenzei"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueEmployeeList) other).internalList));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":85,"-":55}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yuhongherald"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"yuhongherald"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.logic.commands.CommandWords;"},{"lineNumber":9,"author":{"gitID":"Richardson0694"},"content":"import seedu.address.model.job.DateRange;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":12,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":13,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.DuplicateEmployeeException;"},{"lineNumber":14,"author":{"gitID":"whenzei"},"content":"import seedu.address.model.person.exceptions.EmployeeNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    Predicate\u003cEmployee\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Predicate\u003cJob\u003e PREDICATE_SHOW_ALL_JOBS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":27,"author":{"gitID":"yuhongherald"},"content":"    void resetData(ReadOnlyAddressBook newData, CommandWords newCommandWords);"},{"lineNumber":28,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":29,"author":{"gitID":"yuhongherald"},"content":"    /** Returns the command words set by the user. */"},{"lineNumber":30,"author":{"gitID":"yuhongherald"},"content":"    CommandWords getCommandWords();"},{"lineNumber":31,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":32,"author":{"gitID":"yuhongherald"},"content":"    /** Returns the command words set by the user. */"},{"lineNumber":33,"author":{"gitID":"yuhongherald"},"content":"    String appendCommandKeyToMessage(String message);"},{"lineNumber":34,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** Initializes the job number based on the list of jobs */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void initJobNumber();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Adds the given job */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void addJob(Job job);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /** Closes the given job */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void closeJob(Job target) throws JobNotFoundException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"    /** Archives the job entries within the date range*/"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"    void archiveJob(DateRange dateRange);"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    /** Deletes the given employee. */"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":"    void deletePerson(Employee target) throws EmployeeNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"    /** Adds the given employee */"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"    void addPerson(Employee employee) throws DuplicateEmployeeException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yuhongherald"},"content":"    /** Adds a list of (@code Job) into (@code AddressBook), and automatically imports new employees */"},{"lineNumber":58,"author":{"gitID":"yuhongherald"},"content":"    void addJobs(List\u003cJob\u003e job);"},{"lineNumber":59,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":60,"author":{"gitID":"yuhongherald"},"content":"    /** Adds employees in list into (@code AddressBook) if it is not present */"},{"lineNumber":61,"author":{"gitID":"yuhongherald"},"content":"    void addMissingEmployees(Set\u003cEmployee\u003e employees);"},{"lineNumber":62,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /** Sort all persons\u0027 name in list alphabetically. */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    void sortPersonList();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"     * Replaces the given employee {@code target} with {@code editedEmployee}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"     * @throws DuplicateEmployeeException if updating the employee\u0027s details causes the employee to be equivalent to"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":"     *      another existing employee in the list."},{"lineNumber":71,"author":{"gitID":"whenzei"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"whenzei"},"content":"    void updatePerson(Employee target, Employee editedEmployee)"},{"lineNumber":74,"author":{"gitID":"whenzei"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"whenzei"},"content":"    /** Returns an unmodifiable view of the filtered employee list */"},{"lineNumber":77,"author":{"gitID":"whenzei"},"content":"    ObservableList\u003cEmployee\u003e getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"whenzei"},"content":"     * Updates the filter of the filtered employee list to filter by the given {@code predicate}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"whenzei"},"content":"    void updateFilteredPersonList(Predicate\u003cEmployee\u003e predicate);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered job list */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered job list to filter by the given {@code predicate}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    void updateFilteredJobList(Predicate\u003cJob\u003e predicate);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":18,"Richardson0694":4,"-":54,"yuhongherald":17}},{"path":"src/main/java/seedu/address/model/job/DateRange.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Richardson0694"},"content":"import java.util.Calendar;"},{"lineNumber":6,"author":{"gitID":"Richardson0694"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":8,"author":{"gitID":"Richardson0694"},"content":"//@@author richardson0694"},{"lineNumber":9,"author":{"gitID":"Richardson0694"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Richardson0694"},"content":" * Represents a date range in the car servicing manager"},{"lineNumber":11,"author":{"gitID":"Richardson0694"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Richardson0694"},"content":"public class DateRange {"},{"lineNumber":13,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":14,"author":{"gitID":"Richardson0694"},"content":"    private final Date startDate;"},{"lineNumber":15,"author":{"gitID":"Richardson0694"},"content":"    private final Date endDate;"},{"lineNumber":16,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":17,"author":{"gitID":"Richardson0694"},"content":"    public DateRange(Date startDate, Date endDate) {"},{"lineNumber":18,"author":{"gitID":"Richardson0694"},"content":"        requireAllNonNull(startDate, endDate);"},{"lineNumber":19,"author":{"gitID":"Richardson0694"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":20,"author":{"gitID":"Richardson0694"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":21,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":23,"author":{"gitID":"Richardson0694"},"content":"    public Date getStartDate() {"},{"lineNumber":24,"author":{"gitID":"Richardson0694"},"content":"        return startDate;"},{"lineNumber":25,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":27,"author":{"gitID":"Richardson0694"},"content":"    public Date getEndDate() {"},{"lineNumber":28,"author":{"gitID":"Richardson0694"},"content":"        return endDate;"},{"lineNumber":29,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":31,"author":{"gitID":"Richardson0694"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Richardson0694"},"content":"     * Compare the startDate with endDate"},{"lineNumber":33,"author":{"gitID":"Richardson0694"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Richardson0694"},"content":"    public int compareTo(Date startDate, Date endDate) {"},{"lineNumber":35,"author":{"gitID":"Richardson0694"},"content":"        Calendar cal1 \u003d Calendar.getInstance();"},{"lineNumber":36,"author":{"gitID":"Richardson0694"},"content":"        Calendar cal2 \u003d Calendar.getInstance();"},{"lineNumber":37,"author":{"gitID":"Richardson0694"},"content":"        cal1.set(startDate.getYear(), startDate.getMonth(), startDate.getDay());"},{"lineNumber":38,"author":{"gitID":"Richardson0694"},"content":"        cal2.set(endDate.getYear(), endDate.getMonth(), endDate.getDay());"},{"lineNumber":39,"author":{"gitID":"Richardson0694"},"content":"        return cal1.compareTo(cal2);"},{"lineNumber":40,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":42,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"Richardson0694"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"Richardson0694"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"Richardson0694"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":48,"author":{"gitID":"Richardson0694"},"content":"        if (!(other instanceof DateRange)) {"},{"lineNumber":49,"author":{"gitID":"Richardson0694"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"Richardson0694"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":52,"author":{"gitID":"Richardson0694"},"content":"        DateRange otherDateRange \u003d (DateRange) other;"},{"lineNumber":53,"author":{"gitID":"Richardson0694"},"content":"        return otherDateRange.getStartDate().equals(this.getStartDate())"},{"lineNumber":54,"author":{"gitID":"Richardson0694"},"content":"                \u0026\u0026 otherDateRange.getEndDate().equals(this.getEndDate());"},{"lineNumber":55,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":57,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Richardson0694"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"Richardson0694"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":60,"author":{"gitID":"Richardson0694"},"content":"        return Objects.hash(startDate, endDate);"},{"lineNumber":61,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":63,"author":{"gitID":"Richardson0694"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"Richardson0694"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"Richardson0694"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"Richardson0694"},"content":"        builder.append(\"Starting Date: \")"},{"lineNumber":67,"author":{"gitID":"Richardson0694"},"content":"                .append(getStartDate())"},{"lineNumber":68,"author":{"gitID":"Richardson0694"},"content":"                .append(\" Ending Date: \")"},{"lineNumber":69,"author":{"gitID":"Richardson0694"},"content":"                .append(getEndDate());"},{"lineNumber":70,"author":{"gitID":"Richardson0694"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitID":"Richardson0694"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Richardson0694"},"content":""},{"lineNumber":73,"author":{"gitID":"Richardson0694"},"content":"}"}],"authorContributionMap":{"Richardson0694":69,"-":4}},{"path":"src/main/java/seedu/address/model/job/JobList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"whenzei"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yuhongherald"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":13,"author":{"gitID":"yuhongherald"},"content":"import seedu.address.model.person.Employee;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"whenzei"},"content":"//@@author whenzei"},{"lineNumber":16,"author":{"gitID":"whenzei"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"whenzei"},"content":" * A list of jobs that does not allow nulls"},{"lineNumber":18,"author":{"gitID":"whenzei"},"content":" */"},{"lineNumber":19,"author":{"gitID":"whenzei"},"content":"public class JobList implements Iterable\u003cJob\u003e {"},{"lineNumber":20,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":21,"author":{"gitID":"whenzei"},"content":"    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":22,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":23,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"whenzei"},"content":"     * Returns true if the list contains an equivalent employee as the given argument"},{"lineNumber":25,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"whenzei"},"content":"    public boolean contains(Job toCheck) {"},{"lineNumber":27,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toCheck);"},{"lineNumber":28,"author":{"gitID":"whenzei"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":29,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":31,"author":{"gitID":"whenzei"},"content":"    public void setJobs(JobList replacement) {"},{"lineNumber":32,"author":{"gitID":"whenzei"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":33,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":35,"author":{"gitID":"whenzei"},"content":"    public void setJobs(List\u003cJob\u003e jobs) {"},{"lineNumber":36,"author":{"gitID":"whenzei"},"content":"        requireAllNonNull(jobs);"},{"lineNumber":37,"author":{"gitID":"whenzei"},"content":"        final JobList replacement \u003d new JobList();"},{"lineNumber":38,"author":{"gitID":"whenzei"},"content":"        for (final Job job : jobs) {"},{"lineNumber":39,"author":{"gitID":"whenzei"},"content":"            replacement.add(job);"},{"lineNumber":40,"author":{"gitID":"whenzei"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"whenzei"},"content":"        setJobs(replacement);"},{"lineNumber":42,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":44,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"whenzei"},"content":"     * Adds a job to the list"},{"lineNumber":46,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"whenzei"},"content":"    public void add(Job toAdd) {"},{"lineNumber":49,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toAdd);"},{"lineNumber":50,"author":{"gitID":"whenzei"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":53,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"whenzei"},"content":"     * Removes the equivalent job from the list"},{"lineNumber":55,"author":{"gitID":"whenzei"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"whenzei"},"content":"     * @throws JobNotFoundException if no such job could be found in the list"},{"lineNumber":57,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"whenzei"},"content":"    public boolean remove(Job toRemove) throws JobNotFoundException {"},{"lineNumber":59,"author":{"gitID":"whenzei"},"content":"        requireNonNull(toRemove);"},{"lineNumber":60,"author":{"gitID":"whenzei"},"content":"        final boolean jobFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":61,"author":{"gitID":"whenzei"},"content":"        return jobFoundAndDeleted;"},{"lineNumber":62,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":64,"author":{"gitID":"whenzei"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"whenzei"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":66,"author":{"gitID":"whenzei"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"whenzei"},"content":"    public ObservableList\u003cJob\u003e asObservableList() {"},{"lineNumber":68,"author":{"gitID":"whenzei"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":69,"author":{"gitID":"whenzei"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"whenzei"},"content":""},{"lineNumber":71,"author":{"gitID":"yuhongherald"},"content":"    //@@author yuhongherald"},{"lineNumber":72,"author":{"gitID":"yuhongherald"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yuhongherald"},"content":"     * Filters (@code jobList) for jobs assigned to (@code employee)."},{"lineNumber":74,"author":{"gitID":"yuhongherald"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yuhongherald"},"content":"    public static Predicate\u003cJob\u003e filterByEmployee(ObservableList\u003cJob\u003e jobList, Employee employee) {"},{"lineNumber":76,"author":{"gitID":"yuhongherald"},"content":"        Predicate\u003cJob\u003e predicate \u003d new Predicate\u003cJob\u003e() {"},{"lineNumber":77,"author":{"gitID":"yuhongherald"},"content":"            @Override"},{"lineNumber":78,"author":{"gitID":"yuhongherald"},"content":"            public boolean test(Job job) {"},{"lineNumber":79,"author":{"gitID":"yuhongherald"},"content":"                return job.getAssignedEmployees().contains(employee);"},{"lineNumber":80,"author":{"gitID":"yuhongherald"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"yuhongherald"},"content":"        };"},{"lineNumber":82,"author":{"gitID":"yuhongherald"},"content":"        return predicate;"},{"lineNumber":83,"author":{"gitID":"yuhongherald"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yuhongherald"},"content":""},{"lineNumber":85,"author":{"gitID":"yuhongherald"},"content":"    //@@author owzhenwei"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public Iterator\u003cJob\u003e iterator() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                || (other instanceof JobList // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((JobList) other).internalList));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"whenzei":57,"-":28,"yuhongherald":17}}]
