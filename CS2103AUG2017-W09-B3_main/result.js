var resultJson = [{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager(new AddressBook(),"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"                getModel().getRecycleBin(), new UserPrefs()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager(new AddressBook(),"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"                getModel().getRecycleBin(), new UserPrefs()));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":6,"-":98}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":1,"-":243}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/ \" + keyword);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"dalessr"},"content":"        if (expectedUrl.equals(getBrowserPanel().getLoadedUrl())) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":196,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":197,"author":{"gitID":"dalessr"},"content":"            assertTrue(getBrowserPanel().getLoadedUrl().toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":198,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":255,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":256,"author":{"gitID":"dalessr"},"content":"            if (MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE).equals(getBrowserPanel().getLoadedUrl())) {"},{"lineNumber":257,"author":{"gitID":"dalessr"},"content":"                assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"},{"lineNumber":258,"author":{"gitID":"dalessr"},"content":"                        getBrowserPanel().getLoadedUrl());"},{"lineNumber":259,"author":{"gitID":"dalessr"},"content":"            } else {"},{"lineNumber":260,"author":{"gitID":"dalessr"},"content":"                assertTrue(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE).toString()"},{"lineNumber":261,"author":{"gitID":"dalessr"},"content":"                        .contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":262,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":14,"-":262}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":37,"eldriclim":1}},{"path":"src/test/java/seedu/address/ui/HelpWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HelpWindowTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private HelpWindowHandle helpWindowHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Stage helpWindowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(helpWindow.getRoot().getScene()));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        helpWindowHandle \u003d new HelpWindowHandle(helpWindowStage);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"        if (expectedHelpPage.equals(helpWindowHandle.getLoadedUrl())) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"            assertTrue(expectedHelpPage.toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":5,"-":33}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"        Person person1 \u003d new PersonBuilder().withTags(\"1\").build();"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        PersonCard personCard1 \u003d new PersonCard(person1, 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        PersonCard copy1 \u003d new PersonCard(person1, 0);"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(personCard1.equals(copy1));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":5,"-":86}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/BrightTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":28}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    public void find() {"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"        Index firstIndex \u003d new Index(0);"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by name in address book, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"         * -\u003e 2 persons found"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by name where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Carl\";"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by name in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Benson Daniel\";"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by name in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Daniel Benson\";"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by name in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Daniel Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by name in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"         * -\u003e 2 persons found"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"        /* Case: find same persons by name in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" I/1\");"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by name in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" MeIeR\";"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by name in address book, keyword is substring of name -\u003e 2 persons found */"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Mei\";"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by name in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Meiers\";"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by name not in address book -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Mark\";"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by phone in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" p/ \" + \" 98765432 87652533\";"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by phone in address book, keyword is substring of phone number -\u003e 2 persons found */"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" p/ \" + \" 8765\";"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by phone in address book, phone number is substring of keyword -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" p/ \" + \" 853552555\";"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by phone not in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" p/ \" + \" 66666666\";"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by email in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" e/ \" + \" johnd@example.com  cornelia@example.com\";"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by email in address book, keyword is same as email but of different case"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"         * -\u003e2 person found"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"         */"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" e/ \" + \" JoHnD@EXAMPLE.com  corneLIA@example.COM\";"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by email in address book, email keyword is substring of the email -\u003e 2 persons found */"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" e/ \" + \" rne\";"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, ELLE);"},{"lineNumber":152,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by email in address book, email address is substring of keyword -\u003e 0 persons found */"},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" e/ \" + \" sheinz@example.com\";"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by email not in address book -\u003e 0 persons found */"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" e/ \" + \" nuscomputing@example.com\";"},{"lineNumber":162,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":163,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":164,"author":{"gitID":"dalessr"},"content":"        /* Case: find single person by address in address book, 5 keywords -\u003e 1 person found */"},{"lineNumber":165,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" a/ \" + \" 311, Clementi Ave 2, #02-25\";"},{"lineNumber":166,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":167,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":168,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":169,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":170,"author":{"gitID":"dalessr"},"content":"        /* Case: find multiple persons by substring of address in address book, 1 keywords -\u003e 3 person found */"},{"lineNumber":171,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" a/ \" + \" street\";"},{"lineNumber":172,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"},{"lineNumber":173,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":174,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":175,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":176,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by address in address book, keyword is same as address but of different case"},{"lineNumber":177,"author":{"gitID":"dalessr"},"content":"         * -\u003e 1 person found"},{"lineNumber":178,"author":{"gitID":"dalessr"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" a/ \" + \" 10TH StrEEt\";"},{"lineNumber":180,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":181,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":182,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardChanged(firstIndex);"},{"lineNumber":183,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":184,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by address in address book, address name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":185,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" a/ \" + \" 110th street\";"},{"lineNumber":186,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":187,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":188,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":189,"author":{"gitID":"dalessr"},"content":"        /* Case: find person by address not in address book -\u003e 0 persons found */"},{"lineNumber":190,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" a/ \" + \" 311, Clementi Ave 2, #02-31\";"},{"lineNumber":191,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":192,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":193,"author":{"gitID":"dalessr"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":194,"author":{"gitID":"dalessr"},"content":"        showAllPersons();"},{"lineNumber":195,"author":{"gitID":"dalessr"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":196,"author":{"gitID":"dalessr"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":197,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + \" Daniel\";"},{"lineNumber":198,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":199,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":200,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":201,"author":{"gitID":"dalessr"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":206,"author":{"gitID":"dalessr"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":207,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":208,"author":{"gitID":"dalessr"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":209,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":210,"author":{"gitID":"dalessr"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"dalessr"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":212,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":213,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":215,"author":{"gitID":"dalessr"},"content":"    //@@author"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":228,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":194,"-":60}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":1,"-":122}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"        String defaultConfigAsString \u003d \"App title : iConnect\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":31}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.BrowserPanel.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAP_DIRECTION_URL_PREFIX;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAP_SEARCH_URL_PREFIX;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAP_SEARCH_URL_SUFFIX;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelFindRouteEvent;"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelShowLocationEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    private BrowserPanelShowLocationEvent showLocationEventStub;"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"    private BrowserPanelFindRouteEvent findRouteEventStub;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    private String startLocation \u003d \"Clementi Street\";"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        showLocationEventStub \u003d new BrowserPanelShowLocationEvent(new Person(ALICE));"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"        findRouteEventStub \u003d new BrowserPanelFindRouteEvent(new Person(ALICE), startLocation);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    public void displayPerson() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        if (expectedDefaultPageUrl.equals(browserPanelHandle.getLoadedUrl())) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"            assertTrue(browserPanelHandle.getLoadedUrl().toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        if (expectedPersonUrl.equals(browserPanelHandle.getLoadedUrl())) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"            assertTrue(browserPanelHandle.getLoadedUrl().toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"    public void displayLocation() throws Exception {"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"        // default web page"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        if (expectedDefaultPageUrl.equals(browserPanelHandle.getLoadedUrl())) {"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"            assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"            assertTrue(browserPanelHandle.getLoadedUrl().toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"        // associated Google map of a person\u0027s address"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"        postNow(showLocationEventStub);"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        URL expectedMapUrl \u003d new URL(GOOGLE_MAP_SEARCH_URL_PREFIX + \"123,+Jurong+West+Ave+6,+\""},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"                + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        assertEquals(expectedMapUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"    public void displayRoute() throws Exception {"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        // default web page"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"        // associated the route from entered location to selected person\u0027s address"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"        postNow(findRouteEventStub);"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        URL expectedRouteUrl \u003d new URL(GOOGLE_MAP_DIRECTION_URL_PREFIX"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"                + startLocation.replaceAll(\" \", \"+\") + GOOGLE_MAP_SEARCH_URL_SUFFIX"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"                + ALICE.getAddress().toString().replaceAll(\" \", \"+\") + GOOGLE_MAP_SEARCH_URL_SUFFIX);"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"        if (expectedRouteUrl.equals(browserPanelHandle.getLoadedUrl())) {"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"            assertEquals(expectedRouteUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"            assertTrue(browserPanelHandle.getLoadedUrl().toString().contains(\"https://ipv4.google.com/sorry/\"));"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":64,"-":48}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WHITESPACE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"public class SortCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    public void parseFailure() {"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        //More than 1 argument inputted"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, WHITESPACE + CliSyntax.PREFIX_NAME"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"                        + SortCommand.BY_ASCENDING + WHITESPACE + CliSyntax.PREFIX_PHONE + SortCommand.BY_ASCENDING,"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        //Gibberish arguments inputted, with one valid argument"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, WHITESPACE + \"gibberish/g\" + CliSyntax.PREFIX_PHONE + SortCommand.BY_ASCENDING,"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        //Sort order not recognised"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, WHITESPACE + CliSyntax.PREFIX_PHONE + \"gibberish\","},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    public void parseSuccess() {"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, \"\", new SortCommand(\"n/\", false));"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_NAME"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_ASCENDING, new SortCommand(\"n/\", false));"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_PHONE"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_ASCENDING, new SortCommand(\"p/\", false));"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_EMAIL"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_ASCENDING, new SortCommand(\"e/\", false));"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_ADDRESS"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_ASCENDING, new SortCommand(\"a/\", false));"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_DATEADDED"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_ASCENDING, new SortCommand(\"t/\", false));"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_NAME"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_DESCENDING, new SortCommand(\"n/\", true));"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_PHONE"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_DESCENDING, new SortCommand(\"p/\", true));"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_EMAIL"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_DESCENDING, new SortCommand(\"e/\", true));"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_ADDRESS"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_DESCENDING, new SortCommand(\"a/\", true));"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_DATEADDED"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"                + SortCommand.BY_DESCENDING, new SortCommand(\"t/\", true));"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":5,"eldriclim":72}},{"path":"src/test/java/seedu/address/logic/parser/BirthdayRemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" * @see SelectCommandParserTest"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"public class BirthdayRemoveCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    private BirthdayRemoveCommandParser parser \u003d new BirthdayRemoveCommandParser();"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    public BirthdayRemoveCommandParserTest() {}"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    public void parse_validArgs_returnsBirthdayRemoveCommand() {"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"1\", new BirthdayRemoveCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"2.2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"aaa\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 aaa\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 01/13/2000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":43}},{"path":"src/test/java/seedu/address/logic/parser/BinrestoreCommandPaserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" * same path through the BindeleteCommand, and therefore we test only one of them."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"public class BinrestoreCommandPaserTest {"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    private BinrestoreCommandParser parser \u003d new BinrestoreCommandParser();"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    public void parse_validArgs_returnsBindresotreCommand() {"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"1\", new BinrestoreCommand(todelete));"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    public void parse_twovalidArgs_returnsBindrestoreCommand() {"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_SECOND_PERSON);"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"1 2\", new BinrestoreCommand(todelete));"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"I/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"                BinrestoreCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    public void parse_emptyArgs_throwsParseException() {"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BinrestoreCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":43,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BinclearCommand;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand.TagAddDescriptor;"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand.TagRemoveDescriptor;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_create() throws Exception {"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getCreateCommand(person));"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_put() throws Exception {"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getPutCommand(person));"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":97,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" I/\" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(todelete), command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_remove() throws Exception {"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"                DeleteCommand.COMMAND_WORD_2 + \" I/\" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new DeleteCommand(todelete), command);"},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_minus() throws Exception {"},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"                DeleteCommand.COMMAND_WORD_3 + \" I/\" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new DeleteCommand(todelete), command);"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_modify() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_3 + \" \""},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_update() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_2 + \" \""},{"lineNumber":142,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"ZhangH795"},"content":"    public void parseCommand_tagAdd() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":149,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":151,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":152,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(\"friend\"));"},{"lineNumber":153,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":154,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor descriptor \u003d new TagAddDescriptor(person);"},{"lineNumber":155,"author":{"gitID":"ZhangH795"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":156,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand command \u003d (TagAddCommand) parser.parseCommand(TagAddCommand.COMMAND_WORD + \" \""},{"lineNumber":157,"author":{"gitID":"ZhangH795"},"content":"            + INDEX_FIRST_PERSON.getOneBased() + \" friend\");"},{"lineNumber":158,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(new TagAddCommand(singlePersonIndexList, descriptor), command);"},{"lineNumber":159,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":161,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"ZhangH795"},"content":"    public void parseCommand_looseTagFind() throws Exception {"},{"lineNumber":163,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":164,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate \u003d new TagMatchingKeywordPredicate(\"friend\", looseFind);"},{"lineNumber":165,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand command \u003d (TagFindCommand) parser.parseCommand(TagFindCommand.COMMAND_WORD"},{"lineNumber":166,"author":{"gitID":"ZhangH795"},"content":"                + \" friend\");"},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(new TagFindCommand(predicate), command);"},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"    public void parseCommand_tagRemove() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(\"friend\"));"},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor descriptor \u003d new TagRemoveDescriptor(person);"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand command \u003d (TagRemoveCommand) parser.parseCommand(TagRemoveCommand.COMMAND_WORD + \" \""},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" friend\");"},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(new TagRemoveCommand(singlePersonIndexList, descriptor), command);"},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":185,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"ZhangH795"},"content":"    public void parseCommand_theme() throws Exception {"},{"lineNumber":187,"author":{"gitID":"ZhangH795"},"content":"        String themeChoice1 \u003d \"1\";"},{"lineNumber":188,"author":{"gitID":"ZhangH795"},"content":"        String themeChoice2 \u003d \"Twilight\";"},{"lineNumber":189,"author":{"gitID":"ZhangH795"},"content":"        SwitchThemeCommand command1 \u003d new SwitchThemeCommand(themeChoice1);"},{"lineNumber":190,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(new SwitchThemeCommand(themeChoice1), command1);"},{"lineNumber":191,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":192,"author":{"gitID":"ZhangH795"},"content":"        SwitchThemeCommand command2 \u003d new SwitchThemeCommand(themeChoice2);"},{"lineNumber":193,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(new SwitchThemeCommand(themeChoice2), command2);"},{"lineNumber":194,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"n/\", \"foo\", \"bar\", \"baz\");"},{"lineNumber":206,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":207,"author":{"gitID":"dalessr"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":208,"author":{"gitID":"dalessr"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":209,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":211,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"dalessr"},"content":"    public void parseCommand_birthdayAdd() throws Exception {"},{"lineNumber":213,"author":{"gitID":"dalessr"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"1\", \"01/01/2000\");"},{"lineNumber":214,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand command \u003d (BirthdayAddCommand) parser.parseCommand("},{"lineNumber":215,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":216,"author":{"gitID":"dalessr"},"content":"        Index firstIndex \u003d new Index(0);"},{"lineNumber":217,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":218,"author":{"gitID":"dalessr"},"content":"        assertEquals(new BirthdayAddCommand(firstIndex, birthday), command);"},{"lineNumber":219,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":221,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"dalessr"},"content":"    public void parseCommand_birthdayRemove() throws Exception {"},{"lineNumber":223,"author":{"gitID":"dalessr"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"1\");"},{"lineNumber":224,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand command \u003d (BirthdayRemoveCommand) parser.parseCommand("},{"lineNumber":225,"author":{"gitID":"dalessr"},"content":"                BirthdayRemoveCommand.COMMAND_WORD + \" \" + keywords.get(0) + \"\");"},{"lineNumber":226,"author":{"gitID":"dalessr"},"content":"        Index firstIndex \u003d new Index(0);"},{"lineNumber":227,"author":{"gitID":"dalessr"},"content":"        assertEquals(new BirthdayRemoveCommand(firstIndex), command);"},{"lineNumber":228,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":230,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":231,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_search() throws Exception {"},{"lineNumber":233,"author":{"gitID":"Pengyuz"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"n/\", \"foo\", \"bar\", \"baz\");"},{"lineNumber":234,"author":{"gitID":"Pengyuz"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":235,"author":{"gitID":"Pengyuz"},"content":"                FindCommand.COMMAND_WORD_2 + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":236,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":237,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":239,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_get() throws Exception {"},{"lineNumber":241,"author":{"gitID":"Pengyuz"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"n/\", \"foo\", \"bar\", \"baz\");"},{"lineNumber":242,"author":{"gitID":"Pengyuz"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":243,"author":{"gitID":"Pengyuz"},"content":"                FindCommand.COMMAND_WORD_3 + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":244,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":245,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void parseCommand_second() throws Exception {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_2) instanceof HelpCommand);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_2 + \" 3\") instanceof HelpCommand);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public void parseCommand_record() throws Exception {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_2) instanceof HistoryCommand);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_2 + \" 3\") instanceof HistoryCommand);"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public void parseCommand_show() throws Exception {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_2) instanceof ListCommand);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_2 + \" 3\") instanceof ListCommand);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public void parseCommand_all() throws Exception {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_3) instanceof ListCommand);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_3 + \" 3\") instanceof ListCommand);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":306,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public void parseCommand_choose() throws Exception {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":313,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD_2 + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":318,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"dalessr"},"content":"    public void parseCommand_map_show() throws Exception {"},{"lineNumber":320,"author":{"gitID":"dalessr"},"content":"        MapShowCommand command \u003d (MapShowCommand) parser.parseCommand("},{"lineNumber":321,"author":{"gitID":"dalessr"},"content":"                MapShowCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":322,"author":{"gitID":"dalessr"},"content":"        assertEquals(new MapShowCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":323,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":325,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":326,"author":{"gitID":"dalessr"},"content":"    public void parseCommand_map_route() throws Exception {"},{"lineNumber":327,"author":{"gitID":"dalessr"},"content":"        String startLocation \u003d \"Clementi Street\";"},{"lineNumber":328,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand command \u003d (MapRouteCommand) parser.parseCommand("},{"lineNumber":329,"author":{"gitID":"dalessr"},"content":"                MapRouteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":330,"author":{"gitID":"dalessr"},"content":"                        + PREFIX_ADDRESS + startLocation);"},{"lineNumber":331,"author":{"gitID":"dalessr"},"content":"        assertEquals(new MapRouteCommand(INDEX_FIRST_PERSON, startLocation), command);"},{"lineNumber":332,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":334,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_binclear() throws Exception {"},{"lineNumber":336,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(parser.parseCommand(BinclearCommand.COMMAND_WORD) instanceof BinclearCommand);"},{"lineNumber":337,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(parser.parseCommand(BinclearCommand.COMMAND_WORD + \" 3\") instanceof BinclearCommand);"},{"lineNumber":338,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":340,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":341,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_bindelete() throws Exception {"},{"lineNumber":342,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":343,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":344,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand command \u003d (BindeleteCommand) parser.parseCommand("},{"lineNumber":345,"author":{"gitID":"Pengyuz"},"content":"                BindeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":346,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new BindeleteCommand(todelete), command);"},{"lineNumber":347,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":349,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"Pengyuz"},"content":"    public void parseCommand_bindresotre() throws Exception {"},{"lineNumber":351,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":352,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":353,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand command \u003d (BinrestoreCommand) parser.parseCommand("},{"lineNumber":354,"author":{"gitID":"Pengyuz"},"content":"                BinrestoreCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":355,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(new BinrestoreCommand(todelete), command);"},{"lineNumber":356,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":374,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":80,"ZhangH795":61,"dalessr":50,"-":192}},{"path":"src/test/java/seedu/address/logic/parser/TagRemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand.TagRemoveDescriptor;"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"public class TagRemoveCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"    private static final String TAG_EMPTY \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagRemoveCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"    private TagRemoveCommandParser parser \u003d new TagRemoveCommandParser();"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"    public void parseMissingPartsFailure() {"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        // no user input"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, TAG_EMPTY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"        // no tagName provided"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"    public void parseTagRemoveSuccess() throws Exception {"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(targetIndex);"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand.TagRemoveDescriptor descriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand expectedCommand \u003d new TagRemoveCommand(singlePersonIndexList, descriptor);"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":49,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/TagFindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"public class TagFindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"    private TagFindCommandParser parser \u003d new TagFindCommandParser();"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagFindCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"    public void parseValidArgsReturnsTagFindCommand() {"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand expectedTagFindCommandOne \u003d"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"                new TagFindCommand(new TagMatchingKeywordPredicate(\"friends\", true));"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, \"friends\", expectedTagFindCommandOne);"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand expectedTagFindCommandTwo \u003d"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"                new TagFindCommand(new TagMatchingKeywordPredicate(\"friend 2 be\", true));"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, \"friend 2 be\", expectedTagFindCommandTwo);"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand expectedTagFindCommandThree \u003d"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"                new TagFindCommand(new TagMatchingKeywordPredicate(\"1 2 3\", true));"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, \"1 2 3\", expectedTagFindCommandThree);"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":33,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BinclearCommand;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ScheduleAddCommand;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ScheduleRemoveCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"public class HelpCommandParserTest {"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"    private HelpCommandParser parser \u003d new HelpCommandParser();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"    public void parsesuccess() {"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD, new HelpCommand(\"add\"));"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD_2, new HelpCommand(\"add\"));"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD_3, new HelpCommand(\"add\"));"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ClearCommand.COMMAND_WORD, new HelpCommand(\"clear\"));"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, DeleteCommand.COMMAND_WORD, new HelpCommand(\"delete\"));"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, DeleteCommand.COMMAND_WORD_2, new HelpCommand(\"delete\"));"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, DeleteCommand.COMMAND_WORD_3, new HelpCommand(\"delete\"));"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, EditCommand.COMMAND_WORD, new HelpCommand(\"edit\"));"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, EditCommand.COMMAND_WORD_2, new HelpCommand(\"edit\"));"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, EditCommand.COMMAND_WORD_3, new HelpCommand(\"edit\"));"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ExitCommand.COMMAND_WORD, new HelpCommand(\"exit\"));"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, FindCommand.COMMAND_WORD, new HelpCommand(\"find\"));"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, FindCommand.COMMAND_WORD_2, new HelpCommand(\"find\"));"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, FindCommand.COMMAND_WORD_3, new HelpCommand(\"find\"));"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, HistoryCommand.COMMAND_WORD, new HelpCommand(\"history\"));"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, HistoryCommand.COMMAND_WORD_2, new HelpCommand(\"history\"));"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ListCommand.COMMAND_WORD, new HelpCommand(\"list\"));"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ListCommand.COMMAND_WORD_2, new HelpCommand(\"list\"));"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ListCommand.COMMAND_WORD_3, new HelpCommand(\"list\"));"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, RedoCommand.COMMAND_WORD, new HelpCommand(\"redo\"));"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, SelectCommand.COMMAND_WORD, new HelpCommand(\"select\"));"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, SelectCommand.COMMAND_WORD_2, new HelpCommand(\"select\"));"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, SortCommand.COMMAND_WORD, new HelpCommand(\"sort\"));"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, TagAddCommand.COMMAND_WORD, new HelpCommand(\"tagadd\"));"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, TagRemoveCommand.COMMAND_WORD, new HelpCommand(\"tagremove\"));"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, TagFindCommand.COMMAND_WORD, new HelpCommand(\"tagfind\"));"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, BirthdayAddCommand.COMMAND_WORD, new HelpCommand(\"birthdayadd\"));"},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, BirthdayRemoveCommand.COMMAND_WORD, new HelpCommand(\"birthdayremove\"));"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, MapShowCommand.COMMAND_WORD, new HelpCommand(\"mapshow\"));"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, MapRouteCommand.COMMAND_WORD, new HelpCommand(\"maproute\"));"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ScheduleAddCommand.COMMAND_WORD, new HelpCommand(\"scheduleadd\"));"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ScheduleRemoveCommand.COMMAND_WORD, new HelpCommand(\"scheduleremove\"));"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, BinclearCommand.COMMAND_WORD, new HelpCommand(\"bin-fresh\"));"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, BindeleteCommand.COMMAND_WORD, new HelpCommand(\"bin-delete\"));"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, BinrestoreCommand.COMMAND_WORD, new HelpCommand(\"bin-restore\"));"},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, SwitchThemeCommand.COMMAND_WORD, new HelpCommand(\"theme\"));"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, ExportCommand.COMMAND_WORD, new HelpCommand(\"export\"));"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, UndoCommand.COMMAND_WORD, new HelpCommand(\"undo\"));"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":87,"ZhangH795":1,"dalessr":11,"-":21}},{"path":"src/test/java/seedu/address/logic/parser/BirthdayAddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":" * @see SelectCommandParserTest"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"public class BirthdayAddCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    private BirthdayAddCommandParser parser \u003d new BirthdayAddCommandParser();"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    private Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    public BirthdayAddCommandParserTest() throws IllegalValueException {"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    public void parse_validArgs_returnsBirthdayAddCommand() {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"1 01/01/2000\", new BirthdayAddCommand(INDEX_FIRST_PERSON, birthday));"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"aaa\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 01012000000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 01012000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 0101/2000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 32/01/2000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 01/13/2000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"                BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":51}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    public void parse_emptyPrefix_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"alice bob eve\","},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    public void parse_emptyArgAfterPrefix_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"n/\","},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"n/ p/ e/ a/\","},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"n/alice bob p/\","},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"n/ p/12345678 e/alice@gmail.com\","},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    public void parse_dummyValueBeforeFirstPrefix_throwsParseException() {"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"alicen/alice bob\","},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"alice p/12345678\","},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        FindCommand expectedFindCommandOne \u003d"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"n/\", \"Alice\", \"Bob\")));"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"n/Alice Bob\", expectedFindCommandOne);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        FindCommand expectedFindCommandTwo \u003d"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"n/\", \"Alice\", \"p/\", \"12345678\")));"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"n/Alice p/12345678\", expectedFindCommandTwo);"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        FindCommand expectedFindCommandThree \u003d"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"e/\", \"alice@com\", \"bob@com\")));"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"e/ alice@com bob@com\", expectedFindCommandThree);"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        FindCommand expectedFindCommandFour \u003d"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"                new FindCommand(new NameContainsKeywordsPredicate("},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"                        Arrays.asList(\"a/\", \"blk\", \"30\", \"Jurong\", \"East\", \"Street\", \"25,\", \"#21-31\")));"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"a/blk 30 Jurong East Street 25, #21-31\", expectedFindCommandFour);"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":52,"-":17}},{"path":"src/test/java/seedu/address/logic/parser/MapShowCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" * @see SelectCommandParserTest"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"public class MapShowCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    private MapShowCommandParser parser \u003d new MapShowCommandParser();"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"1\", new MapShowCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapShowCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":30}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"I/1\", new DeleteCommand(todelete));"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    public void parse_validArgs_returnsDeleteCommand1() {"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_SECOND_PERSON);"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"I/1 2\", new DeleteCommand(todelete));"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"    public void parse_validArgs_returnsDeleteCommand2() {"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"n/Alice Pauline\", new DeleteCommand(\"Alice Pauline\"));"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"I/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    public void parse_emptyArgs_throwsParseException() {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidstartArgs_throwsParseException() {"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"aI/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidArgs_throwsParseException1() {"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"n/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidArgs_throwsParseException2() {"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":61,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/SwitchThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangH795"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"public class SwitchThemeCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"    private SwitchThemeCommandParser parser \u003d new SwitchThemeCommandParser();"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"    public void parseValidArgsReturnsSwitchThemeCommand() {"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"        String themeChoice1 \u003d SwitchThemeCommand.DARK_THEME_WORD3;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"        String themeChoice2 \u003d SwitchThemeCommand.DARK_THEME_WORD1;"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"        String themeChoice3 \u003d SwitchThemeCommand.DARK_THEME_WORD2;"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"        SwitchThemeCommand expectedSwitchThemeCommandOne \u003d"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"                new SwitchThemeCommand(themeChoice1);"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, themeChoice1, expectedSwitchThemeCommandOne);"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"        SwitchThemeCommand expectedSwitchThemeCommandTwo \u003d"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"                new SwitchThemeCommand(themeChoice2);"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, themeChoice2, expectedSwitchThemeCommandTwo);"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"        SwitchThemeCommand expectedSwitchThemeCommandThree \u003d"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"                new SwitchThemeCommand(themeChoice3);"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, themeChoice3, expectedSwitchThemeCommandThree);"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchThemeCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":37,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/ScheduleRemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleRemoveCommand;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"public class ScheduleRemoveCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    private ScheduleRemoveCommandParser parser \u003d new ScheduleRemoveCommandParser();"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    private String fullArgs \u003d \" I/1\";"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    private String invalidIndex \u003d \" I/a\";"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    public void parseSuccessTest() throws Exception {"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, ScheduleRemoveCommand.COMMAND_WORD + fullArgs,"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"                new ScheduleRemoveCommand(new HashSet\u003c\u003e(Arrays.asList(new Index(0)))));"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    public void parseFailureTest() throws Exception {"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleRemoveCommand.MESSAGE_USAGE);"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, ScheduleRemoveCommand.COMMAND_WORD + invalidIndex, MESSAGE_INVALID_INDEX);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, ScheduleRemoveCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":2,"-":12,"eldriclim":31}},{"path":"src/test/java/seedu/address/logic/parser/MapRouteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" * @see SelectCommandParserTest"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"public class MapRouteCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    private MapRouteCommandParser parser \u003d new MapRouteCommandParser();"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    private String startLocation \u003d \"Clementi Street\";"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        assertParseSuccess(parser, \"1 a/Clementi Street\", new MapRouteCommand(INDEX_FIRST_PERSON, startLocation));"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 n/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"                MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 a/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"                MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        assertParseFailure(parser, \"1 a/    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"                MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":38}},{"path":"src/test/java/seedu/address/logic/parser/ScheduleAddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleAddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"public class ScheduleAddCommandParserTest {"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    final String fullArgs \u003d \" m/1 n/Event name t/2017-01-01 10:00 d/5m\";"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    final String noMembersArgs \u003d \"  n/Event name t/2017-01-01 10:00 d/5m\";"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    final String noDurationArgs \u003d \" m/1 n/Event name t/2017-01-01 10:00\";"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    final String noMemberAndDurationArgs \u003d \" n/Event name t/2017-01-01 10:00\";"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"    final String invalidDateFormat \u003d \" m/1 n/Event name t/2017-02-29 10:00 d/5m\";"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    final String invalidDurationFormat \u003d \" n/Event name t/2017-01-01 10:00 d/5m2h\";"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    final String invalidNoNameArgs \u003d \" t/2017-01-01 10:00\";"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    final String invalidNoTimeArgs \u003d \" n/Event name\";"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    private ScheduleAddCommandParser parser \u003d new ScheduleAddCommandParser();"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    public void parseSuccessTest() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        EventName eventName \u003d new EventName(\"Event name\");"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        Duration duration \u003d Duration.ofMinutes(5);"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        EventTime eventTime \u003d new EventTime(LocalDateTime.of(2017, 1, 1, 10, 0),"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"                duration);"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        EventDuration eventDuration \u003d new EventDuration(duration);"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e uniqueMemberIndexes \u003d new HashSet\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        uniqueMemberIndexes.add(new Index(0));"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, ScheduleAddCommand.COMMAND_WORD + fullArgs,"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"                new ScheduleAddCommand(eventName, eventTime, eventDuration, uniqueMemberIndexes));"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, ScheduleAddCommand.COMMAND_WORD + noMembersArgs,"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"                new ScheduleAddCommand(eventName, eventTime, eventDuration, new HashSet\u003c\u003e()));"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"        //Set duration to default 0 mins"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        eventTime \u003d new EventTime(LocalDateTime.of(2017, 1, 1, 10, 0),"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"                Duration.ofMinutes(0));"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        eventDuration \u003d new EventDuration(Duration.ofMinutes(0));"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, ScheduleAddCommand.COMMAND_WORD + noDurationArgs,"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"                new ScheduleAddCommand(eventName, eventTime, eventDuration, uniqueMemberIndexes));"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        assertParseSuccess(parser, ScheduleAddCommand.COMMAND_WORD + noMemberAndDurationArgs,"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"                new ScheduleAddCommand(eventName, eventTime, eventDuration, new HashSet\u003c\u003e()));"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"    public void invalidDateTest() throws ParseException {"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        thrown.expectMessage(ScheduleAddCommandParser.ERROR_INVALID_DATE);"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        parser.parse(invalidDateFormat);"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    public void invalidDurationFormatTest() throws ParseException {"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        thrown.expectMessage(ScheduleAddCommandParser.ERROR_PARSING_DURATION);"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        parser.parse(invalidDurationFormat);"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"    public void parseFailureTest() {"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE);"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        // missing name prefix"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, ScheduleAddCommand.COMMAND_WORD + invalidNoNameArgs,"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"                expectedMessage);"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"        // missing time prefix"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, ScheduleAddCommand.COMMAND_WORD + invalidNoTimeArgs,"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"                expectedMessage);"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        // missing prefixes"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        assertParseFailure(parser, ScheduleAddCommand.COMMAND_WORD,"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"                expectedMessage);"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":2,"-":13,"eldriclim":87}},{"path":"src/test/java/seedu/address/logic/commands/MapShowCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelShowLocationEvent;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":" * Contains integration tests (interaction with the Model) for {@code MapShowCommand}."},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"public class MapShowCommandTest {"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowFirstCommand \u003d new MapShowCommand(INDEX_FIRST_PERSON);"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowSecondCommand \u003d new MapShowCommand(INDEX_SECOND_PERSON);"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"        assertTrue(mapShowFirstCommand.equals(mapShowFirstCommand));"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowFirstCommandCopy \u003d new MapShowCommand(INDEX_FIRST_PERSON);"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        assertTrue(mapShowFirstCommand.equals(mapShowFirstCommandCopy));"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapShowFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapShowFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapShowFirstCommand.equals(mapShowSecondCommand));"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"     * Executes a {@code MapShowCommand} with the given {@code index}, and checks that"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"     * {@code BrowserPanelShowLocationEvent} is raised with the correct index."},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowCommand \u003d prepareCommand(index);"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"            CommandResult commandResult \u003d mapShowCommand.execute();"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"            assertEquals(String.format(MapShowCommand.MESSAGE_LOCATE_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        BrowserPanelShowLocationEvent lastEvent \u003d (BrowserPanelShowLocationEvent)"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        assertEquals(model.getFilteredPersonList().get(index.getZeroBased()), lastEvent.getNewSelection());"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"     * Executes a {@code MapShowCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowCommand \u003d prepareCommand(index);"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"            mapShowCommand.execute();"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"        } catch (CommandException ce) {"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":"     * Returns a {@code MapShowCommand} with parameters {@code index}."},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"    private MapShowCommand prepareCommand(Index index) {"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"        MapShowCommand mapShowCommand \u003d new MapShowCommand(index);"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"        mapShowCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"        return mapShowCommand;"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":143,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/BindeleteCommandPaserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" * same path through the BindeleteCommand, and therefore we test only one of them."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"public class BindeleteCommandPaserTest {"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    private BindeleteCommandParser parser \u003d new BindeleteCommandParser();"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    public void parse_validArgs_returnsBindeleteCommand() {"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"1\", new BindeleteCommand(todelete));"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    public void parse_twovalidArgs_returnsBindeleteCommand() {"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e todelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        todelete.add(INDEX_SECOND_PERSON);"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        assertParseSuccess(parser, \"1 2\", new BindeleteCommand(todelete));"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"I/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BindeleteCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"    public void parse_emptyArgs_throwsParseException() {"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BindeleteCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":41,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/TagAddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"public class TagAddCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"    private static final String SPACE \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"    private static final String TAG_EMPTY \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagAddCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"    private TagAddCommandParser parser \u003d new TagAddCommandParser();"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"    public void parseMissingPartsFailure() {"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"        // no index specified"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"        // no tag input"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, \"1 2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"        // no tag specified"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, TAG_EMPTY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"        // no user input"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"        assertParseFailure(parser, SPACE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"    public void parseTagAddSuccess() throws Exception {"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(targetIndex);"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"        String userInput \u003d targetIndex.getOneBased() + SPACE + VALID_TAG_FRIEND;"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand.TagAddDescriptor descriptor \u003d new TagAddCommand.TagAddDescriptor();"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand expectedCommand \u003d new TagAddCommand(singlePersonIndexList, descriptor);"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":54,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"public class DeleteCommandTest {"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    private static final ReadOnlyPerson DUPLICATE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"            .withAddress(\"124, Jurong West Ave 7, #08-112\").withEmail(\"alicee@example.com\")"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"            .withPhone(\"85333333\")"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"            .withTags(\"workmate\").build();"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"    public void excute_duplicatePerson_sucess() throws Exception {"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"        String duplicatePerosnName \u003d \"Alice Pauline\";"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        model.addPerson(DUPLICATE);"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        List\u003cString\u003e duplicatePerson \u003d Arrays.asList(duplicatePerosnName);"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"        NameContainsKeywordsPredicate updatedpredicate \u003d new NameContainsKeywordsPredicate(duplicatePerson);"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(duplicatePerosnName);"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d \"Duplicate persons exist, please choose one to delete.\";"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.updateFilteredPersonList(updatedpredicate);"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        model.deletePerson(DUPLICATE);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(personToDelete);"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand1 \u003d prepareCommand(indexToDelete);"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deletePerson(deleteList);"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand1, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success2() throws Exception {"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson secondToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(INDEX_SECOND_PERSON);"},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand1 \u003d prepareCommand(indexToDelete);"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(personToDelete);"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(secondToDelete);"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deletePerson(deleteList);"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand1, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validNameUnfilteredList_success() throws Exception {"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(personToDelete);"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"        String deleteName \u003d personToDelete.getName().fullName;"},{"lineNumber":121,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":122,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(deleteName);"},{"lineNumber":123,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":124,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":125,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":128,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deletePerson(deleteList);"},{"lineNumber":129,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":130,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":131,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":133,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":134,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":136,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":137,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":138,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(outOfBoundIndex);"},{"lineNumber":139,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(indexToDelete);"},{"lineNumber":140,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":141,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":142,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":144,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":146,"author":{"gitID":"Pengyuz"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":147,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":148,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":149,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":150,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":151,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":152,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(INDEX_FIRST_PERSON);"},{"lineNumber":153,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":154,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":156,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(personToDelete);"},{"lineNumber":157,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":158,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(indexToDelete);"},{"lineNumber":159,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":160,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":161,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":162,"author":{"gitID":"Pengyuz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":164,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deletePerson(deleteList);"},{"lineNumber":165,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":167,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":168,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":171,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validNameFilteredList_success() throws Exception {"},{"lineNumber":173,"author":{"gitID":"Pengyuz"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":174,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":175,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":176,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":177,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":178,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":179,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":181,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(personToDelete);"},{"lineNumber":182,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":183,"author":{"gitID":"Pengyuz"},"content":"        String deleteName \u003d personToDelete.getName().fullName;"},{"lineNumber":184,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":185,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(deleteName);"},{"lineNumber":186,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":187,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":188,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":189,"author":{"gitID":"Pengyuz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":190,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deletePerson(deleteList);"},{"lineNumber":191,"author":{"gitID":"Pengyuz"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":192,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":193,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":196,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":198,"author":{"gitID":"Pengyuz"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":199,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":200,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":201,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":202,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.add(INDEX_SECOND_PERSON);"},{"lineNumber":203,"author":{"gitID":"Pengyuz"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":204,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":205,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":206,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(indexToDelete);"},{"lineNumber":207,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":208,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":209,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":211,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidNameFilteredList_throwsCommandException() {"},{"lineNumber":213,"author":{"gitID":"Pengyuz"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":214,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":215,"author":{"gitID":"Pengyuz"},"content":"        indexToDelete.clear();"},{"lineNumber":216,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":217,"author":{"gitID":"Pengyuz"},"content":"        String name \u003d personToDelete.getName().fullName;"},{"lineNumber":218,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":219,"author":{"gitID":"Pengyuz"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":220,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":221,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":222,"author":{"gitID":"Pengyuz"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":223,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":224,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":225,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(name);"},{"lineNumber":226,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":227,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":228,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":230,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":231,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"Pengyuz"},"content":"    public void equals() {"},{"lineNumber":233,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e first \u003d new ArrayList\u003c\u003e();"},{"lineNumber":234,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e second \u003d new ArrayList\u003c\u003e();"},{"lineNumber":235,"author":{"gitID":"Pengyuz"},"content":"        first.add(INDEX_FIRST_PERSON);"},{"lineNumber":236,"author":{"gitID":"Pengyuz"},"content":"        second.add(INDEX_SECOND_PERSON);"},{"lineNumber":237,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(first);"},{"lineNumber":238,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(second);"},{"lineNumber":239,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":240,"author":{"gitID":"Pengyuz"},"content":"        // same object -\u003e returns true"},{"lineNumber":241,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":242,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":243,"author":{"gitID":"Pengyuz"},"content":"        // same values -\u003e returns true"},{"lineNumber":244,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(first);"},{"lineNumber":245,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":246,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":247,"author":{"gitID":"Pengyuz"},"content":"        // different types -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":249,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":250,"author":{"gitID":"Pengyuz"},"content":"        // null -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":252,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":253,"author":{"gitID":"Pengyuz"},"content":"        // different person -\u003e returns false"},{"lineNumber":254,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":255,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":257,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"Pengyuz"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":259,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"Pengyuz"},"content":"    private DeleteCommand prepareCommand(ArrayList\u003cIndex\u003e indexes) {"},{"lineNumber":261,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":262,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(indexes);"},{"lineNumber":263,"author":{"gitID":"Pengyuz"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":264,"author":{"gitID":"Pengyuz"},"content":"        return deleteCommand;"},{"lineNumber":265,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":267,"author":{"gitID":"Pengyuz"},"content":"    private DeleteCommand prepareCommand(String name) {"},{"lineNumber":268,"author":{"gitID":"Pengyuz"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(name);"},{"lineNumber":269,"author":{"gitID":"Pengyuz"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":270,"author":{"gitID":"Pengyuz"},"content":"        return deleteCommand;"},{"lineNumber":271,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":273,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":274,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"Pengyuz"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":276,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"Pengyuz"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":278,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":279,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":280,"author":{"gitID":"Pengyuz"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":281,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":283,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":254,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/BirthdayRemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for BirthdayRemoveCommand."},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"public class BirthdayRemoveCommandTest {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"     * Edit person list where index is smaller than (or equal to) the size of the address book person list"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    public void execute_allFieldsSpecifiedCorrectlyUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        Person originalPerson \u003d (Person) model.getAddressBook().getPersonList().get(0);"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        Person editedPerson \u003d (Person) model.getAddressBook().getPersonList().get(0);"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday();"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        editedPerson.setBirthday(birthday);"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand birthdayRemoveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(BirthdayRemoveCommand.MESSAGE_REMOVE_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"                new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        expectedModel.updatePerson(originalPerson, editedPerson);"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(birthdayRemoveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"     * Edit filtered list where index is smaller than (or equal to) the size of filtered list"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"    public void execute_allFieldsSpecifiedCorrectlyFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        Person originalPerson \u003d (Person) model.getFilteredPersonList().get(0);"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        Person editedPerson \u003d (Person) model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday();"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        editedPerson.setBirthday(birthday);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand birthdayRemoveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(BirthdayRemoveCommand.MESSAGE_REMOVE_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"                new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        expectedModel.updatePerson(originalPerson, editedPerson);"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(birthdayRemoveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"     * Edit person list where index is larger than size of the address book person list"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getPersonList().size() + 1);"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday();"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand birthdayRemoveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(birthdayRemoveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"     * but smaller than size of address book"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday();"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand birthdayRemoveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(birthdayRemoveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"    public void equals() throws Exception {"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday();"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        final BirthdayRemoveCommand standardCommand \u003d new BirthdayRemoveCommand(INDEX_FIRST_PERSON);"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand commandWithSameValues \u003d new BirthdayRemoveCommand(INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"        // different index -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(new BirthdayRemoveCommand(INDEX_SECOND_PERSON)));"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code birthday}"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"    private BirthdayRemoveCommand prepareCommand(Index index) {"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"        BirthdayRemoveCommand birthdayRemoveCommand \u003d new BirthdayRemoveCommand(index);"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"        birthdayRemoveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"        return birthdayRemoveCommand;"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":128}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand.TagAddDescriptor;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand.TagRemoveDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_NAME_JAMES \u003d \"James Wong\";"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_NAME_LUCY \u003d \"Lucy Lee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_PHONE_JAMES \u003d \"33333333\";"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_PHONE_LUCY \u003d \"44444444\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_EMAIL_JAMES \u003d \"james@example.com\";"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_EMAIL_LUCY \u003d \"lucy@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_ADDRESS_JAMES \u003d \"Block 231, James Street 2\";"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_ADDRESS_LUCY \u003d \"Block 132, Lucy Street 4\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"    public static final String VALID_TAG_COLLEGE_FRIEND \u003d \"college friend\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    public static final String WHITESPACE \u003d \" \";"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"    public static final TagAddCommand.TagAddDescriptor DESC_JAMES;"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"    public static final TagAddCommand.TagAddDescriptor DESC_LUCY;"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"    public static final TagRemoveCommand.TagRemoveDescriptor DESCR_JAMES;"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    public static final TagRemoveCommand.TagRemoveDescriptor DESCR_LUCY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"        DESC_JAMES \u003d new TagAddDescriptor(new PersonBuilder().withName(VALID_NAME_JAMES)"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"                .withPhone(VALID_PHONE_JAMES).withEmail(VALID_EMAIL_JAMES).withAddress(VALID_ADDRESS_JAMES)"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build());"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"        DESC_LUCY \u003d new TagAddDescriptor(new PersonBuilder().withName(VALID_NAME_LUCY)"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"                .withPhone(VALID_PHONE_LUCY).withEmail(VALID_EMAIL_LUCY).withAddress(VALID_ADDRESS_LUCY)"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"                .withTags(VALID_TAG_FRIEND).build());"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"        DESCR_JAMES \u003d new TagRemoveDescriptor(new PersonBuilder().withName(VALID_NAME_JAMES)"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"                .withPhone(VALID_PHONE_JAMES).withEmail(VALID_EMAIL_JAMES).withAddress(VALID_ADDRESS_JAMES)"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build());"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"        DESCR_LUCY \u003d new TagRemoveDescriptor(new PersonBuilder().withName(VALID_NAME_LUCY)"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"                .withPhone(VALID_PHONE_LUCY).withEmail(VALID_EMAIL_LUCY).withAddress(VALID_ADDRESS_LUCY)"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"                .withTags(VALID_TAG_FRIEND).build());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":123,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s recycle bin."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"Pengyuz"},"content":"    public static void showFirstBinPersonOnly(Model model) {"},{"lineNumber":151,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson person \u003d model.getRecycleBin().getPersonList().get(0);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":153,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredBinList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":154,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":"        assert model.getRecycleBinPersonList().size() \u003d\u003d 1;"},{"lineNumber":156,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":163,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"Pengyuz"},"content":"        deleteList.add(firstPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"            model.deletePerson(deleteList);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":169,"author":{"gitID":"Pengyuz"},"content":"        } catch (DuplicatePersonException d) {"},{"lineNumber":170,"author":{"gitID":"Pengyuz"},"content":"            throw new AssertionError(\"Person in the filtered list should not be duplicate\", d);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":12,"ZhangH795":28,"-":131,"eldriclim":2}},{"path":"src/test/java/seedu/address/logic/commands/BirthdayAddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for BirthdayAddCommand."},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"public class BirthdayAddCommandTest {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    public void execute_allFieldsSpecifiedCorrectlyUnfilteredList_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        Person originalPerson \u003d (Person) model.getAddressBook().getPersonList().get(0);"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        Person editedPerson \u003d (Person) model.getAddressBook().getPersonList().get(0);"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        editedPerson.setBirthday(birthday);"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand birthdayAddCommand \u003d prepareCommand(INDEX_FIRST_PERSON, birthday);"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(BirthdayAddCommand.MESSAGE_ADD_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"                new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        expectedModel.updatePerson(originalPerson, editedPerson);"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(birthdayAddCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    public void execute_allFieldsSpecifiedCorrectlyFilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        Person originalPerson \u003d (Person) model.getFilteredPersonList().get(0);"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        Person editedPerson \u003d (Person) model.getFilteredPersonList().get(0);"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        editedPerson.setBirthday(birthday);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand birthdayAddCommand \u003d prepareCommand(INDEX_FIRST_PERSON, birthday);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(BirthdayAddCommand.MESSAGE_ADD_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"                new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        expectedModel.updatePerson(originalPerson, editedPerson);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(birthdayAddCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getPersonList().size() + 1);"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand birthdayAddCommand \u003d prepareCommand(outOfBoundIndex, birthday);"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(birthdayAddCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"     * but smaller than size of address book"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand birthdayAddCommand \u003d prepareCommand(outOfBoundIndex, birthday);"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"        assertCommandFailure(birthdayAddCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"    public void equals() throws Exception {"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/2000\");"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        final BirthdayAddCommand standardCommand \u003d new BirthdayAddCommand(INDEX_FIRST_PERSON, birthday);"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"        // same values -\u003e returns true"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand commandWithSameValues \u003d new BirthdayAddCommand(INDEX_FIRST_PERSON, birthday);"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"        // null -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"        // different types -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"        // different index -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(new BirthdayAddCommand(INDEX_SECOND_PERSON, birthday)));"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"        // different birthday value -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        Birthday anotherBirthday \u003d new Birthday(\"10/10/2010\");"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"        assertFalse(standardCommand.equals(new BirthdayAddCommand(INDEX_FIRST_PERSON, anotherBirthday)));"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code birthday}"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"    private BirthdayAddCommand prepareCommand(Index index, Birthday birthday) {"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"        BirthdayAddCommand birthdayAddCommand \u003d new BirthdayAddCommand(index, birthday);"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":"        birthdayAddCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"        return birthdayAddCommand;"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":122}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.parser.CliSyntax;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"public class SortCommandTest {"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    private Person validPerson1 \u003d new PersonBuilder()"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"            .withName(\"C\").withPhone(\"465\").withEmail(\"z@z\").withAddress(\"a\").build();"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    private Person validPerson2 \u003d new PersonBuilder()"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"            .withName(\"B\").withPhone(\"123\").withEmail(\"d@d\").withAddress(\"s\").build();"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    private Person validPerson3 \u003d new PersonBuilder()"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"            .withName(\"A\").withPhone(\"987\").withEmail(\"f@f\").withAddress(\"b\").build();"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    public void constructor_nullSortType_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        new SortCommand(null, true);"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    public void constructor_nullSortOrder_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        new SortCommand(CliSyntax.PREFIX_NAME.toString(), null);"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    public void execute_catchEmptyListException() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingPersonForSort modelStub \u003d new ModelStubAcceptingPersonForSort();"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(\"n/\", false, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    public void test_getSortCommandResult_sortSuccessful() throws Exception {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingPersonForSort modelStub \u003d new ModelStubAcceptingPersonForSort();"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        populateModel(modelStub);"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        String sortType \u003d \"/n\";"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        Boolean isDescending \u003d false;"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        CommandResult commandResult \u003d getSortCommandForPerson(sortType, isDescending, modelStub).execute();"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        assertEquals(String.format(SortCommand.MESSAGE_SORT_LIST_SUCCESS, \"name\", \"ascending\"),"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    public void testComparator() throws Exception {"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingPersonForSort modelStub \u003d new ModelStubAcceptingPersonForSort();"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        populateModel(modelStub);"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cPerson\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        expectedList.add(validPerson1);"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        expectedList.add(validPerson2);"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        expectedList.add(validPerson3);"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        //Test comparator - sort by name"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        expectedList.sort((o1, o2) -\u003e o1.getName().toString().compareToIgnoreCase(o2.getName().toString()));"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(CliSyntax.PREFIX_NAME.toString(), false, modelStub).execute();"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"        assertEquals(expectedList, modelStub.personsAdded);"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        //Test comparator - sort by phone"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        expectedList.sort((o1, o2) -\u003e o1.getPhone().toString().compareToIgnoreCase(o2.getPhone().toString()));"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(CliSyntax.PREFIX_PHONE.toString(), false, modelStub).execute();"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        assertEquals(expectedList, modelStub.personsAdded);"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        //Test comparator - sort by email"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"        expectedList.sort((o1, o2) -\u003e o1.getEmail().toString().compareToIgnoreCase(o2.getEmail().toString()));"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(CliSyntax.PREFIX_EMAIL.toString(), false, modelStub).execute();"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        assertEquals(expectedList, modelStub.personsAdded);"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"        //Test comparator - sort by address"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"        expectedList.sort((o1, o2) -\u003e o1.getAddress().toString().compareToIgnoreCase(o2.getAddress().toString()));"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(CliSyntax.PREFIX_ADDRESS.toString(), false, modelStub).execute();"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"        assertEquals(expectedList, modelStub.personsAdded);"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"        //Test comparator - sort by date added"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        expectedList.sort(Comparator.comparing(o -\u003e o.getDateAdded().getDateObject()));"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"        getSortCommandForPerson(CliSyntax.PREFIX_DATEADDED.toString(), false, modelStub).execute();"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        assertEquals(expectedList, modelStub.personsAdded);"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"        return command;"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"     * Generates a new SortCommand with the details of the given list."},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"    private SortCommand getSortCommandForPerson(String sortType, boolean isDescending, Model model) {"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"        SortCommand command \u003d new SortCommand(sortType, isDescending);"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"        return command;"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"     * Populate model list with persons"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"    private void populateModel(Model modelStub) throws Exception {"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"        getAddCommandForPerson(validPerson1, modelStub).execute();"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"        getAddCommandForPerson(validPerson2, modelStub).execute();"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"        getAddCommandForPerson(validPerson3, modelStub).execute();"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"    private class ModelStub implements Model {"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ReadOnlyPerson person) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ArrayList\u003cReadOnlyPerson\u003e person) throws DuplicatePersonException,"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":"                PersonNotFoundException {"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecyclebin) {"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"eldriclim"},"content":"        public void resetRecyclebin(ReadOnlyAddressBook newData) {"},{"lineNumber":179,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":182,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":183,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":187,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":190,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":201,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":"        public void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":208,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"eldriclim"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException {"},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList() {"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredBinList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":"        public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"        public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"                throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"        public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":"                                 ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"        public void sortEvents(LocalDate date) {"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":"        public boolean hasEvenClashes(Event event) {"},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":269,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":270,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":273,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"eldriclim"},"content":"     * A Model stub that always accept the person being added and sort list."},{"lineNumber":275,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"eldriclim"},"content":"    private class ModelStubAcceptingPersonForSort extends ModelStub {"},{"lineNumber":277,"author":{"gitID":"eldriclim"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":278,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":280,"author":{"gitID":"eldriclim"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":281,"author":{"gitID":"eldriclim"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":282,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":284,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":285,"author":{"gitID":"eldriclim"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":286,"author":{"gitID":"eldriclim"},"content":"            if (personsAdded.size() \u003c 1) {"},{"lineNumber":287,"author":{"gitID":"eldriclim"},"content":"                throw new EmptyListException();"},{"lineNumber":288,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":289,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":290,"author":{"gitID":"eldriclim"},"content":"            personsAdded.sort(sortType);"},{"lineNumber":291,"author":{"gitID":"eldriclim"},"content":"            if (isDescending) {"},{"lineNumber":292,"author":{"gitID":"eldriclim"},"content":"                Collections.reverse(personsAdded);"},{"lineNumber":293,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":294,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":296,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":297,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":298,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":299,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":301,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":302,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":303,"author":{"gitID":"eldriclim"},"content":"            return new AddressBook();"},{"lineNumber":304,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":306,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":307,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":308,"author":{"gitID":"eldriclim"},"content":"            return new AddressBook();"},{"lineNumber":309,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":312,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":313,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":25,"eldriclim":288}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"public class HelpCommandTest {"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"    public void execute_help_success() {"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"        CommandResult result \u003d new HelpCommand().execute();"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(SHOWING_HELP_MESSAGE, result.feedbackToUser);"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    public void excutesuccess() {"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        CommandResult result \u003d new HelpCommand(\"add\").execute();"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(AddCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"clear\").execute();"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(ClearCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"delete\").execute();"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(DeleteCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"edit\").execute();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(EditCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"exit\").execute();"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(ExitCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"find\").execute();"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(FindCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"history\").execute();"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(HistoryCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"list\").execute();"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(ListCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"redo\").execute();"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(RedoCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"select\").execute();"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(SelectCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"sort\").execute();"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(SortCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"tagadd\").execute();"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(TagAddCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"tagremove\").execute();"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(TagRemoveCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"undo\").execute();"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(UndoCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"bin-fresh\").execute();"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(BinclearCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"bin-delete\").execute();"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(BindeleteCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"bin-restore\").execute();"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(BinrestoreCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"export\").execute();"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(ExportCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"tagfind\").execute();"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(TagFindCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"birthdayadd\").execute();"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(BirthdayAddCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"birthdayremove\").execute();"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(BirthdayRemoveCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"mapshow\").execute();"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(MapShowCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"maproute\").execute();"},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(MapRouteCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        result \u003d new HelpCommand(\"scheduleremove\").execute();"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(ScheduleRemoveCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"        result \u003d  new HelpCommand(\"theme\").execute();"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"        assertEquals(SwitchThemeCommand.MESSAGE_USAGE, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":92,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/TagAddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_JAMES;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_LUCY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand.TagAddDescriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TagAddCommand."},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"public class TagAddCommandTest {"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"    public void executeTagAddSinglePerson() throws Exception {"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e singleTagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"        singleTagSet.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor tagAddDescriptor \u003d new TagAddDescriptor(personInFilteredList);"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setTags(singleTagSet);"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withATags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand tagAddCommand \u003d prepareCommand(singlePersonIndexList, tagAddDescriptor);"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"                new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        assertCommandSuccess(tagAddCommand, model, createTagListDisplay(editedPerson), expectedModel);"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        tagAddCommand \u003d prepareCommand(singlePersonIndexList,"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"                new TagAddDescriptor(new PersonBuilder().withATags(VALID_TAG_HUSBAND).build()));"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagAddCommand, model, String.format(TagAddCommand.MESSAGE_TAG_ALREADY_EXISTS,"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"                \"[\" + VALID_TAG_HUSBAND + \"]\"));"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"    public void executeInvalidPersonIndexUnfilteredListFailure() {"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand tagAddCommand \u003d prepareCommand(singlePersonIndexList,"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"                new TagAddDescriptor(new PersonBuilder().withATags(VALID_TAG_HUSBAND).build()));"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagAddCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"     * Adds tag to a person in a filtered list where index is larger than size of filtered list,"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"     * but smaller than size of address book"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"    public void executeInvalidPersonIndexFilteredListFailure() {"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(outOfBoundIndex);"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand tagAddCommand \u003d prepareCommand(singlePersonIndexList,"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"                new TagAddDescriptor(new PersonBuilder().withATags(VALID_TAG_HUSBAND).build()));"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagAddCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":"    public void equals() {"},{"lineNumber":110,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList1.add(INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList2.add(INDEX_SECOND_PERSON);"},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"        final TagAddCommand standardCommand \u003d new TagAddCommand(singlePersonIndexList1, DESC_JAMES);"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor copyDescriptor \u003d new TagAddDescriptor(DESC_JAMES);"},{"lineNumber":117,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor copyDescriptor1 \u003d new TagAddDescriptor(DESC_LUCY);"},{"lineNumber":118,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand commandWithSameValues \u003d new TagAddCommand(singlePersonIndexList1, copyDescriptor);"},{"lineNumber":119,"author":{"gitID":"ZhangH795"},"content":"        // same values -\u003e returns true"},{"lineNumber":120,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":121,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":122,"author":{"gitID":"ZhangH795"},"content":"        // same object -\u003e returns true"},{"lineNumber":123,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":124,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":125,"author":{"gitID":"ZhangH795"},"content":"        // same object -\u003e returns true"},{"lineNumber":126,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(copyDescriptor.equals(copyDescriptor));"},{"lineNumber":127,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":128,"author":{"gitID":"ZhangH795"},"content":"        // null -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand \u003d\u003d null);"},{"lineNumber":130,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":131,"author":{"gitID":"ZhangH795"},"content":"        // different types -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":133,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":134,"author":{"gitID":"ZhangH795"},"content":"        // different index -\u003e returns false"},{"lineNumber":135,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new TagAddCommand(singlePersonIndexList2, DESC_JAMES)));"},{"lineNumber":136,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":137,"author":{"gitID":"ZhangH795"},"content":"        // different command -\u003e returns false"},{"lineNumber":138,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new TagAddCommand(singlePersonIndexList1, DESC_LUCY)));"},{"lineNumber":139,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":140,"author":{"gitID":"ZhangH795"},"content":"        // different object -\u003e returns false"},{"lineNumber":141,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(copyDescriptor.equals(standardCommand));"},{"lineNumber":142,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":143,"author":{"gitID":"ZhangH795"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":144,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(copyDescriptor.equals(copyDescriptor1));"},{"lineNumber":145,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":147,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"ZhangH795"},"content":"    public void tagAddDescriptorTest()throws Exception {"},{"lineNumber":149,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":150,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(\"Tags\"));"},{"lineNumber":151,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor tagAddDescriptor \u003d new TagAddDescriptor();"},{"lineNumber":152,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setName(new Name(\"Name\"));"},{"lineNumber":153,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setAddress(new Address(\"Address\"));"},{"lineNumber":154,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setEmail(new Email(\"Email@email.com\"));"},{"lineNumber":155,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setPhone(new Phone(\"123\"));"},{"lineNumber":156,"author":{"gitID":"ZhangH795"},"content":"        tagAddDescriptor.setTags(tagSet);"},{"lineNumber":157,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":158,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor toCopy \u003d new TagAddDescriptor(tagAddDescriptor);"},{"lineNumber":159,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":160,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.equals(toCopy));"},{"lineNumber":161,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":162,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.getName().equals(toCopy.getName()));"},{"lineNumber":163,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":164,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.getPhone().equals(toCopy.getPhone()));"},{"lineNumber":165,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":166,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.getAddress().equals(toCopy.getAddress()));"},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.getEmail().equals(toCopy.getEmail()));"},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagAddDescriptor.getTags().equals(toCopy.getTags()));"},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"     * Creates string for edited tag list."},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":"     * @param editedPerson edited person to show tag list"},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"     * Returns formatted string to indicate edited tag list."},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"    public String createTagListDisplay(Person editedPerson) {"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringStartIndex \u003d 1;"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringEndIndex;"},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplayRaw \u003d editedPerson.getTags().toString();"},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":"        tagListStringEndIndex \u003d tagChangedDisplayRaw.length() - 1;"},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplay \u003d editedPerson.getName() + \" Tag List: \""},{"lineNumber":184,"author":{"gitID":"ZhangH795"},"content":"                + tagChangedDisplayRaw.substring(tagListStringStartIndex, tagListStringEndIndex);"},{"lineNumber":185,"author":{"gitID":"ZhangH795"},"content":"        return String.format(TagAddCommand.MESSAGE_ADD_TAG_SUCCESS, tagChangedDisplay);"},{"lineNumber":186,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":188,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"ZhangH795"},"content":"     * Returns an {@code TagAddCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":190,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"ZhangH795"},"content":"    private TagAddCommand prepareCommand(ArrayList\u003cIndex\u003e index, TagAddDescriptor descriptor) {"},{"lineNumber":192,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand tagAddCommand \u003d new TagAddCommand(index, descriptor);"},{"lineNumber":193,"author":{"gitID":"ZhangH795"},"content":"        tagAddCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":194,"author":{"gitID":"ZhangH795"},"content":"        return tagAddCommand;"},{"lineNumber":195,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":197,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":171,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/BinclearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"Pengyuz"},"content":"import static seedu.address.testutil.TypicalRecycleBin.getTypicalRecyclbin;"},{"lineNumber":6,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"public class BinclearCommandTest {"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"    public void execute_emptyRecyclebin_success() {"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(prepareCommand(model), model, BinclearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalRecyclbin(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(prepareCommand(model), model, BinclearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"     * Generates a new {@code BinclearCommand} which upon execution, clears the contents in bin in {@code model}."},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    private BinclearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        BinclearCommand command \u003d new BinclearCommand();"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":27,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/TagRemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCR_JAMES;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCR_LUCY;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand.TagRemoveDescriptor;"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"public class TagRemoveCommandTest {"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"    public void executeTagRemoveSinglePersonFailure() throws Exception {"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e singleTagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        Tag onlyTag \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"        singleTagSet.add(onlyTag);"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(singleTagSet);"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withOutTag(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d prepareCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"        String expectedMessage \u003d String.format(TagRemoveCommand.MESSAGE_TAG_NOT_FOUND, onlyTag.toString());"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new AddressBook(),"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"                new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagRemoveCommand, model, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    public void executeInvalidPersonIndexUnfilteredListFailure() {"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(outOfBoundIndex);"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d prepareCommand(singlePersonIndexList,"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"                new TagRemoveDescriptor(new PersonBuilder().withOutTag(VALID_TAG_HUSBAND).build()));"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagRemoveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"    public void executeInvalidPersonIndexFilteredListFailure() throws Exception {"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(outOfBoundIndex);"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d prepareCommand(singlePersonIndexList,"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"                new TagRemoveDescriptor(new PersonBuilder().withOutTag(VALID_TAG_HUSBAND).build()));"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"        assertCommandFailure(tagRemoveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"    public void equals() {"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList1.add(INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList2.add(INDEX_SECOND_PERSON);"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"        final TagRemoveCommand standardCommand \u003d new TagRemoveCommand(singlePersonIndexList1, DESCR_JAMES);"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":"        // same values -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor copyDescriptor \u003d new TagRemoveDescriptor(DESCR_JAMES);"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand commandWithSameValues \u003d new TagRemoveCommand(singlePersonIndexList1, copyDescriptor);"},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"        // same object -\u003e returns true"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":117,"author":{"gitID":"ZhangH795"},"content":"        // null -\u003e returns false"},{"lineNumber":118,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand \u003d\u003d null);"},{"lineNumber":119,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":120,"author":{"gitID":"ZhangH795"},"content":"        // different types -\u003e returns false"},{"lineNumber":121,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":122,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":123,"author":{"gitID":"ZhangH795"},"content":"        // different index -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new TagRemoveCommand(singlePersonIndexList2, DESCR_JAMES)));"},{"lineNumber":125,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":126,"author":{"gitID":"ZhangH795"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":127,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(standardCommand.equals(new TagRemoveCommand(singlePersonIndexList1, DESCR_LUCY)));"},{"lineNumber":128,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":130,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"ZhangH795"},"content":"    public void tagRemoveDescriptorTest()throws Exception {"},{"lineNumber":132,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(\"Tags\"));"},{"lineNumber":134,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":135,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setName(new Name(\"Name\"));"},{"lineNumber":136,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setAddress(new Address(\"Address\"));"},{"lineNumber":137,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setEmail(new Email(\"Email@email.com\"));"},{"lineNumber":138,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setPhone(new Phone(\"123\"));"},{"lineNumber":139,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(tagSet);"},{"lineNumber":140,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":141,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor toCopy \u003d new TagRemoveDescriptor(tagRemoveDescriptor);"},{"lineNumber":142,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":143,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.equals(tagRemoveDescriptor));"},{"lineNumber":144,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":145,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.equals(toCopy));"},{"lineNumber":146,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":147,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.getName().equals(toCopy.getName()));"},{"lineNumber":148,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":149,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.getPhone().equals(toCopy.getPhone()));"},{"lineNumber":150,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":151,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.getAddress().equals(toCopy.getAddress()));"},{"lineNumber":152,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":153,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.getEmail().equals(toCopy.getEmail()));"},{"lineNumber":154,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":155,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveDescriptor.getTags().equals(toCopy.getTags()));"},{"lineNumber":156,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":157,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(tagRemoveDescriptor \u003d\u003d null);"},{"lineNumber":158,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":160,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"ZhangH795"},"content":"    public void createEditedPersonTestSuccess() throws Exception {"},{"lineNumber":162,"author":{"gitID":"ZhangH795"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":163,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":165,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":166,"author":{"gitID":"ZhangH795"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e singleTagSet \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":"        Tag onlyTag \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":"        singleTagSet.add(onlyTag);"},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor(personInFilteredList);"},{"lineNumber":172,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(singleTagSet);"},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"        Person person \u003d tagRemoveCommand.createEditedPerson(personInFilteredList, tagRemoveDescriptor);"},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(person.getName().equals(personInFilteredList.getName()));"},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(person.getPhone().equals(personInFilteredList.getPhone()));"},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(person.getAddress().equals(personInFilteredList.getAddress()));"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(person.getEmail().equals(personInFilteredList.getEmail()));"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(person.getTags().equals(tagRemoveDescriptor.getTags()));"},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"ZhangH795"},"content":"    public void containsTagTestSuccess()throws Exception {"},{"lineNumber":185,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":187,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"ZhangH795"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":189,"author":{"gitID":"ZhangH795"},"content":"        tagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":190,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":191,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":192,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":193,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(tagSet);"},{"lineNumber":194,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":195,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagRemoveCommand.containsTag(tagList));"},{"lineNumber":196,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":198,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"ZhangH795"},"content":"    public void containsTagTestFail()throws Exception {"},{"lineNumber":200,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":201,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":202,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":203,"author":{"gitID":"ZhangH795"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":204,"author":{"gitID":"ZhangH795"},"content":"        tagList.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":205,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":206,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":207,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(tagSet);"},{"lineNumber":208,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":209,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(tagRemoveCommand.containsTag(tagList));"},{"lineNumber":210,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":212,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"ZhangH795"},"content":"    public void makeFullIndexListTestSuccess()throws Exception {"},{"lineNumber":214,"author":{"gitID":"ZhangH795"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":215,"author":{"gitID":"ZhangH795"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":216,"author":{"gitID":"ZhangH795"},"content":"        personList.add(personInFilteredList);"},{"lineNumber":217,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":218,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":219,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":220,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":221,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":222,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":223,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":224,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(tagSet);"},{"lineNumber":225,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":226,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d tagRemoveCommand.makeFullIndexList(personList.size());"},{"lineNumber":227,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(indexList.size() \u003d\u003d personList.size());"},{"lineNumber":228,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":230,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"ZhangH795"},"content":"    public void createModifiableTagSetTest()throws Exception {"},{"lineNumber":232,"author":{"gitID":"ZhangH795"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":233,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e originalTagSet \u003d personInFilteredList.getTags();"},{"lineNumber":234,"author":{"gitID":"ZhangH795"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":235,"author":{"gitID":"ZhangH795"},"content":"        personList.add(personInFilteredList);"},{"lineNumber":236,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":237,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e singlePersonIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":238,"author":{"gitID":"ZhangH795"},"content":"        singlePersonIndexList.add(INDEX_FIRST_PERSON);"},{"lineNumber":239,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":240,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":241,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":242,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":243,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveDescriptor.setTags(tagSet);"},{"lineNumber":244,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(singlePersonIndexList, tagRemoveDescriptor);"},{"lineNumber":245,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagSetCopy \u003d tagRemoveCommand.createModifiableTagSet(originalTagSet, new Tag(\"tag\"));"},{"lineNumber":246,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(tagSetCopy.equals(originalTagSet));"},{"lineNumber":247,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":249,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"ZhangH795"},"content":"     * Returns an {@code TagRemoveCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":251,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"ZhangH795"},"content":"    private TagRemoveCommand prepareCommand(ArrayList\u003cIndex\u003e index, TagRemoveDescriptor descriptor) {"},{"lineNumber":253,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand tagRemoveCommand \u003d new TagRemoveCommand(index, descriptor);"},{"lineNumber":254,"author":{"gitID":"ZhangH795"},"content":"        tagRemoveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":255,"author":{"gitID":"ZhangH795"},"content":"        return tagRemoveCommand;"},{"lineNumber":256,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":235,"-":22}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in address book{@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":1,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleAddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import java.time.Duration;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"public class ScheduleAddCommandTest {"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    public void testScheduleAddCommand() throws Exception {"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        EventName eventName \u003d new EventName(\"Event name\");"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        EventTime eventTime \u003d new EventTime(LocalDateTime.now(), Duration.ofMinutes(5));"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"        EventDuration eventDuration \u003d new EventDuration(Duration.ofMinutes(5));"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e uniqueMemberIndexes \u003d new HashSet\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        uniqueMemberIndexes.add(new Index(0));"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand command;"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        command \u003d getScheduleAddCommand(eventName, eventTime, eventDuration,"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"                uniqueMemberIndexes, modelStub);"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e expectedMember \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        expectedMember.add(TypicalPersons.ALICE);"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        Event event \u003d new Event(new MemberList(expectedMember), eventName, eventTime, eventDuration);"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        assertEquals(commandResult.feedbackToUser,"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"                String.format(ScheduleAddCommand.MESSAGE_SUCCESS, event.toString()));"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"    public void invalidIndexTest() throws Exception {"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        thrown.expectMessage(ScheduleAddCommand.ERROR_INVALID_INDEX);"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        EventName eventName \u003d new EventName(\"Event name\");"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"        EventTime eventTime \u003d new EventTime(LocalDateTime.now(), Duration.ofMinutes(5));"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        EventDuration eventDuration \u003d new EventDuration(Duration.ofMinutes(5));"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e uniqueMemberIndexes \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        uniqueMemberIndexes.add(new Index(modelStub.getFilteredPersonList().size()));"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand command;"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        command \u003d getScheduleAddCommand(eventName, eventTime, eventDuration,"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"                uniqueMemberIndexes, modelStub);"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        command.execute();"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"    public void testScheduleRemoveEquals() throws Exception {"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"        EventName eventName \u003d new EventName(\"Event name\");"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        EventName eventName1 \u003d new EventName(\"Event name1\");"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        EventTime eventTime \u003d new EventTime(LocalDateTime.now(), Duration.ofMinutes(5));"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        EventTime eventTime1 \u003d new EventTime(LocalDateTime.now(), Duration.ofMinutes(2));"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"        EventDuration eventDuration \u003d new EventDuration(Duration.ofMinutes(5));"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"        EventDuration eventDuration1 \u003d new EventDuration(Duration.ofMinutes(2));"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e uniqueMemberIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(new Index(0)));"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e uniqueMemberIndexes1 \u003d new HashSet\u003c\u003e(Arrays.asList(new Index(1)));"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand s1 \u003d new ScheduleAddCommand(eventName, eventTime, eventDuration, uniqueMemberIndexes);"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand s2Same \u003d new ScheduleAddCommand(eventName, eventTime, eventDuration, uniqueMemberIndexes);"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand s3DifferentName \u003d new ScheduleAddCommand(eventName1, eventTime, eventDuration,"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"                uniqueMemberIndexes);"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        //eventTime and eventDuration has to be similar due to a check done in Event class"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand s4DifferentTime \u003d new ScheduleAddCommand(eventName, eventTime1, eventDuration1,"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"                uniqueMemberIndexes);"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand s5DifferentMember \u003d new ScheduleAddCommand(eventName, eventTime, eventDuration,"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"                uniqueMemberIndexes1);"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        assertTrue(s1.equals(s2Same));"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"        assertFalse(s1.equals(s3DifferentName));"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"        assertFalse(s1.equals(s4DifferentTime));"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"        assertFalse(s1.equals(s5DifferentMember));"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"     * Generates a new ScheduleAddCommand with the details of the given event."},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"    private ScheduleAddCommand getScheduleAddCommand(EventName eventName, EventTime eventTime,"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"                                                     EventDuration eventDuration, Set\u003cIndex\u003e uniqueMemberIndexes,"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"                                                     Model model) {"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"        ScheduleAddCommand command \u003d new ScheduleAddCommand(eventName, eventTime,"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"                eventDuration, uniqueMemberIndexes);"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        return command;"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"    private class ModelStub implements Model {"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ReadOnlyPerson person) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ArrayList\u003cReadOnlyPerson\u003e person) throws DuplicatePersonException,"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":"                PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecycleibin) {"},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":"        public void resetRecyclebin(ReadOnlyAddressBook newData) {"},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":178,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":182,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":188,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":190,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":"        public void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":201,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException {"},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":207,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":209,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList() {"},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredBinList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"        public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":"        public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":"                throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"        public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"                                 ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"        public void sortEvents(LocalDate date) {"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":"        public boolean hasEvenClashes(Event event) {"},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":269,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"eldriclim"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":271,"author":{"gitID":"eldriclim"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":272,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":273,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"eldriclim"},"content":"        public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":275,"author":{"gitID":"eldriclim"},"content":"                throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":276,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":277,"author":{"gitID":"eldriclim"},"content":"            ArrayList\u003cReadOnlyPerson\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":278,"author":{"gitID":"eldriclim"},"content":"            targets.forEach(p -\u003e members.add(p));"},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":280,"author":{"gitID":"eldriclim"},"content":"            event.setMemberList(new MemberList(targets));"},{"lineNumber":281,"author":{"gitID":"eldriclim"},"content":"            eventsAdded.add(new Event(event));"},{"lineNumber":282,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":284,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":285,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":286,"author":{"gitID":"eldriclim"},"content":"            ArrayList\u003cReadOnlyPerson\u003e stubList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":287,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.ALICE);"},{"lineNumber":288,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.BOB);"},{"lineNumber":289,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.CARL);"},{"lineNumber":290,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":291,"author":{"gitID":"eldriclim"},"content":"            return FXCollections.observableArrayList(stubList);"},{"lineNumber":292,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":294,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":295,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":296,"author":{"gitID":"eldriclim"},"content":"            return new AddressBook();"},{"lineNumber":297,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":299,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":300,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":301,"author":{"gitID":"eldriclim"},"content":"            return new AddressBook();"},{"lineNumber":302,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":304,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":305,"author":{"gitID":"eldriclim"},"content":"        public boolean hasEvenClashes(Event event) {"},{"lineNumber":306,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":307,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":309,"author":{"gitID":"eldriclim"},"content":"        //Overwrite default model stub as filtered list is updated during execution"},{"lineNumber":310,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":311,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":312,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":313,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"dalessr":8,"-":20,"eldriclim":287}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"            ArrayList\u003cReadOnlyPerson\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"            deleteList.add(personToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"                model.deletePerson(deleteList);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"            } catch (DuplicatePersonException d) {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"                fail(\"Impossible: personToDelete was unique from model\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":7,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() {"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"n/ Kurz Elle Kunz\");"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"    public void execute_multiplePhoneKeywords_multiplePersonsFound() {"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"p/ 95352563 9482224 9482427\");"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"    public void execute_multipleEmailKeywords_multiplePersonsFound() {"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"e/ heinz@example.com werner@example.com lydia@example.com\");"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"    public void execute_multipleAddressKeywords_singlePersonsFound() {"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"a/ little tokyo\");"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(FIONA));"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"    public void execute_singleAddressKeyword_multiplePersonsFound() {"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"a/ street\");"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, GEORGE));"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"    public void execute_singleNameSubstring_multiplePersonsFound() {"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"n/ er\");"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, DANIEL, ELLE));"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"    public void execute_multipleNameSubstrings_multiplePersonsFound() {"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"n/ er kun ai\");"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, DANIEL, ELLE, FIONA));"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"    public void execute_singlePhoneSubstring_multiplePersonsFound() {"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"p/ 24\");"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ELLE, FIONA, GEORGE));"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"    public void execute_multiplePhoneSubstrings_multiplePersonsFound() {"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"p/ 9535 8765\");"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, CARL, DANIEL));"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"    public void execute_singleEmailSubstring_multiplePersonsFound() {"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"e/ rne\");"},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DANIEL, ELLE));"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"    public void execute_multipleEmailSubstrings_multiplePersonsFound() {"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"        FindCommand command \u003d prepareCommand(\"e/ johnd heinz cornelia\");"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, CARL, DANIEL));"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"    //@@author"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":86,"-":87}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":"        public void restorePerson(ReadOnlyPerson person) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"        public void restorePerson(ArrayList\u003cReadOnlyPerson\u003e person) throws DuplicatePersonException,"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"                PersonNotFoundException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecycleibin) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void resetRecyclebin(ReadOnlyAddressBook newData) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":"        public void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void updateFilteredBinList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":"        public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"        public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":"                throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"eldriclim"},"content":"        public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":207,"author":{"gitID":"eldriclim"},"content":"                                 ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":208,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":"        public void sortEvents(LocalDate date) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"        public boolean hasEvenClashes(Event event) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":239,"author":{"gitID":"Pengyuz"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":261,"author":{"gitID":"Pengyuz"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":11,"-":217,"eldriclim":39}},{"path":"src/test/java/seedu/address/logic/commands/MapRouteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelFindRouteEvent;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":" * Contains integration tests (interaction with the Model) for {@code MapRouteCommand}."},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"public class MapRouteCommandTest {"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    private String startLocation \u003d \"Clementi Street\";"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, startLocation);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON, startLocation);"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(lastPersonIndex, startLocation);"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        assertExecutionFailure(outOfBoundsIndex, startLocation, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, startLocation);"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"        assertExecutionFailure(outOfBoundsIndex, startLocation, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteFirstCommand \u003d new MapRouteCommand(INDEX_FIRST_PERSON, startLocation);"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteSecondCommand \u003d new MapRouteCommand(INDEX_SECOND_PERSON, startLocation);"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"        assertTrue(mapRouteFirstCommand.equals(mapRouteFirstCommand));"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteFirstCommandCopy \u003d new MapRouteCommand(INDEX_FIRST_PERSON, startLocation);"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        assertTrue(mapRouteFirstCommand.equals(mapRouteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapRouteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapRouteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"        assertFalse(mapRouteFirstCommand.equals(mapRouteSecondCommand));"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"     * Executes a {@code MapRouteCommand} with the given {@code index, location}, and checks that"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"     * {@code BrowserPanelFindRouteEvent} is raised with the correct index."},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"    private void assertExecutionSuccess(Index index, String location) {"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteCommand \u003d prepareCommand(index, location);"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"            CommandResult commandResult \u003d mapRouteCommand.execute();"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"            assertEquals(String.format(mapRouteCommand.MESSAGE_FIND_ROUTE_SUCCESS, index.getOneBased()),"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"        } catch (CommandException ce) {"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        BrowserPanelFindRouteEvent lastEvent \u003d (BrowserPanelFindRouteEvent)"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        assertEquals(model.getFilteredPersonList().get(index.getZeroBased()), lastEvent.getSelectedPerson());"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"        assertEquals(location, lastEvent.getAddress());"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"     * Executes a {@code MapRouteCommand} with the given {@code index, location}, and checks that a"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"     * {@code CommandException} is thrown with the {@code expectedMessage}."},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"    private void assertExecutionFailure(Index index, String location, String expectedMessage) {"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteCommand \u003d prepareCommand(index, location);"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"            mapRouteCommand.execute();"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"        } catch (CommandException ce) {"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"     * Returns a {@code MapRouteCommand} with parameters {@code index, location}."},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"    private MapRouteCommand prepareCommand(Index index, String location) {"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"        MapRouteCommand mapRouteCommand \u003d new MapRouteCommand(index, location);"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"        mapRouteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"        return mapRouteCommand;"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":144,"-":1}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"    public void test_nameContainsSubstrings_returnsTrue() {"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        // One substring"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Ali\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"        // Multiple substrings"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ali\", \"ob\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        // Only one matching substring"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"ob\", \"rol\"));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        // Mixed-case substrings"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"LIce\", \"OB\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"    public void test_nameDoesNotContainSubstrings_returnsFalse() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"alicebob\"));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":15,"-":90}},{"path":"src/test/java/seedu/address/model/person/DateAddedTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.parser.exceptions.DateParseException;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"public class DateAddedTest {"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"    @Test(expected \u003d DateParseException.class)"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    public void testInvalidDate() throws IllegalValueException {"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"        new DateAdded(\"Gibberish\");"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    public void testEqual() throws IllegalValueException {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"        DateAdded d1 \u003d new DateAdded(\"01/01/2000 11:11:11\");"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"        DateAdded d2 \u003d new DateAdded(\"01/01/2000 11:11:11\");"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        DateAdded d3 \u003d new DateAdded(\"01/01/2000 22:22:22\");"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        assertTrue(d1.equals(d1));"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        assertTrue(d1.equals(d2));"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"        assertFalse(d1.equals(d3));"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":8,"eldriclim":22}},{"path":"src/test/java/seedu/address/logic/commands/TagFindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":" * Contains integration tests (interaction with the Model) for {@code TagFindCommand}."},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"public class TagFindCommandTest {"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate firstPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(\"first\", looseFind);"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate secondPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(\"second\", looseFind);"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand findFirstCommand \u003d new TagFindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand findSecondCommand \u003d new TagFindCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"        // same values -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand findFirstCommandCopy \u003d new TagFindCommand(firstPredicate);"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(findFirstCommand \u003d\u003d null);"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        // different person -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"    public void executeZeroKeywordNoPersonFound() {"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand command \u003d prepareCommand(\" \", looseFind);"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"    public void executeSinglePersonFound() {"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand command \u003d prepareCommand(\"owesMoney\", looseFind);"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"    public void executeMultiplePersonsFound() {"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand command \u003d prepareCommand(\"Friends\", looseFind);"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"     * Parses {@code userInput} into a {@code TagFindCommand}."},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"    private TagFindCommand prepareCommand(String userInput, boolean looseFind) {"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        TagFindCommand command \u003d"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"                new TagFindCommand(new TagMatchingKeywordPredicate(userInput, looseFind));"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"    private void assertCommandSuccess(TagFindCommand command, String expectedMessage,"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":110,"author":{"gitID":"ZhangH795"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":88,"dalessr":7,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/BindeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"Pengyuz"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstBinPersonOnly;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"import static seedu.address.testutil.TypicalRecycleBin.getTypicalRecyclbin;"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code BindeleteCommand}."},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"public class BindeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalRecyclbin(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e personsToDelete1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e persontodelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.add(personToDelete);"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand1 \u003d prepareCommand(personsToDelete1);"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage1 \u003d bindeleteCommand1.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel1 \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        expectedModel1.deleteBinPerson(persontodelete);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(bindeleteCommand1, model, expectedMessage1, expectedModel1);"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success2() throws Exception {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson secondToDelete \u003d model.getRecycleBinPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.clear();"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.add(personToDelete);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.add(secondToDelete);"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.clear();"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(INDEX_SECOND_PERSON);"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand \u003d prepareCommand(personsToDelete1);"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage1 \u003d BindeleteCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel1 \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        expectedModel1.deleteBinPerson(persontodelete);"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(bindeleteCommand, model, expectedMessage1, expectedModel1);"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getRecycleBinPersonList().size() + 1);"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.clear();"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(outOfBoundIndex);"},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand \u003d prepareCommand(personsToDelete1);"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(bindeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"        showFirstBinPersonOnly(model);"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.clear();"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(INDEX_FIRST_PERSON);"},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.clear();"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"        persontodelete.add(personToDelete);"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand \u003d prepareCommand(personsToDelete1);"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d String.format(BindeleteCommand.MESSAGE_SUCCESS, personToDelete);"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.deleteBinPerson(persontodelete);"},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"        showNoBinPerson(expectedModel);"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(bindeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        showFirstBinPersonOnly(model);"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.clear();"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"        personsToDelete1.add(INDEX_SECOND_PERSON);"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecycleBin().getPersonList().size());"},{"lineNumber":121,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":122,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand \u003d prepareCommand(personsToDelete1);"},{"lineNumber":123,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":124,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(bindeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":128,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":129,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Pengyuz"},"content":"    public void equals() {"},{"lineNumber":131,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e first \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e second \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"Pengyuz"},"content":"        first.add(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"Pengyuz"},"content":"        second.add(INDEX_SECOND_PERSON);"},{"lineNumber":135,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteFirstCommand \u003d new BindeleteCommand(first);"},{"lineNumber":136,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteSecondCommand \u003d new BindeleteCommand(second);"},{"lineNumber":137,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":138,"author":{"gitID":"Pengyuz"},"content":"        // same object -\u003e returns true"},{"lineNumber":139,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(bindeleteFirstCommand.equals(bindeleteFirstCommand));"},{"lineNumber":140,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":141,"author":{"gitID":"Pengyuz"},"content":"        // same values -\u003e returns true"},{"lineNumber":142,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand deleteFirstCommandCopy \u003d new BindeleteCommand(first);"},{"lineNumber":143,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(bindeleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":144,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":145,"author":{"gitID":"Pengyuz"},"content":"        // different types -\u003e returns false"},{"lineNumber":146,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(bindeleteFirstCommand.equals(1));"},{"lineNumber":147,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":148,"author":{"gitID":"Pengyuz"},"content":"        // null -\u003e returns false"},{"lineNumber":149,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(bindeleteFirstCommand.equals(null));"},{"lineNumber":150,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":151,"author":{"gitID":"Pengyuz"},"content":"        // different person -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(bindeleteFirstCommand.equals(bindeleteSecondCommand));"},{"lineNumber":153,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"Pengyuz"},"content":"     * Returns a {@code BindeleteCommand} with the parameter {@code index}."},{"lineNumber":157,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"Pengyuz"},"content":"    private BindeleteCommand prepareCommand(ArrayList\u003cIndex\u003e indexes) {"},{"lineNumber":159,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":160,"author":{"gitID":"Pengyuz"},"content":"        BindeleteCommand bindeleteCommand \u003d new BindeleteCommand(indexes);"},{"lineNumber":161,"author":{"gitID":"Pengyuz"},"content":"        bindeleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":162,"author":{"gitID":"Pengyuz"},"content":"        return bindeleteCommand;"},{"lineNumber":163,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":165,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"Pengyuz"},"content":"     * Updates {@code model}\u0027s recycle bin filtered list to show no one."},{"lineNumber":168,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"Pengyuz"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":170,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":171,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":172,"author":{"gitID":"Pengyuz"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":173,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":175,"author":{"gitID":"Pengyuz"},"content":"    private void showNoBinPerson(Model model) {"},{"lineNumber":176,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredBinList(p-\u003e false);"},{"lineNumber":177,"author":{"gitID":"Pengyuz"},"content":"        assert model.getRecycleBinPersonList().isEmpty();"},{"lineNumber":178,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":180,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":160,"ZhangH795":1,"-":19}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        List\u003cEvent\u003e newEvents \u003d new ArrayList\u003c\u003e(ALICE.getEvents());"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newEvents);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"                        Collection\u003c? extends Event\u003e events) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"            this.events.setAll(events);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"            return events;"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":93,"eldriclim":12}},{"path":"src/test/java/seedu/address/model/event/EventTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"public class EventTimeTest {"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    public void testEventTimeCreationSuccess() {"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"        Duration d \u003d Duration.ofMinutes(90);"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"        EventTime time1 \u003d new EventTime(now, d);"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        EventTime time2 \u003d new EventTime(now, d);"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"        EventTime time3 \u003d new EventTime(now, Duration.ofMinutes(10));"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        EventTime time4 \u003d new EventTime(now.plus(d), d);"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        assertEquals(now.format(formatter), time1.toString());"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        assertEquals(now, time1.getStart());"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        assertEquals(now.plus(d), time1.getEnd());"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        assertEquals(Objects.hash(now, d), time1.hashCode());"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        assertTrue(time1.equals(time2));"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        assertFalse(time1.equals(time3));"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        assertFalse(time1.equals(time4));"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    public void testEventTimeUpcoming() {"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        EventTime futureEvent \u003d new EventTime(LocalDateTime.now().plus(Duration.ofDays(3)),"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"                Duration.ofMinutes(10));"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        EventTime pastEvent \u003d new EventTime(LocalDateTime.now().minus(Duration.ofDays(3)),"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"                Duration.ofMinutes(10));"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        assertTrue(futureEvent.isUpcoming());"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        assertFalse(pastEvent.isUpcoming());"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":48,"-":4}},{"path":"src/test/java/seedu/address/model/person/TagMatchingKeywordPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangH795"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLLEGE_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"public class TagMatchingKeywordPredicateTest {"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"        String firstPredicateKeyword \u003d \"first\";"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"        String secondPredicateKeyword \u003d \"second\";"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"        String thirdPredicateKeyword \u003d \"First\";"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate firstPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(firstPredicateKeyword, looseFind);"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate secondPredicate \u003d"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(secondPredicateKeyword, looseFind);"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate thirdPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(thirdPredicateKeyword, looseFind);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate firstPredicateCopy \u003d"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"                new TagMatchingKeywordPredicate(firstPredicateKeyword, looseFind);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"        // same value ignoring case -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(firstPredicate.equals(thirdPredicate));"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"    public void testTagsContainsKeywordReturnsTrue() {"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate1 \u003d new TagMatchingKeywordPredicate(VALID_TAG_HUSBAND, looseFind);"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate2 \u003d new TagMatchingKeywordPredicate(VALID_TAG_COLLEGE_FRIEND, looseFind);"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        // One keyword"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate1.test(new PersonBuilder().withTags(\"husband\").build()));"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        // One keyword"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate1.test(new PersonBuilder().withTags(\"husbands\").build()));"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        //Mixed-case keyword"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate1.test(new PersonBuilder().withTags(\"HUSBAND\").build()));"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"        // Multiple words keyword"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate2.test(new PersonBuilder().withTags(\"college friend\").build()));"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        //Mixed-case multiple words keyword"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate2.test(new PersonBuilder().withTags(\"College Friend\").build()));"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        // Multiple words keyword"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(predicate2.test(new PersonBuilder().withTags(\"college friend 1\").build()));"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"    public void testTagsDoesNotMatchExactlyReturnsFalse() {"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d false;"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate1 \u003d new TagMatchingKeywordPredicate(VALID_TAG_HUSBAND, looseFind);"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate2 \u003d new TagMatchingKeywordPredicate(VALID_TAG_COLLEGE_FRIEND, looseFind);"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"        // One keyword"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate1.test(new PersonBuilder().withTags(\"husbands\").build()));"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        //Mixed-case keyword"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate1.test(new PersonBuilder().withTags(\"HUSBAND\").build()));"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"        //Mixed-case multiple words keyword"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate2.test(new PersonBuilder().withTags(\"College Friend\").build()));"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"        // Multiple words keyword"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate2.test(new PersonBuilder().withTags(\"college friend 1\").build()));"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"    public void testTagsDoesNotContainKeywordReturnsFalse() {"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"        // Zero keyword"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate \u003d new TagMatchingKeywordPredicate(\"\", looseFind);"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"        // Non-matching keyword"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"        predicate \u003d new TagMatchingKeywordPredicate(VALID_TAG_HUSBAND, looseFind);"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"Alice Bob\").build()));"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"        // Keyword match name, but does not match tag"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"        predicate \u003d new TagMatchingKeywordPredicate(\"Alice\", looseFind);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":"    public void testKeywordReturnsTrue() {"},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate \u003d new TagMatchingKeywordPredicate(\"\", looseFind);"},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":"        assertTrue(\"\".equals(predicate.getKeyword()));"},{"lineNumber":117,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":119,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":95,"-":24}},{"path":"src/test/java/seedu/address/model/event/EventNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"public class EventNameTest {"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    public void testInvalidInput() throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        EventName e1 \u003d new EventName(\"\");"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    public void testEventNameCreationSuccess() throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        EventName e \u003d new EventName(\"Event 1\");"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        EventName e1 \u003d new EventName(\"Event 1\");"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        EventName e2 \u003d new EventName(\"Event 3\");"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"Event 1\", e.toString());"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"Event 1\".hashCode(), e.hashCode());"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        assertTrue(e.equals(e1));"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"        assertTrue(EventName.isValidName(e1.toString()));"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        assertFalse(e.equals(e2));"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":35,"-":7}},{"path":"src/test/java/seedu/address/model/event/EventDurationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"public class EventDurationTest {"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDuration1 \u003d new EventDuration(Duration.ofMinutes(90));"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDuration2 \u003d new EventDuration(Duration.ofMinutes(90));"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDuration3 \u003d new EventDuration(Duration.ofMinutes(120));"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDuration4 \u003d new EventDuration(Duration.ofMinutes(30));"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDuration5 \u003d new EventDuration(Duration.ofSeconds(30));"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    public void testEventDurationEquals() {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"        //90min \u003d 90min"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventDuration1.equals(eventDuration2));"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        //90min !\u003d 120min"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        assertFalse(eventDuration1.equals(eventDuration3));"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"        //Checks if getEventDuration returns correct Duration value"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        assertEquals(eventDuration1.getDuration(), Duration.ofMinutes(90));"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    public void testEventDurationToString() {"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        //90min \u003d 1hr30min"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        String output \u003d eventDuration1.toString();"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"1hr30min\", output);"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        //120min \u003d 2hr"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"        output \u003d eventDuration3.toString();"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"2hr\", output);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        //30min \u003d 30min"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"        output \u003d eventDuration4.toString();"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"30min\", output);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        //30sec \u003d 0min"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        output \u003d eventDuration5.toString();"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"0min\", output);"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    public void testEventDurationHashcode() {"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"        assertEquals(eventDuration1.hashCode(), Duration.ofMinutes(90).hashCode());"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":52,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/BinrestoreCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"Pengyuz"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstBinPersonOnly;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"import static seedu.address.testutil.TypicalRecycleBin.getTypicalRecyclbin;"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code BinrestoreCommand}."},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"public class BinrestoreCommandTest {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalRecyclbin(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e personsToRestore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e persontorestore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.add(personToDelete);"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand1 \u003d prepareCommand(personsToRestore);"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage1 \u003d binrestoreCommand1.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel1 \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        expectedModel1.restorePerson(persontorestore);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(binrestoreCommand1, model, expectedMessage1, expectedModel1);"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexUnfilteredList_success2() throws Exception {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToRestore \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson secondToRestore \u003d model.getRecycleBinPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.clear();"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.add(personToRestore);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.add(secondToRestore);"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.clear();"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(INDEX_SECOND_PERSON);"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand \u003d prepareCommand(personsToRestore);"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage1 \u003d BinrestoreCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        ModelManager expectedModel1 \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        expectedModel1.restorePerson(persontorestore);"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(binrestoreCommand, model, expectedMessage1, expectedModel1);"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getRecycleBinPersonList().size() + 1);"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.clear();"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(outOfBoundIndex);"},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand \u003d prepareCommand(personsToRestore);"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(binrestoreCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"        showFirstBinPersonOnly(model);"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyPerson personToDelete \u003d model.getRecycleBinPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.clear();"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(INDEX_FIRST_PERSON);"},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.clear();"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"        persontorestore.add(personToDelete);"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand \u003d prepareCommand(personsToRestore);"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"        String expectedMessage \u003d String.format(BinrestoreCommand.MESSAGE_SUCCESS, personToDelete);"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getRecycleBin(), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"        expectedModel.restorePerson(persontorestore);"},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"        showNoBinPerson(expectedModel);"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"        assertCommandSuccess(binrestoreCommand, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        showFirstBinPersonOnly(model);"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.clear();"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"        personsToRestore.add(INDEX_SECOND_PERSON);"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecycleBin().getPersonList().size());"},{"lineNumber":121,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":122,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand \u003d prepareCommand(personsToRestore);"},{"lineNumber":123,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":124,"author":{"gitID":"Pengyuz"},"content":"        assertCommandFailure(binrestoreCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":128,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":129,"author":{"gitID":"Pengyuz"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Pengyuz"},"content":"    public void equals() {"},{"lineNumber":131,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e first \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e second \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"Pengyuz"},"content":"        first.add(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"Pengyuz"},"content":"        second.add(INDEX_SECOND_PERSON);"},{"lineNumber":135,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreFirstCommand \u003d new BinrestoreCommand(first);"},{"lineNumber":136,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreSecondCommand \u003d new BinrestoreCommand(second);"},{"lineNumber":137,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":138,"author":{"gitID":"Pengyuz"},"content":"        // same object -\u003e returns true"},{"lineNumber":139,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(binrestoreFirstCommand.equals(binrestoreFirstCommand));"},{"lineNumber":140,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":141,"author":{"gitID":"Pengyuz"},"content":"        // same values -\u003e returns true"},{"lineNumber":142,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreFirstCommandCopy \u003d new BinrestoreCommand(first);"},{"lineNumber":143,"author":{"gitID":"Pengyuz"},"content":"        assertTrue(binrestoreFirstCommand.equals(binrestoreFirstCommandCopy));"},{"lineNumber":144,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":145,"author":{"gitID":"Pengyuz"},"content":"        // different types -\u003e returns false"},{"lineNumber":146,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(binrestoreFirstCommand.equals(1));"},{"lineNumber":147,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":148,"author":{"gitID":"Pengyuz"},"content":"        // null -\u003e returns false"},{"lineNumber":149,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(binrestoreFirstCommand.equals(null));"},{"lineNumber":150,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":151,"author":{"gitID":"Pengyuz"},"content":"        // different person -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"Pengyuz"},"content":"        assertFalse(binrestoreFirstCommand.equals(binrestoreSecondCommand));"},{"lineNumber":153,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"Pengyuz"},"content":"     * Returns a {@code BinrestoreCommand} with the parameter {@code index}."},{"lineNumber":157,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"Pengyuz"},"content":"    private BinrestoreCommand prepareCommand(ArrayList\u003cIndex\u003e indexes) {"},{"lineNumber":159,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":160,"author":{"gitID":"Pengyuz"},"content":"        BinrestoreCommand binrestoreCommand \u003d new BinrestoreCommand(indexes);"},{"lineNumber":161,"author":{"gitID":"Pengyuz"},"content":"        binrestoreCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":162,"author":{"gitID":"Pengyuz"},"content":"        return binrestoreCommand;"},{"lineNumber":163,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":165,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"Pengyuz"},"content":"     * Updates {@code model}\u0027s recycle bin filtered list to show no one."},{"lineNumber":168,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"Pengyuz"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":170,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":171,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":172,"author":{"gitID":"Pengyuz"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":173,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":175,"author":{"gitID":"Pengyuz"},"content":"    private void showNoBinPerson(Model model) {"},{"lineNumber":176,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredBinList(p-\u003e false);"},{"lineNumber":177,"author":{"gitID":"Pengyuz"},"content":"        assert model.getRecycleBinPersonList().isEmpty();"},{"lineNumber":178,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":180,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":160,"ZhangH795":1,"-":19}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"public class UniqueEventListTest {"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private UniqueEventList eventList \u003d new UniqueEventList();"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    public void createUniqueEventListSuccess() throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.ALICE);"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.BOB);"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        Event e1 \u003d new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(10)),"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)));"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"        Event e2 \u003d new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(10)),"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)));"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        Event e3 \u003d new Event(new MemberList(list), new EventName(\"2\"),"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(10)),"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)));"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"        Event e4 \u003d new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now.plus(Duration.ofMinutes(1)), Duration.ofMinutes(10)),"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)));"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        Event e5 \u003d new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(1)),"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(1)));"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        eventList.add(e1);"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        eventList.add(e3);"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        eventList.add(e4);"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        eventList.add(e5);"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        //Test contains"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventList.contains(e1));"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventList.contains(new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(10)),"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)))));"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        //Test equals"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        assertTrue(e1.equals(e2));"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        assertTrue(e1.equals(new Event(new MemberList(list), new EventName(\"1\"),"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofMinutes(10)),"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(10)))));"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"        assertFalse(e1.equals(e3));"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"    public void testEventClashes() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime past \u003d now.minus(Duration.ofHours(1));"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime future \u003d now.plus(Duration.ofHours(1));"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        Event e1 \u003d new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofHours(2)),"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(2)));"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        eventList.add(e1);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        //Test for overlaps"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"                new EventTime(future, Duration.ofHours(2)),"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(2)))));"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        //Test for in between"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"                new EventTime(future, Duration.ofMinutes(30)),"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(30)))));"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        //Test for exact date-time match"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        assertTrue(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now, Duration.ofHours(2)),"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(2)))));"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        //Test for adjacent events"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        assertFalse(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now.minus(Duration.ofHours(2)), Duration.ofHours(1)),"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(1)))));"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        assertFalse(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now.plus(Duration.ofHours(2)), Duration.ofHours(1)),"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(1)))));"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        //Test for adjacent events with time buffer"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        assertFalse(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now.minus(Duration.ofHours(5)), Duration.ofHours(1)),"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(1)))));"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"        assertFalse(eventList.hasClashes(new Event(new MemberList(), new EventName(\"1\"),"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"                new EventTime(now.plus(Duration.ofHours(5)), Duration.ofHours(1)),"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofHours(1)))));"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":102,"-":9}},{"path":"src/test/java/seedu/address/model/event/MemberListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.EventOutputUtil;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"public class MemberListTest {"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    public void testMemberListCreationNonEmpty() {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"        list1.add(TypicalPersons.ALICE);"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        list1.add(TypicalPersons.BOB);"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        MemberList m1 \u003d new MemberList(list1);"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        list2.add(TypicalPersons.ALICE);"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        list2.add(TypicalPersons.BOB);"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        MemberList m2 \u003d new MemberList(list2);"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list3 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        list3.add(TypicalPersons.DANIEL);"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        list3.add(TypicalPersons.CARL);"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        MemberList m3 \u003d new MemberList(list3);"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        MemberList m4Empty \u003d new MemberList();"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        //Test contains"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        assertTrue(m1.contains(TypicalPersons.ALICE));"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.contains(TypicalPersons.AMY));"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        //Test isEmpty"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.isEmpty());"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        //Test toString"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        assertEquals(EventOutputUtil.toStringMembers(list1), m1.toString());"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        //Test equals"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        assertTrue(m1.equals(m2));"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.equals(m3));"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.equals(m4Empty));"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        //Test readOnlyList"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        assertEquals(list1, m1.asReadOnlyMemberList());"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"    public void testMemberListCreationEmpty() {"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        MemberList m1 \u003d new MemberList();"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        MemberList m2 \u003d new MemberList();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"        //Non-empty list for testing equals function"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.ALICE);"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        MemberList m3 \u003d new MemberList(list);"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        assertTrue(m1.isEmpty());"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        assertTrue(m1.equals(m2));"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.contains(TypicalPersons.ALICE));"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"none\", m1.toString());"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        //Empty list for comparing hashcode"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e emptyList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        assertEquals(emptyList.hashCode(), m1.hashCode());"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        //Test equals"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        assertFalse(m1.equals(m3));"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"        assertTrue(m1.equals(m2));"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"    public void testReadOnlyList() {"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        //Test read-only list"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e listEmpty \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"        MemberList m1Empty \u003d new MemberList();"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.ALICE);"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"        MemberList m2 \u003d new MemberList(list);"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        assertEquals(Collections.unmodifiableList(listEmpty), m1Empty.asReadOnlyMemberList());"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        assertEquals(Collections.unmodifiableList(list), m2.asReadOnlyMemberList());"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":93,"-":10}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"01/01/1970\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"            Set\u003cEvent\u003e defaultEvents \u003d new HashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"            DateAdded defaultDateAdded \u003d new DateAdded();"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress,"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"                    defaultTags, defaultEvents, defaultDateAdded);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and append it to the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"    public PersonBuilder withATags(String ... tags) {"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"            Set\u003cTag\u003e newTags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"            newTags.addAll(this.person.getTags());"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"            this.person.setTags(newTags);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"     * Removes the {@code tags} from a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"    public PersonBuilder withOutTag(String tag) {"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":"        for (Tag current :  this.person.getTags()) {"},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"            if (!tag.equals(current.tagName)) {"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"                newTags.add(current);"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"        this.person.setTags(newTags);"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":"            this.person.setBirthday(new Birthday(birthday));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":"            throw new IllegalArgumentException(\"Birthday is expected to be unique.\");"},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":"        return this;"},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":24,"dalessr":14,"-":118,"eldriclim":6}},{"path":"src/test/java/guitests/PersonDetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.PersonDetailsPanel.FACEBOOK_DEFAULT_URL;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.PersonDetailsPanel.GITHUB_DEFAULT_URL;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.PersonDetailsPanel.INSTAGRAM_DEFAULT_URL;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.PersonDetailsPanel.NUSMODS_DEFAULT_URL;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import static seedu.address.ui.PersonDetailsPanel.TWITTER_DEFAULT_URL;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenFaceBookWebViewEvent;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenGithubWebViewEvent;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenInstagramWebViewEvent;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenNusModsWebViewEvent;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenTwitterWebViewEvent;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"public class PersonDetailsPanelTest extends AddressBookGuiTest {"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    public void openTwitterTabView() throws MalformedURLException {"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        OpenTwitterWebViewEvent event \u003d new OpenTwitterWebViewEvent();"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        postNow(event);"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        URL expectedTwitterUrl \u003d new URL(TWITTER_DEFAULT_URL);"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"        assertTrue(expectedTwitterUrl.toString().contains(\"twitter\"));"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    public void openFacebookTabView() throws MalformedURLException {"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        OpenFaceBookWebViewEvent event \u003d new OpenFaceBookWebViewEvent();"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        postNow(event);"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        URL expectedFacebookUrl \u003d new URL(FACEBOOK_DEFAULT_URL);"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        assertTrue(expectedFacebookUrl.toString().contains(\"facebook\"));"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"    public void openGithubTabView() throws MalformedURLException {"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        OpenGithubWebViewEvent event \u003d new OpenGithubWebViewEvent();"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        postNow(event);"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        URL expectedGithubUrl \u003d new URL(GITHUB_DEFAULT_URL);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        assertTrue(expectedGithubUrl.toString().contains(\"github\"));"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    public void openInstagramTabView() throws MalformedURLException {"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        OpenInstagramWebViewEvent event \u003d new OpenInstagramWebViewEvent();"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        postNow(event);"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        URL expectedInstagramUrl \u003d new URL(INSTAGRAM_DEFAULT_URL);"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        assertTrue(expectedInstagramUrl.toString().contains(\"instagram\"));"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"    public void openNusmodsTabView() throws MalformedURLException {"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"        OpenNusModsWebViewEvent event \u003d new OpenNusModsWebViewEvent();"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        postNow(event);"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"        URL expectedNusmodsUrl \u003d new URL(NUSMODS_DEFAULT_URL);"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        assertTrue(expectedNusmodsUrl.toString().contains(\"nusmods\"));"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":68,"-":2}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"public class EventTest {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    private Event e1;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    private Event e2;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    private Event e3;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private Event e4;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    private EventName eventNameTest;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    private EventTime eventTimeTest;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    private EventDuration eventDurationTest;"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    private MemberList eventMemberListTest;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    public void testEventCreation() throws IllegalValueException {"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.ALICE);"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.CARL);"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        e1 \u003d new Event(new MemberList(list), new EventName(\"Event name\"),"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.of(2017, 2, 7, 8, 0, 30), Duration.ofMinutes(90)),"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(90)));"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        e2 \u003d new Event(new MemberList(list), new EventName(\"Event name\"),"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.of(2017, 2, 7, 8, 0, 30), Duration.ofMinutes(90)),"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(90)));"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        //Different time from e1"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        e3 \u003d new Event(new MemberList(list), new EventName(\"Event name\"),"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.now(), Duration.ofMinutes(90)),"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(90)));"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        //Different name from e1"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        e4 \u003d new Event(new MemberList(list), new EventName(\"Event name different\"),"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.of(2017, 2, 7, 8, 0, 30), Duration.ofMinutes(90)),"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(90)));"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        eventNameTest \u003d new EventName(\"Event name\");"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        eventTimeTest \u003d new EventTime(LocalDateTime.of(2017, 2, 7, 8, 0, 30),"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"                Duration.ofMinutes(90));"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        eventDurationTest \u003d new EventDuration(Duration.ofMinutes(90));"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        eventMemberListTest \u003d new MemberList(list);"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        testEventEqual();"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        testOutput();"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        testGetter();"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        testSetter();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        testUpdateStatus();"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    private void testUpdateStatus() {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        e1.updateEventStatusSelection(e1.getEventTime().getStart().toLocalDate());"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        assertEquals(e1.getEventStatusStyle(), \"-fx-background-color: #b91372\");"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    public void overloadedConstructorTest() throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        Event e1 \u003d new Event(new MemberList(), new EventName(\"Event name\"),"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.now(), Duration.ofMinutes(5)),"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(5)));"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        Event e2 \u003d new Event(e1);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        assertEquals(e1, e2);"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"     * Test equals function of Event"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    public void testEventEqual() {"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        assertTrue(e1.equals(e2));"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        assertFalse(e1.equals(e3));"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"        assertFalse(e1.equals(e4));"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"     * Test hashcode and toString of Event"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"     * @throws IllegalValueException"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"    public void testOutput() throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        //Test hashcode"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        assertEquals(Objects.hash(eventNameTest, eventTimeTest, eventDurationTest),"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"                e1.hashCode());"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        //Test toString"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"Name: Event name Time: 2017-02-07 08:00 Duration: 1hr30min\\n\""},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"                + \"Members: Alice Pauline, Carl Kurz\", e1.toString());"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"     * Test Property getter of Event"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"    public void testGetter() {"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: Alice Pauline, Carl Kurz]\","},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"                e1.eventMemberListProperty().toString());"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: Event name]\","},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"                e1.eventNameProperty().toString());"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: 2017-02-07 08:00]\","},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"                e1.eventTimeProperty().toString());"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: 1hr30min]\","},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"                e1.eventDurationProperty().toString());"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: Past]\","},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"                e1.eventStatusProperty().toString());"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"        assertEquals(\"ObjectProperty [value: -fx-background-color: #a31621]\","},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"                e1.eventStatusStyleProperty().toString());"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"     * Test Setter of Event"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"    private void testSetter() throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.GEORGE);"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"        list.add(TypicalPersons.HOON);"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime futureDate \u003d LocalDateTime.now().plusDays(1);"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"        Event actual \u003d e4;"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"        Event expected \u003d new Event(new MemberList(list), new EventName(\"For testing setter\"),"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"                new EventTime(futureDate, Duration.ofMinutes(60)),"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(60)));"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"        //Before setting"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"        assertFalse(actual.equals(expected));"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"        actual.setEventName(new EventName(\"For testing setter\"));"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"        actual.setEventTime(new EventTime(futureDate, Duration.ofMinutes(60)));"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"        actual.setEventDuration(new EventDuration(Duration.ofMinutes(60)));"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"        actual.setMemberList(new MemberList(list));"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"        //After setting"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        assertTrue(actual.equals(expected));"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":142,"-":11}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    private final PersonDetailsPanelHandle personDetailsPanel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"        personDetailsPanel \u003d new PersonDetailsPanelHandle((getChildNode(PersonDetailsPanelHandle.GRIDPANE_ID)));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    public PersonDetailsPanelHandle getPersonDetailsPanel() {"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        return personDetailsPanel;"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":6,"-":51}},{"path":"src/test/java/guitests/guihandles/PersonDetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":" * A handler for the {@code PersonDetailsPanel} of the UI."},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"public class PersonDetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    public static final String GRIDPANE_ID \u003d \"#personDetailsGrid\";"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public static final String NAME_ID \u003d \"#nameLabel\";"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"    public static final String PHONE_ID \u003d \"#phoneLabel\";"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    public static final String EMAIL_ID \u003d \"#emailLabel\";"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"    public static final String ADDRESS_ID \u003d \"#addressLabel\";"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    public final GridPane gridPane;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    public final Label nameLb;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    public final Label phoneLb;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    public final Label emailLb;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    public final Label addressLb;"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    public PersonDetailsPanelHandle(Node cardNode) {"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"        super(cardNode);"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"        this.gridPane \u003d getChildNode(GRIDPANE_ID);"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"        this.nameLb \u003d getChildNode(NAME_ID);"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        this.phoneLb \u003d getChildNode(PHONE_ID);"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        this.emailLb \u003d getChildNode(EMAIL_ID);"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        this.addressLb \u003d getChildNode(ADDRESS_ID);"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    public String getNameId() {"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        return nameLb.getText();"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    public String getPhoneId() {"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        return phoneLb.getText();"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"    public String getEmailId() {"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        return emailLb.getText();"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"    public String getAddressId() {"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        return addressLb.getText();"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":49}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleRemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import java.time.Duration;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"public class ScheduleRemoveCommandTest {"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    public void testScheduleRemoveCommand() throws Exception {"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        Set\u003cIndex\u003e eventListIndex \u003d new HashSet\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        eventListIndex.add(new Index(0));"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"        ModelStubAcceptingEventRemoved modelStub \u003d new ModelStubAcceptingEventRemoved();"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        ScheduleRemoveCommand command;"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        command \u003d getScheduleRemoveCommand(eventListIndex, modelStub);"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        members.add(TypicalPersons.ALICE);"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"        Event expectedEventToRemove \u003d new Event(new MemberList(members), new EventName(\"Event name\"),"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"                new EventTime(LocalDateTime.now(), Duration.ofMinutes(5)),"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"                new EventDuration(Duration.ofMinutes(5)));"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        assertEquals(commandResult.feedbackToUser,"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"                String.format(ScheduleRemoveCommand.MESSAGE_SUCCESS, expectedEventToRemove.toString()));"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    public ScheduleRemoveCommand getScheduleRemoveCommand(Set\u003cIndex\u003e eventListIndex, Model model) {"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        ScheduleRemoveCommand command \u003d new ScheduleRemoveCommand(eventListIndex);"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        return command;"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    public void testScheduleRemoveEquals() {"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        ScheduleRemoveCommand s1 \u003d new ScheduleRemoveCommand(new HashSet\u003c\u003e(Arrays.asList(new Index(0))));"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        ScheduleRemoveCommand s2 \u003d new ScheduleRemoveCommand(new HashSet\u003c\u003e(Arrays.asList(new Index(0))));"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"        ScheduleRemoveCommand s3 \u003d new ScheduleRemoveCommand(new HashSet\u003c\u003e(Arrays.asList(new Index(1))));"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        assertTrue(s1.equals(s2));"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        assertFalse(s1.equals(s3));"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"    private class ModelStub implements Model {"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ReadOnlyPerson person) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"        public void restorePerson(ArrayList\u003cReadOnlyPerson\u003e person) throws DuplicatePersonException,"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"                PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecycleibin) {"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"        public void resetRecyclebin(ReadOnlyAddressBook newData) {"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"        public void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"        public void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException {"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList() {"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":"            return null;"},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":178,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredBinList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":182,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"eldriclim"},"content":"        public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":187,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"eldriclim"},"content":"        public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":"                throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":"        public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":"                                 ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":"        public void sortEvents(LocalDate date) {"},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":208,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"eldriclim"},"content":"        public boolean hasEvenClashes(Event event) {"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"     * A Model stub that always accept the event being removed."},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":"    private class ModelStubAcceptingEventRemoved extends ModelStub {"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"        private ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"        private AddressBook addressBookStub \u003d new AddressBook();"},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":"        private ObservableList\u003cReadOnlyPerson\u003e filteredPersonListStub;"},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"        public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"                                 ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":"                throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":"            toRemoveEvents.forEach(e -\u003e eventList.remove(e));"},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":"            ArrayList\u003cReadOnlyPerson\u003e stubList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.ALICE);"},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.BOB);"},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"            stubList.add(TypicalPersons.CARL);"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":"            return FXCollections.observableArrayList(stubList);"},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"            return addressBookStub;"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"        public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"            return new AddressBook();"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":"        /**"},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":"         * Returns an ObservableList of Events with a single event containing one members."},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"         *"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":"         * @return"},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":"         */"},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":"            try {"},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"                eventList.clear();"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"                Event e1 \u003d new Event(new MemberList(), new EventName(\"Event name\"),"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":"                        new EventTime(LocalDateTime.now(), Duration.ofMinutes(5)),"},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":"                        new EventDuration(Duration.ofMinutes(5)));"},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":"                eventList.add(e1);"},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":"                Person alice \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":269,"author":{"gitID":"eldriclim"},"content":"                        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":270,"author":{"gitID":"eldriclim"},"content":"                        .withPhone(\"85355255\")"},{"lineNumber":271,"author":{"gitID":"eldriclim"},"content":"                        .withTags(\"friends\").build();"},{"lineNumber":272,"author":{"gitID":"eldriclim"},"content":"                alice.setEvents(new HashSet\u003c\u003e(Arrays.asList(eventList.get(0))));"},{"lineNumber":273,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":274,"author":{"gitID":"eldriclim"},"content":"                ReadOnlyPerson aliceReadOnly \u003d new Person(alice);"},{"lineNumber":275,"author":{"gitID":"eldriclim"},"content":"                addressBookStub.addPerson(aliceReadOnly);"},{"lineNumber":276,"author":{"gitID":"eldriclim"},"content":"                addressBookStub.addPerson(TypicalPersons.BOB);"},{"lineNumber":277,"author":{"gitID":"eldriclim"},"content":"                addressBookStub.addPerson(TypicalPersons.CARL);"},{"lineNumber":278,"author":{"gitID":"eldriclim"},"content":"                ArrayList\u003cReadOnlyPerson\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":"                members.add(aliceReadOnly);"},{"lineNumber":280,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":281,"author":{"gitID":"eldriclim"},"content":"                e1.setMemberList(new MemberList(members));"},{"lineNumber":282,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":283,"author":{"gitID":"eldriclim"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":284,"author":{"gitID":"eldriclim"},"content":"                //Should not reach this point, try-catch is used to bypass Override restriction"},{"lineNumber":285,"author":{"gitID":"eldriclim"},"content":"                e.printStackTrace();"},{"lineNumber":286,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":287,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":288,"author":{"gitID":"eldriclim"},"content":"            return FXCollections.observableArrayList(eventList);"},{"lineNumber":289,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":290,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":292,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"eldriclim"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":294,"author":{"gitID":"eldriclim"},"content":"            filteredPersonListStub \u003d new FilteredList\u003cReadOnlyPerson\u003e(addressBookStub.getPersonList());"},{"lineNumber":295,"author":{"gitID":"eldriclim"},"content":"            filteredPersonListStub.filtered(predicate);"},{"lineNumber":296,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":4,"dalessr":3,"-":23,"eldriclim":268}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        System.out.println(\"1\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":64,"eldriclim":1}},{"path":"src/test/java/guitests/AddressBookGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.TestName;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import guitests.guihandles.PersonDetailsPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A GUI Test class for AddressBook."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public abstract class AddressBookGuiTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /* The TestName Rule makes the current test name available inside test methods */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public TestName name \u003d new TestName();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected Stage stage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected MainWindowHandle mainWindowHandle;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void setupOnce() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setup() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.stage \u003d stage;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        FxToolkit.setupApplication(() -\u003e new TestApp(this::getInitialData, getDataFileLocation()));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Override this in child classes to set the initial local data."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Return null to use the data in the file specified in {@link #getDataFileLocation()}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    protected CommandBoxHandle getCommandBox() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    protected PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    protected MainMenuHandle getMainMenu() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    protected BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"    protected PersonDetailsPanelHandle getPersonDetailsPanel() {"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        return mainWindowHandle.getPersonDetailsPanel();"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected ResultDisplayHandle getResultDisplay() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Runs {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @return true if the command was executed successfully."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    protected boolean runCommand(String command) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Override this in child classes to set the data file location."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void cleanup() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":5,"-":115}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import org.controlsfx.control.textfield.TextFields;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    private final ArrayList\u003cString\u003e suggestions;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        suggestions \u003d AddressBookParser.getCommandNames();"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        TextFields.bindAutoCompletion(commandTextField, suggestions);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":7,"-":148,"eldriclim":2}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelFindRouteEvent;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelShowLocationEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    public static final String GOOGLE_MAP_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    public static final String GOOGLE_MAP_SEARCH_URL_SUFFIX \u003d \"/\";"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    public static final String GOOGLE_MAP_DIRECTION_URL_PREFIX \u003d \"https://www.google.com.sg/maps/dir/\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"     * Loads the google map page on the browser specifying the location of the person selected."},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"     * @param person the person whose location is to be shown on the map"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"    public void loadLocationPage(ReadOnlyPerson person) {"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        loadPage(GOOGLE_MAP_SEARCH_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\")"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"                + GOOGLE_MAP_SEARCH_URL_SUFFIX);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"     * Loads the google map page on the browser specifying the direction from current location to"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"     * the selected person\u0027s address."},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"     * @param person whose location is the destination"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"     * @param address starting location"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"    public void loadRoutePage(ReadOnlyPerson person, String address) {"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"        String startLocation \u003d address.trim().replaceAll(\" \", \"+\");"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        String endLocation \u003d person.getAddress().toString().trim().replaceAll(\" \", \"+\");"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        loadPage(GOOGLE_MAP_DIRECTION_URL_PREFIX + startLocation"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"                + GOOGLE_MAP_SEARCH_URL_SUFFIX + endLocation"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"                + GOOGLE_MAP_SEARCH_URL_SUFFIX);"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"    private void handleBrowserPanelShowLocationEvent(BrowserPanelShowLocationEvent event) {"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"        loadLocationPage(event.getNewSelection());"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"    private  void handleBrowserPanelFindRouteEvent(BrowserPanelFindRouteEvent event) {"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"        loadRoutePage(event.getSelectedPerson(), event.getAddress());"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":44,"-":72}},{"path":"src/main/java/seedu/address/ui/PersonDetailsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenFaceBookWebViewEvent;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenGithubWebViewEvent;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenInstagramWebViewEvent;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenNusModsWebViewEvent;"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.OpenTwitterWebViewEvent;"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":" * The Contact Details Panel of the App."},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"public class PersonDetailsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public static final String TWITTER_DEFAULT_URL \u003d \"https://twitter.com/search?q\u003dnews\u0026src\u003dtypd\";"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    public static final String FACEBOOK_DEFAULT_URL \u003d \"https://www.facebook.com/people-search.php\";"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    public static final String NUSMODS_DEFAULT_URL \u003d \"https://nusmods.com/timetable/2017-2018/sem1\";"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    public static final String INSTAGRAM_DEFAULT_URL \u003d \"https://www.instagram.com/instagram/\";"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"    public static final String GITHUB_DEFAULT_URL \u003d \"https://github.com/github\";"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"    private static final String FXML \u003d \"PersonDetailsPanel.fxml\";"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e personList;"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    private TabPane tabPane;"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonDetailsPanel.class);"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"    private GridPane personDetailsGrid;"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"    private Label nameLabel;"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"    private Label birthdayLabel;"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"    private Label phoneLabel;"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"    private Label emailLabel;"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"    private Label addressLabel;"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    private Label addressLabelContinue;"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"    private VBox eventsBox;"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"    private TextArea eventsArea;"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"    public PersonDetailsPanel(ObservableList\u003cReadOnlyPerson\u003e personList, TabPane tabPane) {"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"        super(FXML);"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        this.personList \u003d personList;"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        this.tabPane \u003d tabPane;"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"     * Open another tab to show twitter webview"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"    private void openTwitterWebView() {"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        Tab tab \u003d new Tab();"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        tab.setText(\"twitter\");"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        tab.setClosable(true);"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        WebView webView \u003d new WebView();"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        webView.getEngine().load(TWITTER_DEFAULT_URL);"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        tab.setContent(webView);"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"        tabPane.getTabs().add(tab);"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"     * Open another tab to show nusmods webview"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"    private void openNusModsWebView() {"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        Tab tab \u003d new Tab();"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        tab.setText(\"nusmods\");"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"        tab.setClosable(true);"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"        WebView webView \u003d new WebView();"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        webView.getEngine().load(NUSMODS_DEFAULT_URL);"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"        tab.setContent(webView);"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"        tabPane.getTabs().add(tab);"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"     * Open another tab to show facebook webview"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"    private void openFaceBookWebView() {"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        Tab tab \u003d new Tab();"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"        tab.setText(\"facebook\");"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        tab.setClosable(true);"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"        WebView webView \u003d new WebView();"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":"        webView.getEngine().load(FACEBOOK_DEFAULT_URL);"},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"        tab.setContent(webView);"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"        tabPane.getTabs().add(tab);"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"     * Open another tab to show instagram webview"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"    private void openInstagramWebView() {"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"        Tab tab \u003d new Tab();"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"        tab.setText(\"instagram\");"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"        tab.setClosable(true);"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"        WebView webView \u003d new WebView();"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"        webView.getEngine().load(INSTAGRAM_DEFAULT_URL);"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"        tab.setContent(webView);"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"        tabPane.getTabs().add(tab);"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"     * Open another tab to show github webview"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"    private void openGitHubWebView() {"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"        Tab tab \u003d new Tab();"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"        tab.setText(\"github\");"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"        tab.setClosable(true);"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"        WebView webView \u003d new WebView();"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"        webView.getEngine().load(GITHUB_DEFAULT_URL);"},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"        tab.setContent(webView);"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"        tabPane.getTabs().add(tab);"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":152,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":"    private void handleClearPersonListEvent(ClearPersonListEvent event) {"},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":"        nameLabel.setText(\"Person Name\");"},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"        birthdayLabel.setText(\"\");"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":"        phoneLabel.setText(\"\");"},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"        emailLabel.setText(\"\");"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":"        addressLabel.setText(\"\");"},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"        addressLabelContinue.setText(\"\");"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"        eventsArea.setText(\"\");"},{"lineNumber":162,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":164,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":165,"author":{"gitID":"dalessr"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":166,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":167,"author":{"gitID":"dalessr"},"content":"        ReadOnlyPerson person \u003d personList.get(event.targetIndex);"},{"lineNumber":168,"author":{"gitID":"dalessr"},"content":"        nameLabel.setText(person.getName().fullName);"},{"lineNumber":169,"author":{"gitID":"dalessr"},"content":"        if (person.getBirthday().value.equals(\"01/01/1900\")) {"},{"lineNumber":170,"author":{"gitID":"dalessr"},"content":"            birthdayLabel.setText(\"\");"},{"lineNumber":171,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":172,"author":{"gitID":"dalessr"},"content":"            birthdayLabel.setText(person.getBirthday().toString());"},{"lineNumber":173,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"dalessr"},"content":"        phoneLabel.setText(person.getPhone().toString());"},{"lineNumber":175,"author":{"gitID":"dalessr"},"content":"        emailLabel.setText(person.getEmail().toString());"},{"lineNumber":176,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":177,"author":{"gitID":"dalessr"},"content":"        addressLabelContinue.setText(\"\");"},{"lineNumber":178,"author":{"gitID":"dalessr"},"content":"        String[] address \u003d person.getAddress().toString().split(\" \");"},{"lineNumber":179,"author":{"gitID":"dalessr"},"content":"        StringBuilder firstBuilder \u003d new StringBuilder();"},{"lineNumber":180,"author":{"gitID":"dalessr"},"content":"        int index \u003d 0;"},{"lineNumber":181,"author":{"gitID":"dalessr"},"content":"        while (index \u003c address.length \u0026\u0026 address[index].length() \u003c\u003d 32 - firstBuilder.length()) {"},{"lineNumber":182,"author":{"gitID":"dalessr"},"content":"            firstBuilder.append(address[index]);"},{"lineNumber":183,"author":{"gitID":"dalessr"},"content":"            firstBuilder.append(\" \");"},{"lineNumber":184,"author":{"gitID":"dalessr"},"content":"            index++;"},{"lineNumber":185,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"dalessr"},"content":"        String firstAddress \u003d firstBuilder.toString();"},{"lineNumber":187,"author":{"gitID":"dalessr"},"content":"        addressLabel.setText(firstAddress);"},{"lineNumber":188,"author":{"gitID":"dalessr"},"content":"        StringBuilder secondBuilder \u003d new StringBuilder();"},{"lineNumber":189,"author":{"gitID":"dalessr"},"content":"        for (; index \u003c address.length; index++) {"},{"lineNumber":190,"author":{"gitID":"dalessr"},"content":"            secondBuilder.append(address[index]);"},{"lineNumber":191,"author":{"gitID":"dalessr"},"content":"            secondBuilder.append(\" \");"},{"lineNumber":192,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"dalessr"},"content":"        if (secondBuilder.length() !\u003d 0) {"},{"lineNumber":194,"author":{"gitID":"dalessr"},"content":"            String secondAddress \u003d secondBuilder.toString();"},{"lineNumber":195,"author":{"gitID":"dalessr"},"content":"            addressLabelContinue.setText(secondAddress);"},{"lineNumber":196,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":198,"author":{"gitID":"dalessr"},"content":"        eventsArea.setText(\"\");"},{"lineNumber":199,"author":{"gitID":"dalessr"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":200,"author":{"gitID":"dalessr"},"content":"        int counter \u003d 1;"},{"lineNumber":201,"author":{"gitID":"dalessr"},"content":"        for (Event e: person.getEvents()) {"},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"            stringBuilder.append(counter)"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"                    .append(\". \")"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":"                    .append(e.getEventName().fullName)"},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"                    .append(\" -- \")"},{"lineNumber":206,"author":{"gitID":"dalessr"},"content":"                    .append(e.getEventTime().toString())"},{"lineNumber":207,"author":{"gitID":"dalessr"},"content":"                    .append(\"\\n\");"},{"lineNumber":208,"author":{"gitID":"dalessr"},"content":"            counter++;"},{"lineNumber":209,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"dalessr"},"content":"        eventsArea.setText(stringBuilder.toString());"},{"lineNumber":211,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":213,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":214,"author":{"gitID":"dalessr"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":215,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":216,"author":{"gitID":"dalessr"},"content":"        ReadOnlyPerson person \u003d event.getNewSelection().person;"},{"lineNumber":217,"author":{"gitID":"dalessr"},"content":"        nameLabel.setText(person.getName().fullName);"},{"lineNumber":218,"author":{"gitID":"dalessr"},"content":"        if (person.getBirthday().value.equals(\"01/01/1900\")) {"},{"lineNumber":219,"author":{"gitID":"dalessr"},"content":"            birthdayLabel.setText(\"\");"},{"lineNumber":220,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":221,"author":{"gitID":"dalessr"},"content":"            birthdayLabel.setText(person.getBirthday().toString());"},{"lineNumber":222,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"dalessr"},"content":"        phoneLabel.setText(person.getPhone().toString());"},{"lineNumber":224,"author":{"gitID":"dalessr"},"content":"        emailLabel.setText(person.getEmail().toString());"},{"lineNumber":225,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":226,"author":{"gitID":"dalessr"},"content":"        addressLabelContinue.setText(\"\");"},{"lineNumber":227,"author":{"gitID":"dalessr"},"content":"        String[] address \u003d person.getAddress().toString().split(\" \");"},{"lineNumber":228,"author":{"gitID":"dalessr"},"content":"        StringBuilder firstBuilder \u003d new StringBuilder();"},{"lineNumber":229,"author":{"gitID":"dalessr"},"content":"        int index \u003d 0;"},{"lineNumber":230,"author":{"gitID":"dalessr"},"content":"        while (index \u003c address.length \u0026\u0026 address[index].length() \u003c\u003d 32 - firstBuilder.length()) {"},{"lineNumber":231,"author":{"gitID":"dalessr"},"content":"            firstBuilder.append(address[index]);"},{"lineNumber":232,"author":{"gitID":"dalessr"},"content":"            firstBuilder.append(\" \");"},{"lineNumber":233,"author":{"gitID":"dalessr"},"content":"            index++;"},{"lineNumber":234,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"dalessr"},"content":"        String firstAddress \u003d firstBuilder.toString();"},{"lineNumber":236,"author":{"gitID":"dalessr"},"content":"        addressLabel.setText(firstAddress);"},{"lineNumber":237,"author":{"gitID":"dalessr"},"content":"        StringBuilder secondBuilder \u003d new StringBuilder();"},{"lineNumber":238,"author":{"gitID":"dalessr"},"content":"        for (; index \u003c address.length; index++) {"},{"lineNumber":239,"author":{"gitID":"dalessr"},"content":"            secondBuilder.append(address[index]);"},{"lineNumber":240,"author":{"gitID":"dalessr"},"content":"            secondBuilder.append(\" \");"},{"lineNumber":241,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"dalessr"},"content":"        if (secondBuilder.length() !\u003d 0) {"},{"lineNumber":243,"author":{"gitID":"dalessr"},"content":"            String secondAddress \u003d secondBuilder.toString();"},{"lineNumber":244,"author":{"gitID":"dalessr"},"content":"            addressLabelContinue.setText(secondAddress);"},{"lineNumber":245,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":247,"author":{"gitID":"dalessr"},"content":"        eventsArea.setText(\"\");"},{"lineNumber":248,"author":{"gitID":"dalessr"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":249,"author":{"gitID":"dalessr"},"content":"        int counter \u003d 1;"},{"lineNumber":250,"author":{"gitID":"dalessr"},"content":"        for (Event e: person.getEvents()) {"},{"lineNumber":251,"author":{"gitID":"dalessr"},"content":"            stringBuilder.append(counter)"},{"lineNumber":252,"author":{"gitID":"dalessr"},"content":"                    .append(\". \")"},{"lineNumber":253,"author":{"gitID":"dalessr"},"content":"                    .append(e.getEventName().fullName)"},{"lineNumber":254,"author":{"gitID":"dalessr"},"content":"                    .append(\" -- \")"},{"lineNumber":255,"author":{"gitID":"dalessr"},"content":"                    .append(e.getEventTime().toString())"},{"lineNumber":256,"author":{"gitID":"dalessr"},"content":"                    .append(\"\\n\");"},{"lineNumber":257,"author":{"gitID":"dalessr"},"content":"            counter++;"},{"lineNumber":258,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"dalessr"},"content":"        eventsArea.setText(stringBuilder.toString());"},{"lineNumber":260,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":262,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":263,"author":{"gitID":"dalessr"},"content":"    private void handleOpenTwitterWebViewEvent(OpenTwitterWebViewEvent event) {"},{"lineNumber":264,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":265,"author":{"gitID":"dalessr"},"content":"        openTwitterWebView();"},{"lineNumber":266,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":268,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":269,"author":{"gitID":"dalessr"},"content":"    private void handleOpenNusModsWebViewEvent(OpenNusModsWebViewEvent event) {"},{"lineNumber":270,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":271,"author":{"gitID":"dalessr"},"content":"        openNusModsWebView();"},{"lineNumber":272,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":274,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":275,"author":{"gitID":"dalessr"},"content":"    private void handleOpenFaceBookWebViewEvent(OpenFaceBookWebViewEvent event) {"},{"lineNumber":276,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":277,"author":{"gitID":"dalessr"},"content":"        openFaceBookWebView();"},{"lineNumber":278,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":280,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":281,"author":{"gitID":"dalessr"},"content":"    private void handleOpenInstagramWebViewEvent(OpenInstagramWebViewEvent event) {"},{"lineNumber":282,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":283,"author":{"gitID":"dalessr"},"content":"        openInstagramWebView();"},{"lineNumber":284,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":286,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":287,"author":{"gitID":"dalessr"},"content":"    private void handleOpenGithubWebViewEvent(OpenGithubWebViewEvent event) {"},{"lineNumber":288,"author":{"gitID":"dalessr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":289,"author":{"gitID":"dalessr"},"content":"        openGitHubWebView();"},{"lineNumber":290,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":291}},{"path":"src/test/java/guitests/ThemeGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangH795"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeBrightThemeEvent;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDarkThemeEvent;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDefaultThemeEvent;"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"public class ThemeGuiTest extends AddressBookGuiTest {"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"     * Asserts that the theme after change is Dark Theme."},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"    public void changeToDarkThemeTest() {"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cString\u003e darkTheme \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"        darkTheme.add(\"view/DarkTheme.css\");"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"        ChangeDarkThemeEvent darkThemeEvent \u003d new ChangeDarkThemeEvent();"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"        postNow(darkThemeEvent);"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(darkTheme, stage.getScene().getStylesheets());"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"     * Asserts that the theme after change is Bright Theme."},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"    public void changeToBrightThemeTest() {"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cString\u003e brightTheme \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"        brightTheme.add(\"view/BrightTheme.css\");"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"        ChangeBrightThemeEvent brightThemeEvent \u003d new ChangeBrightThemeEvent();"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"        postNow(brightThemeEvent);"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(brightTheme, stage.getScene().getStylesheets());"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"     * Asserts that the theme after change is Default Theme."},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"    public void changeToDefaultThemeTest() {"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cString\u003e defaultTheme \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"        defaultTheme.add(\"view/Extensions.css\");"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"        ChangeDefaultThemeEvent defaultThemeEvent \u003d new ChangeDefaultThemeEvent();"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"        postNow(defaultThemeEvent);"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"        assertEquals(defaultTheme, stage.getScene().getStylesheets());"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":52,"-":2}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeBrightThemeEvent;"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDarkThemeEvent;"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDefaultThemeEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    private static final String ICON \u003d \"/images/iConnect_icon.png\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    private RecycleBinPanel recycleBinPanel;"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    private PersonDetailsPanel personDetailsPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    private EventListPanel eventListPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    private CalendarView calendarView;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"    private StackPane contactDetailsPlaceholder;"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    private StackPane recycleBinListPlaceHolder;"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"    private MenuItem styleMenuItem;"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"    private StackPane eventListPanelPlaceholder;"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"    private StackPane calendarViewPlaceholder;"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"    private SplitPane schedulePanel;"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"    @FXML"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"    private TabPane infoDisplayPlaceholder;"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":133,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":136,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":142,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":146,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"        personDetailsPanel \u003d new PersonDetailsPanel(logic.getFilteredPersonList(), infoDisplayPlaceholder);"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"        contactDetailsPlaceholder.getChildren().add(personDetailsPanel.getRoot());"},{"lineNumber":162,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"        recycleBinPanel \u003d new RecycleBinPanel(logic.getRecycleBinList(), infoDisplayPlaceholder);"},{"lineNumber":167,"author":{"gitID":"Pengyuz"},"content":"        recycleBinListPlaceHolder.getChildren().add(recycleBinPanel.getRoot());"},{"lineNumber":168,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":"        eventListPanel \u003d new EventListPanel(logic.getEventList());"},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":"        calendarView \u003d new CalendarView(logic.getEventList());"},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":"        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":187,"author":{"gitID":"eldriclim"},"content":"        schedulePanel.setDividerPositions(1);"},{"lineNumber":188,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":244,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"ZhangH795"},"content":"     * Change to dark theme."},{"lineNumber":246,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"ZhangH795"},"content":"    @FXML"},{"lineNumber":248,"author":{"gitID":"ZhangH795"},"content":"    public void changeToDarkTheme() {"},{"lineNumber":249,"author":{"gitID":"ZhangH795"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":250,"author":{"gitID":"ZhangH795"},"content":"        scene.getStylesheets().setAll(\"view/DarkTheme.css\");"},{"lineNumber":251,"author":{"gitID":"ZhangH795"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":252,"author":{"gitID":"ZhangH795"},"content":"        show();"},{"lineNumber":253,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":255,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"ZhangH795"},"content":"     * Change to bright theme."},{"lineNumber":257,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"ZhangH795"},"content":"    @FXML"},{"lineNumber":259,"author":{"gitID":"ZhangH795"},"content":"    public void changeToBrightTheme() {"},{"lineNumber":260,"author":{"gitID":"ZhangH795"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":261,"author":{"gitID":"ZhangH795"},"content":"        scene.getStylesheets().setAll(\"view/BrightTheme.css\");"},{"lineNumber":262,"author":{"gitID":"ZhangH795"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":263,"author":{"gitID":"ZhangH795"},"content":"        show();"},{"lineNumber":264,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":266,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"ZhangH795"},"content":"     * Change to default theme."},{"lineNumber":268,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"ZhangH795"},"content":"    @FXML"},{"lineNumber":270,"author":{"gitID":"ZhangH795"},"content":"    public void changeToDefaultTheme() {"},{"lineNumber":271,"author":{"gitID":"ZhangH795"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":272,"author":{"gitID":"ZhangH795"},"content":"        scene.getStylesheets().setAll(\"view/Extensions.css\");"},{"lineNumber":273,"author":{"gitID":"ZhangH795"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":274,"author":{"gitID":"ZhangH795"},"content":"        show();"},{"lineNumber":275,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":277,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":304,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":305,"author":{"gitID":"ZhangH795"},"content":"    @Subscribe"},{"lineNumber":306,"author":{"gitID":"ZhangH795"},"content":"    private void handleDarkThemeEvent(ChangeDarkThemeEvent event) {"},{"lineNumber":307,"author":{"gitID":"ZhangH795"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":308,"author":{"gitID":"ZhangH795"},"content":"        changeToDarkTheme();"},{"lineNumber":309,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":311,"author":{"gitID":"ZhangH795"},"content":"    @Subscribe"},{"lineNumber":312,"author":{"gitID":"ZhangH795"},"content":"    private void handleBrightThemeEvent(ChangeBrightThemeEvent event) {"},{"lineNumber":313,"author":{"gitID":"ZhangH795"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":314,"author":{"gitID":"ZhangH795"},"content":"        changeToBrightTheme();"},{"lineNumber":315,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":317,"author":{"gitID":"ZhangH795"},"content":"    @Subscribe"},{"lineNumber":318,"author":{"gitID":"ZhangH795"},"content":"    private void handleDefaultThemeEvent(ChangeDefaultThemeEvent event) {"},{"lineNumber":319,"author":{"gitID":"ZhangH795"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":320,"author":{"gitID":"ZhangH795"},"content":"        changeToDefaultTheme();"},{"lineNumber":321,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":7,"ZhangH795":61,"dalessr":14,"-":218,"eldriclim":23}},{"path":"src/main/java/seedu/address/ui/CalendarView.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import com.sun.javafx.scene.control.skin.DatePickerContent;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import com.sun.javafx.scene.control.skin.DatePickerSkin;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.control.DateCell;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.control.DatePicker;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.control.Tooltip;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import javafx.util.Callback;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.CalendarSelectionChangedEvent;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.ScheduleUpdateEvent;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":" * An UI component that displays a clickable-Calendar."},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"public class CalendarView extends UiPart\u003cRegion\u003e {"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    private static final String FXML \u003d \"CalendarView.fxml\";"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    private AnchorPane box;"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    private DatePicker datePicker;"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    private ObservableList\u003cEvent\u003e eventList;"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    public CalendarView(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        this.eventList \u003d eventList;"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        initCalendar(this.eventList);"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        initListener();"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"     * Initialise the calendar and highlight dates with Event."},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"     * @param masterEventList"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    private void initCalendar(ObservableList\u003cEvent\u003e masterEventList) {"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        box.getChildren().clear();"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        datePicker \u003d new DatePicker(LocalDate.now());"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e eventsByDate \u003d new HashMap\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        for (Event event : masterEventList) {"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"            LocalDate pointerDay \u003d event.getEventTime().getStart().toLocalDate();"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"            LocalDate endDay \u003d event.getEventTime().getEnd().toLocalDate().plusDays(1);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"            do {"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"                ArrayList\u003cString\u003e eventsInPointerDay \u003d eventsByDate.computeIfAbsent(pointerDay, k -\u003e new ArrayList\u003c\u003e());"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"                eventsInPointerDay.add(event.getEventName().toString());"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"                pointerDay \u003d pointerDay.plusDays(1);"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"            } while (!pointerDay.isEqual(endDay));"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        DatePickerSkin datePickerSkin \u003d new DatePickerSkin(datePicker);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        final Callback\u003cDatePicker, DateCell\u003e dayCellFactory \u003d new Callback\u003cDatePicker, DateCell\u003e() {"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"            public DateCell call(final DatePicker datePicker) {"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"                return new DateCell() {"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"                    @Override"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"                    public void updateItem(LocalDate item, boolean empty) {"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"                        super.updateItem(item, empty);"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"                        if (eventsByDate.containsKey(item)) {"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"                            setTooltip(new Tooltip("},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"                                    StringUtil.multiStringPrint(eventsByDate.get(item), \"\\n\")));"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"                            setStyle(\"-fx-background-color: #a7a7a7; -fx-text-fill: #ffffff;\");"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"                        }"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"                    }"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"                };"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        };"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"        datePicker.setDayCellFactory(dayCellFactory);"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        DatePickerContent calendarView \u003d (DatePickerContent) datePickerSkin.getPopupContent();"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"        calendarView.minWidthProperty().setValue(box.minWidthProperty().getValue());"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"        AnchorPane.setTopAnchor(calendarView, 0.0);"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"        AnchorPane.setLeftAnchor(calendarView, 0.0);"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"        AnchorPane.setRightAnchor(calendarView, 1.0);"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        AnchorPane.setBottomAnchor(calendarView, 1.0);"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        box.getChildren().add(calendarView);"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"     * Add listener to register users mouse click."},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"    private void initListener() {"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"        datePicker.valueProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"            LocalDate selectedDate \u003d datePicker.getValue();"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"            logger.fine(\"Selection in calendar: \u0027\" + selectedDate + \"\u0027\");"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"            raise(new CalendarSelectionChangedEvent(selectedDate));"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"        });"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"    @Subscribe"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"    private void handleScheduleUpdateEvent(ScheduleUpdateEvent event) {"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"        initCalendar(event.getEvents());"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"        initListener();"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":138,"-":1}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    private static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        displayed.setValue(event.message);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        if (event.isError) {"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"            setStyleToDefault();"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    private void setStyleToDefault() {"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":47,"eldriclim":22}},{"path":"src/main/java/seedu/address/ui/EventCard.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.CalendarSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    public final Event event;"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    private HBox cardPane;"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    private Label eventName;"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"    private Label id;"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    private Label eventDateTime;"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    private Label eventDuration;"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    private Label eventStatus;"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    private VBox members;"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    public EventCard(Event event, int displayedIndex) {"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        this.event \u003d event;"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        initMembers(event);"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        bindListeners(event);"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"     * so that they will be notified of any changes."},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    private void bindListeners(Event event) {"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        eventName.textProperty().bind(Bindings.convert(event.eventNameProperty()));"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        eventDateTime.textProperty().bind(Bindings.convert(event.eventTimeProperty()));"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        eventDuration.textProperty().bind(Bindings.convert(event.eventDurationProperty()));"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        event.eventMemberListProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"            members.getChildren().clear();"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"            event.getMemberList().asReadOnlyMemberList().forEach(member -\u003e members.getChildren().add("},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"                    new Label(member.getName().toString())));"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        eventStatus.textProperty().bind(Bindings.convert(event.eventStatusProperty()));"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        eventStatus.styleProperty().bind(Bindings.convert(event.eventStatusStyleProperty()));"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"    private void initMembers(Event event) {"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        event.getMemberList().asReadOnlyMemberList().forEach(member -\u003e members.getChildren().add("},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"                new Label(member.getName().toString())));"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"        if (!(other instanceof EventCard)) {"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"        // state check"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        EventCard card \u003d (EventCard) other;"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 event.equals(card.event);"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"     * Handle event when date in CalenderView is clicked."},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"     * Update master UniqueEventList by running a sort with the given date as reference."},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"     * Comparator logic and sorting details is found in {@see UniqueEventList#sort(LocalDate)}"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"    @Subscribe"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"    private void handleCalendarSelectionChangedEvent(CalendarSelectionChangedEvent event) {"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"        this.event.updateEventStatusSelection(event.getSelectedDate());"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":113,"-":4}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelFindRouteEvent;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelShowLocationEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"    private void handleBrowserPanelShowLocationEvent(BrowserPanelShowLocationEvent event) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c personListView.getItems().size(); i++) {"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"            if (personListView.getItems().get(i).person.equals(event.getNewSelection())) {"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"                personListView.scrollTo(i);"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"    private  void handleBrowserPanelFindRouteEvent(BrowserPanelFindRouteEvent event) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c personListView.getItems().size(); i++) {"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"            if (personListView.getItems().get(i).person.equals(event.getSelectedPerson())) {"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"                personListView.scrollTo(i);"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":20,"-":90,"eldriclim":2}},{"path":"src/main/java/seedu/address/ui/RecycleBinPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Pengyuz"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":" * Panel containing the list of persons in bin."},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"public class RecycleBinPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    private static final String FXML \u003d \"RecycleBinPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RecycleBinPanel.class);"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    private TabPane tabPane;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    private ListView\u003cRecycleBinCard\u003e personListView;"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    public RecycleBinPanel(ObservableList\u003cReadOnlyPerson\u003e personList, TabPane tab) {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        this.tabPane \u003d tab;"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        ObservableList\u003cRecycleBinCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"                personList, (person) -\u003e new RecycleBinCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code RecycleBinCard}."},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"    class PersonListViewCell extends ListCell\u003cRecycleBinCard\u003e {"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"        @Override"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        protected void updateItem(RecycleBinCard person, boolean empty) {"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"            super.updateItem(person, empty);"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"                setGraphic(null);"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"                setText(null);"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"}"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":""}],"authorContributionMap":{"Pengyuz":56,"-":9}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"ZhangH795"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import javafx.scene.shape.Shape;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"    private static String[] colors \u003d { \"DarkCyan\", \"CadetBlue\", \"DarkSalmon\", \"LightSeaGreen\", \"Sienna\","},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"        \"GoldenRod\", \"Olive\", \"PaleVioletRed\", \"LightSeaGreen\", \"Peru\", \"YellowGreen\", \"PaleVioletRed\","},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"        \"Chocolate\", \"Plum\"};"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"    private static HashMap\u003cString, String\u003e tagColorMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"    private Shape fav;"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"    private static String getColorForTag(String tagString) {"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"        String color \u003d \"\";"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        boolean uniqueColor \u003d false;"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"        while (!uniqueColor) {"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"            color \u003d colors[random.nextInt(colors.length)];"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"            if (!tagColorMap.containsKey(tagString)) {"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"                if (!tagColorMap.containsValue(color)) {"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"                    tagColorMap.put(tagString, color);"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"                    break;"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"            } else {"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"                color \u003d tagColorMap.get(tagString);"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"                break;"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"        return color;"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"            initTags(person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"     * Binds the Tag with a randomly generated color"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"        boolean favourite \u003d false;"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        for (Tag tag : person.getTags()) {"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"            if (!tag.tagName.toLowerCase().contains(\"fav\")) {"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"                Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"                tagLabel.setStyle(\"-fx-background-color: \" + getColorForTag(tag.tagName));"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"                tags.getChildren().add(tagLabel);"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"            } else {"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":"                favourite \u003d true;"},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"        if (favourite) {"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"            fav.setVisible(true);"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":53,"-":74}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" * Panel containing the list of events."},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private final ObservableList\u003cEvent\u003e eventList;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    private ListView\u003cEventCard\u003e eventListView;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        this.eventList \u003d eventList;"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        setConnections(eventList);"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"        ObservableList\u003cEventCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"                eventList, (event) -\u003e new EventCard(event, eventList.indexOf(event) + 1));"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        eventListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        eventListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"                        raise(new EventPanelSelectionChangedEvent(newValue.event));"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EventCard}."},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    class EventListViewCell extends ListCell\u003cEventCard\u003e {"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        @Override"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        protected void updateItem(EventCard event, boolean empty) {"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"            super.updateItem(event, empty);"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"                setGraphic(null);"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"                setText(null);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"            } else {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"                setGraphic(event.getRoot());"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":66,"-":9}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"    private String appTitle \u003d \"iConnect\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    public Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        return Integer.hashCode(zeroBasedIndex);"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":1,"-":52,"eldriclim":6}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (String wordInSentence : wordsInPreppedSentence) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"     * Returns a String with list elements linked by the given separator."},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"     * @param list"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"     * @param separator"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"     * @return a String with list elements linked by the given separator"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"    public static String multiStringPrint(List\u003cString\u003e list, String separator) {"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        Iterator\u003cString\u003e iterator \u003d list.iterator();"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        String output \u003d \"\";"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        if (iterator.hasNext()) {"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"            output +\u003d iterator.next();"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"            while (iterator.hasNext()) {"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"                output +\u003d separator + iterator.next();"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        return output;"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":70,"eldriclim":28}},{"path":"src/main/java/seedu/address/commons/util/DateTimeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * Utility class for handling DateTime operations."},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"public class DateTimeUtil {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    public static final DateTimeFormatter EVENT_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\")"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    public static String parseLocalDateTimeToString(LocalDateTime dateTime) {"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        return dateTime.format(EVENT_DATETIME_FORMAT);"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    public static LocalDateTime parseStringToLocalDateTime(String input) throws DateTimeParseException {"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        return LocalDateTime.parse(input, EVENT_DATETIME_FORMAT);"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"     * Returns a Duration object based on the durationInput."},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"     * @param durationInput user input for duration"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"     * @return the parsed Duration object"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"     * @throws IllegalValueException if time does not conform to the proper standards"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    public static Duration parseDuration(String durationInput) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"        if (durationInput.equals(\"\")) {"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"            return Duration.ofMinutes(0);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        String dayPattern \u003d \"(\\\\d+)d\";"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        String hourPattern \u003d \"(\\\\d+)h\";"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        String minPattern \u003d \"(\\\\d+)m\";"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        int dayCount \u003d 0;"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        int hourCount \u003d 0;"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        int minCount \u003d 0;"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        Pattern pattern \u003d Pattern.compile(dayPattern);"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        Matcher matcher \u003d pattern.matcher(durationInput);"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        if (matcher.find()) {"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"            dayCount \u003d Integer.parseInt(matcher.group(1));"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        pattern \u003d Pattern.compile(hourPattern);"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        matcher \u003d pattern.matcher(durationInput);"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        if (matcher.find()) {"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"            hourCount \u003d Integer.parseInt(matcher.group(1));"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        pattern \u003d Pattern.compile(minPattern);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        matcher \u003d pattern.matcher(durationInput);"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        if (matcher.find()) {"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"            minCount \u003d Integer.parseInt(matcher.group(1));"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        if (dayCount \u003c 0 || hourCount \u003c 0 || minCount \u003c 0 || hourCount \u003e 23 || minCount \u003e 59) {"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"            throw new IllegalValueException(\"Illegal values detected.\");"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        return Duration.ofMinutes(dayCount * 24 * 60 + hourCount * 60 + minCount);"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"     * Returns true if there is an overlap between the given events."},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"     * @param event1 event to compare"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"     * @param event2 event to compare against"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"     * @return true if overlap is detected"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"    public static boolean checkEventClash(Event event1, Event event2) {"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        if (event1.getEventTime().getStart().isEqual(event2.getEventTime().getStart())) {"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"        if (event1.getEventTime().getEnd().isEqual(event2.getEventTime().getEnd())) {"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        if (isBetween(event1.getEventTime().getEnd(), event2)) {"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        if (isBetween(event1.getEventTime().getStart(), event2)) {"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"        if (event1.getEventTime().getStart().isAfter(event2.getEventTime().getStart())"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 event1.getEventTime().getEnd().isBefore(event2.getEventTime().getEnd())) {"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        if (event2.getEventTime().getStart().isAfter(event1.getEventTime().getStart())"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 event2.getEventTime().getEnd().isBefore(event1.getEventTime().getEnd())) {"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        return false;"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"     * Returns true if given time lies within the duration of an event."},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"     * @param time  to check against"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"     * @param event with a specified duration (start time \u0026 end time)"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"     * @return true if time is within event duration"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"     * @see Event"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"    public static boolean isBetween(LocalDateTime time, Event event) {"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"        if (time.isAfter(event.getEventTime().getStart()) \u0026\u0026 time.isBefore(event.getEventTime().getEnd())) {"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"     * Returns true if duration of an event consist of given date."},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"     * @param event         the event to check"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"     * @param referenceDate the date to check against"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"     * @return true if date is within event duration"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"    public static boolean containsReferenceDate(Event event, LocalDate referenceDate) {"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"        LocalDate startDate \u003d event.getEventTime().getStart().toLocalDate();"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"        LocalDate endDate \u003d event.getEventTime().getEnd().toLocalDate();"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"        return"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"                startDate.isEqual(referenceDate)"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"                        || endDate.isEqual(referenceDate)"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"                        || (startDate.isBefore(referenceDate) \u0026\u0026 endDate.isAfter(referenceDate));"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":153}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserPanelFindRouteEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" * Represents a display of route from start location to end location in the Browser Panel"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"public class BrowserPanelFindRouteEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"    private final ReadOnlyPerson person;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    private final String address;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"    public BrowserPanelFindRouteEvent(ReadOnlyPerson person, String address) {"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"        this.person \u003d person;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"        this.address \u003d address;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    public ReadOnlyPerson getSelectedPerson() {"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"        return person;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    public String getAddress() {"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        return address;"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":32}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserPanelShowLocationEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" * Represents a display of location in the Browser Panel"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"public class BrowserPanelShowLocationEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"    private final ReadOnlyPerson person;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public BrowserPanelShowLocationEvent(ReadOnlyPerson person) {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        this.person \u003d person;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    public ReadOnlyPerson getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        return person;"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":26}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"eldriclim":3}},{"path":"src/main/java/seedu/address/commons/events/ui/CalendarSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":" * Represents a selection change in the Calendar view"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"public class CalendarSelectionChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"    private LocalDate selectedDate;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    public CalendarSelectionChangedEvent(LocalDate selectedDate) {"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"        this.selectedDate \u003d selectedDate;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    public LocalDate getSelectedDate() {"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        return selectedDate;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":25,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeDarkThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":" * Indicates a request for App termination"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"public class ChangeDarkThemeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":12,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenFaceBookWebViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request for opening facebook webview"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class OpenFaceBookWebViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    public OpenFaceBookWebViewEvent() {}"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":17}},{"path":"src/test/java/seedu/address/testutil/TypicalRecycleBin.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"public class TypicalRecycleBin {"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson ALICERE \u003d new PersonBuilder().withName(\"Alicere Pauline\")"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson BENSONRE \u003d new PersonBuilder().withName(\"Bensonre Meier\")"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson CARLRE \u003d new PersonBuilder().withName(\"Carlre Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson DANIELRE \u003d new PersonBuilder().withName(\"Danielre Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson ELLERE \u003d new PersonBuilder().withName(\"Ellere Meyer\").withPhone(\"9482224\")"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson FIONARE \u003d new PersonBuilder().withName(\"Fionare Kunz\").withPhone(\"9482427\")"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson GEORGERE \u003d new PersonBuilder().withName(\"Georgere Best\").withPhone(\"9482442\")"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson HOONRE \u003d new PersonBuilder().withName(\"Hoonre Meier\").withPhone(\"8482424\")"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson IDARE \u003d new PersonBuilder().withName(\"Idare Mueller\").withPhone(\"8482131\")"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson AMYRE \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"    public static final ReadOnlyPerson BOBRE \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    private TypicalRecycleBin() {} // prevents instantiation"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"    public static AddressBook getTypicalRecyclbin() {"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"                ab.addPerson(person);"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"not possible\";"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        return ab;"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICERE, BENSONRE, CARLRE, DANIELRE, ELLERE, FIONARE, GEORGERE));"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":61,"-":20}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenNusModsWebViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request for opening nusmods webview"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class OpenNusModsWebViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    public OpenNusModsWebViewEvent() {}"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":17}},{"path":"src/main/java/seedu/address/commons/util/EventOutputUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" * Utility method to output Event attributes in human-readable time"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"public class EventOutputUtil {"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"     * Returns a Duration in String format, in days, hours and minutes"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"     * @param duration given duration of Event"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"     * @return a String of Duration in human-readable form"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    public static String toStringDuration(Duration duration) {"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        int totalSeconds \u003d (int) duration.getSeconds();"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        int daysOutput \u003d totalSeconds / (60 * 60 * 24);"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        int hoursOutput \u003d (totalSeconds % (60 * 60 * 24)) / (60 * 60);"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        int minutesOutput \u003d (totalSeconds % (60 * 60)) / 60;"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        if (daysOutput \u003e 0) {"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"            sb.append(daysOutput + \"day\");"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        if (hoursOutput \u003e 0) {"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"            sb.append(hoursOutput + \"hr\");"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        if (minutesOutput \u003e 0) {"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"            sb.append(minutesOutput + \"min\");"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        if (daysOutput \u003d\u003d 0 \u0026\u0026 hoursOutput \u003d\u003d 0 \u0026\u0026 minutesOutput \u003d\u003d 0) {"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"            sb.append(0 + \"min\");"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        return sb.toString();"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"     * Returns a String representation of a list of members\u0027s name."},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"     * @param members a list of members"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"     * @return String with members name separated by commas"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    public static String toStringMembers(ArrayList\u003cReadOnlyPerson\u003e members) {"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        if (members.isEmpty()) {"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"            return \"none\";"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cString\u003e memberNames \u003d new ArrayList\u003c\u003e("},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"                members.stream().map(p -\u003e p.getName().toString()).collect(Collectors.toList()));"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        return StringUtil.multiStringPrint(memberNames, \", \");"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"     * Returns a String representation of an Event."},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"     * @param eventName the name of an Event"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"     * @param eventTime the time of an Event"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"     * @param eventDuration the duration of an Event"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"     * @param memberList the list of members of an Event"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"     * @return String with details of an Event"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"     * @see Event#toString()"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"    public static String toStringEvent(EventName eventName, EventTime eventTime,"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"                                       EventDuration eventDuration, MemberList memberList) {"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e members \u003d new ArrayList\u003c\u003e(memberList.asReadOnlyMemberList());"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        return \"Name: \" + eventName.toString() + \" Time: \" + eventTime.toString()"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"                + \" Duration: \" + eventDuration.toString() + \"\\n\""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"                + \"Members: \" + toStringMembers(members);"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":90,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenTwitterWebViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request for opening twitter webview"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class OpenTwitterWebViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    public OpenTwitterWebViewEvent() {}"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":17}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeBrightThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":" * Indicates a request for App termination"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"public class ChangeBrightThemeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":12,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ClearPersonListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request to clear the person list"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class ClearPersonListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":15}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenGithubWebViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request for opening github webview"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class OpenGithubWebViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    public OpenGithubWebViewEvent() {}"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":17}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenInstagramWebViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":" * Indicates a request for opening instagram webview"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"public class OpenInstagramWebViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"    public OpenInstagramWebViewEvent() {}"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":17}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeDefaultThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":" * Indicates a request for App termination"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"public class ChangeDefaultThemeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":12,"-":4}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"                + \", number of events \" + data.getEventList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":18,"eldriclim":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ScheduleUpdateEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":" * Represents an update in address book master event list"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"public class ScheduleUpdateEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"    private ObservableList\u003cEvent\u003e events;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    public ScheduleUpdateEvent(ObservableList\u003cEvent\u003e events) {"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"        this.events \u003d events;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e getEvents() {"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"        return events;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":26,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":" * Represents a selection change in the Event List Panel"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"public class EventPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    private Event selectedEvent;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    public EventPanelSelectionChangedEvent(Event selectedEvent) {"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"        this.selectedEvent \u003d selectedEvent;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getMemberAsArrayList() {"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"        return FXCollections.observableArrayList(selectedEvent.getMemberList().asReadOnlyMemberList());"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    public String getEventName() {"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        return selectedEvent.getEventName().toString();"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":30,"-":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getRecycleBinList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    /** Returns an unmodifiable view of the upcoming events */"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":1,"-":27,"eldriclim":4}},{"path":"src/main/java/seedu/address/commons/events/model/RecyclebinChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":6,"author":{"gitID":"Pengyuz"},"content":"/** Indicates the Recyclebin in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"Pengyuz"},"content":"public class RecyclebinChangeEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"    public RecyclebinChangeEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"                + \", number of events \" + data.getEventList().size();"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":16,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"            DateAdded dateAdded \u003d new DateAdded();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"            Set\u003cEvent\u003e eventList \u003d new HashSet\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, tagList, eventList, dateAdded);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":58,"eldriclim":14}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"     * Prefixes mapped to their respective arguments"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"     **/"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"    public int size() {"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        return argMultimap.size();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":59,"eldriclim":7}},{"path":"src/main/java/seedu/address/ui/RecycleBinCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Pengyuz"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":3,"author":{"gitID":"Pengyuz"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":" * An UI component that displays information of a person in the recycle bin."},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"public class RecycleBinCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"    private static final String FXML \u003d \"RecycleBinCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    private HBox cardPane;"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    private Label name;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    private Label id;"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    private Label phone;"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"    private Label email;"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    private Label p;"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    private Label e;"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    public RecycleBinCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        this.person \u003d person;"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"        p.setText(\"     p:\");"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        e.setText(\"     e:\");"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"        bindListeners(person);"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"     * so that they will be notified of any changes."},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"        // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        if (!(other instanceof RecycleBinCard)) {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"            return false;"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        // state check"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"        RecycleBinCard card \u003d (RecycleBinCard) other;"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":69,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"        String argsWithoutpre;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e index;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"        String arguments \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"        if (arguments.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        int indexOfname \u003d arguments.indexOf(\"n/\");"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        int indexOfnumbers \u003d arguments.indexOf(\"I/\");"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        if ((indexOfname \u003d\u003d -1) \u0026\u0026 (indexOfnumbers \u003d\u003d -1)) {"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        String atStart \u003d arguments.substring(0, 2);"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"        if ((!atStart.equals(\"n/\")) \u0026\u0026 (!atStart.equals(\"I/\"))) {"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException("},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        if (atStart.equals(\"I/\")) {"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"            argsWithoutpre \u003d arguments.replace(\"I/\", \"\").trim();"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"            try {"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"                index \u003d ParserUtil.parseIndexes(argsWithoutpre);"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"                return new DeleteCommand(index);"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"                throw new ParseException("},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"            argsWithoutpre \u003d arguments.replace(\"n/\", \"\").trim();"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"            if (argsWithoutpre.equals(\"\")) {"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"                throw new ParseException("},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"            return new DeleteCommand(argsWithoutpre);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":53,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/TagAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand.TagAddDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":" * Parses input arguments and creates a new TagAddCommand object"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"public class TagAddCommandParser implements Parser\u003cTagAddCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"     * Parses the given {@code String} of arguments in the context of the TagAddCommand"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"     * and returns an TagAddCommand object for execution."},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"    public TagAddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"        int defaultLastNumberIndex \u003d -1;"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"        int arrayIndexOffset \u003d 1;"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        int nextArrayIndex \u003d 1;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"        int completeNumOfArgs \u003d 2;"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"        String newTag \u003d \"\";"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"        int lastIndex \u003d defaultLastNumberIndex;"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"        String[] argsArray;"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e index \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"        if (args.isEmpty() || (argsArray \u003d args.trim().split(\" \")).length \u003c completeNumOfArgs) {"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagAddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"            for (int i \u003d 0; i \u003c argsArray.length; i++) {"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"                if (argsArray[i].matches(\"\\\\d+\")) {"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"                    index.add(ParserUtil.parseIndex(argsArray[i]));"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"                    lastIndex \u003d i;"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"                } else {"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"                    break;"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagAddCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        if (lastIndex \u003d\u003d defaultLastNumberIndex || lastIndex \u003d\u003d (argsArray.length - arrayIndexOffset)) {"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagAddCommand.MESSAGE_USAGE));"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        HashSet\u003cString\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d lastIndex + nextArrayIndex; i \u003c argsArray.length; i++) {"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"            newTag \u003d newTag.concat(argsArray[i] + \" \");"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"        newTag \u003d newTag.trim();"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(newTag);"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        TagAddDescriptor tagAddDescriptor \u003d new TagAddDescriptor();"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"            parseTagsForEdit(tagSet).ifPresent(tagAddDescriptor::setTags);"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"        if (!tagAddDescriptor.isAnyFieldEdited()) {"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(TagAddCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        return new TagAddCommand(index, tagAddDescriptor);"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        assert tags !\u003d null;"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"        int singleElementArraySize \u003d 1;"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"            return Optional.empty();"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d singleElementArraySize \u0026\u0026 tags.contains(\"\")"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"                    ? Collections.emptySet() : tags;"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":92,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/HelpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BinclearCommand;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ScheduleAddCommand;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.ScheduleRemoveCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":" * Parses input arguments and creates a new HelpCommand object"},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"     * Parses the given {@code String} of arguments in the context of the HelpCommand"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"     * and returns an HelpCommand object for execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public HelpCommand parse(String args) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String input \u003d args.toLowerCase().trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (input.equals(AddCommand.COMMAND_WORD) || input.equals(AddCommand.COMMAND_WORD_2)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            || input.equals(AddCommand.COMMAND_WORD_3)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"add\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } else if (input.equals(ClearCommand.COMMAND_WORD)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"clear\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } else if (input.equals(DeleteCommand.COMMAND_WORD) || input.equals(DeleteCommand.COMMAND_WORD_2)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                || input.equals(DeleteCommand.COMMAND_WORD_3)) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"delete\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } else if (input.equals(EditCommand.COMMAND_WORD) || input.equals(EditCommand.COMMAND_WORD_2)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || input.equals(EditCommand.COMMAND_WORD_3)) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"edit\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } else if (input.equals(ExitCommand.COMMAND_WORD)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"exit\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } else if (input.equals(FindCommand.COMMAND_WORD) || input.equals(FindCommand.COMMAND_WORD_2)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                || input.equals(FindCommand.COMMAND_WORD_3)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"find\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } else if (input.equals(HistoryCommand.COMMAND_WORD) || input.equals(HistoryCommand.COMMAND_WORD_2)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"history\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } else if (input.equals(ListCommand.COMMAND_WORD) || input.equals(ListCommand.COMMAND_WORD_2)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || input.equals(ListCommand.COMMAND_WORD_3)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"list\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } else if (input.equals(RedoCommand.COMMAND_WORD)) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"redo\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } else if (input.equals(SelectCommand.COMMAND_WORD) || input.equals(SelectCommand.COMMAND_WORD_2)) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"select\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } else if (input.equals(SortCommand.COMMAND_WORD)) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"sort\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } else if (input.equals(TagAddCommand.COMMAND_WORD)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"tagadd\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } else if (input.equals(TagRemoveCommand.COMMAND_WORD)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"tagremove\");"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(TagFindCommand.COMMAND_WORD)) {"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"tagfind\");"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(BirthdayAddCommand.COMMAND_WORD)) {"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"birthdayadd\");"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(BirthdayRemoveCommand.COMMAND_WORD)) {"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"birthdayremove\");"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(MapShowCommand.COMMAND_WORD)) {"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"mapshow\");"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(MapRouteCommand.COMMAND_WORD)) {"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"maproute\");"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(ScheduleAddCommand.COMMAND_WORD)) {"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"scheduleadd\");"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(ScheduleRemoveCommand.COMMAND_WORD)) {"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"scheduleremove\");"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(BinclearCommand.COMMAND_WORD)) {"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"            return new HelpCommand(\"bin-fresh\");"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(BindeleteCommand.COMMAND_WORD)) {"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"bin-delete\");"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(BinrestoreCommand.COMMAND_WORD)) {"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"bin-restore\");"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        } else if (input.equals(ExportCommand.COMMAND_WORD)) {"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"            return new HelpCommand(\"export\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } else if (input.equals(UndoCommand.COMMAND_WORD)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new HelpCommand(\"undo\");"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"        } else if (input.equals(SwitchThemeCommand.COMMAND_WORD)) {"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"            return new HelpCommand(\"theme\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":7,"ZhangH795":2,"dalessr":32,"-":65,"eldriclim":2}},{"path":"src/main/java/seedu/address/logic/parser/BirthdayRemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":" * Parses input arguments and creates a new BirthdayRemoveCommand object"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"public class BirthdayRemoveCommandParser implements Parser\u003cBirthdayRemoveCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"     * Parses the given {@code String} of arguments in the context of the BirthdayRemoveCommand"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"     * and returns an BirthdayRemoveCommand object for execution."},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    public BirthdayRemoveCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"            Index index \u003d ParserUtil.parseIndex(trimmedArgs);"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"            return new BirthdayRemoveCommand(index);"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":33}},{"path":"src/main/java/seedu/address/logic/parser/MapShowCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":" * Parses input arguments and creates a new MapShowCommand object"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"public class MapShowCommandParser implements Parser\u003cMapShowCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"     * Parses the given {@code String} of arguments in the context of the MapShowCommand"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"     * and returns an MapShowCommand object for execution."},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    public MapShowCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"            return new MapShowCommand(index);"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapShowCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":21,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BinclearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayRemoveCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapShowCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleAddCommand;"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleRemoveCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagAddCommand;"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"    private static ArrayList\u003cString\u003e commandNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"    public AddressBookParser() {"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        commandNames.add(AddCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        commandNames.add(BinclearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        commandNames.add(BindeleteCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        commandNames.add(BinrestoreCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        commandNames.add(SortCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        commandNames.add(EditCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        commandNames.add(TagAddCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        commandNames.add(TagFindCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"        commandNames.add(TagRemoveCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        commandNames.add(BirthdayAddCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        commandNames.add(BirthdayRemoveCommand.COMMAND_WORD);"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"        commandNames.add(SelectCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        commandNames.add(SwitchThemeCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"        commandNames.add(MapShowCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        commandNames.add(MapRouteCommand.COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"        commandNames.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"        commandNames.add(FindCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ListCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        commandNames.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"        commandNames.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ScheduleAddCommand.COMMAND_WORD);"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ScheduleRemoveCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        commandNames.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"        commandNames.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        commandNames.add(ExportCommand.COMMAND_WORD);"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD_2:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD_3:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case BindeleteCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new BindeleteCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case BinclearCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new BinclearCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"        case BinrestoreCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"            return new BinrestoreCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD_2:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD_3:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"ZhangH795"},"content":"        case TagAddCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"ZhangH795"},"content":"            return new TagAddCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":126,"author":{"gitID":"ZhangH795"},"content":"        case TagFindCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"ZhangH795"},"content":"            return new TagFindCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":129,"author":{"gitID":"ZhangH795"},"content":"        case TagRemoveCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"ZhangH795"},"content":"            return new TagRemoveCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"        case BirthdayAddCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"            return new BirthdayAddCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"        case BirthdayRemoveCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"            return new BirthdayRemoveCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD_2:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"ZhangH795"},"content":"        case SwitchThemeCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"ZhangH795"},"content":"            return new SwitchThemeCommandParser().parse(arguments);"},{"lineNumber":144,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"        case MapShowCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"            return new MapShowCommandParser().parse(arguments);"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"        case MapRouteCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"            return new MapRouteCommandParser().parse(arguments);"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD_2:"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD_3:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD_2:"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD_3:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD_2:"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD_3:"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD_2:"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD_2:"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return new HelpCommandParser().parse(arguments);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"eldriclim"},"content":"        case ScheduleAddCommand.COMMAND_WORD:"},{"lineNumber":181,"author":{"gitID":"eldriclim"},"content":"            return new ScheduleAddCommandParser().parse(arguments);"},{"lineNumber":182,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":183,"author":{"gitID":"eldriclim"},"content":"        case ScheduleRemoveCommand.COMMAND_WORD:"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"            return new ScheduleRemoveCommandParser().parse(arguments);"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"Pengyuz"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":193,"author":{"gitID":"Pengyuz"},"content":"            return new ExportCommand(arguments);"},{"lineNumber":194,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":201,"author":{"gitID":"dalessr"},"content":"    public static ArrayList\u003cString\u003e getCommandNames() {"},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"        return commandNames;"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"Pengyuz":9,"ZhangH795":16,"dalessr":57,"-":111,"eldriclim":12}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        //Throw an error if there is no argument followed by the command word"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        //Get the index range of different keywords (distinguished by attributes) from trimmedArgs"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        int indexOfName \u003d trimmedArgs.indexOf(PREFIX_NAME.getPrefix());"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        int indexOfPhone \u003d trimmedArgs.indexOf(PREFIX_PHONE.getPrefix());"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        int indexOfEmail \u003d trimmedArgs.indexOf(PREFIX_EMAIL.getPrefix());"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        int indexOfAddress \u003d trimmedArgs.indexOf(PREFIX_ADDRESS.getPrefix());"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        //Throw an error if there is no prefixes to specify the type of the keywords"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        if ((indexOfName \u003d\u003d -1) \u0026\u0026 (indexOfPhone \u003d\u003d -1) \u0026\u0026 (indexOfEmail \u003d\u003d -1) \u0026\u0026 (indexOfAddress \u003d\u003d -1)) {"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        String symbolAtStart \u003d trimmedArgs.substring(0, 2);"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        //Throw an error if there is some dummy values before the first prefix after the command word"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        if ((!symbolAtStart.equals(PREFIX_NAME.getPrefix())) \u0026\u0026 (!symbolAtStart.equals(PREFIX_PHONE.getPrefix()))"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 (!symbolAtStart.equals(PREFIX_EMAIL.getPrefix()))"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 (!symbolAtStart.equals(PREFIX_ADDRESS.getPrefix()))) {"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        int[] attributeIndexArray \u003d {indexOfName, indexOfPhone, indexOfEmail, indexOfAddress, trimmedArgs.length()};"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        Arrays.sort(attributeIndexArray);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        //Put different types of keywords into separate strings"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        String trimmedNames \u003d null;"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        if (indexOfName !\u003d -1) {"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"            int index \u003d 0;"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c attributeIndexArray.length; i++) {"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"                if (attributeIndexArray[i] \u003d\u003d indexOfName) {"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"                    index \u003d i;"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"                    break;"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"            trimmedNames \u003d trimmedArgs.substring(indexOfName + 2, attributeIndexArray[index + 1]).trim();"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"            if (trimmedNames.equals(\"\")) {"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"        String trimmedPhones \u003d null;"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"        if (indexOfPhone !\u003d -1) {"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"            int index \u003d 0;"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c attributeIndexArray.length; i++) {"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"                if (attributeIndexArray[i] \u003d\u003d indexOfPhone) {"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"                    index \u003d i;"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"                    break;"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"            trimmedPhones \u003d trimmedArgs.substring(indexOfPhone + 2, attributeIndexArray[index + 1]).trim();"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"            if (trimmedPhones.equals(\"\")) {"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"        String trimmedEmails \u003d null;"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"        if (indexOfEmail !\u003d -1) {"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"            int index \u003d 0;"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c attributeIndexArray.length; i++) {"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"                if (attributeIndexArray[i] \u003d\u003d indexOfEmail) {"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"                    index \u003d i;"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"                    break;"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"            trimmedEmails \u003d trimmedArgs.substring(indexOfEmail + 2, attributeIndexArray[index + 1]).trim();"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"            if (trimmedEmails.equals(\"\")) {"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"        String trimmedAddress \u003d null;"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"        if (indexOfAddress !\u003d -1) {"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"            int index \u003d 0;"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c attributeIndexArray.length; i++) {"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"                if (attributeIndexArray[i] \u003d\u003d indexOfAddress) {"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"                    index \u003d i;"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"                    break;"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"            trimmedAddress \u003d trimmedArgs.substring(indexOfAddress + 2, attributeIndexArray[index + 1]).trim();"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"            if (trimmedAddress.equals(\"\")) {"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":"        //Add all the keywords to a list distinguished by prefixes in order to parse them to FindCommand class"},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"        List\u003cString\u003e keyWordsToSearch \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"        if (trimmedNames !\u003d null) {"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"            String[] nameKeywords \u003d trimmedNames.split(\" \");"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"            keyWordsToSearch.add(PREFIX_NAME.getPrefix());"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c nameKeywords.length; i++) {"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"                keyWordsToSearch.add(nameKeywords[i]);"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"        if (trimmedPhones !\u003d null) {"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"            String[] phoneKeywords \u003d trimmedPhones.split(\" \");"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"            keyWordsToSearch.add(PREFIX_PHONE.getPrefix());"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c phoneKeywords.length; i++) {"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"                keyWordsToSearch.add(phoneKeywords[i]);"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"        if (trimmedEmails !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"            String[] emailKeywords \u003d trimmedEmails.split(\" \");"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"            keyWordsToSearch.add(PREFIX_EMAIL.getPrefix());"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c emailKeywords.length; i++) {"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"                keyWordsToSearch.add(emailKeywords[i]);"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"        if (trimmedAddress !\u003d null) {"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"            String[] addressKeywords \u003d trimmedAddress.split(\" \");"},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"            keyWordsToSearch.add(PREFIX_ADDRESS.getPrefix());"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"            for (int i \u003d 0; i \u003c addressKeywords.length; i++) {"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"                keyWordsToSearch.add(addressKeywords[i]);"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":"        String[] parameters \u003d new String[keyWordsToSearch.size()];"},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c parameters.length; i++) {"},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"            parameters[i] \u003d keyWordsToSearch.get(i);"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(parameters));"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":"        return new FindCommand(predicate);"},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":146,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/DateParseException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":" * Represents a parse error encountered when parsing Date."},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"public class DateParseException extends ParseException {"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"    public DateParseException(String message) {"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":2,"eldriclim":10}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"     * Parses  {@code oneBasedIndexes} into {@code numbers} and return it. The whitespace will be deleted."},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"     * @throws IllegalValueException if one of the specified index is invalid."},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    public static ArrayList\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"        String[] ns \u003d oneBasedIndexes.trim().split(\" \");"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e numbers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"        boolean isValid \u003d true;"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        for (String a : ns) {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"            String s \u003d a.trim();"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"            if (StringUtil.isNonZeroUnsignedInteger(s)) {"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"                numbers.add(Index.fromOneBased(Integer.parseInt(s)));"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"                isValid \u003d false;"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        if (!isValid) {"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"        return numbers;"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"    //// Event-related parsing"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cEventName\u003e} if {@code name} is present."},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"    public static Optional\u003cEventName\u003e parseEventName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(name);"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"        return name.isPresent() ? Optional.of(new EventName(name.get())) : Optional.empty();"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"     * Parses two {@code Optional\u003cString\u003e time} and {@code String duration} into an"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"     * {@code Optional\u003cEventTime\u003e} if {@code time} is present."},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"     * String duration is guaranteed to be initialised from input validation in"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"     * @see ScheduleAddCommandParser"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"    public static Optional\u003cEventTime\u003e parseEventTime(Optional\u003cString\u003e time, String duration)"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"            throws DateTimeParseException, NumberFormatException, IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(time);"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(duration);"},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        LocalDateTime eventTime \u003d DateTimeUtil.parseStringToLocalDateTime(time.get());"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"        return (time.isPresent())"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"                ? Optional.of(new EventTime(eventTime, DateTimeUtil.parseDuration(duration)))"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"                : Optional.empty();"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"     * Parses a {@code String duration} into an {@code EventDuration}"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":"     * String duration is guaranteed to be initialised from input validation in"},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"     * @see ScheduleAddCommandParser"},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":"    public static EventDuration parseEventDuration(String duration)"},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":"            throws NumberFormatException, IllegalValueException {"},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(duration);"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":"        return new EventDuration(DateTimeUtil.parseDuration(duration));"},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":178,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"Pengyuz":27,"-":94,"eldriclim":57}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_DATEADDED \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"    /* Prefix definitions for Event-related commands*/"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_EVENT_MEMBER \u003d new Prefix(\"m/\");"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_EVENT_TIME \u003d new Prefix(\"t/\");"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_EVENT_DURATION \u003d new Prefix(\"d/\");"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    public static final Prefix PREFIX_EVENT_INDEXES \u003d new Prefix(\"I/\");"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":15,"eldriclim":10}},{"path":"src/main/java/seedu/address/logic/parser/TagFindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagFindCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":" * Parses input arguments and creates a new TagFindCommand object"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"public class TagFindCommandParser implements Parser\u003cTagFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"     * Parses the given {@code String} of arguments in the context of the TagFindCommand"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"     * and returns an TagFindCommand object for execution."},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"     * @throws ParseException if the user does not provide any input"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"    public TagFindCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d true;"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"        //Throw an error if there is no argument followed by the command word"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagFindCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate predicate \u003d new TagMatchingKeywordPredicate(trimmedArgs, looseFind);"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"        return new TagFindCommand(predicate);"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":27,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/SwitchThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.SwitchThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":" * Parses input arguments and creates a new SwitchThemeCommand object"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"public class SwitchThemeCommandParser implements Parser\u003cSwitchThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"     * Parses the given {@code String} of arguments in the context of the SwitchThemeCommand"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"     * and returns an SwitchThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"     * @throws ParseException if the user input does not provide any input"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"    public SwitchThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"        String userInput \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"        if (userInput.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"            return new SwitchThemeCommand(userInput);"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":25,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/ScheduleAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DURATION;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MEMBER;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleAddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":" * Parses input arguments and creates a new ScheduleAddCommand object"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"public class ScheduleAddCommandParser implements Parser\u003cScheduleAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    static final String ERROR_INVALID_DATE \u003d \"Invalid date detected.\";"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    static final String ERROR_PARSING_DURATION \u003d \"Duration has to be in the following format: #d#h#m\\n\""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"            + \"d:day, h:hour, m:minute\";"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleAddCommand"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"     * and returns an ScheduleAddCommand object for execution."},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    public ScheduleAddCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        args.trim();"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_TIME,"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"                        PREFIX_EVENT_DURATION, PREFIX_EVENT_MEMBER);"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_EVENT_TIME)) {"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"            String durationInput \u003d argMultimap.getValue(PREFIX_EVENT_DURATION).isPresent()"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"                    ? argMultimap.getValue(PREFIX_EVENT_DURATION).get().trim()"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"                    : \"\";"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"            if (!durationInput.matches(\"^|((?!$)(?:(\\\\d+)d)?(?:(\\\\d+)h)?(?:(\\\\d+)m)?)$\")) {"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"                throw new ParseException(ERROR_PARSING_DURATION);"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"            EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME)).get();"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"            EventTime eventTime \u003d ParserUtil.parseEventTime("},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"                    argMultimap.getValue(PREFIX_EVENT_TIME), durationInput).get();"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"            EventDuration eventDuration \u003d ParserUtil.parseEventDuration("},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"                    durationInput);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d argMultimap.getValue(PREFIX_EVENT_MEMBER).isPresent()"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"                    ? ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_EVENT_MEMBER).get())"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"                    : new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"            Set\u003cIndex\u003e uniqueMemberIndexes \u003d new HashSet\u003c\u003e(indexList);"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"            return new ScheduleAddCommand(eventName, eventTime, eventDuration, uniqueMemberIndexes);"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        } catch (DateTimeParseException dve) {"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(ERROR_INVALID_DATE);"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":8,"eldriclim":86}},{"path":"src/main/java/seedu/address/logic/parser/BindeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BindeleteCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":" * Parses input arguments and creates a new BindeleteCommand object"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"public class BindeleteCommandParser implements Parser\u003cBindeleteCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"     * Parses the given {@code String} of arguments in the context of the BindeleteCommand"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"     * and returns an BindeleteCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    public BindeleteCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e index;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"        String arguments \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"        if (arguments.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BindeleteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"            index \u003d ParserUtil.parseIndexes(arguments);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"            return new BindeleteCommand(index);"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BindeleteCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":25,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/MapRouteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.MapRouteCommand;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":" * Parses input arguments and creates a new MapRouteCommand object"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"public class MapRouteCommandParser implements Parser\u003cMapRouteCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"     * Parses the given {@code String} of arguments in the context of the MapRouteCommand"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"     * and returns an MapRouteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    public MapRouteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"            if (!args.contains(PREFIX_ADDRESS.getPrefix())) {"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"            String[] argsArray \u003d args.trim().split(PREFIX_ADDRESS.getPrefix());"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"            if (argsArray.length \u003c\u003d 1) {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"                throw new ParseException("},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"            Index index \u003d ParserUtil.parseIndex(argsArray[0].trim());"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"            return new MapRouteCommand(index, argsArray[1].trim());"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapRouteCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":39}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATEADDED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.function.Consumer;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    private String sortType;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    private Boolean isDescending;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        if (!args.matches(\"^|( [npeat]/((asc)|(dsc)|))$\")) {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        if (\"\".equals(args)) {"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"            args \u003d \" n/asc\";"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"                        PREFIX_ADDRESS, PREFIX_DATEADDED);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        assert argMultimap.size() \u003d\u003d 2;"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        argMultimap.getValue(PREFIX_NAME).ifPresent(setSortingOrder(PREFIX_NAME));"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        argMultimap.getValue(PREFIX_PHONE).ifPresent(setSortingOrder(PREFIX_PHONE));"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        argMultimap.getValue(PREFIX_EMAIL).ifPresent(setSortingOrder(PREFIX_EMAIL));"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        argMultimap.getValue(PREFIX_ADDRESS).ifPresent(setSortingOrder(PREFIX_ADDRESS));"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        argMultimap.getValue(PREFIX_DATEADDED).ifPresent(setSortingOrder(PREFIX_DATEADDED));"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"        return new SortCommand(sortType, isDescending);"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    private Consumer\u003cString\u003e setSortingOrder(Prefix prefix) {"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        return s -\u003e {"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"            sortType \u003d prefix.toString();"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"            if (s.equals(SortCommand.BY_ASCENDING)) {"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"                isDescending \u003d new Boolean(false);"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"                return;"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"            //Defaults to ascending when order not specified"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"            if (\"\".equals(s)) {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"                isDescending \u003d new Boolean(false);"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"                return;"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"            if (s.equals(SortCommand.BY_DESCENDING)) {"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"                isDescending \u003d new Boolean(true);"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"                return;"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        };"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":9,"eldriclim":72}},{"path":"src/main/java/seedu/address/logic/parser/BinrestoreCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.logic.commands.BinrestoreCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":" * Parses input arguments and creates a new BinrestoreCommand object"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"public class BinrestoreCommandParser implements Parser\u003cBinrestoreCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"     * Parses the given {@code String} of arguments in the context of the BinrestoreCommand"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"     * and returns an BinrestoreCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    public BinrestoreCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cIndex\u003e index;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"        String arguments \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"        if (arguments.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BinrestoreCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"            index \u003d ParserUtil.parseIndexes(arguments);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"            return new BinrestoreCommand(index);"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BinrestoreCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":27,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/MapRouteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelFindRouteEvent;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":" * Shows the route from the entered location to the selected person\u0027s address on Google map."},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"public class MapRouteCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    public static final String COMMAND_WORD \u003d \"m-route\";"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"            + \": Shows the route from the location provided to the selected person\u0027s address on Google map.\\n\""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"            + PREFIX_ADDRESS + \"ADDRESS\\n\""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"            + PREFIX_ADDRESS + \"Blk 30 Clementi Street 29\";"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_FIND_ROUTE_SUCCESS \u003d \"Found Route to Person: %1$s\\n\""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"            + \"Please click on the browser tab below to view the map.\";"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    private final String startLocation;"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public MapRouteCommand(Index targetIndex, String startLocation) {"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        this.startLocation \u003d startLocation;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new BrowserPanelFindRouteEvent("},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"                model.getFilteredPersonList().get(targetIndex.getZeroBased()), startLocation));"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        return new CommandResult(String.format(MESSAGE_FIND_ROUTE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"                || (other instanceof MapRouteCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.targetIndex.equals(((MapRouteCommand) other).targetIndex)); // state check"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":61}},{"path":"src/main/java/seedu/address/logic/commands/BirthdayRemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":" * Remove a birthday from an existing person in the address book."},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"public class BirthdayRemoveCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    public static final String COMMAND_WORD \u003d \"b-remove\";"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove birthday from the person selected \""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"            + \"by the index number used in the last person listing.\\n\""},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_REMOVE_BIRTHDAY_SUCCESS \u003d \"Removed Birthday from Person: %1$s\";"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    public BirthdayRemoveCommand (Index index) {"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        ReadOnlyPerson currentPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        Person personToEdit \u003d (Person) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        Birthday birthdayToAdd \u003d new Birthday();"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        personToEdit.setBirthday(birthdayToAdd);"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"            model.updatePerson(currentPerson, personToEdit);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_BIRTHDAY_SUCCESS, personToEdit));"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"                || (other instanceof BirthdayRemoveCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.targetIndex.equals(((BirthdayRemoveCommand) other).targetIndex)); // state check"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":72}},{"path":"src/main/java/seedu/address/logic/parser/BirthdayAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.BirthdayAddCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Parses input arguments and creates a new BirthdayAddCommand object"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"public class BirthdayAddCommandParser implements Parser\u003cBirthdayAddCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"     * Parses the given {@code String} of arguments in the context of the BirthdayAddCommand"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"     * and returns an BirthdayAddCommand object for execution."},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    public BirthdayAddCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"        String[] parameters \u003d trimmedArgs.split(\" \");"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"        if (parameters.length \u003c\u003d 1) {"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"            Index index \u003d ParserUtil.parseIndex(parameters[0]);"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"            Birthday birthday \u003d new Birthday(parameters[parameters.length - 1]);"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"            return new BirthdayAddCommand(index, birthday);"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"            throw new ParseException("},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayAddCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":32,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":" * Deletes a person identified using it\u0027s last displayed index or name from the address book."},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD_2 \u003d \"remove\";"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD_3 \u003d \"-\";"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"            + \"Parameters: INDEX (must be a positive integer) or NAME(exactly same)\\n\""},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\" + COMMAND_WORD + \"Alex Yeoh\";"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted.\";"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the recycle bin\";"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    private boolean isValid \u003d true;"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    private boolean isEmpty \u003d false;"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    private boolean isDuplicate \u003d false;"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e targetIndexs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"    private String target \u003d \"\";"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndex) {"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        this.targetIndexs \u003d targetIndex;"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    public DeleteCommand(String target) {"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        this.target \u003d target;"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d  model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personstodelete \u003d  new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        if (target !\u003d \"\") {"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"            for (ReadOnlyPerson p: lastShownList) {"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"                if (p.getName().fullName.equals(target) \u0026\u0026 isEmpty \u003d\u003d true) {"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"                    personstodelete.add(p);"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"                    isDuplicate \u003d true;"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"                }"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"                if (p.getName().fullName.equals(target)) {"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"                    personstodelete.add(p);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"                    isEmpty \u003d true;"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"                }"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"            for (Index s: targetIndexs) {"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"                if (s.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"                    isValid \u003d false;"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"                } else {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"                    personstodelete.add(lastShownList.get(s.getZeroBased()));"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"                    isEmpty \u003d true;"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"                }"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"        if (isEmpty \u0026\u0026 isDuplicate) {"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"            List\u003cString\u003e duplicatePerson \u003d Arrays.asList(target);"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"            NameContainsKeywordsPredicate updatedpredicate \u003d new NameContainsKeywordsPredicate(duplicatePerson);"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"            model.updateFilteredPersonList(updatedpredicate);"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(\"Duplicate persons exist, please choose one to delete.\");"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"        if (isValid \u0026\u0026 isEmpty) {"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"                model.deletePerson(personstodelete);"},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"The target person cannot be missing\";"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"            } catch (DuplicatePersonException d) {"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"the duplicate person in bin should be handled\";"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MESSAGE_DELETE_PERSON_SUCCESS);"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 this.targetIndexs.equals(((DeleteCommand) other).targetIndexs))"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 (other instanceof DeleteCommand"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 this.target.equals(((DeleteCommand) other).target)); // state check"},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":"}"},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":""}],"authorContributionMap":{"Pengyuz":93,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_2 \u003d \"show\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_3 \u003d \"all\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all persons in the address book to you.\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":3,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/ScheduleRemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEXES;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.commands.ScheduleRemoveCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * Parses input arguments and creates a new ScheduleRemoveCommand object"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"public class ScheduleRemoveCommandParser implements Parser\u003cScheduleRemoveCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleRemoveCommand"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"     * and returns an ScheduleRemoveCommand object for execution."},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    public ScheduleRemoveCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        args.trim();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_INDEXES);"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_INDEXES)) {"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"                    ScheduleRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_EVENT_INDEXES).get());"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"            Set\u003cIndex\u003e uniqueEventIndexes \u003d new HashSet\u003c\u003e(indexList);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"            return new ScheduleRemoveCommand(uniqueEventIndexes);"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":9,"eldriclim":51}},{"path":"src/main/java/seedu/address/logic/parser/TagRemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand.TagRemoveDescriptor;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.logic.commands.TagRemoveCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":" * Parses input arguments and creates a new TagRemoveCommand object"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"public class TagRemoveCommandParser implements Parser\u003cTagRemoveCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"     * Parses the given {@code String} of arguments in the context of the TagRemoveCommand"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"     * and returns an TagRemoveCommand object for execution."},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"    public TagRemoveCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"        int defaultLastNumberIndex \u003d -1;"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        int arrayIndexOffset \u003d 1;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"        int nextArrayIndex \u003d 1;"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"        String newTag \u003d \"\";"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"        int lastIndex \u003d defaultLastNumberIndex;"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e index \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"        if (args.trim().isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        String[] argsArray \u003d args.trim().split(\" \");"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"            for (int i \u003d 0; i \u003c argsArray.length; i++) {"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"                if (argsArray[i].matches(\"\\\\d+\")) {"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"                    index.add(ParserUtil.parseIndex(argsArray[i]));"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"                    lastIndex \u003d i;"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"                } else {"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"                    break;"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"        if (lastIndex \u003d\u003d argsArray.length - arrayIndexOffset) {"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagRemoveCommand.MESSAGE_USAGE));"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d lastIndex + nextArrayIndex; i \u003c argsArray.length; i++) {"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"            newTag \u003d newTag.concat(\" \" + argsArray[i]);"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"        HashSet\u003cString\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"        newTag \u003d newTag.trim();"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        tagSet.add(newTag);"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveDescriptor tagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"            parseTagsForEdit(tagSet).ifPresent(tagRemoveDescriptor::setTags);"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"        if (!tagRemoveDescriptor.isAnyFieldEdited()) {"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"            throw new ParseException(TagRemoveCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        return new TagRemoveCommand(index, tagRemoveDescriptor);"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        assert tags !\u003d null;"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"        int singleElementArraySize \u003d 1;"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"            return Optional.empty();"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d singleElementArraySize \u0026\u0026 tags.contains(\"\")"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"                ? Collections.emptySet() : tags;"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":92,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear all the person in the list.\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook(), model.getRecycleBin());"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":3,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":" * Export the person details in txt."},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"public class ExportCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New file created\";"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"export the person details in txt file\";"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    private String filepath;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    public ExportCommand (String f) {"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"        this.filepath \u003d f.trim();"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"     * Initiate the File with give file path."},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    private void init() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"            File file \u003d new File(filepath);"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"            BufferedWriter output \u003d new BufferedWriter(new FileWriter(file));"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"            output.write(\"New backup addressbook storage is created at \" + filepath + \" \"  + LocalDateTime.now());"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"            output.newLine();"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"            output.write(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"            output.newLine();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"            output.newLine();"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"            outputAttribute(output);"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"            outputEvent(output);"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"            output.write(\"End of file\");"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"            output.close();"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"        } catch (Exception ioe) {"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(\"Cannot create a file in the path: \" + filepath);"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"     * Output the attribute of all the person in the address book."},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"     * @param output"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"     * @throws CommandException"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    private void outputAttribute(BufferedWriter output) throws CommandException {"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"            for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"Person No.\" + (i + 1));"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"name:\" + model.getAddressBook().getPersonList().get(i).getName().fullName);"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"                if (!\"01/01/1900\".equals(model.getAddressBook().getPersonList().get(i).getBirthday().toString())) {"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"                    output.write(\"birthday:\""},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"                            + model.getAddressBook().getPersonList().get(i).getBirthday().toString());"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"                    output.newLine();"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"                }"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"phone:\" + model.getAddressBook().getPersonList().get(i).getPhone().toString());"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"email:\" + model.getAddressBook().getPersonList().get(i).getEmail().toString());"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"address:\" + model.getAddressBook().getPersonList().get(i).getAddress().toString());"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"tags:\" + model.getAddressBook().getPersonList().get(i).getTags().toString());"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"dateAdded:\" + model.getAddressBook().getPersonList().get(i).getDateAdded().toString());"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"eventAdded:\");"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"                for (Event o: model.getAddressBook().getPersonList().get(i).getEvents()) {"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"                    output.write(o.getEventName().fullName + \" || \");"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"                }"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":"        } catch (Exception o) {"},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(\"can\u0027t create a file in the path\" + filepath);"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"     * Output all the event in the event list of address book."},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"     * @param output"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"     * @throws CommandException"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":"    private void outputEvent(BufferedWriter output) throws CommandException {"},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"            for (int i \u003d 0; i \u003c model.getEventList().size(); i++) {"},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"Event No.\" + (i + 1));"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"eventName:\" + model.getEventList().get(i).getEventName().fullName);"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"eventTime:\" + model.getEventList().get(i).getEventTime().toString());"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"eventDuration:\" + model.getEventList().get(i).getEventTime().toString());"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"                output.write(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"                output.newLine();"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":"        } catch (Exception o) {"},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(\"can\u0027t create a file in the path\" + filepath);"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"            init();"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":"            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":121,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":122,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":123,"author":{"gitID":"Pengyuz"},"content":"        } catch (Exception e) {"},{"lineNumber":124,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(\"can\u0027t create a file in the path\" + filepath);"},{"lineNumber":125,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":115,"dalessr":3,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD_2 \u003d \"create\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_3 \u003d \"put\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"            int index \u003d model.getAddressBook().getPersonList().indexOf(toAdd);"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"            if (index \u003c 0) {"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"                index \u003d 0;"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"            Index targetIndex \u003d new Index(index);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":1,"dalessr":9,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * Sorts list of all contacts base on given parameter."},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" * Accepts both ascending and descending."},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    public static final String BY_ASCENDING \u003d \"asc\";"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    public static final String BY_DESCENDING \u003d \"dsc\";"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_SORT_LIST_SUCCESS \u003d \"List has been sorted by %1$s in %2$s order.\";"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"The list is empty.\";"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    private static final String PREFIX_NAME_SORT \u003d \"n/\";"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    private static final String PREFIX_PHONE_SORT \u003d \"p/\";"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    private static final String PREFIX_EMAIL_SORT \u003d \"e/\";"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    private static final String PREFIX_ADDRESS_SORT \u003d \"a/\";"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    private static final String PREFIX_DATEADDED_SORT \u003d \"t/\";"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts list of all contacts by their attributes,\""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"            + \" defaults to name when no parameters found and ascending when order not specified.\\n\""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"            + \"Parameters: \""},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"            + \"[\" + PREFIX_NAME_SORT + \"(\" + BY_ASCENDING + \" OR \" + BY_DESCENDING + \")] \\n\""},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PHONE_SORT + BY_DESCENDING + \" OR \""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"            + COMMAND_WORD + \" \" + PREFIX_ADDRESS_SORT + \" OR \""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"            + COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    private final String sortType;"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"    private final Boolean isDescending;"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    //Default setting, not final as subjected to change"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    private String sortTypeReadable \u003d \"name\";"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    private String sortOrderReadable \u003d \"ascending\";"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"     * Creates a SortCommand with the given sort type and sort order."},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"     * @param sortType     specify which attribute to sort by"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"     * @param isDescending specify if sorting is to be in descending order"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    public SortCommand(String sortType, Boolean isDescending) {"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(sortType);"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(isDescending);"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        this.sortType \u003d sortType;"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        this.isDescending \u003d isDescending;"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        sortOrderReadable \u003d (isDescending) ? \"descending\" : \"ascending\";"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        Comparator\u003cReadOnlyPerson\u003e sortType \u003d getComparator(this.sortType);"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"            model.sortPerson(sortType, isDescending);"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        } catch (EmptyListException ele) {"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"            throw new CommandException(MESSAGE_EMPTY_LIST);"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        Index defaultIndex \u003d new Index(0);"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(defaultIndex));"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        return new CommandResult(String.format(MESSAGE_SORT_LIST_SUCCESS, sortTypeReadable, sortOrderReadable));"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    public Comparator\u003cReadOnlyPerson\u003e getComparator(String sortType) {"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        switch (sortType) {"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"        case PREFIX_NAME_SORT:"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"name\";"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"            return (o1, o2) -\u003e o1.getName().toString().compareToIgnoreCase("},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"                    o2.getName().toString()"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"            );"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"        case PREFIX_PHONE_SORT:"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"phone\";"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"            return (o1, o2) -\u003e o1.getPhone().toString().compareToIgnoreCase("},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"                    o2.getPhone().toString()"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"            );"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"        case PREFIX_EMAIL_SORT:"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"email\";"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"            return (o1, o2) -\u003e o1.getEmail().toString().compareToIgnoreCase("},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"                    o2.getEmail().toString()"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"            );"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        case PREFIX_ADDRESS_SORT:"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"address\";"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"            return (o1, o2) -\u003e o1.getAddress().toString().compareToIgnoreCase("},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"                    o2.getAddress().toString()"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"            );"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        case PREFIX_DATEADDED_SORT:"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"date added\";"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"            return Comparator.comparing(o -\u003e o.getDateAdded().getDateObject());"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"        default:"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"            sortTypeReadable \u003d \"name\";"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"            return (o1, o2) -\u003e o1.getName().toString().compareToIgnoreCase("},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"                    o2.getName().toString()"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"            );"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 sortType.equals(((SortCommand) other).sortType)"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 isDescending.equals(((SortCommand) other).isDescending));"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"dalessr":2,"-":7,"eldriclim":114}},{"path":"src/main/java/seedu/address/logic/commands/TagFindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangH795"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":" * Finds and lists all persons whose tag list contains the given tag."},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":" * Keyword matching is case insensitive, substring matching is also allowed."},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"public class TagFindCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"    public static final String COMMAND_WORD \u003d \"t-find\";"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain any of \""},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"            + \"Parameters: [TAG] \\n\""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + \"friends\";"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"    private final TagMatchingKeywordPredicate predicate;"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"    private final int firstIndex \u003d 0;"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    public TagFindCommand(TagMatchingKeywordPredicate keywordPredicate) {"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"        this.predicate \u003d keywordPredicate;"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"        if (model.getFilteredPersonList().size() \u003e 0) {"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"            Index defaultIndex \u003d new Index(firstIndex);"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(defaultIndex));"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"        } else {"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"                || (other instanceof TagFindCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"                \u0026\u0026 this.predicate.equals(((TagFindCommand) other).predicate)); // state check"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":45,"dalessr":3,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":7,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Pengyuz"},"content":" * Format full help instructions for every command for display."},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD_2 \u003d \"h\";"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"    private String commandword \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"    public HelpCommand() {}"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    public HelpCommand(String args) {"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"        commandword \u003d args;"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"        if (\"theme\".equals(commandword)) {"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(SwitchThemeCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"bin-fresh\".equals(commandword)) {"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(BinclearCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"bin-delete\".equals(commandword)) {"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(BindeleteCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"bin-restore\".equals(commandword)) {"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(BinrestoreCommand.MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"export\".equals(commandword)) {"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ExportCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"add\".equals(commandword)) {"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(AddCommand.MESSAGE_USAGE);"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"clear\".equals(commandword)) {"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ClearCommand.MESSAGE_USAGE);"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"delete\".equals(commandword)) {"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"edit\".equals(commandword)) {"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(EditCommand.MESSAGE_USAGE);"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"exit\".equals(commandword)) {"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ExitCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"find\".equals(commandword)) {"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(FindCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"history\".equals(commandword)) {"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(HistoryCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"list\".equals(commandword)) {"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ListCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"redo\".equals(commandword)) {"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(RedoCommand.MESSAGE_USAGE);"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"select\".equals(commandword)) {"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(SelectCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"sort\".equals(commandword)) {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(SortCommand.MESSAGE_USAGE);"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"tagadd\".equals(commandword)) {"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(TagAddCommand.MESSAGE_USAGE);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"tagremove\".equals(commandword)) {"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(TagRemoveCommand.MESSAGE_USAGE);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"tagfind\".equals(commandword)) {"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(TagFindCommand.MESSAGE_USAGE);"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"birthdayadd\".equals(commandword)) {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(BirthdayAddCommand.MESSAGE_USAGE);"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"birthdayremove\".equals(commandword)) {"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(BirthdayRemoveCommand.MESSAGE_USAGE);"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"mapshow\".equals(commandword)) {"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MapShowCommand.MESSAGE_USAGE);"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"maproute\".equals(commandword)) {"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MapRouteCommand.MESSAGE_USAGE);"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"scheduleadd\".equals(commandword)) {"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ScheduleAddCommand.MESSAGE_USAGE);"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"scheduleremove\".equals(commandword)) {"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(ScheduleRemoveCommand.MESSAGE_USAGE);"},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"        } else if (\"undo\".equals(commandword)) {"},{"lineNumber":78,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(UndoCommand.MESSAGE_USAGE);"},{"lineNumber":79,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"Pengyuz"},"content":"            EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":81,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":82,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":86,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"                || (other instanceof HelpCommand // instanceof handles nulls"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 this.commandword.equals(((HelpCommand) other).commandword)); // state check"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":87,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousRecycleBin;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"     * Stores the current state of {@code model#recyclebin}."},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    private void saveRecycleBinSnapshot() {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(model);"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"        this.previousRecycleBin \u003d new AddressBook(model.getRecycleBin());"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"     * Reverts the AddressBook and Recyclebin to the state before this command"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"     * show all persons."},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"    protected final void undo() {"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"        requireAllNonNull(model, previousAddressBook, previousRecycleBin);"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"        model.resetData(previousAddressBook, previousRecycleBin);"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"     * list to show all persons."},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"    protected final void redo() {"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"        saveRecycleBinSnapshot();"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"        return executeUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":42,"-":25}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_2 \u003d \"update\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_3 \u003d \"modify\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"        DateAdded updatedDateAdded \u003d editPersonDescriptor.getDateAdded().orElse(personToEdit.getDateAdded());"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        Set\u003cEvent\u003e updatedEvent \u003d personToEdit.getEvents();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        return new Person(updatedName, updatedBirthday, updatedPhone, updatedEmail, updatedAddress, updatedTags,"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"                updatedEvent, updatedDateAdded);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"        private Birthday birthday;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"        private DateAdded dateAdded;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"            this.dateAdded \u003d toCopy.dateAdded;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"dalessr"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":179,"author":{"gitID":"dalessr"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":180,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":182,"author":{"gitID":"dalessr"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":183,"author":{"gitID":"dalessr"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":184,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"        //No editing of date added value;"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":"        public Optional\u003cDateAdded\u003e getDateAdded() {"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"            return Optional.ofNullable(dateAdded);"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":239,"author":{"gitID":"dalessr"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":18,"-":209,"eldriclim":19}},{"path":"src/main/java/seedu/address/logic/commands/SwitchThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeBrightThemeEvent;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDarkThemeEvent;"},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.commons.events.ui.ChangeDefaultThemeEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":" * Changes theme to the user theme of choice."},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"public class SwitchThemeCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"    public static final String DARK_THEME_WORD1 \u003d \"dark\";"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"    public static final String DARK_THEME_WORD2 \u003d \"Twilight\";"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"    public static final String DARK_THEME_WORD3 \u003d \"1\";"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"    public static final String BRIGHT_THEME_WORD1 \u003d \"bright\";"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"    public static final String BRIGHT_THEME_WORD2 \u003d \"Sunburst\";"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"    public static final String BRIGHT_THEME_WORD3 \u003d \"2\";"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"    public static final String DEFAULT_THEME_WORD1 \u003d \"default\";"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"    public static final String DEFAULT_THEME_WORD2 \u003d \"Minimalism\";"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"    public static final String DEFAULT_THEME_WORD3 \u003d \"3\";"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"            + \": Change into the theme of choice of iConnect.\\n\""},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"            + \"Available themes: 1.Twilight 2.Sunburst 3.Minimalism\\n\""},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"            + \"Parameters: THEME\\n\""},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"            + \"Example: \" + COMMAND_WORD + \" Twilight\";"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_THEME_CHANGE_SUCCESS \u003d \"Theme changed to: %1$s\";"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"The index %1$s is invalid.\\n\";"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_UNKNOWN_THEME \u003d \"The theme %1$s is unknown.\\n\";"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"    private final String userThemeInput;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"    private String themeChoice;"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"    public SwitchThemeCommand(String themeChoice) {"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"        this.userThemeInput \u003d themeChoice;"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"        if (userThemeInput.matches(\"\\\\d+\")) {"},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"            if (DARK_THEME_WORD3.equals(userThemeInput)) {"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d DARK_THEME_WORD2;"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"            } else if (BRIGHT_THEME_WORD3.equals(userThemeInput)) {"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d BRIGHT_THEME_WORD2;"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"            } else if (DEFAULT_THEME_WORD3.equals(userThemeInput)) {"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d DEFAULT_THEME_WORD2;"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"            } else {"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(String.format(MESSAGE_INVALID_INDEX, userThemeInput));"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"            if (userThemeInput.toLowerCase().contains(DARK_THEME_WORD1)"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"                    || DARK_THEME_WORD1.contains(userThemeInput.toLowerCase())"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"                    || userThemeInput.toLowerCase().contains(DARK_THEME_WORD2.toLowerCase())"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"                    || DARK_THEME_WORD2.toLowerCase().contains(userThemeInput.toLowerCase())) {"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d DARK_THEME_WORD2;"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"            } else if (userThemeInput.toLowerCase().contains(BRIGHT_THEME_WORD1)"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"                    || BRIGHT_THEME_WORD1.contains(userThemeInput.toLowerCase())"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"                    || userThemeInput.toLowerCase().contains(BRIGHT_THEME_WORD2.toLowerCase())"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"                    || BRIGHT_THEME_WORD2.toLowerCase().contains(userThemeInput.toLowerCase())) {"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d BRIGHT_THEME_WORD2;"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"            } else if (userThemeInput.toLowerCase().contains(DEFAULT_THEME_WORD1)"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"                    || DEFAULT_THEME_WORD1.contains(userThemeInput.toLowerCase())"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"                    || userThemeInput.toLowerCase().contains(DEFAULT_THEME_WORD2.toLowerCase())"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"                    || DEFAULT_THEME_WORD2.toLowerCase().contains(userThemeInput.toLowerCase())) {"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"                themeChoice \u003d DEFAULT_THEME_WORD2;"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"            } else {"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(String.format(MESSAGE_UNKNOWN_THEME, userThemeInput));"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"        if (themeChoice.equals(DARK_THEME_WORD2)) {"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new ChangeDarkThemeEvent());"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"        } else if (themeChoice.equals(BRIGHT_THEME_WORD2)) {"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new ChangeBrightThemeEvent());"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"        } else {"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new ChangeDefaultThemeEvent());"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGE_SUCCESS, userThemeInput));"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"                || (other instanceof SwitchThemeCommand // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"                \u0026\u0026 this.userThemeInput.equals(((SwitchThemeCommand) other).userThemeInput)); // state check"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":89,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.ScheduleUpdateEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo the previous undoable command.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        EventsCenter.getInstance().post(new ScheduleUpdateEvent(model.getEventList()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":37,"eldriclim":3}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_2 \u003d \"search\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_3 \u003d \"get\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose details contain any of \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"            + \"Parameters: [\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"alice john \""},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"            + PREFIX_PHONE + \"91234567 98765432 \""},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com \""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    //@@author dalessr"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"    public CommandResult execute() {"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        String[] parameters \u003d (String[]) predicate.getKeywords().toArray();"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        //Create list to store the keywords of different keywords"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e nameKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e phoneKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e emailKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e addressKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e currentKeywords \u003d nameKeywords;"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c parameters.length; i++) {"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"            if (parameters[i].equals(PREFIX_NAME.getPrefix())) {"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"                currentKeywords \u003d nameKeywords;"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"            } else if (parameters[i].equals(PREFIX_PHONE.getPrefix())) {"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"                currentKeywords \u003d phoneKeywords;"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"            } else if (parameters[i].equals(PREFIX_EMAIL.getPrefix())) {"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"                currentKeywords \u003d emailKeywords;"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"            } else if (parameters[i].equals(PREFIX_ADDRESS.getPrefix())) {"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"                currentKeywords \u003d addressKeywords;"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"            } else if (!parameters[i].equals(\"\")) {"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"                currentKeywords.add(parameters[i]);"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"        //Go through each keywords list and get the names to search in the storage"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        List\u003cString\u003e namesToSearch \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"        if (nameKeywords.size() !\u003d 0) {"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cString\u003e namesMatched \u003d getNamesFromNameKeywords(nameKeywords);"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"            if (namesMatched !\u003d null) {"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"                namesToSearch.addAll(namesMatched);"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"        if (phoneKeywords.size() !\u003d 0) {"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cString\u003e namesMatched \u003d getNamesFromPhoneKeywords(phoneKeywords);"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"            if (namesMatched !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"                namesToSearch.addAll(namesMatched);"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"        if (emailKeywords.size() !\u003d 0) {"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cString\u003e namesMatched \u003d getNamesFromEmailKeywords(emailKeywords);"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":"            if (namesMatched !\u003d null) {"},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"                namesToSearch.addAll(namesMatched);"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        if (addressKeywords.size() !\u003d 0) {"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cString\u003e namesMatched \u003d getNamesFromAddressKeywords(addressKeywords);"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"            if (namesMatched !\u003d null) {"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"                namesToSearch.addAll(namesMatched);"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"        NameContainsKeywordsPredicate updatedPredicate \u003d new NameContainsKeywordsPredicate(namesToSearch);"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"        model.updateFilteredPersonList(updatedPredicate);"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"        Index defaultIndex \u003d new Index(0);"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        if (model.getFilteredPersonList().size() \u003e 0) {"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(defaultIndex));"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"     * Get a list of names whose contact details contain all the address keywords provided by user."},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"     * @param addressKeywords a list of address keywords to search for"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"     * Returns a list of names found by searching the corresponding address keywords"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":"    private ArrayList\u003cString\u003e getNamesFromAddressKeywords(ArrayList\u003cString\u003e addressKeywords) {"},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e matchedNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e addressList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"            addressList.add(model.getAddressBook().getPersonList().get(i).getAddress().toString().toLowerCase());"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"        StringBuffer stringBuffer \u003d new StringBuffer();"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c addressKeywords.size(); i++) {"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"            stringBuffer.append(addressKeywords.get(i) + \" \");"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"        String addressValue \u003d stringBuffer.toString().toLowerCase().trim();"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c addressList.size(); i++) {"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"            if (addressList.get(i).contains(addressValue)) {"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"                matchedNames.add(model.getAddressBook().getPersonList().get(i).getName().toString());"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"        if (matchedNames.size() \u003d\u003d 0) {"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"            return null;"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"            return matchedNames;"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"     * Get a list of names whose contact details contain at least one of the email keywords provided by user."},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"     * @param emailKeywords a list of email keywords to search for"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"     * Returns a list of names found by searching the corresponding email keywords"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"    private ArrayList\u003cString\u003e getNamesFromEmailKeywords(ArrayList\u003cString\u003e emailKeywords) {"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e matchedNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e emailList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"            emailList.add(model.getAddressBook().getPersonList().get(i).getEmail().toString().toLowerCase());"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c emailKeywords.size(); i++) {"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"            for (int j \u003d 0; j \u003c emailList.size(); j++) {"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":"                if (emailList.get(j).contains(emailKeywords.get(i).toLowerCase())) {"},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"                    matchedNames.add(model.getAddressBook().getPersonList().get(j).getName().toString());"},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":"        if (matchedNames.size() \u003d\u003d 0) {"},{"lineNumber":152,"author":{"gitID":"dalessr"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":"            return matchedNames;"},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":"     * Get a list of names whose contact details contain at least one of the phone keywords provided by user."},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"     * @param phoneKeywords a list of phone keywords to search for"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"     * Returns a list of names found by searching the corresponding phone keywords"},{"lineNumber":162,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"dalessr"},"content":"    private ArrayList\u003cString\u003e getNamesFromPhoneKeywords(ArrayList\u003cString\u003e phoneKeywords) {"},{"lineNumber":164,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e matchedNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":165,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e phoneList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":166,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":167,"author":{"gitID":"dalessr"},"content":"            phoneList.add(model.getAddressBook().getPersonList().get(i).getPhone().toString());"},{"lineNumber":168,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c phoneKeywords.size(); i++) {"},{"lineNumber":170,"author":{"gitID":"dalessr"},"content":"            for (int j \u003d 0; j \u003c phoneList.size(); j++) {"},{"lineNumber":171,"author":{"gitID":"dalessr"},"content":"                if (phoneList.get(j).contains(phoneKeywords.get(i))) {"},{"lineNumber":172,"author":{"gitID":"dalessr"},"content":"                    matchedNames.add(model.getAddressBook().getPersonList().get(j).getName().toString());"},{"lineNumber":173,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":174,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":175,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"dalessr"},"content":"        if (matchedNames.size() \u003d\u003d 0) {"},{"lineNumber":177,"author":{"gitID":"dalessr"},"content":"            return null;"},{"lineNumber":178,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"dalessr"},"content":"            return matchedNames;"},{"lineNumber":180,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":183,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"dalessr"},"content":"     * Get a list of names whose contact details contain at least one of the name keywords provided by user."},{"lineNumber":185,"author":{"gitID":"dalessr"},"content":"     * @param nameKeywords a list of name keywords to search for"},{"lineNumber":186,"author":{"gitID":"dalessr"},"content":"     * Returns a list of names found by searching the corresponding name keywords"},{"lineNumber":187,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"dalessr"},"content":"    private ArrayList\u003cString\u003e getNamesFromNameKeywords(ArrayList\u003cString\u003e nameKeywords) {"},{"lineNumber":189,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e matchedNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":190,"author":{"gitID":"dalessr"},"content":"        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":192,"author":{"gitID":"dalessr"},"content":"            nameList.add(model.getAddressBook().getPersonList().get(i).getName().toString().toLowerCase());"},{"lineNumber":193,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c nameKeywords.size(); i++) {"},{"lineNumber":195,"author":{"gitID":"dalessr"},"content":"            for (int j \u003d 0; j \u003c nameList.size(); j++) {"},{"lineNumber":196,"author":{"gitID":"dalessr"},"content":"                if (nameList.get(j).contains(nameKeywords.get(i).toLowerCase())) {"},{"lineNumber":197,"author":{"gitID":"dalessr"},"content":"                    matchedNames.add(nameList.get(j));"},{"lineNumber":198,"author":{"gitID":"dalessr"},"content":"                }"},{"lineNumber":199,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"dalessr"},"content":"        if (matchedNames.size() \u003d\u003d 0) {"},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"            return null;"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":"            return matchedNames;"},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":208,"author":{"gitID":"dalessr"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":185,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/BirthdayAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":" * Add a birthday to an existing person in the address book."},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"public class BirthdayAddCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"    public static final String COMMAND_WORD \u003d \"b-add\";"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add birthday to the person selected \""},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"            + \"by the index number used in the last person listing.\\n\""},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"            + \"BIRTHDAY[DD/MM/YYYY] (BIRTHDAY Should be in valid format).\\n\""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"            + \"18/10/1994\";"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_ADD_BIRTHDAY_SUCCESS \u003d \"Added Birthday to Person: %1$s\";"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    private final Index targetIndex;"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    private final Birthday birthdayToAdd;"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"    public BirthdayAddCommand(Index index, Birthday birthday) {"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"        targetIndex \u003d index;"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        birthdayToAdd \u003d birthday;"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        ReadOnlyPerson currentPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        Person personToEdit \u003d (Person) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"        personToEdit.setBirthday(birthdayToAdd);"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"            model.updatePerson(currentPerson, personToEdit);"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_BIRTHDAY_SUCCESS, personToEdit));"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"                || (other instanceof BirthdayAddCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.targetIndex.equals(((BirthdayAddCommand) other).targetIndex))"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 (other instanceof BirthdayAddCommand"},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.birthdayToAdd.equals(((BirthdayAddCommand) other).birthdayToAdd)); // state check"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":77}},{"path":"src/main/java/seedu/address/logic/commands/BinclearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":7,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Pengyuz"},"content":" * Clears the recyclebin."},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":"public class BinclearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"bin-fresh\";"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Recyclebin has been cleared!\";"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear all the person in the recyclebin.\";"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"        model.resetRecyclebin(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":18,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DURATION;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_MEMBER;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":" * Adds an Event to address book"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"public class ScheduleAddCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    public static final String COMMAND_WORD \u003d \"s-add\";"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"            + \"Parameters: \""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_MEMBER + \"[INDEX]... \""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_NAME + \"NAME \""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_TIME + \"DATETIME \""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_DURATION + \"DURATION \\n\""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_MEMBER + \"1 2 3 \""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_NAME + \"Movie Date \""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_TIME + \"2017-01-01 10:00 \""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_DURATION + \"2h30m \";"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Event added: \\n%1$s\";"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    public static final String ERROR_INVALID_INDEX \u003d \"Invalid index detected.\";"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"    public static final String ERROR_FAIL_TO_UPDATE_MEMBER \u003d \"An update error has occured.\";"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"    private final EventName eventName;"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    private final EventTime eventTime;"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    private final EventDuration eventDuration;"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    private final ArrayList\u003cIndex\u003e uniqueMemberIndexes;"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    public ScheduleAddCommand(EventName eventName, EventTime eventTime, EventDuration eventDuration,"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"                              Set\u003cIndex\u003e uniqueMemberIndexs) {"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        this.eventDuration \u003d eventDuration;"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        this.uniqueMemberIndexes \u003d new ArrayList\u003c\u003e(uniqueMemberIndexs);"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(model);"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toUpdate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toReplace \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        Event event \u003d new Event(new MemberList(), eventName, eventTime, eventDuration);"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        for (Index index : uniqueMemberIndexes) {"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"                throw new CommandException(ERROR_INVALID_INDEX);"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"            EditEventListPersonDescriptor toEditPerson \u003d new EditEventListPersonDescriptor("},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"                    lastShownList.get(index.getZeroBased()), event);"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"            toUpdate.add(lastShownList.get(index.getZeroBased()));"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"            toReplace.add(toEditPerson.createUpdatedPerson());"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"            String commandResultString \u003d \"\";"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"            if (model.hasEvenClashes(event)) {"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"                commandResultString +\u003d \"Warning: An event clash has been detected.\\n\";"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"            model.addEvent(toUpdate, toReplace, event);"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"            commandResultString +\u003d String.format(MESSAGE_SUCCESS, event.toString());"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"            return new CommandResult(commandResultString);"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"            //Should not reach this point"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"            throw new CommandException(ERROR_FAIL_TO_UPDATE_MEMBER);"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"            //Should not reach this point"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof ScheduleAddCommand // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 eventName.equals(((ScheduleAddCommand) other).eventName)"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 eventTime.equals(((ScheduleAddCommand) other).eventTime)"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 eventDuration.equals(((ScheduleAddCommand) other).eventDuration)"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 uniqueMemberIndexes.equals(((ScheduleAddCommand) other).uniqueMemberIndexes));"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"     * Stores the details of modified person with updated event list."},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"    private static class EditEventListPersonDescriptor {"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"        private Name name;"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"        private Phone phone;"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        private Email email;"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"        private Address address;"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"        private Set\u003cEvent\u003e events;"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"        private DateAdded dateAdded;"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"        private Birthday birthday;"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"        public EditEventListPersonDescriptor(ReadOnlyPerson toCopy, Event event) {"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"            this.name \u003d toCopy.getName();"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"            this.phone \u003d toCopy.getPhone();"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"            this.email \u003d toCopy.getEmail();"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"            this.address \u003d toCopy.getAddress();"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"            this.tags \u003d toCopy.getTags();"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"            this.dateAdded \u003d toCopy.getDateAdded();"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"            this.birthday \u003d toCopy.getBirthday();"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":"            this.events \u003d createModifiableEventList(toCopy.getEvents());"},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":"            this.events.add(event);"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"        public Set\u003cEvent\u003e createModifiableEventList(Set\u003cEvent\u003e unmodifiableEventList) {"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"            Set\u003cEvent\u003e modifiableEventList \u003d new HashSet\u003c\u003e(unmodifiableEventList);"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"            return modifiableEventList;"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"        public Person createUpdatedPerson() {"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"            return new Person(name, birthday, phone, email, address, tags, events, dateAdded);"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":6,"dalessr":1,"-":14,"eldriclim":146}},{"path":"src/main/java/seedu/address/logic/commands/MapShowCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.BrowserPanelShowLocationEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Shows the location of a person on Google map identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"public class MapShowCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    public static final String COMMAND_WORD \u003d \"m-show\";"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"            + \": Shows the location of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_LOCATE_PERSON_SUCCESS \u003d \"Located Person: %1$s\\n\""},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"            + \"Please click on the browser tab below to view the map.\";"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    public MapShowCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        EventsCenter.getInstance().post(new BrowserPanelShowLocationEvent("},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"                model.getFilteredPersonList().get(targetIndex.getZeroBased())));"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"                || (other instanceof MapShowCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.targetIndex.equals(((MapShowCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":46,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/BindeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":" * Deletes a person identified using it\u0027s last displayed index or name from the recycle bin."},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"public class BindeleteCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"bin-delete\";"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted from bin.\";"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Delete the person in bin.\";"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e targets;"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    private boolean isValid \u003d true;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    private boolean isEmpty  \u003d false;"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    public BindeleteCommand(ArrayList\u003cIndex\u003e targets) {"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"        this.targets \u003d targets;"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"        List\u003cReadOnlyPerson\u003e lastshownlist \u003d model.getRecycleBinPersonList();"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personstodelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"        for (Index s: targets) {"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"            if (s.getZeroBased() \u003e\u003d lastshownlist.size()) {"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"                isValid \u003d false;"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"                personstodelete.add(lastshownlist.get(s.getZeroBased()));"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"                isEmpty \u003d true;"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        if (isValid \u0026\u0026 isEmpty) {"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"            try {"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"                model.deleteBinPerson(personstodelete);"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"The target person cannot be missing\";"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"                || (other instanceof BindeleteCommand"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 this.targets.equals(((BindeleteCommand) other).targets)); // state check"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":52,"-":11}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinList() {"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"        return model.getRecycleBinPersonList();"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        return model.getEventList();"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":5,"-":57,"eldriclim":6}},{"path":"src/main/java/seedu/address/logic/commands/TagRemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":" * Removes a tag from existing person(s) in the address book."},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":" * If the tag does not exist for at least one of the person(s) selected, error would be thrown."},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"public class TagRemoveCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"    public static final String COMMAND_WORD \u003d \"t-remove\";"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    public static final String FAVOURITE_KEYWORD \u003d \"fav\";"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove tag to the person(s) identified \""},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"            + \"by the index number used in the last person listing.\\n\""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"            + \"Parameters: INDEX1 INDEX2... (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"            + \"TAG (TAG should not start with a number).\\n\""},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"            + \"If no index is provided, remove the tag from all people. \""},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3 \""},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"            + \"friends\";"},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_REMOVE_TAG_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"The %1$s tag is not found.\";"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND_FOR_SOME \u003d \"The %1$s tag entered is not found \""},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"            + \"for some person selected.\";"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"    private ArrayList\u003cIndex\u003e index;"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"    private final TagRemoveDescriptor tagRemoveDescriptor;"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"    private final int firstIndex \u003d 0;"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":"    private final int arrayIndexOffset \u003d 1;"},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"    private final int emptyListSize \u003d 0;"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"    private final int stringSecondCharIndex \u003d 1;"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"     * @param index               of the person in the filtered person list to edit"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"     * @param tagRemoveDescriptor details to edit the person with"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":"    public TagRemoveCommand(ArrayList\u003cIndex\u003e index, TagRemoveDescriptor tagRemoveDescriptor) {"},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(tagRemoveDescriptor);"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"        this.tagRemoveDescriptor \u003d new TagRemoveDescriptor(tagRemoveDescriptor);"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        ObservableList\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"        Tag tagToRemove \u003d (Tag) tagRemoveDescriptor.getTags().toArray()[firstIndex];"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"        String tagInStringRaw \u003d tagToRemove.toString();"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"        String tagInString \u003d tagInStringRaw.substring(stringSecondCharIndex, tagInStringRaw.lastIndexOf(\"]\"));"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d tagInString.toLowerCase().contains(FAVOURITE_KEYWORD);"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"        boolean removeAll \u003d false;"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate tagPredicate \u003d new TagMatchingKeywordPredicate(tagInString, looseFind);"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        StringBuilder editedPersonDisplay \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"        checkIndexInRange(lastShownList);"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d index;"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"        if (index.size() \u003d\u003d emptyListSize) {"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"            removeAll \u003d true;"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"            indexList \u003d makeFullIndexList(lastShownList.size());"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"        ObservableList\u003cReadOnlyPerson\u003e selectedPersonList \u003d createSelectedPersonList(indexList, lastShownList);"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"        FilteredList\u003cReadOnlyPerson\u003e tagFilteredPersonList \u003d new FilteredList\u003c\u003e(selectedPersonList);"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"        tagFilteredPersonList.setPredicate(tagPredicate);"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":"        if (tagFilteredPersonList.size() \u003d\u003d emptyListSize) {"},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagInStringRaw));"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"        } else if (!removeAll \u0026\u0026 tagFilteredPersonList.size() \u003c indexList.size()) {"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND_FOR_SOME, tagInStringRaw));"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d 0; i \u003c tagFilteredPersonList.size(); i++) {"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"            ReadOnlyPerson personToEdit \u003d tagFilteredPersonList.get(i);"},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":"            Set\u003cTag\u003e modifiableTagList \u003d createModifiableTagSet(personToEdit.getTags(), tagToRemove);"},{"lineNumber":110,"author":{"gitID":"ZhangH795"},"content":"            TagRemoveDescriptor tempTagRemoveDescriptor \u003d new TagRemoveDescriptor();"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":"            tempTagRemoveDescriptor.setTags(modifiableTagList);"},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":"            Person editedPerson \u003d createEditedPerson(personToEdit, tempTagRemoveDescriptor);"},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":"            try {"},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitID":"ZhangH795"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":118,"author":{"gitID":"ZhangH795"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":119,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"ZhangH795"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":121,"author":{"gitID":"ZhangH795"},"content":"            editedPersonDisplay.append(createTagListDisplay(editedPerson));"},{"lineNumber":122,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":123,"author":{"gitID":"ZhangH795"},"content":"            Index defaultIndex \u003d new Index(firstIndex);"},{"lineNumber":124,"author":{"gitID":"ZhangH795"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(defaultIndex));"},{"lineNumber":125,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":126,"author":{"gitID":"ZhangH795"},"content":"            if (i !\u003d indexList.size() - arrayIndexOffset) {"},{"lineNumber":127,"author":{"gitID":"ZhangH795"},"content":"                editedPersonDisplay.append(\"\\n\");"},{"lineNumber":128,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":129,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"ZhangH795"},"content":"        return new CommandResult(editedPersonDisplay.toString());"},{"lineNumber":131,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":133,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"ZhangH795"},"content":"     * Removes a tag from the copy of existing tag list."},{"lineNumber":135,"author":{"gitID":"ZhangH795"},"content":"     * @param unmodifiable tag List"},{"lineNumber":136,"author":{"gitID":"ZhangH795"},"content":"     * @param tagToRemove     tag to be removed"},{"lineNumber":137,"author":{"gitID":"ZhangH795"},"content":"     * Returns modifiable tag set."},{"lineNumber":138,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"ZhangH795"},"content":"    public Set\u003cTag\u003e createModifiableTagSet(Set\u003cTag\u003e unmodifiable, Tag tagToRemove) {"},{"lineNumber":140,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e modifiable \u003d new HashSet\u003c\u003e();"},{"lineNumber":141,"author":{"gitID":"ZhangH795"},"content":"        String tagName \u003d tagToRemove.tagName;"},{"lineNumber":142,"author":{"gitID":"ZhangH795"},"content":"        boolean removeFavourite \u003d tagName.toLowerCase().contains(FAVOURITE_KEYWORD);"},{"lineNumber":143,"author":{"gitID":"ZhangH795"},"content":"        for (Tag t : unmodifiable) {"},{"lineNumber":144,"author":{"gitID":"ZhangH795"},"content":"            if (!tagToRemove.equals(t) \u0026\u0026 !(removeFavourite \u0026\u0026 t.tagName.toLowerCase().contains(FAVOURITE_KEYWORD))) {"},{"lineNumber":145,"author":{"gitID":"ZhangH795"},"content":"                modifiable.add(t);"},{"lineNumber":146,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"ZhangH795"},"content":"        return modifiable;"},{"lineNumber":149,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":151,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"ZhangH795"},"content":"     * Creates string for edited tag list."},{"lineNumber":153,"author":{"gitID":"ZhangH795"},"content":"     * @param editedPerson edited person to show tag list"},{"lineNumber":154,"author":{"gitID":"ZhangH795"},"content":"     * Returns formatted string to indicate edited tag list."},{"lineNumber":155,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"ZhangH795"},"content":"    public String createTagListDisplay(Person editedPerson) {"},{"lineNumber":157,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringStartIndex \u003d 1;"},{"lineNumber":158,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringEndIndex;"},{"lineNumber":159,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplayRaw \u003d editedPerson.getTags().toString();"},{"lineNumber":160,"author":{"gitID":"ZhangH795"},"content":"        tagListStringEndIndex \u003d tagChangedDisplayRaw.length() - arrayIndexOffset;"},{"lineNumber":161,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplay \u003d editedPerson.getName() + \" Tag List: \""},{"lineNumber":162,"author":{"gitID":"ZhangH795"},"content":"                + tagChangedDisplayRaw.substring(tagListStringStartIndex, tagListStringEndIndex);"},{"lineNumber":163,"author":{"gitID":"ZhangH795"},"content":"        return String.format(MESSAGE_REMOVE_TAG_SUCCESS, tagChangedDisplay);"},{"lineNumber":164,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":166,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":"     * Creates selected person list."},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":"     * @param indexList selected index list"},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":"     * @param fullPersonList person list"},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":"     * Returns selected person list."},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"ZhangH795"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e createSelectedPersonList(ArrayList\u003cIndex\u003e indexList,"},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"                                                                   ObservableList\u003cReadOnlyPerson\u003e fullPersonList) {"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cReadOnlyPerson\u003e selectedPersonList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":"        for (Index i : indexList) {"},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"            ReadOnlyPerson personToEdit \u003d fullPersonList.get(i.getZeroBased());"},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":"            selectedPersonList.add(personToEdit);"},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        return FXCollections.observableArrayList(selectedPersonList);"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":"     * Checks whether the tag list contains tag to remove."},{"lineNumber":184,"author":{"gitID":"ZhangH795"},"content":"     * @param tagList current tag List"},{"lineNumber":185,"author":{"gitID":"ZhangH795"},"content":"     * Returns true if tag list contains the tag to be removed; false otherwise."},{"lineNumber":186,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"ZhangH795"},"content":"    public boolean containsTag(List\u003cTag\u003e tagList) {"},{"lineNumber":188,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagsToRemove \u003d tagRemoveDescriptor.getTags();"},{"lineNumber":189,"author":{"gitID":"ZhangH795"},"content":"        for (Tag tagToRemove : tagsToRemove) {"},{"lineNumber":190,"author":{"gitID":"ZhangH795"},"content":"            for (Tag current : tagList) {"},{"lineNumber":191,"author":{"gitID":"ZhangH795"},"content":"                if (tagToRemove.tagName.equalsIgnoreCase(current.tagName)) {"},{"lineNumber":192,"author":{"gitID":"ZhangH795"},"content":"                    return true;"},{"lineNumber":193,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":194,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"ZhangH795"},"content":"        return false;"},{"lineNumber":197,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":199,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"ZhangH795"},"content":"     * Creates a person index list from 1 to input list size."},{"lineNumber":201,"author":{"gitID":"ZhangH795"},"content":"     * @param personListSize current person list size"},{"lineNumber":202,"author":{"gitID":"ZhangH795"},"content":"     * Returns created person list."},{"lineNumber":203,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"ZhangH795"},"content":"    public ArrayList\u003cIndex\u003e makeFullIndexList(int personListSize) {"},{"lineNumber":205,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":206,"author":{"gitID":"ZhangH795"},"content":"        int firstIndexOneBased \u003d 1;"},{"lineNumber":207,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d firstIndexOneBased; i \u003c\u003d personListSize; i++) {"},{"lineNumber":208,"author":{"gitID":"ZhangH795"},"content":"            indexList.add(Index.fromOneBased(i));"},{"lineNumber":209,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"ZhangH795"},"content":"        return indexList;"},{"lineNumber":211,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":213,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"ZhangH795"},"content":"     * Throws CommandException if any of the user input index is invalid."},{"lineNumber":215,"author":{"gitID":"ZhangH795"},"content":"     * @param lastShownList current filtered person list"},{"lineNumber":216,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"ZhangH795"},"content":"    public void checkIndexInRange(ObservableList\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":218,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d 0; i \u003c index.size(); i++) {"},{"lineNumber":219,"author":{"gitID":"ZhangH795"},"content":"            if (index.get(i).getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":220,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":221,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":222,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":225,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"ZhangH795"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":227,"author":{"gitID":"ZhangH795"},"content":"     * edited with {@code tagRemoveDescriptor}."},{"lineNumber":228,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"ZhangH795"},"content":"    public Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":230,"author":{"gitID":"ZhangH795"},"content":"                                     TagRemoveDescriptor tagRemoveDescriptor) {"},{"lineNumber":231,"author":{"gitID":"ZhangH795"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":232,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":233,"author":{"gitID":"ZhangH795"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":234,"author":{"gitID":"ZhangH795"},"content":"        Birthday updatedBirthday \u003d personToEdit.getBirthday();"},{"lineNumber":235,"author":{"gitID":"ZhangH795"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":236,"author":{"gitID":"ZhangH795"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":237,"author":{"gitID":"ZhangH795"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":238,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e updatedTags \u003d tagRemoveDescriptor.getTags();"},{"lineNumber":239,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cEvent\u003e updatedEvents \u003d personToEdit.getEvents();"},{"lineNumber":240,"author":{"gitID":"ZhangH795"},"content":"        DateAdded updateDateAdded \u003d personToEdit.getDateAdded();"},{"lineNumber":241,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":242,"author":{"gitID":"ZhangH795"},"content":"        return new Person(updatedName, updatedBirthday, updatedPhone, updatedEmail, updatedAddress, updatedTags,"},{"lineNumber":243,"author":{"gitID":"ZhangH795"},"content":"                updatedEvents, updateDateAdded);"},{"lineNumber":244,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":246,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"ZhangH795"},"content":"    public boolean equals(Object other) {"},{"lineNumber":248,"author":{"gitID":"ZhangH795"},"content":"        // short circuit if same object"},{"lineNumber":249,"author":{"gitID":"ZhangH795"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":250,"author":{"gitID":"ZhangH795"},"content":"            return true;"},{"lineNumber":251,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":253,"author":{"gitID":"ZhangH795"},"content":"        // instanceof handles nulls"},{"lineNumber":254,"author":{"gitID":"ZhangH795"},"content":"        if (!(other instanceof TagRemoveCommand)) {"},{"lineNumber":255,"author":{"gitID":"ZhangH795"},"content":"            return false;"},{"lineNumber":256,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":258,"author":{"gitID":"ZhangH795"},"content":"        // state check"},{"lineNumber":259,"author":{"gitID":"ZhangH795"},"content":"        TagRemoveCommand e \u003d (TagRemoveCommand) other;"},{"lineNumber":260,"author":{"gitID":"ZhangH795"},"content":"        return index.equals(e.index)"},{"lineNumber":261,"author":{"gitID":"ZhangH795"},"content":"                \u0026\u0026 tagRemoveDescriptor.equals(e.tagRemoveDescriptor);"},{"lineNumber":262,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":264,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"ZhangH795"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":266,"author":{"gitID":"ZhangH795"},"content":"     * corresponding field value of the person."},{"lineNumber":267,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"ZhangH795"},"content":"    public static class TagRemoveDescriptor {"},{"lineNumber":269,"author":{"gitID":"ZhangH795"},"content":"        private Name name;"},{"lineNumber":270,"author":{"gitID":"ZhangH795"},"content":"        private Birthday birthday;"},{"lineNumber":271,"author":{"gitID":"ZhangH795"},"content":"        private Phone phone;"},{"lineNumber":272,"author":{"gitID":"ZhangH795"},"content":"        private Email email;"},{"lineNumber":273,"author":{"gitID":"ZhangH795"},"content":"        private Address address;"},{"lineNumber":274,"author":{"gitID":"ZhangH795"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":275,"author":{"gitID":"ZhangH795"},"content":"        private Set\u003cEvent\u003e events;"},{"lineNumber":276,"author":{"gitID":"ZhangH795"},"content":"        private DateAdded dateAdded;"},{"lineNumber":277,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":278,"author":{"gitID":"ZhangH795"},"content":"        public TagRemoveDescriptor() {"},{"lineNumber":279,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":281,"author":{"gitID":"ZhangH795"},"content":"        public TagRemoveDescriptor(TagRemoveDescriptor toCopy) {"},{"lineNumber":282,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":283,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":284,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":285,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":286,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":287,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":288,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d toCopy.events;"},{"lineNumber":289,"author":{"gitID":"ZhangH795"},"content":"            this.dateAdded \u003d toCopy.dateAdded;"},{"lineNumber":290,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":292,"author":{"gitID":"ZhangH795"},"content":"        public TagRemoveDescriptor(ReadOnlyPerson toCopy) {"},{"lineNumber":293,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d toCopy.getName();"},{"lineNumber":294,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d toCopy.getBirthday();"},{"lineNumber":295,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d toCopy.getPhone();"},{"lineNumber":296,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d toCopy.getEmail();"},{"lineNumber":297,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d toCopy.getAddress();"},{"lineNumber":298,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d toCopy.getTags();"},{"lineNumber":299,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d toCopy.getEvents();"},{"lineNumber":300,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":302,"author":{"gitID":"ZhangH795"},"content":"        /**"},{"lineNumber":303,"author":{"gitID":"ZhangH795"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":304,"author":{"gitID":"ZhangH795"},"content":"         */"},{"lineNumber":305,"author":{"gitID":"ZhangH795"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":306,"author":{"gitID":"ZhangH795"},"content":"            return CollectionUtil.isAnyNonNull(this.tags);"},{"lineNumber":307,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":309,"author":{"gitID":"ZhangH795"},"content":"        public void setName(Name name) {"},{"lineNumber":310,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d name;"},{"lineNumber":311,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":313,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":314,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":315,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":316,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":317,"author":{"gitID":"ZhangH795"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":318,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":319,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":321,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":322,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":323,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":325,"author":{"gitID":"ZhangH795"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":326,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d phone;"},{"lineNumber":327,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":329,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":330,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":331,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":332,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":333,"author":{"gitID":"ZhangH795"},"content":"        public void setEmail(Email email) {"},{"lineNumber":334,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d email;"},{"lineNumber":335,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":336,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":337,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":338,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":339,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":340,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":341,"author":{"gitID":"ZhangH795"},"content":"        public void setAddress(Address address) {"},{"lineNumber":342,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d address;"},{"lineNumber":343,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":345,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":346,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":347,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":349,"author":{"gitID":"ZhangH795"},"content":"        public void setEvent(Set\u003cEvent\u003e events) {"},{"lineNumber":350,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d events;"},{"lineNumber":351,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":352,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":353,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cSet\u003cEvent\u003e\u003e getEvents() {"},{"lineNumber":354,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(events);"},{"lineNumber":355,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":357,"author":{"gitID":"ZhangH795"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":358,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d tags;"},{"lineNumber":359,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":361,"author":{"gitID":"ZhangH795"},"content":"        public Set\u003cTag\u003e getTags() {"},{"lineNumber":362,"author":{"gitID":"ZhangH795"},"content":"            return tags;"},{"lineNumber":363,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":365,"author":{"gitID":"ZhangH795"},"content":"        @Override"},{"lineNumber":366,"author":{"gitID":"ZhangH795"},"content":"        public boolean equals(Object other) {"},{"lineNumber":367,"author":{"gitID":"ZhangH795"},"content":"            // short circuit if same object"},{"lineNumber":368,"author":{"gitID":"ZhangH795"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":369,"author":{"gitID":"ZhangH795"},"content":"                return true;"},{"lineNumber":370,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":371,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":372,"author":{"gitID":"ZhangH795"},"content":"            // instanceof handles nulls"},{"lineNumber":373,"author":{"gitID":"ZhangH795"},"content":"            if (!(other instanceof TagRemoveDescriptor)) {"},{"lineNumber":374,"author":{"gitID":"ZhangH795"},"content":"                return false;"},{"lineNumber":375,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":376,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":377,"author":{"gitID":"ZhangH795"},"content":"            // state check"},{"lineNumber":378,"author":{"gitID":"ZhangH795"},"content":"            TagRemoveDescriptor e \u003d (TagRemoveDescriptor) other;"},{"lineNumber":379,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":380,"author":{"gitID":"ZhangH795"},"content":"            return getTags().equals(e.getTags());"},{"lineNumber":381,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":382,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":360,"dalessr":2,"-":19,"eldriclim":2}},{"path":"src/main/java/seedu/address/storage/XmlRecycleBinStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"public class XmlRecycleBinStorage implements RecycleBinStorage {"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlRecycleBinStorage.class);"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    public XmlRecycleBinStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"    public String getRecycleBinFilePath() {"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readRecycleBin() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"        return readRecycleBin(filePath);"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"     * Similar to {@link #readRecycleBin()}"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readRecycleBin(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"            FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            logger.info(\"Recyclebin file \"  + addressBookFile + \" not found\");"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"    public void saveRecycleBin(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        saveRecycleBin(addressBook, filePath);"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"     * Similar to {@link #saveRecycleBin(ReadOnlyAddressBook)}"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"    public void saveRecycleBin(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(addressBook);"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(filePath);"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":77,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":63,"-":14}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" * JAXB-friendly adapted version of the Event."},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"public class XmlAdaptedEvent {"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    private String eventName;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private String eventTime;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    private String eventDuration;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    public XmlAdaptedEvent() {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"     * Converts a given Event into this class for JAXB use."},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEvent"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    public XmlAdaptedEvent(Event source) {"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        eventName \u003d source.getEventName().fullName;"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        eventTime \u003d DateTimeUtil.parseLocalDateTimeToString(source.getEventTime().getStart());"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        eventDuration \u003d String.valueOf(source.getEventDuration().getDuration().toMinutes());"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        final EventName newName \u003d new EventName(eventName);"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        final EventTime newTime \u003d new EventTime(DateTimeUtil.parseStringToLocalDateTime(eventTime),"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"                Duration.ofMinutes(Long.parseLong(eventDuration)));"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        final EventDuration newDuration \u003d new EventDuration(Duration.ofMinutes(Long.parseLong(eventDuration)));"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        return new Event(new MemberList(), newName, newTime, newDuration);"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":62,"-":4}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RecyclebinChangeEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private RecycleBinStorage recycleBinStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, RecycleBinStorage recycleBinStorage,"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.recycleBinStorage \u003d recycleBinStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":94,"author":{"gitID":"Pengyuz"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecycleBinStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":95,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":96,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"Pengyuz"},"content":"    public String getRecycleBinFilePath() {"},{"lineNumber":98,"author":{"gitID":"Pengyuz"},"content":"        return recycleBinStorage.getRecycleBinFilePath();"},{"lineNumber":99,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readRecycleBin() throws DataConversionException, IOException {"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"        return readRecycleBin(recycleBinStorage.getRecycleBinFilePath());"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":106,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"Pengyuz"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readRecycleBin(String filePath) throws DataConversionException, IOException {"},{"lineNumber":108,"author":{"gitID":"Pengyuz"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":109,"author":{"gitID":"Pengyuz"},"content":"        return recycleBinStorage.readRecycleBin(filePath);"},{"lineNumber":110,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":112,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"    public void saveRecycleBin(ReadOnlyAddressBook recycleBin) throws IOException {"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"        saveRecycleBin(recycleBin, recycleBinStorage.getRecycleBinFilePath());"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"Pengyuz"},"content":"    public void saveRecycleBin(ReadOnlyAddressBook recycleBin, String filePath) throws IOException {"},{"lineNumber":119,"author":{"gitID":"Pengyuz"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":120,"author":{"gitID":"Pengyuz"},"content":"        recycleBinStorage.saveRecycleBin(recycleBin, filePath);"},{"lineNumber":121,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":123,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":124,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Pengyuz"},"content":"    @Subscribe"},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":"    public void handleRecycleBinChangeEvent(RecyclebinChangeEvent event) {"},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":128,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"Pengyuz"},"content":"            saveRecycleBin(event.data);"},{"lineNumber":130,"author":{"gitID":"Pengyuz"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitID":"Pengyuz"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":132,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":42,"-":93}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    private String birthday;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    private String dateAdded;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    private List\u003cXmlAdaptedEvent\u003e onEvent \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    public XmlAdaptedPerson() {"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        for (Event event : source.getEvents()) {"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"            onEvent.add(new XmlAdaptedEvent(event));"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        dateAdded \u003d source.getDateAdded().toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        final List\u003cEvent\u003e personEvents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        for (XmlAdaptedEvent event : onEvent) {"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"            personEvents.add(event.toModelType());"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        final Set\u003cEvent\u003e events \u003d new HashSet\u003c\u003e(personEvents);"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        final DateAdded dateAdded \u003d new DateAdded(this.dateAdded);"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        return new Person(name, birthday, phone, email, address, tags, events, dateAdded);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":5,"-":70,"eldriclim":24}},{"path":"src/main/java/seedu/address/logic/commands/BinrestoreCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Pengyuz"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" * Restore a person identified using it\u0027s last displayed index or name from the recycle bin."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"public class BinrestoreCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"    public static final String COMMAND_WORD \u003d \"bin-restore\";"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Restored\";"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Restore the person in bin to address book\";"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"    private ArrayList\u003cIndex\u003e targets;"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    private boolean isVaild \u003d true;"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    private boolean isEmpty \u003d false;"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    public BinrestoreCommand(ArrayList\u003cIndex\u003e targets) {"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"        this.targets \u003d targets;"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"        List\u003cReadOnlyPerson\u003e lastshownlist \u003d model.getRecycleBinPersonList();"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personstodelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"        for (Index s: targets) {"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"            if (s.getZeroBased() \u003e\u003d lastshownlist.size()) {"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"                isVaild \u003d false;"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"                personstodelete.add(lastshownlist.get(s.getZeroBased()));"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"                isEmpty \u003d true;"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":"        if (isVaild \u0026\u0026 isEmpty) {"},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"            try {"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"                model.restorePerson(personstodelete);"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"                model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"                Index lastIndex \u003d new Index(model.getFilteredPersonList().size() - 1);"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"                EventsCenter.getInstance().post(new JumpToListRequestEvent(lastIndex));"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"The target person cannot be missing\";"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"            } catch (DuplicatePersonException d) {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"                assert false : \"the duplicate person in bin should be handled\";"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":"        } else {"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"                || (other instanceof BinrestoreCommand"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 this.targets.equals(((BinrestoreCommand) other).targets)); // state check"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":60,"dalessr":2,"-":10}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                return t.toModelType();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        final ObservableList\u003cEvent\u003e events \u003d this.events.stream().map(e -\u003e {"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"                return e.toModelType();"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"                ive.printStackTrace();"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"                //TODO: better error handling"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"                return null;"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        return FXCollections.unmodifiableObservableList(events);"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":74,"eldriclim":22}},{"path":"src/main/java/seedu/address/storage/RecycleBinStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":9,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Pengyuz"},"content":"public interface RecycleBinStorage {"},{"lineNumber":13,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":14,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Pengyuz"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"    String getRecycleBinFilePath();"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readRecycleBin() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"     * @see #getRecycleBinFilePath() ()"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readRecycleBin(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"    void saveRecycleBin(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"     * @see #saveRecycleBin(ReadOnlyAddressBook) (ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"    void saveRecycleBin(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":37,"-":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dalessr"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventDuration;"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        //@@author dalessr"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"            Person[] persons \u003d  new Person[] {"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Alex Yeoh\"),"},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"30/09/2000\"),"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"87438807\"),"},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"                        new Email(\"alexyeoh@example.com\"),"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"friends\", \"classmates\"),"},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/01/2016 11:11:53\")),"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Bernice Yu\"),"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"27/02/1983\"),"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"99272758\"),"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"                        new Email(\"berniceyu@example.com\"),"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"07/02/2016 12:00:01\")),"},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"),"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"03/12/1992\"),"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"93210283\"),"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":"                        new Email(\"charlotte@example.com\"),"},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"neighbours\"),"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/05/2016 12:00:01\")),"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"David Li\"),"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"30/05/1976\"),"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"91031282\"),"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"                        new Email(\"lidavid@example.com\"),"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"15/09/2016 12:00:01\")),"},{"lineNumber":74,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":75,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Irfan Ibrahim\"),"},{"lineNumber":76,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"18/11/1960\"),"},{"lineNumber":77,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"92492021\"),"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"                        new Email(\"irfan@example.com\"),"},{"lineNumber":79,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":80,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"profs\"),"},{"lineNumber":81,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":82,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"15/09/2016 12:01:01\")),"},{"lineNumber":83,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":84,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Roy Balakrishnan\"),"},{"lineNumber":85,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"25/08/1996\"),"},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"92624417\"),"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"                        new Email(\"royb@example.com\"),"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\"),"},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"20/09/2016 12:00:01\")),"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Quintin Levell\"),"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"04/09/1997\"),"},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"66012135\"),"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"                        new Email(\"levellq@example.com\"),"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 39 Aljunied Street 18, #03-44\"),"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"friends\", \"cs2103\"),"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":100,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/10/2016 11:11:53\")),"},{"lineNumber":101,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":102,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Gino Trost\"),"},{"lineNumber":103,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"27/05/1987\"),"},{"lineNumber":104,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"85154314\"),"},{"lineNumber":105,"author":{"gitID":"dalessr"},"content":"                        new Email(\"trostg@example.com\"),"},{"lineNumber":106,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 40 Boon Lay Street 87, #03-12\"),"},{"lineNumber":107,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":108,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":109,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"07/10/2016 12:00:01\")),"},{"lineNumber":110,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":111,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Honey Digiacomo\"),"},{"lineNumber":112,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"14/12/1994\"),"},{"lineNumber":113,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"98500414\"),"},{"lineNumber":114,"author":{"gitID":"dalessr"},"content":"                        new Email(\"digiahoney@example.com\"),"},{"lineNumber":115,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 166 Ang Mo Kio Vista, #03-28\"),"},{"lineNumber":116,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"neighbours\"),"},{"lineNumber":117,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":118,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/12/2016 12:00:01\")),"},{"lineNumber":119,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":120,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Fred Greenland\"),"},{"lineNumber":121,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"27/05/1982\"),"},{"lineNumber":122,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"62667227\"),"},{"lineNumber":123,"author":{"gitID":"dalessr"},"content":"                        new Email(\"greenfd@example.com\"),"},{"lineNumber":124,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 395 Woodlands Street 10, #15-18\"),"},{"lineNumber":125,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":126,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":127,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"15/12/2016 12:00:01\")),"},{"lineNumber":128,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":129,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Francina Schepers\"),"},{"lineNumber":130,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"07/08/1997\"),"},{"lineNumber":131,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"62667887\"),"},{"lineNumber":132,"author":{"gitID":"dalessr"},"content":"                        new Email(\"francina@example.com\"),"},{"lineNumber":133,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 477 Jurong East Street 28, #01-33\"),"},{"lineNumber":134,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"classmates\", \"cs2103\"),"},{"lineNumber":135,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":136,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/02/2017 12:01:01\")),"},{"lineNumber":137,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":138,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Ima Mauffray\"),"},{"lineNumber":139,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"17/10/1969\"),"},{"lineNumber":140,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"86159036\"),"},{"lineNumber":141,"author":{"gitID":"dalessr"},"content":"                        new Email(\"imamau@example.com\"),"},{"lineNumber":142,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 395 Lorong 6 Orchard Road, #04-36\"),"},{"lineNumber":143,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"profs\"),"},{"lineNumber":144,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":145,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"20/02/2017 12:00:01\")),"},{"lineNumber":146,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":147,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Han Slankard\"),"},{"lineNumber":148,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"18/10/1970\"),"},{"lineNumber":149,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"82034763\"),"},{"lineNumber":150,"author":{"gitID":"dalessr"},"content":"                        new Email(\"hans@example.com\"),"},{"lineNumber":151,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 322 Lorong 2 Paya Lebar, #15-21\"),"},{"lineNumber":152,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":153,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":154,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/05/2017 11:11:53\")),"},{"lineNumber":155,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":156,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Audry Sustaita\"),"},{"lineNumber":157,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"25/10/1983\"),"},{"lineNumber":158,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"72394273\"),"},{"lineNumber":159,"author":{"gitID":"dalessr"},"content":"                        new Email(\"audrys@example.com\"),"},{"lineNumber":160,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 20 Jurong West Street 82, #10-02\"),"},{"lineNumber":161,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":162,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":163,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"07/05/2017 12:00:01\")),"},{"lineNumber":164,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":165,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Jade Dimas\"),"},{"lineNumber":166,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"28/01/1976\"),"},{"lineNumber":167,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"99282463\"),"},{"lineNumber":168,"author":{"gitID":"dalessr"},"content":"                        new Email(\"dimasj@example.com\"),"},{"lineNumber":169,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 142 Geylang East Street 86, #18-33\"),"},{"lineNumber":170,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"tutors\"),"},{"lineNumber":171,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":172,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/08/2017 12:00:01\")),"},{"lineNumber":173,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":174,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Lory Prosper\"),"},{"lineNumber":175,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"05/05/1978\"),"},{"lineNumber":176,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"65029401\"),"},{"lineNumber":177,"author":{"gitID":"dalessr"},"content":"                        new Email(\"lory123@example.com\"),"},{"lineNumber":178,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 145 Shunfu Point, #11-05\"),"},{"lineNumber":179,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":180,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":181,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"15/09/2017 12:00:01\")),"},{"lineNumber":182,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":183,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Leone Tipps\"),"},{"lineNumber":184,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"08/12/1989\"),"},{"lineNumber":185,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"82058265\"),"},{"lineNumber":186,"author":{"gitID":"dalessr"},"content":"                        new Email(\"tippsl@example.com\"),"},{"lineNumber":187,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 39 Ang Mo Kio Street 86, #07-22\"),"},{"lineNumber":188,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"classmates\"),"},{"lineNumber":189,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":190,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"28/09/2017 12:01:01\")),"},{"lineNumber":191,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":192,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Rusty Lucena\"),"},{"lineNumber":193,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"12/06/1973\"),"},{"lineNumber":194,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"93376847\"),"},{"lineNumber":195,"author":{"gitID":"dalessr"},"content":"                        new Email(\"lucenar@example.com\"),"},{"lineNumber":196,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 345 Geylang East Street 27, #15-03\"),"},{"lineNumber":197,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"tutors\"),"},{"lineNumber":198,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":199,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/10/2017 12:00:01\")),"},{"lineNumber":200,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":201,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Rhea Vallo\"),"},{"lineNumber":202,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"18/09/1999\"),"},{"lineNumber":203,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"65028849\"),"},{"lineNumber":204,"author":{"gitID":"dalessr"},"content":"                        new Email(\"vallor@example.com\"),"},{"lineNumber":205,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 12 Lorong 14 Marine Parade, #05-25\"),"},{"lineNumber":206,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":207,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":208,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/10/2017 11:11:53\")),"},{"lineNumber":209,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":210,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Stanford Blakemore\"),"},{"lineNumber":211,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"15/01/1983\"),"},{"lineNumber":212,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"52170156\"),"},{"lineNumber":213,"author":{"gitID":"dalessr"},"content":"                        new Email(\"stanford@example.com\"),"},{"lineNumber":214,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 397 Serangoon Gardens Street 24, #03-26\"),"},{"lineNumber":215,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":216,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":217,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"10/10/2017 12:00:01\")),"},{"lineNumber":218,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":219,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Lori Bancroft\"),"},{"lineNumber":220,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"21/03/1992\"),"},{"lineNumber":221,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"88305967\"),"},{"lineNumber":222,"author":{"gitID":"dalessr"},"content":"                        new Email(\"lorib@example.com\"),"},{"lineNumber":223,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 453 Jurong East Street 25, #10-13\"),"},{"lineNumber":224,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"neighbours\"),"},{"lineNumber":225,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":226,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"15/10/2017 12:00:01\")),"},{"lineNumber":227,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":228,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Hollis Biles\"),"},{"lineNumber":229,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"29/07/1988\"),"},{"lineNumber":230,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"92264773\"),"},{"lineNumber":231,"author":{"gitID":"dalessr"},"content":"                        new Email(\"bilesh@example.com\"),"},{"lineNumber":232,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 48 Lorong 10 Caldecott, #07-02\"),"},{"lineNumber":233,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"family\"),"},{"lineNumber":234,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":235,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"29/10/2017 12:00:01\")),"},{"lineNumber":236,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":237,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Linn Mcewen\"),"},{"lineNumber":238,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"10/10/1966\"),"},{"lineNumber":239,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"93045568\"),"},{"lineNumber":240,"author":{"gitID":"dalessr"},"content":"                        new Email(\"mcewenlinn@example.com\"),"},{"lineNumber":241,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 17 Boon Lay Street 29, #13-32\"),"},{"lineNumber":242,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"profs\"),"},{"lineNumber":243,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":244,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"01/11/2017 12:01:01\")),"},{"lineNumber":245,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":246,"author":{"gitID":"dalessr"},"content":"                new Person(new Name(\"Melvin Sigmund\"),"},{"lineNumber":247,"author":{"gitID":"dalessr"},"content":"                        new Birthday(\"02/09/1995\"),"},{"lineNumber":248,"author":{"gitID":"dalessr"},"content":"                        new Phone(\"66083995\"),"},{"lineNumber":249,"author":{"gitID":"dalessr"},"content":"                        new Email(\"melvins@example.com\"),"},{"lineNumber":250,"author":{"gitID":"dalessr"},"content":"                        new Address(\"Blk 29 Aljunied Street 76, #09-25\"),"},{"lineNumber":251,"author":{"gitID":"dalessr"},"content":"                        getTagSet(\"colleagues\"),"},{"lineNumber":252,"author":{"gitID":"dalessr"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":253,"author":{"gitID":"dalessr"},"content":"                        new DateAdded(\"05/11/2017 12:00:01\"))"},{"lineNumber":254,"author":{"gitID":"dalessr"},"content":"            };"},{"lineNumber":255,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":256,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cReadOnlyPerson\u003e eventPersonOne \u003d new ArrayList\u003c\u003e();"},{"lineNumber":257,"author":{"gitID":"dalessr"},"content":"            eventPersonOne.add(persons[0]);"},{"lineNumber":258,"author":{"gitID":"dalessr"},"content":"            eventPersonOne.add(persons[10]);"},{"lineNumber":259,"author":{"gitID":"dalessr"},"content":"            eventPersonOne.add(persons[16]);"},{"lineNumber":260,"author":{"gitID":"dalessr"},"content":"            EventName eventNameOne \u003d new EventName(\"CS2103T Exam\");"},{"lineNumber":261,"author":{"gitID":"dalessr"},"content":"            EventTime eventTimeOne \u003d new EventTime(LocalDateTime.of(LocalDate.of(2017, 12, 04),"},{"lineNumber":262,"author":{"gitID":"dalessr"},"content":"                    LocalTime.of(10, 00, 00, 00)), Duration.ofMinutes(120));"},{"lineNumber":263,"author":{"gitID":"dalessr"},"content":"            EventDuration eventDurationOne \u003d new EventDuration(Duration.ofMinutes(120));"},{"lineNumber":264,"author":{"gitID":"dalessr"},"content":"            Event eventOne \u003d new Event(new MemberList(eventPersonOne), eventNameOne, eventTimeOne, eventDurationOne);"},{"lineNumber":265,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":266,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cReadOnlyPerson\u003e eventPersonTwo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":267,"author":{"gitID":"dalessr"},"content":"            eventPersonTwo.add(persons[1]);"},{"lineNumber":268,"author":{"gitID":"dalessr"},"content":"            eventPersonTwo.add(persons[6]);"},{"lineNumber":269,"author":{"gitID":"dalessr"},"content":"            eventPersonTwo.add(persons[7]);"},{"lineNumber":270,"author":{"gitID":"dalessr"},"content":"            eventPersonTwo.add(persons[17]);"},{"lineNumber":271,"author":{"gitID":"dalessr"},"content":"            EventName eventNameTwo \u003d new EventName(\"Meeting for Project Demo\");"},{"lineNumber":272,"author":{"gitID":"dalessr"},"content":"            EventTime eventTimeTwo \u003d new EventTime(LocalDateTime.of(LocalDate.of(2017, 10, 24),"},{"lineNumber":273,"author":{"gitID":"dalessr"},"content":"                    LocalTime.of(9, 00, 00, 00)), Duration.ofMinutes(60));"},{"lineNumber":274,"author":{"gitID":"dalessr"},"content":"            EventDuration eventDurationTwo \u003d new EventDuration(Duration.ofMinutes(60));"},{"lineNumber":275,"author":{"gitID":"dalessr"},"content":"            Event eventTwo \u003d new Event(new MemberList(eventPersonTwo), eventNameTwo, eventTimeTwo, eventDurationTwo);"},{"lineNumber":276,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":277,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cReadOnlyPerson\u003e eventPersonThree \u003d new ArrayList\u003c\u003e();"},{"lineNumber":278,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[3]);"},{"lineNumber":279,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[9]);"},{"lineNumber":280,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[12]);"},{"lineNumber":281,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[15]);"},{"lineNumber":282,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[18]);"},{"lineNumber":283,"author":{"gitID":"dalessr"},"content":"            eventPersonThree.add(persons[21]);"},{"lineNumber":284,"author":{"gitID":"dalessr"},"content":"            EventName eventNameThree \u003d new EventName(\"Family Gathering and Outing\");"},{"lineNumber":285,"author":{"gitID":"dalessr"},"content":"            EventTime eventTimeThree \u003d new EventTime(LocalDateTime.of(LocalDate.of(2017, 12, 16),"},{"lineNumber":286,"author":{"gitID":"dalessr"},"content":"                    LocalTime.of(17, 00, 00, 00)), Duration.ofMinutes(180));"},{"lineNumber":287,"author":{"gitID":"dalessr"},"content":"            EventDuration eventDurationThree \u003d new EventDuration(Duration.ofMinutes(180));"},{"lineNumber":288,"author":{"gitID":"dalessr"},"content":"            Event eventThree \u003d new Event(new MemberList(eventPersonThree), eventNameThree, eventTimeThree,"},{"lineNumber":289,"author":{"gitID":"dalessr"},"content":"                    eventDurationThree);"},{"lineNumber":290,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":291,"author":{"gitID":"dalessr"},"content":"            ArrayList\u003cReadOnlyPerson\u003e eventPersonFour \u003d new ArrayList\u003c\u003e();"},{"lineNumber":292,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[0]);"},{"lineNumber":293,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[1]);"},{"lineNumber":294,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[10]);"},{"lineNumber":295,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[16]);"},{"lineNumber":296,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[19]);"},{"lineNumber":297,"author":{"gitID":"dalessr"},"content":"            eventPersonFour.add(persons[23]);"},{"lineNumber":298,"author":{"gitID":"dalessr"},"content":"            EventName eventNameFour \u003d new EventName(\"Matchmaking Event\");"},{"lineNumber":299,"author":{"gitID":"dalessr"},"content":"            EventTime eventTimeFour \u003d new EventTime(LocalDateTime.of(LocalDate.of(2017, 9, 23),"},{"lineNumber":300,"author":{"gitID":"dalessr"},"content":"                    LocalTime.of(18, 30, 00, 00)), Duration.ofMinutes(90));"},{"lineNumber":301,"author":{"gitID":"dalessr"},"content":"            EventDuration eventDurationFour \u003d new EventDuration(Duration.ofMinutes(90));"},{"lineNumber":302,"author":{"gitID":"dalessr"},"content":"            Event eventFour \u003d new Event(new MemberList(eventPersonFour), eventNameFour, eventTimeFour,"},{"lineNumber":303,"author":{"gitID":"dalessr"},"content":"                    eventDurationFour);"},{"lineNumber":304,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":305,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsOne \u003d new HashSet\u003c\u003e();"},{"lineNumber":306,"author":{"gitID":"dalessr"},"content":"            eventsOne.add(eventOne);"},{"lineNumber":307,"author":{"gitID":"dalessr"},"content":"            eventsOne.add(eventFour);"},{"lineNumber":308,"author":{"gitID":"dalessr"},"content":"            persons[0].setEvents(eventsOne);"},{"lineNumber":309,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":310,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwo \u003d new HashSet\u003c\u003e();"},{"lineNumber":311,"author":{"gitID":"dalessr"},"content":"            eventsTwo.add(eventTwo);"},{"lineNumber":312,"author":{"gitID":"dalessr"},"content":"            eventsTwo.add(eventFour);"},{"lineNumber":313,"author":{"gitID":"dalessr"},"content":"            persons[1].setEvents(eventsTwo);"},{"lineNumber":314,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":315,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsThree \u003d new HashSet\u003c\u003e();"},{"lineNumber":316,"author":{"gitID":"dalessr"},"content":"            //eventsThree.add();"},{"lineNumber":317,"author":{"gitID":"dalessr"},"content":"            persons[2].setEvents(eventsThree);"},{"lineNumber":318,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":319,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsFour \u003d new HashSet\u003c\u003e();"},{"lineNumber":320,"author":{"gitID":"dalessr"},"content":"            eventsFour.add(eventThree);"},{"lineNumber":321,"author":{"gitID":"dalessr"},"content":"            persons[3].setEvents(eventsFour);"},{"lineNumber":322,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":323,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsFive \u003d new HashSet\u003c\u003e();"},{"lineNumber":324,"author":{"gitID":"dalessr"},"content":"            //eventsFive.add();"},{"lineNumber":325,"author":{"gitID":"dalessr"},"content":"            persons[4].setEvents(eventsFive);"},{"lineNumber":326,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":327,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsSix \u003d new HashSet\u003c\u003e();"},{"lineNumber":328,"author":{"gitID":"dalessr"},"content":"            //eventsSix.add();"},{"lineNumber":329,"author":{"gitID":"dalessr"},"content":"            persons[5].setEvents(eventsSix);"},{"lineNumber":330,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":331,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsSeven \u003d new HashSet\u003c\u003e();"},{"lineNumber":332,"author":{"gitID":"dalessr"},"content":"            eventsSeven.add(eventTwo);"},{"lineNumber":333,"author":{"gitID":"dalessr"},"content":"            persons[6].setEvents(eventsSeven);"},{"lineNumber":334,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":335,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsEight \u003d new HashSet\u003c\u003e();"},{"lineNumber":336,"author":{"gitID":"dalessr"},"content":"            eventsEight.add(eventTwo);"},{"lineNumber":337,"author":{"gitID":"dalessr"},"content":"            persons[7].setEvents(eventsEight);"},{"lineNumber":338,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":339,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsNine \u003d new HashSet\u003c\u003e();"},{"lineNumber":340,"author":{"gitID":"dalessr"},"content":"            //eventsNine.add();"},{"lineNumber":341,"author":{"gitID":"dalessr"},"content":"            persons[8].setEvents(eventsNine);"},{"lineNumber":342,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":343,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTen \u003d new HashSet\u003c\u003e();"},{"lineNumber":344,"author":{"gitID":"dalessr"},"content":"            eventsTen.add(eventThree);"},{"lineNumber":345,"author":{"gitID":"dalessr"},"content":"            persons[9].setEvents(eventsTen);"},{"lineNumber":346,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":347,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsEleven \u003d new HashSet\u003c\u003e();"},{"lineNumber":348,"author":{"gitID":"dalessr"},"content":"            eventsEleven.add(eventOne);"},{"lineNumber":349,"author":{"gitID":"dalessr"},"content":"            eventsEleven.add(eventFour);"},{"lineNumber":350,"author":{"gitID":"dalessr"},"content":"            persons[10].setEvents(eventsEleven);"},{"lineNumber":351,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":352,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwelve \u003d new HashSet\u003c\u003e();"},{"lineNumber":353,"author":{"gitID":"dalessr"},"content":"            //eventsTwelve.add();"},{"lineNumber":354,"author":{"gitID":"dalessr"},"content":"            persons[11].setEvents(eventsTwelve);"},{"lineNumber":355,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":356,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsThirteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":357,"author":{"gitID":"dalessr"},"content":"            eventsThirteen.add(eventThree);"},{"lineNumber":358,"author":{"gitID":"dalessr"},"content":"            persons[12].setEvents(eventsThirteen);"},{"lineNumber":359,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":360,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsFourteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":361,"author":{"gitID":"dalessr"},"content":"            //eventsFourteen.add();"},{"lineNumber":362,"author":{"gitID":"dalessr"},"content":"            persons[13].setEvents(eventsFourteen);"},{"lineNumber":363,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":364,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsFifteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":365,"author":{"gitID":"dalessr"},"content":"            //eventsFifteen.add();"},{"lineNumber":366,"author":{"gitID":"dalessr"},"content":"            persons[14].setEvents(eventsFifteen);"},{"lineNumber":367,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":368,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsSixteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":369,"author":{"gitID":"dalessr"},"content":"            eventsSixteen.add(eventThree);"},{"lineNumber":370,"author":{"gitID":"dalessr"},"content":"            persons[15].setEvents(eventsSixteen);"},{"lineNumber":371,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":372,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsSeventeen \u003d new HashSet\u003c\u003e();"},{"lineNumber":373,"author":{"gitID":"dalessr"},"content":"            eventsSeventeen.add(eventOne);"},{"lineNumber":374,"author":{"gitID":"dalessr"},"content":"            eventsSeventeen.add(eventFour);"},{"lineNumber":375,"author":{"gitID":"dalessr"},"content":"            persons[16].setEvents(eventsSeventeen);"},{"lineNumber":376,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":377,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsEighteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":378,"author":{"gitID":"dalessr"},"content":"            eventsEighteen.add(eventTwo);"},{"lineNumber":379,"author":{"gitID":"dalessr"},"content":"            persons[17].setEvents(eventsEighteen);"},{"lineNumber":380,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":381,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsNineteen \u003d new HashSet\u003c\u003e();"},{"lineNumber":382,"author":{"gitID":"dalessr"},"content":"            eventsNineteen.add(eventThree);"},{"lineNumber":383,"author":{"gitID":"dalessr"},"content":"            persons[18].setEvents(eventsNineteen);"},{"lineNumber":384,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":385,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwenty \u003d new HashSet\u003c\u003e();"},{"lineNumber":386,"author":{"gitID":"dalessr"},"content":"            eventsTwenty.add(eventFour);"},{"lineNumber":387,"author":{"gitID":"dalessr"},"content":"            persons[19].setEvents(eventsTwenty);"},{"lineNumber":388,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":389,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwoOne \u003d new HashSet\u003c\u003e();"},{"lineNumber":390,"author":{"gitID":"dalessr"},"content":"            //eventsTwoOne.add();"},{"lineNumber":391,"author":{"gitID":"dalessr"},"content":"            persons[20].setEvents(eventsTwoOne);"},{"lineNumber":392,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":393,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwoTwo \u003d new HashSet\u003c\u003e();"},{"lineNumber":394,"author":{"gitID":"dalessr"},"content":"            eventsTwoTwo.add(eventThree);"},{"lineNumber":395,"author":{"gitID":"dalessr"},"content":"            persons[21].setEvents(eventsTwoTwo);"},{"lineNumber":396,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":397,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwoThree \u003d new HashSet\u003c\u003e();"},{"lineNumber":398,"author":{"gitID":"dalessr"},"content":"            //eventsTwoThree.add();"},{"lineNumber":399,"author":{"gitID":"dalessr"},"content":"            persons[22].setEvents(eventsTwoThree);"},{"lineNumber":400,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":401,"author":{"gitID":"dalessr"},"content":"            HashSet\u003cEvent\u003e eventsTwoFour \u003d new HashSet\u003c\u003e();"},{"lineNumber":402,"author":{"gitID":"dalessr"},"content":"            eventsTwoFour.add(eventFour);"},{"lineNumber":403,"author":{"gitID":"dalessr"},"content":"            persons[23].setEvents(eventsTwoFour);"},{"lineNumber":404,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":405,"author":{"gitID":"dalessr"},"content":"            return persons;"},{"lineNumber":406,"author":{"gitID":"dalessr"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":407,"author":{"gitID":"dalessr"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":408,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":409,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":410,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":411,"author":{"gitID":"dalessr"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":412,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":413,"author":{"gitID":"dalessr"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":414,"author":{"gitID":"dalessr"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":415,"author":{"gitID":"dalessr"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":416,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":417,"author":{"gitID":"dalessr"},"content":"            return sampleAb;"},{"lineNumber":418,"author":{"gitID":"dalessr"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":419,"author":{"gitID":"dalessr"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":420,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":421,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":422,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":423,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":424,"author":{"gitID":"dalessr"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":425,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":426,"author":{"gitID":"dalessr"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":427,"author":{"gitID":"dalessr"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":428,"author":{"gitID":"dalessr"},"content":"        for (String s : strings) {"},{"lineNumber":429,"author":{"gitID":"dalessr"},"content":"            tags.add(new Tag(s));"},{"lineNumber":430,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":431,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":432,"author":{"gitID":"dalessr"},"content":"        return tags;"},{"lineNumber":433,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":434,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":435,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":436,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":413,"-":16,"eldriclim":7}},{"path":"src/main/java/seedu/address/logic/commands/TagAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangH795"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"import seedu.address.model.tag.TagMatchingKeywordPredicate;"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":" * Adds a tag to existing person(s) in the address book."},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":" * If the tag already exists for at least one of the person(s) selected, error would be thrown."},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":"public class TagAddCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"    public static final String COMMAND_WORD \u003d \"t-add\";"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add tag to the person(s) identified \""},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"            + \"Input tag will append to the existing tags.\\n\""},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":"            + \"Parameters: INDEX1 INDEX2... (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"            + \"TAG (TAG Should not start with a number).\\n\""},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3 \""},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"            + \"friends\";"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"ZhangH795"},"content":"    public static final String MESSAGE_TAG_ALREADY_EXISTS \u003d \"The %1$s tag already exists \""},{"lineNumber":56,"author":{"gitID":"ZhangH795"},"content":"            + \"in person(s) selected.\";"},{"lineNumber":57,"author":{"gitID":"ZhangH795"},"content":"    private final ArrayList\u003cIndex\u003e index;"},{"lineNumber":58,"author":{"gitID":"ZhangH795"},"content":"    private final TagAddDescriptor tagAddDescriptor;"},{"lineNumber":59,"author":{"gitID":"ZhangH795"},"content":"    private final int zeroBasedFirstIndex \u003d 0;"},{"lineNumber":60,"author":{"gitID":"ZhangH795"},"content":"    private final int stringSecondCharIndex \u003d 1;"},{"lineNumber":61,"author":{"gitID":"ZhangH795"},"content":"    private final int emptyListSize \u003d 0;"},{"lineNumber":62,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ZhangH795"},"content":"     * @param index            of the person in the filtered person list to edit"},{"lineNumber":65,"author":{"gitID":"ZhangH795"},"content":"     * @param tagAddDescriptor details to edit the person with"},{"lineNumber":66,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"ZhangH795"},"content":"    public TagAddCommand(ArrayList\u003cIndex\u003e index, TagAddDescriptor tagAddDescriptor) {"},{"lineNumber":68,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitID":"ZhangH795"},"content":"        requireNonNull(tagAddDescriptor);"},{"lineNumber":70,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":71,"author":{"gitID":"ZhangH795"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitID":"ZhangH795"},"content":"        this.tagAddDescriptor \u003d new TagAddDescriptor(tagAddDescriptor);"},{"lineNumber":73,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":75,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"ZhangH795"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"ZhangH795"},"content":"        ObservableList\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"        boolean looseFind \u003d false;"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"        Tag tagToAdd \u003d (Tag) tagAddDescriptor.getTags().toArray()[zeroBasedFirstIndex];"},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"        String tagInStringRaw \u003d tagToAdd.toString();"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"        String tagInString \u003d tagInStringRaw.substring(stringSecondCharIndex, tagInStringRaw.lastIndexOf(\"]\"));"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"        StringBuilder editedPersonDisplay \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"        checkIndexInRange(lastShownList);"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"        TagMatchingKeywordPredicate tagPredicate \u003d new TagMatchingKeywordPredicate(tagInString, looseFind);"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"        ObservableList\u003cReadOnlyPerson\u003e selectedPersonList \u003d createSelectedPersonList(lastShownList);"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"        FilteredList\u003cReadOnlyPerson\u003e tagFilteredPersonList \u003d new FilteredList\u003c\u003e(selectedPersonList);"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"        tagFilteredPersonList.setPredicate(tagPredicate);"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"        if (tagFilteredPersonList.size() \u003e emptyListSize) {"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_ALREADY_EXISTS, tagInStringRaw));"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d 0; i \u003c index.size(); i++) {"},{"lineNumber":96,"author":{"gitID":"ZhangH795"},"content":"            ReadOnlyPerson personToEdit \u003d lastShownList.get(index.get(i).getZeroBased());"},{"lineNumber":97,"author":{"gitID":"ZhangH795"},"content":"            Set\u003cTag\u003e originalTagList \u003d personToEdit.getTags();"},{"lineNumber":98,"author":{"gitID":"ZhangH795"},"content":"            Set\u003cTag\u003e modifiableTagList \u003d createModifiableTagSet(originalTagList, tagToAdd);"},{"lineNumber":99,"author":{"gitID":"ZhangH795"},"content":"            TagAddDescriptor tempTagAddDescriptor \u003d new TagAddDescriptor();"},{"lineNumber":100,"author":{"gitID":"ZhangH795"},"content":"            tempTagAddDescriptor.setTags(modifiableTagList);"},{"lineNumber":101,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":102,"author":{"gitID":"ZhangH795"},"content":"            Person editedPerson \u003d createEditedPerson(personToEdit, tempTagAddDescriptor);"},{"lineNumber":103,"author":{"gitID":"ZhangH795"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"ZhangH795"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":105,"author":{"gitID":"ZhangH795"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":106,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitID":"ZhangH795"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":108,"author":{"gitID":"ZhangH795"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":109,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"ZhangH795"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":111,"author":{"gitID":"ZhangH795"},"content":"            editedPersonDisplay.append(createTagListDisplay(editedPerson));"},{"lineNumber":112,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":113,"author":{"gitID":"ZhangH795"},"content":"            if (tagInString.toLowerCase().contains(\"fav\")) {"},{"lineNumber":114,"author":{"gitID":"ZhangH795"},"content":"                Index firstIndex \u003d new Index(zeroBasedFirstIndex);"},{"lineNumber":115,"author":{"gitID":"ZhangH795"},"content":"                EventsCenter.getInstance().post(new JumpToListRequestEvent(firstIndex));"},{"lineNumber":116,"author":{"gitID":"ZhangH795"},"content":"            } else {"},{"lineNumber":117,"author":{"gitID":"ZhangH795"},"content":"                EventsCenter.getInstance().post(new JumpToListRequestEvent(index.get(zeroBasedFirstIndex)));"},{"lineNumber":118,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":120,"author":{"gitID":"ZhangH795"},"content":"            if (i !\u003d index.size() - 1) {"},{"lineNumber":121,"author":{"gitID":"ZhangH795"},"content":"                editedPersonDisplay.append(\"\\n\");"},{"lineNumber":122,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"ZhangH795"},"content":"        return new CommandResult(editedPersonDisplay.toString());"},{"lineNumber":125,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":127,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"ZhangH795"},"content":"     * Throws CommandException if any of the user input index is invalid."},{"lineNumber":129,"author":{"gitID":"ZhangH795"},"content":"     * @param lastShownList current filtered person list"},{"lineNumber":130,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"ZhangH795"},"content":"    public void checkIndexInRange(ObservableList\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":132,"author":{"gitID":"ZhangH795"},"content":"        for (int i \u003d 0; i \u003c index.size(); i++) {"},{"lineNumber":133,"author":{"gitID":"ZhangH795"},"content":"            if (index.get(i).getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":134,"author":{"gitID":"ZhangH795"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":139,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"ZhangH795"},"content":"     * Creates string for edited tag list."},{"lineNumber":141,"author":{"gitID":"ZhangH795"},"content":"     * @param editedPerson edited person to show tag list"},{"lineNumber":142,"author":{"gitID":"ZhangH795"},"content":"     * Returns formatted string to indicate edited tag list."},{"lineNumber":143,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"ZhangH795"},"content":"    public String createTagListDisplay(Person editedPerson) {"},{"lineNumber":145,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringStartIndex \u003d 1;"},{"lineNumber":146,"author":{"gitID":"ZhangH795"},"content":"        int tagListStringEndIndex;"},{"lineNumber":147,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplayRaw \u003d editedPerson.getTags().toString();"},{"lineNumber":148,"author":{"gitID":"ZhangH795"},"content":"        tagListStringEndIndex \u003d tagChangedDisplayRaw.length() - 1;"},{"lineNumber":149,"author":{"gitID":"ZhangH795"},"content":"        String tagChangedDisplay \u003d editedPerson.getName() + \" Tag List: \""},{"lineNumber":150,"author":{"gitID":"ZhangH795"},"content":"                + tagChangedDisplayRaw.substring(tagListStringStartIndex, tagListStringEndIndex);"},{"lineNumber":151,"author":{"gitID":"ZhangH795"},"content":"        return String.format(MESSAGE_ADD_TAG_SUCCESS, tagChangedDisplay);"},{"lineNumber":152,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":154,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"ZhangH795"},"content":"     * Adds new tag to the copy of existing tag list."},{"lineNumber":156,"author":{"gitID":"ZhangH795"},"content":"     * @param unmodifiable tag List"},{"lineNumber":157,"author":{"gitID":"ZhangH795"},"content":"     * @param tagToAdd     tag to be added"},{"lineNumber":158,"author":{"gitID":"ZhangH795"},"content":"     * Returns modifiable tag set."},{"lineNumber":159,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"ZhangH795"},"content":"    public Set\u003cTag\u003e createModifiableTagSet(Set\u003cTag\u003e unmodifiable, Tag tagToAdd) {"},{"lineNumber":161,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e modifiable \u003d new HashSet\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"ZhangH795"},"content":"        for (Tag t : unmodifiable) {"},{"lineNumber":163,"author":{"gitID":"ZhangH795"},"content":"            modifiable.add(t);"},{"lineNumber":164,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"ZhangH795"},"content":"        modifiable.add(tagToAdd);"},{"lineNumber":166,"author":{"gitID":"ZhangH795"},"content":"        return modifiable;"},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":"     * Creates selected person list."},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"     * @param fullPersonList person list"},{"lineNumber":172,"author":{"gitID":"ZhangH795"},"content":"     * Returns selected person list."},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e createSelectedPersonList(ObservableList\u003cReadOnlyPerson\u003e fullPersonList) {"},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":"        ArrayList\u003cReadOnlyPerson\u003e selectedPersonList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"        for (Index i : index) {"},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":"            ReadOnlyPerson personToEdit \u003d fullPersonList.get(i.getZeroBased());"},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"            selectedPersonList.add(personToEdit);"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"        return FXCollections.observableArrayList(selectedPersonList);"},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"ZhangH795"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":185,"author":{"gitID":"ZhangH795"},"content":"     * edited with {@code tagAddDescriptor}."},{"lineNumber":186,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"ZhangH795"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":188,"author":{"gitID":"ZhangH795"},"content":"                                             TagAddDescriptor tagAddDescriptor) {"},{"lineNumber":189,"author":{"gitID":"ZhangH795"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":190,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":191,"author":{"gitID":"ZhangH795"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":192,"author":{"gitID":"ZhangH795"},"content":"        Birthday updatedBirthday \u003d personToEdit.getBirthday();"},{"lineNumber":193,"author":{"gitID":"ZhangH795"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":194,"author":{"gitID":"ZhangH795"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":195,"author":{"gitID":"ZhangH795"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":196,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e updatedTags \u003d tagAddDescriptor.getTags();"},{"lineNumber":197,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cEvent\u003e updatedEvents \u003d personToEdit.getEvents();"},{"lineNumber":198,"author":{"gitID":"ZhangH795"},"content":"        DateAdded updateDateAdded \u003d personToEdit.getDateAdded();"},{"lineNumber":199,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":200,"author":{"gitID":"ZhangH795"},"content":"        return new Person(updatedName, updatedBirthday, updatedPhone, updatedEmail, updatedAddress, updatedTags,"},{"lineNumber":201,"author":{"gitID":"ZhangH795"},"content":"                updatedEvents, updateDateAdded);"},{"lineNumber":202,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":204,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"ZhangH795"},"content":"    public boolean equals(Object other) {"},{"lineNumber":206,"author":{"gitID":"ZhangH795"},"content":"        // short circuit if same object"},{"lineNumber":207,"author":{"gitID":"ZhangH795"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":208,"author":{"gitID":"ZhangH795"},"content":"            return true;"},{"lineNumber":209,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":211,"author":{"gitID":"ZhangH795"},"content":"        // instanceof handles nulls"},{"lineNumber":212,"author":{"gitID":"ZhangH795"},"content":"        if (!(other instanceof TagAddCommand)) {"},{"lineNumber":213,"author":{"gitID":"ZhangH795"},"content":"            return false;"},{"lineNumber":214,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":216,"author":{"gitID":"ZhangH795"},"content":"        // state check"},{"lineNumber":217,"author":{"gitID":"ZhangH795"},"content":"        TagAddCommand e \u003d (TagAddCommand) other;"},{"lineNumber":218,"author":{"gitID":"ZhangH795"},"content":"        return index.equals(e.index)"},{"lineNumber":219,"author":{"gitID":"ZhangH795"},"content":"                \u0026\u0026 tagAddDescriptor.equals(e.tagAddDescriptor);"},{"lineNumber":220,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":222,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"ZhangH795"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":224,"author":{"gitID":"ZhangH795"},"content":"     * corresponding field value of the person."},{"lineNumber":225,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"ZhangH795"},"content":"    public static class TagAddDescriptor {"},{"lineNumber":227,"author":{"gitID":"ZhangH795"},"content":"        private Name name;"},{"lineNumber":228,"author":{"gitID":"ZhangH795"},"content":"        private Birthday birthday;"},{"lineNumber":229,"author":{"gitID":"ZhangH795"},"content":"        private Phone phone;"},{"lineNumber":230,"author":{"gitID":"ZhangH795"},"content":"        private Email email;"},{"lineNumber":231,"author":{"gitID":"ZhangH795"},"content":"        private Address address;"},{"lineNumber":232,"author":{"gitID":"ZhangH795"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":233,"author":{"gitID":"ZhangH795"},"content":"        private Set\u003cEvent\u003e events;"},{"lineNumber":234,"author":{"gitID":"ZhangH795"},"content":"        private DateAdded dateAdded;"},{"lineNumber":235,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":236,"author":{"gitID":"ZhangH795"},"content":"        public TagAddDescriptor() {"},{"lineNumber":237,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":239,"author":{"gitID":"ZhangH795"},"content":"        public TagAddDescriptor(TagAddDescriptor toCopy) {"},{"lineNumber":240,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":241,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":242,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":243,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":244,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":245,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":246,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d toCopy.events;"},{"lineNumber":247,"author":{"gitID":"ZhangH795"},"content":"            this.dateAdded \u003d toCopy.dateAdded;"},{"lineNumber":248,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":250,"author":{"gitID":"ZhangH795"},"content":"        public TagAddDescriptor(ReadOnlyPerson toCopy) {"},{"lineNumber":251,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d toCopy.getName();"},{"lineNumber":252,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d toCopy.getBirthday();"},{"lineNumber":253,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d toCopy.getPhone();"},{"lineNumber":254,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d toCopy.getEmail();"},{"lineNumber":255,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d toCopy.getAddress();"},{"lineNumber":256,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d toCopy.getTags();"},{"lineNumber":257,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d toCopy.getEvents();"},{"lineNumber":258,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":259,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":261,"author":{"gitID":"ZhangH795"},"content":"        /**"},{"lineNumber":262,"author":{"gitID":"ZhangH795"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":263,"author":{"gitID":"ZhangH795"},"content":"         */"},{"lineNumber":264,"author":{"gitID":"ZhangH795"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":265,"author":{"gitID":"ZhangH795"},"content":"            return CollectionUtil.isAnyNonNull(this.tags);"},{"lineNumber":266,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":268,"author":{"gitID":"ZhangH795"},"content":"        public void setName(Name name) {"},{"lineNumber":269,"author":{"gitID":"ZhangH795"},"content":"            this.name \u003d name;"},{"lineNumber":270,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":272,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":273,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":274,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":276,"author":{"gitID":"ZhangH795"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":277,"author":{"gitID":"ZhangH795"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":278,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":280,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":281,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":282,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":284,"author":{"gitID":"ZhangH795"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":285,"author":{"gitID":"ZhangH795"},"content":"            this.phone \u003d phone;"},{"lineNumber":286,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":288,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":289,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":290,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":292,"author":{"gitID":"ZhangH795"},"content":"        public void setEmail(Email email) {"},{"lineNumber":293,"author":{"gitID":"ZhangH795"},"content":"            this.email \u003d email;"},{"lineNumber":294,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":296,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":297,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":298,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":300,"author":{"gitID":"ZhangH795"},"content":"        public void setAddress(Address address) {"},{"lineNumber":301,"author":{"gitID":"ZhangH795"},"content":"            this.address \u003d address;"},{"lineNumber":302,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":304,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":305,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":306,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":308,"author":{"gitID":"ZhangH795"},"content":"        public void setEvent(Set\u003cEvent\u003e events) {"},{"lineNumber":309,"author":{"gitID":"ZhangH795"},"content":"            this.events \u003d events;"},{"lineNumber":310,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":312,"author":{"gitID":"ZhangH795"},"content":"        public Optional\u003cSet\u003cEvent\u003e\u003e getEvents() {"},{"lineNumber":313,"author":{"gitID":"ZhangH795"},"content":"            return Optional.ofNullable(events);"},{"lineNumber":314,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":316,"author":{"gitID":"ZhangH795"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":317,"author":{"gitID":"ZhangH795"},"content":"            this.tags \u003d tags;"},{"lineNumber":318,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":320,"author":{"gitID":"ZhangH795"},"content":"        public Set\u003cTag\u003e getTags() {"},{"lineNumber":321,"author":{"gitID":"ZhangH795"},"content":"            return tags;"},{"lineNumber":322,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":324,"author":{"gitID":"ZhangH795"},"content":"        @Override"},{"lineNumber":325,"author":{"gitID":"ZhangH795"},"content":"        public boolean equals(Object other) {"},{"lineNumber":326,"author":{"gitID":"ZhangH795"},"content":"            // short circuit if same object"},{"lineNumber":327,"author":{"gitID":"ZhangH795"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":328,"author":{"gitID":"ZhangH795"},"content":"                return true;"},{"lineNumber":329,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":330,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":331,"author":{"gitID":"ZhangH795"},"content":"            // instanceof handles nulls"},{"lineNumber":332,"author":{"gitID":"ZhangH795"},"content":"            if (!(other instanceof TagAddDescriptor)) {"},{"lineNumber":333,"author":{"gitID":"ZhangH795"},"content":"                return false;"},{"lineNumber":334,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":335,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":336,"author":{"gitID":"ZhangH795"},"content":"            // state check"},{"lineNumber":337,"author":{"gitID":"ZhangH795"},"content":"            TagAddDescriptor e \u003d (TagAddDescriptor) other;"},{"lineNumber":338,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":339,"author":{"gitID":"ZhangH795"},"content":"            return getTags().equals(e.getTags());"},{"lineNumber":340,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":319,"dalessr":2,"-":19,"eldriclim":2}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"    boolean isFavourite();"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    ObjectProperty\u003cUniqueEventList\u003e eventProperty();"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    Set\u003cEvent\u003e getEvents();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    DateAdded getDateAdded();"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"    ObjectProperty\u003cBirthday\u003e birthdayProperty();"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"    Birthday getBirthday();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 other.getBirthday().equals(this.getBirthday()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"        if (getBirthday().value.equals(\"01/01/1900\")) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            builder.append(getName())"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    .append(\" Phone: \")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    .append(getPhone())"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    .append(\" Email: \")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    .append(getEmail())"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    .append(\" Address: \")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                    .append(getAddress())"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    .append(\" Tags: \");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            getTags().forEach(builder::append);"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"            builder.append(\"\\nEvents:\\n\");"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"            getEvents().forEach(builder::append);"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            builder.append(getName())"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"                    .append(\" Birthday: \")"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":"                    .append(getBirthday())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    .append(\" Phone: \")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                    .append(getPhone())"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                    .append(\" Email: \")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                    .append(getEmail())"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                    .append(\" Address: \")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                    .append(getAddress())"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                    .append(\" Tags: \");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            getTags().forEach(builder::append);"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"            builder.append(\"\\nEvents:\\n\");"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"            getEvents().forEach(builder::append);"},{"lineNumber":78,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"dalessr":9,"-":63,"eldriclim":9}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitID":"-"},"content":" *"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"     * Sorts the list of persons."},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"     * @throws EmptyListException if the list is empty."},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    public void sort(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(sortType);"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(isDescending);"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"        if (internalList.size() \u003c 1) {"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"            throw new EmptyListException();"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        Collections.sort(internalList, sortType);"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        if (isDescending) {"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"            Collections.reverse(internalList);"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":78,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":79,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"ZhangH795"},"content":"     * Put favourite on top of the person list."},{"lineNumber":81,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"ZhangH795"},"content":"    public void sortByFavourite() {"},{"lineNumber":83,"author":{"gitID":"ZhangH795"},"content":"        internalList.sort(new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":84,"author":{"gitID":"ZhangH795"},"content":"            public int compare(ReadOnlyPerson p1, ReadOnlyPerson p2) {"},{"lineNumber":85,"author":{"gitID":"ZhangH795"},"content":"                if (p1.isFavourite()) {"},{"lineNumber":86,"author":{"gitID":"ZhangH795"},"content":"                    return -1;"},{"lineNumber":87,"author":{"gitID":"ZhangH795"},"content":"                } else if (p2.isFavourite()) {"},{"lineNumber":88,"author":{"gitID":"ZhangH795"},"content":"                    return 1;"},{"lineNumber":89,"author":{"gitID":"ZhangH795"},"content":"                } else {"},{"lineNumber":90,"author":{"gitID":"ZhangH795"},"content":"                    return -1;"},{"lineNumber":91,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":92,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"ZhangH795"},"content":"        });"},{"lineNumber":94,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":18,"-":121,"eldriclim":29}},{"path":"src/main/java/seedu/address/model/person/exceptions/EmptyListException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":" * Signals that the operation is unable to continue with an empty list."},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"public class EmptyListException extends Exception {}"}],"authorContributionMap":{"-":3,"eldriclim":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cDateAdded\u003e dateAdded;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cUniqueEventList\u003e events;"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"    private ObjectProperty\u003cBirthday\u003e birthday;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"     * /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cEvent\u003e events,"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"                  DateAdded dateAdded) {"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(name, phone, email, address, tags, dateAdded);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(new Birthday());"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        this.dateAdded \u003d new SimpleObjectProperty\u003c\u003e(dateAdded);"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        // protect internal tags \u0026 events from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        this.events \u003d new SimpleObjectProperty\u003c\u003e(new UniqueEventList(events));"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"    public Person(Name name, Birthday birthday, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"                  Set\u003cEvent\u003e events, DateAdded dateAdded) {"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(name, phone, email, address, tags, dateAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"        this.dateAdded \u003d new SimpleObjectProperty\u003c\u003e(dateAdded);"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        // protect internal tags \u0026 events from changes in the arg list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        this.events \u003d new SimpleObjectProperty\u003c\u003e(new UniqueEventList(events));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"        this(source.getName(), source.getBirthday(), source.getPhone(), source.getEmail(), source.getAddress(),"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"                source.getTags(), source.getEvents(), source.getDateAdded());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"dalessr"},"content":"    public void setBirthday(Birthday birthday) {"},{"lineNumber":87,"author":{"gitID":"dalessr"},"content":"        this.birthday.set(requireNonNull(birthday));"},{"lineNumber":88,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":90,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"dalessr"},"content":"    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"},{"lineNumber":92,"author":{"gitID":"dalessr"},"content":"        return birthday;"},{"lineNumber":93,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":95,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"dalessr"},"content":"    public Birthday getBirthday() {"},{"lineNumber":97,"author":{"gitID":"dalessr"},"content":"        return birthday.get();"},{"lineNumber":98,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"    public DateAdded getDateAdded() {"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"        return dateAdded.get();"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":168,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"ZhangH795"},"content":"     * Checks whether a person has favourite tag."},{"lineNumber":170,"author":{"gitID":"ZhangH795"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"ZhangH795"},"content":"     * @return true if the person has favourite tag"},{"lineNumber":172,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"ZhangH795"},"content":"    public boolean isFavourite() {"},{"lineNumber":175,"author":{"gitID":"ZhangH795"},"content":"        for (Tag tag : getTags()) {"},{"lineNumber":176,"author":{"gitID":"ZhangH795"},"content":"            if (tag.tagName.toLowerCase().contains(\"fav\")) {"},{"lineNumber":177,"author":{"gitID":"ZhangH795"},"content":"                return true;"},{"lineNumber":178,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":179,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"ZhangH795"},"content":"        return false;"},{"lineNumber":181,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":"     * Returns an immutable event set, which throws {@code UnsupportedOperationException}"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":"    public Set\u003cEvent\u003e getEvents() {"},{"lineNumber":190,"author":{"gitID":"eldriclim"},"content":"        return Collections.unmodifiableSet(events.get().toSet());"},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cUniqueEventList\u003e eventProperty() {"},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"        return events;"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":"     * Replaces this person\u0027s events with the events in the argument events set."},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":"    public void setEvents(Set\u003cEvent\u003e replacement) {"},{"lineNumber":201,"author":{"gitID":"eldriclim"},"content":"        events.set(new UniqueEventList(replacement));"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":"        return Objects.hash(name, phone, email, address, tags, events, dateAdded);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":17,"dalessr":22,"-":144,"eldriclim":39}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"dalessr"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":5,"author":{"gitID":"dalessr"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitID":"dalessr"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"dalessr"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":11,"author":{"gitID":"dalessr"},"content":"//@@author dalessr"},{"lineNumber":12,"author":{"gitID":"dalessr"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dalessr"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":14,"author":{"gitID":"dalessr"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dalessr"},"content":"public class Birthday {"},{"lineNumber":17,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"            \"Person birthday can only contain numbers and slashes, and it can be blank\";"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"     * Validates given birthday."},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"dalessr"},"content":"     * @throws IllegalValueException if given birthday string is invalid."},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"dalessr"},"content":"    public Birthday(String birthday) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"        requireNonNull(birthday);"},{"lineNumber":30,"author":{"gitID":"dalessr"},"content":"        if (!isValidBirthday(birthday)) {"},{"lineNumber":31,"author":{"gitID":"dalessr"},"content":"            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"dalessr"},"content":"        this.value \u003d birthday;"},{"lineNumber":34,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"    public Birthday() {"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"        this.value \u003d \"01/01/1900\";"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":40,"author":{"gitID":"dalessr"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"dalessr"},"content":"     * Returns true if a given string is a valid person birthday."},{"lineNumber":42,"author":{"gitID":"dalessr"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"dalessr"},"content":"    public static boolean isValidBirthday(String test) {"},{"lineNumber":44,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":45,"author":{"gitID":"dalessr"},"content":"        String dateFormat \u003d \"dd/MM/yyyy\";"},{"lineNumber":46,"author":{"gitID":"dalessr"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"dalessr"},"content":"            DateFormat df \u003d new SimpleDateFormat(dateFormat);"},{"lineNumber":48,"author":{"gitID":"dalessr"},"content":"            df.setLenient(false);"},{"lineNumber":49,"author":{"gitID":"dalessr"},"content":"            df.parse(test);"},{"lineNumber":50,"author":{"gitID":"dalessr"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"dalessr"},"content":"        } catch (ParseException e) {"},{"lineNumber":52,"author":{"gitID":"dalessr"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":56,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"dalessr"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitID":"dalessr"},"content":"        return value;"},{"lineNumber":59,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":61,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"dalessr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"dalessr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"dalessr"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"dalessr"},"content":"                \u0026\u0026 this.value.equals(((Birthday) other).value)); // state check"},{"lineNumber":66,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":68,"author":{"gitID":"dalessr"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"dalessr"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitID":"dalessr"},"content":"        return value.hashCode();"},{"lineNumber":71,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":73,"author":{"gitID":"dalessr"},"content":"}"}],"authorContributionMap":{"dalessr":71,"-":2}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"     * Returns an unmodifiable view of the event list."},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"     * This list will not contain any duplicate event."},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":24,"eldriclim":7}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":18,"author":{"gitID":"dalessr"},"content":"        boolean checkEquals \u003d false;"},{"lineNumber":19,"author":{"gitID":"dalessr"},"content":"        for (int i \u003d 0; i \u003c keywords.size(); i++) {"},{"lineNumber":20,"author":{"gitID":"dalessr"},"content":"            checkEquals \u003d person.getName().fullName.toLowerCase().contains(keywords.get(i).toLowerCase());"},{"lineNumber":21,"author":{"gitID":"dalessr"},"content":"            if (checkEquals) {"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"                return true;"},{"lineNumber":23,"author":{"gitID":"dalessr"},"content":"            }"},{"lineNumber":24,"author":{"gitID":"dalessr"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"dalessr"},"content":"        return checkEquals;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"dalessr"},"content":"    public List\u003cString\u003e getKeywords() {"},{"lineNumber":36,"author":{"gitID":"dalessr"},"content":"        return keywords;"},{"lineNumber":37,"author":{"gitID":"dalessr"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dalessr"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dalessr":12,"-":27}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import java.util.Iterator;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import java.util.Map;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.MemberList;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    private final UniqueEventList events;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    public AddressBook() {"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"     * Creates an AddressBook using the Persons, Tags and Events in the {@code toBeCopied}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"    public void setEvents(List\u003c? extends Event\u003e events) throws DuplicateEventException {"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"        this.events.setEvents(events);"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(newData);"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"            setEvents(newData.getEventList());"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"            assert false : \"AddressBooks should not have duplicate events\";"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"        syncMasterEventListWith(persons);"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"        syncMasterEventListMembers(events);"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"    public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"        persons.sort(sortType, isDescending);"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"     * {@code AddressBook}\u0027s event list will be updated with the event of {@code editedReadOnlyPerson}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        syncMasterEventListWith(editedPerson);"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":155,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"        syncMasterEventListMembers(new UniqueEventList(editedPerson.getEvents()));"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * - exists in the master list {@link #tags}"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * - points to a Tag object in the master list"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * - exists in the master list {@link #tags}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * - points to a Tag object in the master list"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":"     * Sync the member list in those events affected by the deletion."},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"            syncMasterEventListMembers(key.eventProperty().get());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"    //// event-level operations"},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"     * {@code AddressBook}\u0027s event list will be updated with the event of {@code editedReadOnlyPerson}."},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that both list are of the same size and elements are ordered in such a way where"},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"     * one replaces the other."},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":"     *                                  another existing person in the list."},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":"    public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(targets);"},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(editedPersons);"},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"        Iterator\u003cReadOnlyPerson\u003e targetsIterator \u003d targets.iterator();"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":"        Iterator\u003cReadOnlyPerson\u003e editPersonIterator \u003d editedPersons.iterator();"},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":"        while (targetsIterator.hasNext() \u0026\u0026 editPersonIterator.hasNext()) {"},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":"            updatePerson(targetsIterator.next(), editPersonIterator.next());"},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"     * Takes in two list of ReadOnlyPerson, one to be edited and one already edited."},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"     * Checks if event already exist in master list and throws DuplicateEventException when found."},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"     * Otherwise, updated persons list will replace the list that is to be edited, updating the master"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"     * event list in the process."},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that person to edit exist in address book, handled in {@see ScheduleRemoveCommand}."},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that update person does not exist in address book, handled in {@see ScheduleRemoveCommand}."},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":"     * @param targets       list of person to be edited"},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":"     * @param editedPersons list of edited person"},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":"     * @param event         event to be added"},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicateEventException  when Events with the same name, datetime and duration is detecte"},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":"     *                                  {@see Event#equals(Object)}"},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"     * @throws PersonNotFoundException  when person to edit is not found, should not reach this point"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicatePersonException when updated person already exist, should not reach this point"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":"    public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":"            throws DuplicateEventException, PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(targets);"},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(editedPersons);"},{"lineNumber":269,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(event);"},{"lineNumber":270,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":271,"author":{"gitID":"eldriclim"},"content":"        if (events.contains(event)) {"},{"lineNumber":272,"author":{"gitID":"eldriclim"},"content":"            throw new DuplicateEventException();"},{"lineNumber":273,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":275,"author":{"gitID":"eldriclim"},"content":"        if (targets.isEmpty() \u0026\u0026 editedPersons.isEmpty()) {"},{"lineNumber":276,"author":{"gitID":"eldriclim"},"content":"            events.add(event);"},{"lineNumber":277,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":278,"author":{"gitID":"eldriclim"},"content":"            updateListOfPerson(targets, editedPersons);"},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"eldriclim"},"content":"        events.sort(LocalDate.now());"},{"lineNumber":281,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":283,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"eldriclim"},"content":"     * Takes in two list of ReadOnlyPerson, one to be edited and one already edited."},{"lineNumber":285,"author":{"gitID":"eldriclim"},"content":"     * The updated persons list will replace the list that is to be edited, updating the master"},{"lineNumber":286,"author":{"gitID":"eldriclim"},"content":"     * event list in the process."},{"lineNumber":287,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":288,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that events to be removed from master list exist in address book, handled"},{"lineNumber":289,"author":{"gitID":"eldriclim"},"content":"     * in {@see ScheduleRemoveCommand}"},{"lineNumber":290,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that person to edit exist in address book, handled in {@see ScheduleRemoveCommand}."},{"lineNumber":291,"author":{"gitID":"eldriclim"},"content":"     * Guarantees that update person does not exist in address book, handled in {@see ScheduleRemoveCommand}."},{"lineNumber":292,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":293,"author":{"gitID":"eldriclim"},"content":"     * @param targets        list of person to be edited"},{"lineNumber":294,"author":{"gitID":"eldriclim"},"content":"     * @param editedPersons  list of edited person"},{"lineNumber":295,"author":{"gitID":"eldriclim"},"content":"     * @param toRemoveEvents list of events that is to be removed from master list"},{"lineNumber":296,"author":{"gitID":"eldriclim"},"content":"     * @throws EventNotFoundException   when event that is to be deleted from master list is not found"},{"lineNumber":297,"author":{"gitID":"eldriclim"},"content":"     * @throws PersonNotFoundException  when person to edit is not found, should not reach this point"},{"lineNumber":298,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicatePersonException when updated person already exist, should not reach this point"},{"lineNumber":299,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"eldriclim"},"content":"    public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":301,"author":{"gitID":"eldriclim"},"content":"                             ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":302,"author":{"gitID":"eldriclim"},"content":"            throws PersonNotFoundException, DuplicatePersonException, EventNotFoundException {"},{"lineNumber":303,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":304,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(targets);"},{"lineNumber":305,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(editedPersons);"},{"lineNumber":306,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":307,"author":{"gitID":"eldriclim"},"content":"        for (Event e : toRemoveEvents) {"},{"lineNumber":308,"author":{"gitID":"eldriclim"},"content":"            events.remove(e);"},{"lineNumber":309,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":311,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":312,"author":{"gitID":"eldriclim"},"content":"        updateListOfPerson(targets, editedPersons);"},{"lineNumber":313,"author":{"gitID":"eldriclim"},"content":"        events.sort(LocalDate.now());"},{"lineNumber":314,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":316,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"eldriclim"},"content":"     * Sort list of Events based on the the given date."},{"lineNumber":318,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":319,"author":{"gitID":"eldriclim"},"content":"     * Comparator logic and sorting details is found in {@code UniquePersonList#sort}"},{"lineNumber":320,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":321,"author":{"gitID":"eldriclim"},"content":"     * @param date"},{"lineNumber":322,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"eldriclim"},"content":"    public void sortEvents(LocalDate date) {"},{"lineNumber":324,"author":{"gitID":"eldriclim"},"content":"        events.sort(date);"},{"lineNumber":325,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":327,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":328,"author":{"gitID":"eldriclim"},"content":"     * Check if the given event clashes with any events in the master list of events"},{"lineNumber":329,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":330,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":331,"author":{"gitID":"eldriclim"},"content":"     * @return true if a clash exist, otherwise return false"},{"lineNumber":332,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"eldriclim"},"content":"    public boolean hasEventClashes(Event event) {"},{"lineNumber":334,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":335,"author":{"gitID":"eldriclim"},"content":"        boolean hasClash \u003d false;"},{"lineNumber":336,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":337,"author":{"gitID":"eldriclim"},"content":"        for (Event e : events) {"},{"lineNumber":338,"author":{"gitID":"eldriclim"},"content":"            hasClash \u003d DateTimeUtil.checkEventClash(e, event);"},{"lineNumber":339,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":340,"author":{"gitID":"eldriclim"},"content":"            if (hasClash) {"},{"lineNumber":341,"author":{"gitID":"eldriclim"},"content":"                return hasClash;"},{"lineNumber":342,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":343,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":345,"author":{"gitID":"eldriclim"},"content":"        return hasClash;"},{"lineNumber":346,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":347,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":349,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"eldriclim"},"content":"     * Ensures that every event in this person:"},{"lineNumber":351,"author":{"gitID":"eldriclim"},"content":"     * - exists in the master list {@link #events}"},{"lineNumber":352,"author":{"gitID":"eldriclim"},"content":"     * - points to a Event object in the master list"},{"lineNumber":353,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"eldriclim"},"content":"    private void syncMasterEventListWith(Person person) {"},{"lineNumber":355,"author":{"gitID":"eldriclim"},"content":"        final UniqueEventList personEvents \u003d new UniqueEventList(person.getEvents());"},{"lineNumber":356,"author":{"gitID":"eldriclim"},"content":"        events.mergeFrom(personEvents);"},{"lineNumber":357,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":358,"author":{"gitID":"eldriclim"},"content":"        // Create map with values \u003d event object references in the master list"},{"lineNumber":359,"author":{"gitID":"eldriclim"},"content":"        // used for checking person event references"},{"lineNumber":360,"author":{"gitID":"eldriclim"},"content":"        final Map\u003cEvent, Event\u003e masterEventObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":361,"author":{"gitID":"eldriclim"},"content":"        events.forEach(event -\u003e masterEventObjects.put(event, event));"},{"lineNumber":362,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":363,"author":{"gitID":"eldriclim"},"content":"        // Rebuild the personal list of events to point to the relevant events in the master event list."},{"lineNumber":364,"author":{"gitID":"eldriclim"},"content":"        final Set\u003cEvent\u003e correctEventReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":365,"author":{"gitID":"eldriclim"},"content":"        personEvents.forEach(event -\u003e correctEventReferences.add(masterEventObjects.get(event)));"},{"lineNumber":366,"author":{"gitID":"eldriclim"},"content":"        person.setEvents(correctEventReferences);"},{"lineNumber":367,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":369,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":370,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":371,"author":{"gitID":"eldriclim"},"content":"     * Ensures that every event in these persons:"},{"lineNumber":372,"author":{"gitID":"eldriclim"},"content":"     * - exists in the master list {@link #events}"},{"lineNumber":373,"author":{"gitID":"eldriclim"},"content":"     * - points to an Event object in the master list"},{"lineNumber":374,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":375,"author":{"gitID":"eldriclim"},"content":"     * @see #syncMasterEventListWith(Person)"},{"lineNumber":376,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":377,"author":{"gitID":"eldriclim"},"content":"    private void syncMasterEventListWith(UniquePersonList persons) {"},{"lineNumber":378,"author":{"gitID":"eldriclim"},"content":"        persons.forEach(this::syncMasterEventListWith);"},{"lineNumber":379,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":381,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":382,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":383,"author":{"gitID":"eldriclim"},"content":"     * Ensures that every member in this event:"},{"lineNumber":384,"author":{"gitID":"eldriclim"},"content":"     * - points to a person object in the master person list"},{"lineNumber":385,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":386,"author":{"gitID":"eldriclim"},"content":"    private void syncMasterEventListMembers(Event event) {"},{"lineNumber":387,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":388,"author":{"gitID":"eldriclim"},"content":"        // Create map with values \u003d person object references in the master list"},{"lineNumber":389,"author":{"gitID":"eldriclim"},"content":"        // used for checking member references"},{"lineNumber":390,"author":{"gitID":"eldriclim"},"content":"        final Map\u003cPerson, Person\u003e masterPersonObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":391,"author":{"gitID":"eldriclim"},"content":"        this.persons.forEach(person -\u003e masterPersonObjects.put(person, person));"},{"lineNumber":392,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":393,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e eventMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":394,"author":{"gitID":"eldriclim"},"content":"        this.persons.asObservableList().stream().filter(readOnlyPerson -\u003e"},{"lineNumber":395,"author":{"gitID":"eldriclim"},"content":"                readOnlyPerson.getEvents().contains(event)).forEach(eventMembers::add);"},{"lineNumber":396,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":397,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":398,"author":{"gitID":"eldriclim"},"content":"        // Rebuild the list of member to point to the relevant person in the master person list."},{"lineNumber":399,"author":{"gitID":"eldriclim"},"content":"        final Set\u003cPerson\u003e correctPersonReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":400,"author":{"gitID":"eldriclim"},"content":"        eventMembers.forEach(person -\u003e correctPersonReferences.add(masterPersonObjects.get(person)));"},{"lineNumber":401,"author":{"gitID":"eldriclim"},"content":"        event.setMemberList(new MemberList("},{"lineNumber":402,"author":{"gitID":"eldriclim"},"content":"                new ArrayList\u003c\u003e(correctPersonReferences)));"},{"lineNumber":403,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":405,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":406,"author":{"gitID":"eldriclim"},"content":"     * Ensures that every member in these events:"},{"lineNumber":407,"author":{"gitID":"eldriclim"},"content":"     * - points to a person object in the master list"},{"lineNumber":408,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":409,"author":{"gitID":"eldriclim"},"content":"     * @see #syncMasterEventListMembers(Event)"},{"lineNumber":410,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":411,"author":{"gitID":"eldriclim"},"content":"    private void syncMasterEventListMembers(UniqueEventList events) {"},{"lineNumber":412,"author":{"gitID":"eldriclim"},"content":"        events.forEach(this::syncMasterEventListMembers);"},{"lineNumber":413,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":414,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":415,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":416,"author":{"gitID":"ZhangH795"},"content":"    //@@author ZhangH795"},{"lineNumber":417,"author":{"gitID":"ZhangH795"},"content":"    /**"},{"lineNumber":418,"author":{"gitID":"ZhangH795"},"content":"     * Sort list of person(s), those with favourite tag would come first in the person list."},{"lineNumber":419,"author":{"gitID":"ZhangH795"},"content":"     */"},{"lineNumber":420,"author":{"gitID":"ZhangH795"},"content":"    public void favouriteShownFirst() {"},{"lineNumber":421,"author":{"gitID":"ZhangH795"},"content":"        persons.sortByFavourite();"},{"lineNumber":422,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"ZhangH795"},"content":"    //@@author"},{"lineNumber":424,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":429,"author":{"gitID":"eldriclim"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags, \""},{"lineNumber":430,"author":{"gitID":"eldriclim"},"content":"                + events.asObservableList().size() + \" events\";"},{"lineNumber":431,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":436,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":441,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":442,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":445,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":446,"author":{"gitID":"eldriclim"},"content":"        return events.asObservableList();"},{"lineNumber":447,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":450,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":451,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":452,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":453,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":454,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":455,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":458,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":459,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":460,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":461,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":462,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":463,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":9,"-":169,"eldriclim":286}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":10,"author":{"gitID":"Pengyuz"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RecyclebinChangeEvent;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.CalendarSelectionChangedEvent;"},{"lineNumber":27,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"},{"lineNumber":29,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.events.ui.ScheduleUpdateEvent;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"import seedu.address.ui.EventListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":" * Represents the in-memory model of the address book and recycle bin data."},{"lineNumber":45,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final AddressBook recycleBin;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredRecycle;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"     * Initializes a ModelManager with the given addressBook, recycleBin and userPrefs."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyAddressBook recycleBin, UserPrefs userPrefs) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, recycleBin, userPrefs);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.recycleBin \u003d new AddressBook(recycleBin);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        filteredRecycle \u003d new FilteredList\u003c\u003e(this.recycleBin.getPersonList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new AddressBook(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecyclebin) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        recycleBin.resetData(newRecyclebin);"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        EventsCenter.getInstance().post(new ScheduleUpdateEvent(getEventList()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"Pengyuz"},"content":"        indicateRecycleBinChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":87,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":88,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"Pengyuz"},"content":"    public void resetRecyclebin(ReadOnlyAddressBook newData) {"},{"lineNumber":90,"author":{"gitID":"Pengyuz"},"content":"        recycleBin.resetData(newData);"},{"lineNumber":91,"author":{"gitID":"Pengyuz"},"content":"        indicateRecycleBinChanged();"},{"lineNumber":92,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":100,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":101,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Pengyuz"},"content":"    public ReadOnlyAddressBook getRecycleBin() {"},{"lineNumber":103,"author":{"gitID":"Pengyuz"},"content":"        return recycleBin;"},{"lineNumber":104,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":114,"author":{"gitID":"Pengyuz"},"content":"    private void indicateRecycleBinChanged() {"},{"lineNumber":115,"author":{"gitID":"Pengyuz"},"content":"        raise(new RecyclebinChangeEvent(recycleBin));"},{"lineNumber":116,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":126,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":127,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Pengyuz"},"content":"    public synchronized void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException,"},{"lineNumber":129,"author":{"gitID":"Pengyuz"},"content":"            DuplicatePersonException {"},{"lineNumber":130,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":131,"author":{"gitID":"Pengyuz"},"content":"        for (ReadOnlyPerson s : targets) {"},{"lineNumber":132,"author":{"gitID":"Pengyuz"},"content":"            if (recycleBin.getPersonList().contains(s)) {"},{"lineNumber":133,"author":{"gitID":"Pengyuz"},"content":"                addressBook.removePerson(s);"},{"lineNumber":134,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":135,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":136,"author":{"gitID":"Pengyuz"},"content":"                Person o \u003d new Person(s.getName(), s.getBirthday(), s.getPhone(), s.getEmail(), s.getAddress(),"},{"lineNumber":137,"author":{"gitID":"Pengyuz"},"content":"                        new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), s.getDateAdded());"},{"lineNumber":138,"author":{"gitID":"Pengyuz"},"content":"                addressBook.removePerson(s);"},{"lineNumber":139,"author":{"gitID":"Pengyuz"},"content":"                recycleBin.addPerson(o);"},{"lineNumber":140,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"Pengyuz"},"content":"        indicateRecycleBinChanged();"},{"lineNumber":143,"author":{"gitID":"Pengyuz"},"content":"        indicateAddressBookChanged();"},{"lineNumber":144,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":146,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":147,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":148,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"Pengyuz"},"content":"    public synchronized void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":150,"author":{"gitID":"Pengyuz"},"content":"        for (ReadOnlyPerson s : targets) {"},{"lineNumber":151,"author":{"gitID":"Pengyuz"},"content":"            recycleBin.removePerson(s);"},{"lineNumber":152,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"Pengyuz"},"content":"        indicateRecycleBinChanged();"},{"lineNumber":154,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":164,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":165,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"Pengyuz"},"content":"    public synchronized void restorePerson(ReadOnlyPerson person) throws DuplicatePersonException,"},{"lineNumber":167,"author":{"gitID":"Pengyuz"},"content":"            PersonNotFoundException {"},{"lineNumber":168,"author":{"gitID":"Pengyuz"},"content":"        addressBook.addPerson(person);"},{"lineNumber":169,"author":{"gitID":"Pengyuz"},"content":"        recycleBin.removePerson(person);"},{"lineNumber":170,"author":{"gitID":"Pengyuz"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":171,"author":{"gitID":"Pengyuz"},"content":"        updateFilteredBinList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":172,"author":{"gitID":"Pengyuz"},"content":"        indicateAddressBookChanged();"},{"lineNumber":173,"author":{"gitID":"Pengyuz"},"content":"        indicateAddressBookChanged();"},{"lineNumber":174,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":176,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":177,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":178,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"Pengyuz"},"content":"    public synchronized void restorePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws DuplicatePersonException,"},{"lineNumber":180,"author":{"gitID":"Pengyuz"},"content":"            PersonNotFoundException {"},{"lineNumber":181,"author":{"gitID":"Pengyuz"},"content":"        boolean isChanged \u003d true;"},{"lineNumber":182,"author":{"gitID":"Pengyuz"},"content":"        for (ReadOnlyPerson s : targets) {"},{"lineNumber":183,"author":{"gitID":"Pengyuz"},"content":"            if (addressBook.getPersonList().contains(s)) {"},{"lineNumber":184,"author":{"gitID":"Pengyuz"},"content":"                recycleBin.removePerson(s);"},{"lineNumber":185,"author":{"gitID":"Pengyuz"},"content":"            } else {"},{"lineNumber":186,"author":{"gitID":"Pengyuz"},"content":"                Person o \u003d new Person(s.getName(), s.getBirthday(), s.getPhone(), s.getEmail(), s.getAddress(),"},{"lineNumber":187,"author":{"gitID":"Pengyuz"},"content":"                        new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), s.getDateAdded());"},{"lineNumber":188,"author":{"gitID":"Pengyuz"},"content":"                recycleBin.removePerson(s);"},{"lineNumber":189,"author":{"gitID":"Pengyuz"},"content":"                addressBook.addPerson(o);"},{"lineNumber":190,"author":{"gitID":"Pengyuz"},"content":"                isChanged \u003d false;"},{"lineNumber":191,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"Pengyuz"},"content":"        if (!isChanged) {"},{"lineNumber":194,"author":{"gitID":"Pengyuz"},"content":"            indicateAddressBookChanged();"},{"lineNumber":195,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"Pengyuz"},"content":"        indicateRecycleBinChanged();"},{"lineNumber":197,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":"    public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException {"},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":"        addressBook.sortPerson(sortType, isDescending);"},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"    public void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(targets, editedPersons);"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"        addressBook.updateListOfPerson(targets, editedPersons);"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"        indicateAddressBookChanged();"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":"    public void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"            throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(targets, editedPersons, event);"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":"        addressBook.addEvent(targets, editedPersons, event);"},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":"        EventsCenter.getInstance().post(new ScheduleUpdateEvent(getEventList()));"},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":"        indicateAddressBookChanged();"},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":"    public void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"                             ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":"            throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException {"},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(targets, editedPersons);"},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":"        addressBook.removeEvents(targets, editedPersons, toRemoveEvents);"},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":"        EventsCenter.getInstance().post(new ScheduleUpdateEvent(getEventList()));"},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"        indicateAddressBookChanged();"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"    public void sortEvents(LocalDate date) {"},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(date);"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"        addressBook.sortEvents(date);"},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"    public boolean hasEvenClashes(Event event) {"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(event);"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":"        return addressBook.hasEventClashes(event);"},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":280,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":281,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"Pengyuz"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList() {"},{"lineNumber":283,"author":{"gitID":"Pengyuz"},"content":"        return FXCollections.unmodifiableObservableList(filteredRecycle);"},{"lineNumber":284,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":290,"author":{"gitID":"ZhangH795"},"content":"        addressBook.favouriteShownFirst();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":294,"author":{"gitID":"Pengyuz"},"content":"    //@@author Pengyuz"},{"lineNumber":295,"author":{"gitID":"Pengyuz"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"Pengyuz"},"content":"    public void updateFilteredBinList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":297,"author":{"gitID":"Pengyuz"},"content":"        requireNonNull(predicate);"},{"lineNumber":298,"author":{"gitID":"Pengyuz"},"content":"        filteredRecycle.setPredicate(predicate);"},{"lineNumber":299,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"Pengyuz"},"content":"    //@@author"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":317,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":318,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 recycleBin.equals(other.recycleBin)"},{"lineNumber":319,"author":{"gitID":"Pengyuz"},"content":"                \u0026\u0026 filteredRecycle.equals(other.filteredRecycle);"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"eldriclim"},"content":"    //@@author eldriclim"},{"lineNumber":323,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":324,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"eldriclim"},"content":"     * Handle event when Event in Event list is clicked."},{"lineNumber":326,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":327,"author":{"gitID":"eldriclim"},"content":"     * Update {@code FilteredList\u003cReadOnlyPerson\u003e filteredPersons} to show members of Event upon clicking on Event."},{"lineNumber":328,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":329,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":330,"author":{"gitID":"eldriclim"},"content":"     * @see EventListPanel#setEventHandlerForSelectionChangeEvent()"},{"lineNumber":331,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"eldriclim"},"content":"    @Subscribe"},{"lineNumber":333,"author":{"gitID":"eldriclim"},"content":"    private void handleEventPanelSelectionChangedEvent(EventPanelSelectionChangedEvent event) {"},{"lineNumber":334,"author":{"gitID":"eldriclim"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":335,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":336,"author":{"gitID":"eldriclim"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":337,"author":{"gitID":"eldriclim"},"content":"        updateFilteredPersonList(p -\u003e"},{"lineNumber":338,"author":{"gitID":"eldriclim"},"content":"                event.getMemberAsArrayList().contains(p)"},{"lineNumber":339,"author":{"gitID":"eldriclim"},"content":"        );"},{"lineNumber":340,"author":{"gitID":"eldriclim"},"content":"        if (filteredPersons.isEmpty()) {"},{"lineNumber":341,"author":{"gitID":"eldriclim"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":342,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":343,"author":{"gitID":"eldriclim"},"content":"            Index firstIndex \u003d new Index(0);"},{"lineNumber":344,"author":{"gitID":"eldriclim"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(firstIndex));"},{"lineNumber":345,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":348,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":349,"author":{"gitID":"eldriclim"},"content":"     * Handle event when date in CalenderView is clicked."},{"lineNumber":350,"author":{"gitID":"eldriclim"},"content":"     * \u003cp\u003e"},{"lineNumber":351,"author":{"gitID":"eldriclim"},"content":"     * Update master UniqueEventList by running a sort with the given date as reference."},{"lineNumber":352,"author":{"gitID":"eldriclim"},"content":"     * Comparator logic and sorting details is found in {@see UniqueEventList#sort(LocalDate)}"},{"lineNumber":353,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":354,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":355,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":356,"author":{"gitID":"eldriclim"},"content":"    @Subscribe"},{"lineNumber":357,"author":{"gitID":"eldriclim"},"content":"    private void handleCalendarSelectionChangedEvent(CalendarSelectionChangedEvent event) {"},{"lineNumber":358,"author":{"gitID":"eldriclim"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":359,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":360,"author":{"gitID":"eldriclim"},"content":"        sortEvents(event.getSelectedDate());"},{"lineNumber":361,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"eldriclim"},"content":"    //@@author"},{"lineNumber":363,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":104,"ZhangH795":1,"dalessr":3,"-":123,"eldriclim":133}},{"path":"src/main/java/seedu/address/model/util/SampleRecycleUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"Pengyuz"},"content":"//@@author Pengyuz"},{"lineNumber":18,"author":{"gitID":"Pengyuz"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Pengyuz"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitID":"Pengyuz"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Pengyuz"},"content":"public class SampleRecycleUtil {"},{"lineNumber":22,"author":{"gitID":"Pengyuz"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"Pengyuz"},"content":"            return new Person[] {"},{"lineNumber":25,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"Alex Yeohre\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new HashSet\u003c\u003e(),"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new DateAdded(\"01/01/2016 11:11:53\")),"},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"Bernice Yure\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":29,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":30,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new HashSet\u003c\u003e(),"},{"lineNumber":31,"author":{"gitID":"Pengyuz"},"content":"                    new DateAdded(\"07/02/2016 12:00:01\")),"},{"lineNumber":32,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"Charlotte Oliveirore\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new HashSet\u003c\u003e(),"},{"lineNumber":34,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new DateAdded(\"01/05/2016 12:00:01\")),"},{"lineNumber":35,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"David Lire\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":36,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new HashSet\u003c\u003e(),"},{"lineNumber":37,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new DateAdded(\"15/09/2017 12:00:01\")),"},{"lineNumber":38,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"Irfan Ibrahimre\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":39,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new HashSet\u003c\u003e(),"},{"lineNumber":40,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new DateAdded(\"15/09/2017 12:01:01\")),"},{"lineNumber":41,"author":{"gitID":"Pengyuz"},"content":"                new Person(new Name(\"Roy Balakrishnanre\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new HashSet\u003c\u003e(),"},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"                    new HashSet\u003c\u003e(), new DateAdded(\"20/09/2017 12:00:01\"))"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"            };"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":46,"author":{"gitID":"Pengyuz"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":47,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":50,"author":{"gitID":"Pengyuz"},"content":"    public static ReadOnlyAddressBook getSampleRecycleBin() {"},{"lineNumber":51,"author":{"gitID":"Pengyuz"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"Pengyuz"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":53,"author":{"gitID":"Pengyuz"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":54,"author":{"gitID":"Pengyuz"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":55,"author":{"gitID":"Pengyuz"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"Pengyuz"},"content":"            return sampleAb;"},{"lineNumber":57,"author":{"gitID":"Pengyuz"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":58,"author":{"gitID":"Pengyuz"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":59,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":64,"author":{"gitID":"Pengyuz"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Pengyuz"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"Pengyuz"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"Pengyuz"},"content":"        for (String s : strings) {"},{"lineNumber":68,"author":{"gitID":"Pengyuz"},"content":"            tags.add(new Tag(s));"},{"lineNumber":69,"author":{"gitID":"Pengyuz"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":71,"author":{"gitID":"Pengyuz"},"content":"        return tags;"},{"lineNumber":72,"author":{"gitID":"Pengyuz"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":74,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":75,"author":{"gitID":"Pengyuz"},"content":"}"}],"authorContributionMap":{"Pengyuz":59,"-":10,"eldriclim":6}},{"path":"src/main/java/seedu/address/model/person/DateAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.logic.parser.exceptions.DateParseException;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":" * Guarantees: Date is valid"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"public class DateAdded {"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_DATEADDED_CONSTRAINTS \u003d"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"            \"DateAdded is in DD-MM-YYYY format, and it should not be blank\";"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_DATE_PARSE_ERROR \u003d"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"            \"Error parsing from xml to Date object.\";"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy hh:mm:ss\";"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private static final SimpleDateFormat format \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    public final Date dateAdded;"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    public DateAdded() {"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"        dateAdded \u003d new Date();"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    public DateAdded(String dateAddedString) throws IllegalValueException {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(dateAddedString);"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"            dateAdded \u003d format.parse(dateAddedString);"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"        } catch (ParseException e) {"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"            throw new DateParseException(MESSAGE_DATE_PARSE_ERROR);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"    public Date getDateObject() {"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"        return dateAdded;"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"        return format.format(dateAdded);"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof DateAdded // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 (this.dateAdded.getTime() \u003d\u003d (((DateAdded) other).dateAdded.getTime()))); // state check"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"        return dateAdded.hashCode();"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"-":6,"eldriclim":60}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"public class EventNotFoundException extends Exception {}"}],"authorContributionMap":{"eldriclim":7}},{"path":"src/main/java/seedu/address/model/event/EventDuration.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.EventOutputUtil;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":" * This Object only serves as a placeholder for UI purposes."},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":" *"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":" * @see EventTime for actual manipulation of event time"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":" * Justification:"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":" * DateTime and Duration are to be tightly-coupled,"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":" * therefore both values are placed in EventTime.java"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * The purpose of this class is to store the duration"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" * value, which is to be outputted via its toString method"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" * from its ObjectProperty binding at EventCard.java"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":" * @see seedu.address.ui.EventCard#bindListeners(Event)"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"public class EventDuration {"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private Duration eventDuration;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    public EventDuration(Duration eventDuration) {"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"        this.eventDuration \u003d eventDuration;"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    public Duration getDuration() {"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        return eventDuration;"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        return EventOutputUtil.toStringDuration(eventDuration);"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof EventDuration // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventDuration.equals(((EventDuration) other).getDuration())); // state check"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        return eventDuration.hashCode();"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":52}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleRemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEXES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"dalessr"},"content":"import seedu.address.commons.events.ui.ClearPersonListEvent;"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":" * Remove multiple Events from address book"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"public class ScheduleRemoveCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    public static final String COMMAND_WORD \u003d \"s-remove\";"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove events from the address book. \""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"            + \"Parameters: \""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_INDEXES + \"[INDEX]... \\n\""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"            + PREFIX_EVENT_INDEXES + \"1 2 3 \";"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event(s) removed: \\n%1$s\";"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    public static final String ERROR_EVENT_NOT_FOUND \u003d \"Invalid event detected.\";"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    public static final String ERROR_INVALID_INDEX \u003d \"Invalid index detected.\";"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    public static final String ERROR_FAIL_TO_UPDATE_MEMBER \u003d \"An update error has occured.\";"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    private final ArrayList\u003cIndex\u003e uniqueEventIndexes;"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    public ScheduleRemoveCommand(Set\u003cIndex\u003e eventListIndex) {"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        this.uniqueEventIndexes \u003d new ArrayList\u003c\u003e(eventListIndex);"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    public String getRemovedEventsString(ArrayList\u003cEvent\u003e removedEvents) {"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cString\u003e outputString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"        removedEvents.forEach(e -\u003e outputString.add(e.toString()));"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"        return StringUtil.multiStringPrint(outputString, \"\\n\");"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        List\u003cEvent\u003e lastShownEventList \u003d model.getEventList();"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cEvent\u003e toRemoveEvents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toUpdatePersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toReplacePersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"        for (Index index : uniqueEventIndexes) {"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownEventList.size()) {"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"                throw new CommandException(ERROR_INVALID_INDEX);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"            toRemoveEvents.add(lastShownEventList.get(index.getZeroBased()));"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"        model.getAddressBook().getPersonList().stream().filter(p -\u003e"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"                !Collections.disjoint(p.getEvents(), toRemoveEvents)).forEach(toUpdatePersons::add);"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        toUpdatePersons.forEach(p -\u003e {"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"            EditEventListPersonDescriptor toEditPerson \u003d new EditEventListPersonDescriptor("},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"                    p, toRemoveEvents);"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"            toReplacePersons.add(toEditPerson.createUpdatedPerson());"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"        });"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"            model.removeEvents(toUpdatePersons, toReplacePersons, toRemoveEvents);"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"            EventsCenter.getInstance().post(new ClearPersonListEvent());"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, getRemovedEventsString(toRemoveEvents)));"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"            //Should not reach this point"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"            throw new CommandException(ERROR_FAIL_TO_UPDATE_MEMBER);"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"            //Should not reach this point"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"        } catch (EventNotFoundException enf) {"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"            //Should not reach this point"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"            throw new CommandException(ERROR_EVENT_NOT_FOUND);"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof ScheduleRemoveCommand // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 uniqueEventIndexes.equals(((ScheduleRemoveCommand) other).uniqueEventIndexes));"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"     * Stores the details of modified person with updated event list."},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"    private static class EditEventListPersonDescriptor {"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        private Name name;"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"        private Phone phone;"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"        private Email email;"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"        private Address address;"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"        private Set\u003cEvent\u003e events;"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"        private DateAdded dateAdded;"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"        private Birthday birthday;"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"        public EditEventListPersonDescriptor(ReadOnlyPerson toCopy, ArrayList\u003cEvent\u003e toRemoveEvents) {"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"            this.name \u003d toCopy.getName();"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"            this.phone \u003d toCopy.getPhone();"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"            this.email \u003d toCopy.getEmail();"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"            this.address \u003d toCopy.getAddress();"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"            this.tags \u003d toCopy.getTags();"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"            this.dateAdded \u003d toCopy.getDateAdded();"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"            this.events \u003d createModifiableEventList(toCopy.getEvents());"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"            this.birthday \u003d toCopy.getBirthday();"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"            removeEvents(toRemoveEvents);"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"        private void removeEvents(ArrayList\u003cEvent\u003e toRemoveEvents) {"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"            toRemoveEvents.stream().filter(e -\u003e events.contains(e)).forEach(e -\u003e events.remove(e));"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"        public Set\u003cEvent\u003e createModifiableEventList(Set\u003cEvent\u003e unmodifiableEventList) {"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"            Set\u003cEvent\u003e modifiableEventList \u003d new HashSet\u003c\u003e(unmodifiableEventList);"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"            return modifiableEventList;"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":"        public Person createUpdatedPerson() {"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"            return new Person(name, birthday, phone, email, address, tags, events, dateAdded);"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"ZhangH795":3,"dalessr":1,"-":17,"eldriclim":138}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"    public DuplicateEventException() {"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"        super(\"Operation would result in duplicate event\");"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":12,"-":1}},{"path":"src/main/java/seedu/address/model/event/EventTime.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":" * Represents an Event\u0027s start time and duration in the address book."},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"public class EventTime {"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"    private final LocalDateTime eventStartTime;"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    private final Duration eventDuration;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":"    private final LocalDateTime eventEndTime;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    private Boolean isUpcoming;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"    public EventTime(LocalDateTime eventStartTime, Duration eventDuration) {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"        this.eventStartTime \u003d eventStartTime;"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"        this.eventDuration \u003d eventDuration;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"        this.eventEndTime \u003d eventStartTime.plus(eventDuration);"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        isUpcoming \u003d LocalDateTime.now().isBefore(this.eventStartTime);"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"     * Returns true if the Event is an upcoming event."},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"     * @return boolean value of isUpcoming"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"    public boolean isUpcoming() {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        if (LocalDateTime.now().isBefore(eventStartTime)) {"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"            isUpcoming \u003d Boolean.TRUE;"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"            return isUpcoming;"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"            isUpcoming \u003d Boolean.FALSE;"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"            return isUpcoming;"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    public LocalDateTime getStart() {"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        return eventStartTime;"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    public LocalDateTime getEnd() {"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        return eventEndTime;"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"        return DateTimeUtil.parseLocalDateTimeToString(eventStartTime);"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof EventTime // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventStartTime.isEqual(((EventTime) other).eventStartTime)"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventDuration.equals(((EventTime) other).eventDuration)); // state check"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"        return Objects.hash(eventStartTime, eventDuration);"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":70}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{ASCII}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Validates given tag name."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangH795":1,"-":57}},{"path":"src/main/java/seedu/address/model/event/EventName.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":" * Represents an Event\u0027s name in the address book."},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":" * Guarantees: valid as declared in {@link #isValidName(String)}"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"public class EventName {"},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"    public static final String MESSAGE_EVENTNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"    public static final String EVENTNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":"    public final String fullName;"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"     * Creates EventName with a validated name."},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    public EventName(String name) throws IllegalValueException {"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(name);"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"            throw new IllegalValueException(MESSAGE_EVENTNAME_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"     * Returns true if a given string is a valid event name."},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"     * @param test String to be tested"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"     * @return true if valid"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        return test.matches(EVENTNAME_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof EventName // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.fullName.equals(((EventName) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":55,"-":5}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.EventOutputUtil;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":13,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":" * Represents a Event in the address book, accepts an event with no members."},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" * Guarantees: validity upon creation; potential errors handled in UniqueEventList"},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" *"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" * @see UniqueEventList"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"public class Event {"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cMemberList\u003e members;"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cEventName\u003e eventName;"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cEventTime\u003e eventTime;"},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cEventDuration\u003e eventDuration;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cString\u003e eventStatus \u003d new SimpleObjectProperty\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    private ObjectProperty\u003cString\u003e eventStatusStyle \u003d new SimpleObjectProperty\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":"    public Event(MemberList members, EventName eventName, EventTime eventStartTime, EventDuration eventDuration) {"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(members);"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(eventName);"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(eventStartTime);"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(eventDuration);"},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"        this.members \u003d new SimpleObjectProperty\u003c\u003e(members);"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        this.eventName \u003d new SimpleObjectProperty\u003c\u003e(eventName);"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"        this.eventTime \u003d new SimpleObjectProperty\u003c\u003e(eventStartTime);"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":"        this.eventDuration \u003d new SimpleObjectProperty\u003c\u003e(eventDuration);"},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"        setEventStatusDefaultState();"},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"        assert getEventTime().getStart().plus(getEventDuration().getDuration()).equals("},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"                getEventTime().getEnd());"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    public Event(Event source) {"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"        this(source.getMemberList(), source.getEventName(), source.getEventTime(), source.getEventDuration());"},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"    public void setEventName(EventName eventName) {"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        this.eventName.set(requireNonNull(eventName));"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cEventName\u003e eventNameProperty() {"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        return eventName;"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    public EventName getEventName() {"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        return eventName.get();"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    public void setEventTime(EventTime eventTime) {"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        this.eventTime.set(requireNonNull(eventTime));"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cEventTime\u003e eventTimeProperty() {"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"        return eventTime;"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"    public EventTime getEventTime() {"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        return eventTime.get();"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    public void setEventDuration(EventDuration eventDuration) {"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"        this.eventDuration.set(requireNonNull(eventDuration));"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cEventDuration\u003e eventDurationProperty() {"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"        return eventDuration;"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"    public EventDuration getEventDuration() {"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"        return eventDuration.get();"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"    public void setMemberList(MemberList members) {"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"        this.members.set(requireNonNull(members));"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cMemberList\u003e eventMemberListProperty() {"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"        return members;"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"    public MemberList getMemberList() {"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"        return members.get();"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cString\u003e eventStatusProperty() {"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"        return eventStatus;"},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"    public String getEventStatus() {"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"        return eventStatus.get();"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"    public void setEventStatusDefaultState() {"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"        if (DateTimeUtil.containsReferenceDate(this, LocalDate.now())) {"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"            eventStatus.setValue(\"Today\");"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"            eventStatusStyle.setValue(\"-fx-background-color: #fd720f\");"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"        } else if (eventTime.get().isUpcoming()) {"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"            eventStatus.setValue(\"Upcoming\");"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"            eventStatusStyle.setValue(\"-fx-background-color: #009e73\");"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        } else {"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"            eventStatus.setValue(\"Past\");"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"            eventStatusStyle.setValue(\"-fx-background-color: #a31621\");"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"     * Reset name and style of all status label"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"     * @param date"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"    public void updateEventStatusSelection(LocalDate date) {"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"        setEventStatusDefaultState();"},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"        if (DateTimeUtil.containsReferenceDate(this, date)) {"},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"            eventStatus.setValue(\"Selected\");"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"            eventStatusStyle.setValue(\"-fx-background-color: #b91372\");"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"    public ObjectProperty\u003cString\u003e eventStatusStyleProperty() {"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        return eventStatusStyle;"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":"    public String getEventStatusStyle() {"},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"        return eventStatusStyle.get();"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"     * Returns true if Event is equal."},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"     * @param other"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"     * @return true if all attributes are similar; false if otherwise"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof Event // instanceof handles nulls"},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventName.get().equals(((Event) other).getEventName())"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventTime.get().equals(((Event) other).getEventTime())"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.eventDuration.get().equals(((Event) other).getEventDuration())); // state check"},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":"        return Objects.hash(getEventName(), getEventTime(), getEventDuration());"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":"     * Format state as text for viewing."},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"        return EventOutputUtil.toStringEvent(getEventName(), getEventTime(), getEventDuration(), getMemberList());"},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":166,"-":6}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.person.exceptions.EmptyListException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData, ReadOnlyAddressBook newRecyclebin);"},{"lineNumber":27,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":28,"author":{"gitID":"Pengyuz"},"content":"    /** Clear existing backing Recyclebin and replace with the provided new data*/"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void resetRecyclebin(ReadOnlyAddressBook newData);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getRecycleBin();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void deletePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void deleteBinPerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":42,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":43,"author":{"gitID":"Pengyuz"},"content":"    /** Restore the given person*/"},{"lineNumber":44,"author":{"gitID":"Pengyuz"},"content":"    void restorePerson(ReadOnlyPerson perosn) throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"Pengyuz"},"content":"    void restorePerson(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    /** Sorts the list of persons */"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"    void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortType, boolean isDescending) throws EmptyListException;"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":62,"author":{"gitID":"Pengyuz"},"content":""},{"lineNumber":63,"author":{"gitID":"Pengyuz"},"content":"    /** Returns an unmodifiable view of the filtered recyclebin list*/"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getRecycleBinPersonList();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    /** Returns an unmodifiable view of the upcoming event list */"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    void updateFilteredBinList (Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"     * Replaces the given list of persons {@code target} with the list of edited persons{@code editedPerson}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"    void updateListOfPerson(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons)"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"     * Adds an event to master UniqueEventList."},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"     * Replace the list of targets with editedPersons to update the UniqueEventList and UniquePersonList."},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"     * @param targets"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"     * @param editedPersons"},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicateEventException"},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":"    void addEvent(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons, Event event)"},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        throws DuplicateEventException, DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"     * Remove event(s) from master UniqueEventList."},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":"     * Replace the list of targets with editedPersons to update the UniqueEventList and UniquePersonList."},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"     * @param targets"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":"     * @param editedPersons"},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":"     * @param toRemoveEvents"},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"     * @throws EventNotFoundException"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"    void removeEvents(ArrayList\u003cReadOnlyPerson\u003e targets, ArrayList\u003cReadOnlyPerson\u003e editedPersons,"},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"                      ArrayList\u003cEvent\u003e toRemoveEvents)"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"            throws DuplicatePersonException, PersonNotFoundException, EventNotFoundException;"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"     * Sort list of Events based on the the given date."},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"     * Comparator logic and sorting details is found in {@code UniquePersonList#sort}"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"     * @param date"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"    void sortEvents(LocalDate date);"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":"     * Checks if there exist a clash between list of events and the given event."},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"     * @param event"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":"     * @return true if a clash exist, otherwise return false"},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"    boolean hasEvenClashes(Event event);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Pengyuz":8,"-":60,"eldriclim":62}},{"path":"src/main/java/seedu/address/model/tag/TagMatchingKeywordPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangH795"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":3,"author":{"gitID":"ZhangH795"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"ZhangH795"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"ZhangH795"},"content":"//@@author ZhangH795"},{"lineNumber":8,"author":{"gitID":"ZhangH795"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZhangH795"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches keyword given."},{"lineNumber":10,"author":{"gitID":"ZhangH795"},"content":" * If looseFind is true, the predicate will compare substrings of tagName and keyword"},{"lineNumber":11,"author":{"gitID":"ZhangH795"},"content":" * Otherwise, the predicate will compare the exact word"},{"lineNumber":12,"author":{"gitID":"ZhangH795"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZhangH795"},"content":"public class TagMatchingKeywordPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"ZhangH795"},"content":"    private final String keyword;"},{"lineNumber":15,"author":{"gitID":"ZhangH795"},"content":"    private final boolean looseFind;"},{"lineNumber":16,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangH795"},"content":"    public TagMatchingKeywordPredicate(String keyword, boolean looseFind) {"},{"lineNumber":18,"author":{"gitID":"ZhangH795"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":19,"author":{"gitID":"ZhangH795"},"content":"        this.looseFind \u003d looseFind;"},{"lineNumber":20,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"ZhangH795"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":24,"author":{"gitID":"ZhangH795"},"content":"        Set\u003cTag\u003e tagList \u003d person.getTags();"},{"lineNumber":25,"author":{"gitID":"ZhangH795"},"content":"        if (keyword.trim().isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"ZhangH795"},"content":"            return false;"},{"lineNumber":27,"author":{"gitID":"ZhangH795"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"ZhangH795"},"content":"            for (Tag tag : tagList) {"},{"lineNumber":29,"author":{"gitID":"ZhangH795"},"content":"                String current \u003d tag.tagName;"},{"lineNumber":30,"author":{"gitID":"ZhangH795"},"content":"                if (current.equals(keyword)) {"},{"lineNumber":31,"author":{"gitID":"ZhangH795"},"content":"                    return true;"},{"lineNumber":32,"author":{"gitID":"ZhangH795"},"content":"                } else if (looseFind \u0026\u0026 (current.toLowerCase().contains(keyword.toLowerCase())"},{"lineNumber":33,"author":{"gitID":"ZhangH795"},"content":"                        || keyword.toLowerCase().contains(current.toLowerCase()))) {"},{"lineNumber":34,"author":{"gitID":"ZhangH795"},"content":"                    return true;"},{"lineNumber":35,"author":{"gitID":"ZhangH795"},"content":"                }"},{"lineNumber":36,"author":{"gitID":"ZhangH795"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"ZhangH795"},"content":"            return false;"},{"lineNumber":38,"author":{"gitID":"ZhangH795"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangH795"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"ZhangH795"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"ZhangH795"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"ZhangH795"},"content":"                || (other instanceof TagMatchingKeywordPredicate // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"ZhangH795"},"content":"                \u0026\u0026 this.keyword.equalsIgnoreCase(((TagMatchingKeywordPredicate) other).keyword)); // state check"},{"lineNumber":46,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZhangH795"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangH795"},"content":"    public String getKeyword() {"},{"lineNumber":49,"author":{"gitID":"ZhangH795"},"content":"        return keyword;"},{"lineNumber":50,"author":{"gitID":"ZhangH795"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ZhangH795"},"content":"}"}],"authorContributionMap":{"ZhangH795":50,"-":1}},{"path":"src/main/java/seedu/address/model/event/MemberList.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":10,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.EventOutputUtil;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":15,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":16,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"eldriclim"},"content":" * A list of members of a given event that enforces uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"eldriclim"},"content":" * Accept an empty list"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":" *"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":" * @see ReadOnlyPerson#equals(Object)"},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"public class MemberList {"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e members;"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":"    public MemberList() {"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":"        members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":"    public MemberList(ArrayList\u003cReadOnlyPerson\u003e members) {"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(members);"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"        CollectionUtil.elementsAreUnique(members);"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"        this.members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":"        this.members.addAll(members);"},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"        this.members.sort((o1, o2) -\u003e o1.getName().toString().compareToIgnoreCase(o2.getName().toString()));"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"     * Returns a read-only list of member."},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"     * @return an unmodifiable List of members"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":"    public List\u003cReadOnlyPerson\u003e asReadOnlyMemberList() {"},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"        ArrayList\u003cReadOnlyPerson\u003e readOnlyList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"        readOnlyList.addAll(members);"},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"        return Collections.unmodifiableList(readOnlyList);"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":"     * Returns true if given person exist in member list."},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":"     * @param toFind"},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"     * @return returns true if success; false if not found"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":"    public boolean contains(ReadOnlyPerson toFind) {"},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(toFind);"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"        return members.contains(toFind);"},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    public Boolean isEmpty() {"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        return members.isEmpty();"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"        return EventOutputUtil.toStringMembers(members);"},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof MemberList // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.members.equals(((MemberList) other).asReadOnlyMemberList())); // state check"},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"        return members.hashCode();"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":77,"-":9}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"eldriclim"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"eldriclim"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"eldriclim"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":11,"author":{"gitID":"eldriclim"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"eldriclim"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitID":"eldriclim"},"content":"import seedu.address.commons.util.DateTimeUtil;"},{"lineNumber":20,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":21,"author":{"gitID":"eldriclim"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":22,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":23,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":24,"author":{"gitID":"eldriclim"},"content":"//@@author eldriclim"},{"lineNumber":25,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":26,"author":{"gitID":"eldriclim"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"eldriclim"},"content":" * A list of events that enforces no nulls and uniqueness between its elements."},{"lineNumber":28,"author":{"gitID":"eldriclim"},"content":" * Ensures that there is no overlap of events in the list"},{"lineNumber":29,"author":{"gitID":"eldriclim"},"content":" * \u003cp\u003e"},{"lineNumber":30,"author":{"gitID":"eldriclim"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":31,"author":{"gitID":"eldriclim"},"content":" *"},{"lineNumber":32,"author":{"gitID":"eldriclim"},"content":" * @see Event#equals(Object)"},{"lineNumber":33,"author":{"gitID":"eldriclim"},"content":" */"},{"lineNumber":34,"author":{"gitID":"eldriclim"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":35,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":36,"author":{"gitID":"eldriclim"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":37,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":38,"author":{"gitID":"eldriclim"},"content":"    //used by asObservableList()"},{"lineNumber":39,"author":{"gitID":"eldriclim"},"content":"    private final ObservableList\u003cEvent\u003e mappedList \u003d EasyBind.map(internalList, (event) -\u003e event);"},{"lineNumber":40,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":41,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"eldriclim"},"content":"     * Constructs empty UniqueEventList."},{"lineNumber":43,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"eldriclim"},"content":"    public UniqueEventList() {"},{"lineNumber":45,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":47,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"eldriclim"},"content":"     * Creates a UniqueEventList using given tags."},{"lineNumber":49,"author":{"gitID":"eldriclim"},"content":"     * Enforces no nulls."},{"lineNumber":50,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"eldriclim"},"content":"    public UniqueEventList(Set\u003cEvent\u003e events) {"},{"lineNumber":52,"author":{"gitID":"eldriclim"},"content":"        requireAllNonNull(events);"},{"lineNumber":53,"author":{"gitID":"eldriclim"},"content":"        internalList.addAll(events);"},{"lineNumber":54,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":55,"author":{"gitID":"eldriclim"},"content":"        sort(LocalDate.now());"},{"lineNumber":56,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":57,"author":{"gitID":"eldriclim"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":60,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"eldriclim"},"content":"     * Returns all event in this list as a Set."},{"lineNumber":62,"author":{"gitID":"eldriclim"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":63,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"eldriclim"},"content":"    public Set\u003cEvent\u003e toSet() {"},{"lineNumber":65,"author":{"gitID":"eldriclim"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":66,"author":{"gitID":"eldriclim"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":67,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":69,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"eldriclim"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":71,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"eldriclim"},"content":"    public void mergeFrom(UniqueEventList from) {"},{"lineNumber":73,"author":{"gitID":"eldriclim"},"content":"        final Set\u003cEvent\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":74,"author":{"gitID":"eldriclim"},"content":"        from.internalList.stream()"},{"lineNumber":75,"author":{"gitID":"eldriclim"},"content":"                .filter(event -\u003e !alreadyInside.contains(event))"},{"lineNumber":76,"author":{"gitID":"eldriclim"},"content":"                .forEach(internalList::add);"},{"lineNumber":77,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":78,"author":{"gitID":"eldriclim"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":79,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":81,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":82,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"eldriclim"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":84,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"eldriclim"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":86,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(toCheck);"},{"lineNumber":87,"author":{"gitID":"eldriclim"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":88,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":90,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"eldriclim"},"content":"     * Checks if event clashes exist and adds an event to the list."},{"lineNumber":92,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicateEventException if the event to add is a duplicate of an existing event in the list."},{"lineNumber":94,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"eldriclim"},"content":"    public void add(Event toAdd) throws DuplicateEventException {"},{"lineNumber":96,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(toAdd);"},{"lineNumber":97,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":98,"author":{"gitID":"eldriclim"},"content":"        if (contains(toAdd)) {"},{"lineNumber":99,"author":{"gitID":"eldriclim"},"content":"            throw new DuplicateEventException();"},{"lineNumber":100,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"eldriclim"},"content":"        internalList.add(new Event(toAdd));"},{"lineNumber":102,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":103,"author":{"gitID":"eldriclim"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":104,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":106,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":107,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"eldriclim"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":109,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"eldriclim"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":111,"author":{"gitID":"eldriclim"},"content":"     * @throws EventNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":112,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"eldriclim"},"content":"    public void setEvent(Event target, Event editedEvent) throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":114,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":115,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":116,"author":{"gitID":"eldriclim"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":117,"author":{"gitID":"eldriclim"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":118,"author":{"gitID":"eldriclim"},"content":"            throw new EventNotFoundException();"},{"lineNumber":119,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":121,"author":{"gitID":"eldriclim"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":122,"author":{"gitID":"eldriclim"},"content":"            throw new DuplicateEventException();"},{"lineNumber":123,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":125,"author":{"gitID":"eldriclim"},"content":"        internalList.set(index, new Event(editedEvent));"},{"lineNumber":126,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":128,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"eldriclim"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":130,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":131,"author":{"gitID":"eldriclim"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":132,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"eldriclim"},"content":"    public boolean remove(Event toRemove) throws EventNotFoundException {"},{"lineNumber":134,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(toRemove);"},{"lineNumber":135,"author":{"gitID":"eldriclim"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":136,"author":{"gitID":"eldriclim"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":137,"author":{"gitID":"eldriclim"},"content":"            throw new EventNotFoundException();"},{"lineNumber":138,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"eldriclim"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":140,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":142,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"eldriclim"},"content":"     * Checks for event clashes when events of the same date is found."},{"lineNumber":144,"author":{"gitID":"eldriclim"},"content":"     *"},{"lineNumber":145,"author":{"gitID":"eldriclim"},"content":"     * @param toCheck"},{"lineNumber":146,"author":{"gitID":"eldriclim"},"content":"     * @return true when clash exist; else return false"},{"lineNumber":147,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"eldriclim"},"content":"    public boolean hasClashes(Event toCheck) {"},{"lineNumber":149,"author":{"gitID":"eldriclim"},"content":"        for (Event e : internalList) {"},{"lineNumber":150,"author":{"gitID":"eldriclim"},"content":"            if (DateTimeUtil.checkEventClash(toCheck, e)) {"},{"lineNumber":151,"author":{"gitID":"eldriclim"},"content":"                return true;"},{"lineNumber":152,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":155,"author":{"gitID":"eldriclim"},"content":"        return false;"},{"lineNumber":156,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":158,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"eldriclim"},"content":"     * Events from selected date always appears at the top, followed by upcoming"},{"lineNumber":160,"author":{"gitID":"eldriclim"},"content":"     * events then past events. Within the three different groups of Events,"},{"lineNumber":161,"author":{"gitID":"eldriclim"},"content":"     * namely selected date, upcoming events and past events, the events will"},{"lineNumber":162,"author":{"gitID":"eldriclim"},"content":"     * be sorted by their starting time in ascending order, and suppose Events"},{"lineNumber":163,"author":{"gitID":"eldriclim"},"content":"     * share same starting time shorter events will appear first."},{"lineNumber":164,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"eldriclim"},"content":"    public void sort(LocalDate selectedDate) {"},{"lineNumber":166,"author":{"gitID":"eldriclim"},"content":"        requireNonNull(selectedDate);"},{"lineNumber":167,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":168,"author":{"gitID":"eldriclim"},"content":"        internalList.sort(new Comparator\u003cEvent\u003e() {"},{"lineNumber":169,"author":{"gitID":"eldriclim"},"content":"            @Override"},{"lineNumber":170,"author":{"gitID":"eldriclim"},"content":"            public int compare(Event o1, Event o2) {"},{"lineNumber":171,"author":{"gitID":"eldriclim"},"content":"                LocalDateTime today \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":172,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":173,"author":{"gitID":"eldriclim"},"content":"                //Priority 1: This section pushes ongoing events to top of list (with reference to selected date)"},{"lineNumber":174,"author":{"gitID":"eldriclim"},"content":"                if (DateTimeUtil.containsReferenceDate(o1, selectedDate)"},{"lineNumber":175,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 !DateTimeUtil.containsReferenceDate(o2, selectedDate)) {"},{"lineNumber":176,"author":{"gitID":"eldriclim"},"content":"                    return -1;"},{"lineNumber":177,"author":{"gitID":"eldriclim"},"content":"                } else if (!DateTimeUtil.containsReferenceDate(o1, selectedDate)"},{"lineNumber":178,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 DateTimeUtil.containsReferenceDate(o2, selectedDate)) {"},{"lineNumber":179,"author":{"gitID":"eldriclim"},"content":"                    return 1;"},{"lineNumber":180,"author":{"gitID":"eldriclim"},"content":"                } else if (DateTimeUtil.containsReferenceDate(o1, selectedDate)"},{"lineNumber":181,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 DateTimeUtil.containsReferenceDate(o2, selectedDate)) {"},{"lineNumber":182,"author":{"gitID":"eldriclim"},"content":"                    if (o1.getEventTime().getStart().isBefore(o2.getEventTime().getStart())) {"},{"lineNumber":183,"author":{"gitID":"eldriclim"},"content":"                        return -1;"},{"lineNumber":184,"author":{"gitID":"eldriclim"},"content":"                    } else if (o2.getEventTime().getStart().isBefore(o1.getEventTime().getStart())) {"},{"lineNumber":185,"author":{"gitID":"eldriclim"},"content":"                        return 1;"},{"lineNumber":186,"author":{"gitID":"eldriclim"},"content":"                    } else {"},{"lineNumber":187,"author":{"gitID":"eldriclim"},"content":"                        return o1.getEventDuration().getDuration().compareTo(o2.getEventDuration().getDuration());"},{"lineNumber":188,"author":{"gitID":"eldriclim"},"content":"                    }"},{"lineNumber":189,"author":{"gitID":"eldriclim"},"content":"                }"},{"lineNumber":190,"author":{"gitID":"eldriclim"},"content":"                //End of Priority 1"},{"lineNumber":191,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":192,"author":{"gitID":"eldriclim"},"content":"                //Priority 2: This section pushes ongoing events to top of list (with reference to today)"},{"lineNumber":193,"author":{"gitID":"eldriclim"},"content":"                if (DateTimeUtil.containsReferenceDate(o1, today.toLocalDate())"},{"lineNumber":194,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 !DateTimeUtil.containsReferenceDate(o2, today.toLocalDate())) {"},{"lineNumber":195,"author":{"gitID":"eldriclim"},"content":"                    return -1;"},{"lineNumber":196,"author":{"gitID":"eldriclim"},"content":"                } else if (!DateTimeUtil.containsReferenceDate(o1, today.toLocalDate())"},{"lineNumber":197,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 DateTimeUtil.containsReferenceDate(o2, today.toLocalDate())) {"},{"lineNumber":198,"author":{"gitID":"eldriclim"},"content":"                    return 1;"},{"lineNumber":199,"author":{"gitID":"eldriclim"},"content":"                } else if (DateTimeUtil.containsReferenceDate(o1, today.toLocalDate())"},{"lineNumber":200,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 DateTimeUtil.containsReferenceDate(o2, today.toLocalDate())) {"},{"lineNumber":201,"author":{"gitID":"eldriclim"},"content":"                    if (o1.getEventTime().getStart().isBefore(o2.getEventTime().getStart())) {"},{"lineNumber":202,"author":{"gitID":"eldriclim"},"content":"                        return -1;"},{"lineNumber":203,"author":{"gitID":"eldriclim"},"content":"                    } else if (o2.getEventTime().getStart().isBefore(o1.getEventTime().getStart())) {"},{"lineNumber":204,"author":{"gitID":"eldriclim"},"content":"                        return 1;"},{"lineNumber":205,"author":{"gitID":"eldriclim"},"content":"                    } else {"},{"lineNumber":206,"author":{"gitID":"eldriclim"},"content":"                        return o1.getEventDuration().getDuration().compareTo(o2.getEventDuration().getDuration());"},{"lineNumber":207,"author":{"gitID":"eldriclim"},"content":"                    }"},{"lineNumber":208,"author":{"gitID":"eldriclim"},"content":"                }"},{"lineNumber":209,"author":{"gitID":"eldriclim"},"content":"                //End of Priority 2"},{"lineNumber":210,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":211,"author":{"gitID":"eldriclim"},"content":"                //Priority 3: This section pushes upcoming events above past events"},{"lineNumber":212,"author":{"gitID":"eldriclim"},"content":"                if (o1.getEventTime().getStart().isAfter(today)"},{"lineNumber":213,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 !o2.getEventTime().getStart().isAfter(today)) {"},{"lineNumber":214,"author":{"gitID":"eldriclim"},"content":"                    return -1;"},{"lineNumber":215,"author":{"gitID":"eldriclim"},"content":"                } else if (o2.getEventTime().getStart().isAfter(today)"},{"lineNumber":216,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 !o1.getEventTime().getStart().isAfter(today)) {"},{"lineNumber":217,"author":{"gitID":"eldriclim"},"content":"                    return 1;"},{"lineNumber":218,"author":{"gitID":"eldriclim"},"content":"                } else if (o1.getEventTime().getStart().isAfter(today)"},{"lineNumber":219,"author":{"gitID":"eldriclim"},"content":"                        \u0026\u0026 o2.getEventTime().getStart().isAfter(today)) {"},{"lineNumber":220,"author":{"gitID":"eldriclim"},"content":"                    if (o1.getEventTime().getStart().isBefore(o2.getEventTime().getStart())) {"},{"lineNumber":221,"author":{"gitID":"eldriclim"},"content":"                        return -1;"},{"lineNumber":222,"author":{"gitID":"eldriclim"},"content":"                    } else if (o2.getEventTime().getStart().isBefore(o1.getEventTime().getStart())) {"},{"lineNumber":223,"author":{"gitID":"eldriclim"},"content":"                        return 1;"},{"lineNumber":224,"author":{"gitID":"eldriclim"},"content":"                    } else {"},{"lineNumber":225,"author":{"gitID":"eldriclim"},"content":"                        return o1.getEventDuration().getDuration().compareTo(o2.getEventDuration().getDuration());"},{"lineNumber":226,"author":{"gitID":"eldriclim"},"content":"                    }"},{"lineNumber":227,"author":{"gitID":"eldriclim"},"content":"                }"},{"lineNumber":228,"author":{"gitID":"eldriclim"},"content":"                //End of Priority 3"},{"lineNumber":229,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":230,"author":{"gitID":"eldriclim"},"content":"                //Priority 4: This section handles the leftover past events"},{"lineNumber":231,"author":{"gitID":"eldriclim"},"content":"                if (o1.getEventTime().getStart().isBefore(o2.getEventTime().getStart())) {"},{"lineNumber":232,"author":{"gitID":"eldriclim"},"content":"                    return -1;"},{"lineNumber":233,"author":{"gitID":"eldriclim"},"content":"                } else if (o2.getEventTime().getStart().isBefore(o1.getEventTime().getStart())) {"},{"lineNumber":234,"author":{"gitID":"eldriclim"},"content":"                    return 1;"},{"lineNumber":235,"author":{"gitID":"eldriclim"},"content":"                } else {"},{"lineNumber":236,"author":{"gitID":"eldriclim"},"content":"                    return o1.getEventDuration().getDuration().compareTo(o2.getEventDuration().getDuration());"},{"lineNumber":237,"author":{"gitID":"eldriclim"},"content":"                }"},{"lineNumber":238,"author":{"gitID":"eldriclim"},"content":"                //End of Priority 4"},{"lineNumber":239,"author":{"gitID":"eldriclim"},"content":"            }"},{"lineNumber":240,"author":{"gitID":"eldriclim"},"content":"        });"},{"lineNumber":241,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":243,"author":{"gitID":"eldriclim"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":244,"author":{"gitID":"eldriclim"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":245,"author":{"gitID":"eldriclim"},"content":"        sort(LocalDate.now());"},{"lineNumber":246,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":248,"author":{"gitID":"eldriclim"},"content":"    public void setEvents(List\u003c? extends Event\u003e events) throws DuplicateEventException {"},{"lineNumber":249,"author":{"gitID":"eldriclim"},"content":"        final UniqueEventList replacement \u003d new UniqueEventList();"},{"lineNumber":250,"author":{"gitID":"eldriclim"},"content":"        for (final Event event : events) {"},{"lineNumber":251,"author":{"gitID":"eldriclim"},"content":"            replacement.add(new Event(event));"},{"lineNumber":252,"author":{"gitID":"eldriclim"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"eldriclim"},"content":"        setEvents(replacement);"},{"lineNumber":254,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":255,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":257,"author":{"gitID":"eldriclim"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"eldriclim"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":259,"author":{"gitID":"eldriclim"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"eldriclim"},"content":"    public ObservableList\u003cEvent\u003e asObservableList() {"},{"lineNumber":261,"author":{"gitID":"eldriclim"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":262,"author":{"gitID":"eldriclim"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":263,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":265,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":266,"author":{"gitID":"eldriclim"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":267,"author":{"gitID":"eldriclim"},"content":"        return internalList.iterator();"},{"lineNumber":268,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":270,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"eldriclim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":272,"author":{"gitID":"eldriclim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":273,"author":{"gitID":"eldriclim"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":274,"author":{"gitID":"eldriclim"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":275,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"eldriclim"},"content":""},{"lineNumber":277,"author":{"gitID":"eldriclim"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"eldriclim"},"content":"    public int hashCode() {"},{"lineNumber":279,"author":{"gitID":"eldriclim"},"content":"        return internalList.hashCode();"},{"lineNumber":280,"author":{"gitID":"eldriclim"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"eldriclim"},"content":"}"}],"authorContributionMap":{"eldriclim":269,"-":12}}]
