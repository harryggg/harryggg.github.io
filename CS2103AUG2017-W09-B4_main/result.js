var resultJson = [{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":96,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"Procrastinatus"},"content":"     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"        statusBarFooterHandle.rememberTotalPersons();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":198,"author":{"gitID":"cjianhui"},"content":"        assertFalse(handle.isTotalPersonsChanged());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":231,"cjianhui":2}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cReadOnlyPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"    private static final JumpToPersonListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"            new JumpToPersonListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            ReadOnlyPerson expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"    public void handleJumpToPersonListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":4,"-":55}},{"path":"src/test/java/seedu/address/ui/GroupCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import static seedu.address.testutil.TypicalGroups.ALICE_GROUP;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGroup;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"import guitests.guihandles.GroupCardHandle;"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"public class GroupCardTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    public void display() {"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"        GroupCard groupCard \u003d new GroupCard(group, 1);"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"        uiPartRule.setUiPart(groupCard);"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"        assertCardDisplay(groupCard, group, 1);"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"        Group group2 \u003d new GroupBuilder().build();"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"        groupCard \u003d new GroupCard(group2, 2);"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"        uiPartRule.setUiPart(groupCard);"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"        assertCardDisplay(groupCard, group2, 2);"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"        // changes made to Group reflects on card"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"            group2.setGroupName(ALICE_GROUP.getName());"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"        });"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"        assertCardDisplay(groupCard, group2, 2);"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"        GroupCard groupCard \u003d new GroupCard(group, 0);"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"        // same group, same index -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"        GroupCard copy \u003d new GroupCard(group, 0);"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(groupCard.equals(copy));"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(groupCard.equals(groupCard));"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(groupCard \u003d\u003d null);"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(groupCard.equals(0));"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"        // different group, same index -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"        Group differentGroup \u003d new GroupBuilder().withName(\"differentName\").build();"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(groupCard.equals(new GroupCard(differentGroup, 0)));"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"        // same group, different index -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(groupCard.equals(new GroupCard(group, 1)));"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"     * Asserts that {@code groupCard} displays the details of {@code expectedGroup} correctly and matches"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"     * {@code expectedId}."},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"    private void assertCardDisplay(GroupCard groupCard, ReadOnlyGroup expectedGroup, int expectedId) {"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"        GroupCardHandle groupCardHandle \u003d new GroupCardHandle(groupCard.getRoot());"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":"        // verify id is displayed correctly"},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", groupCardHandle.getId());"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":"        // verify group details are displayed correctly"},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"        assertCardDisplaysGroup(expectedGroup, groupCardHandle);"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":73,"-":6,"cjianhui":1}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersonField.ADDRESS_DOMAIN_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersonField.NAME_DOMAIN_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersonField.PHONE_DOMAIN_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":34,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces, trailing spaces and name domain"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + NAME_DOMAIN_TAG + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":80,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"content":"        //@@author jianglingshuo"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Procrastinatus"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 1 persons found */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + PHONE_DOMAIN_TAG + DANIEL.getPhone().value;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 3 persons found */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + ADDRESS_DOMAIN_TAG + DANIEL.getAddress().value;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, GEORGE, CARL);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"content":"        //@@author"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":187,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Procrastinatus":1,"-":210}},{"path":"src/test/java/seedu/address/ui/GroupListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":"import static seedu.address.testutil.TypicalGroups.getTypicalGroups;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GROUP;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGroup;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"import guitests.guihandles.GroupCardHandle;"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"import guitests.guihandles.GroupListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"public class GroupListPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"    private static final ObservableList\u003cReadOnlyGroup\u003e TYPICAL_GROUPS \u003d"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"            FXCollections.observableList(getTypicalGroups());"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    private static final JumpToGroupListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"            new JumpToGroupListRequestEvent(INDEX_SECOND_GROUP);"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    private GroupListPanelHandle groupListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"        GroupListPanel groupListPanel \u003d new GroupListPanel(TYPICAL_GROUPS);"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"        uiPartRule.setUiPart(groupListPanel);"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"        groupListPanelHandle \u003d new GroupListPanelHandle(getChildNode(groupListPanel.getRoot(),"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"                GroupListPanelHandle.GROUP_LIST_VIEW_ID));"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"    public void display() {"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_GROUPS.size(); i++) {"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"            groupListPanelHandle.navigateToCard(TYPICAL_GROUPS.get(i));"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"            ReadOnlyGroup expectedGroup \u003d TYPICAL_GROUPS.get(i);"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"            GroupCardHandle actualCard \u003d groupListPanelHandle.getGroupCardHandle(i);"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"            assertCardDisplaysGroup(expectedGroup, actualCard);"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"    public void handleJumpToGroupListRequestEvent() {"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"        GroupCardHandle expectedCard \u003d groupListPanelHandle.getGroupCardHandle(INDEX_SECOND_GROUP.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"        GroupCardHandle selectedCard \u003d groupListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":47,"-":11,"cjianhui":2}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    private static final String[] CSS_FILES \u003d {\"view/UITheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":28}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":"import guitests.guihandles.GroupCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}, for groups."},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    public static void assertCardEquals(GroupCardHandle expectedCard, GroupCardHandle actualCard) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"                actualCard.getTags());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedGroup}."},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"    public static void assertCardDisplaysGroup(ReadOnlyGroup expectedPerson, GroupCardHandle actualCard) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":17,"-":66,"cjianhui":1}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"        //@@author Procrastinatus"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(1000.0, 600.0, (int) x, (int) y));"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"        //@@author"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":122}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"        String defaultConfigAsString \u003d \"App title : Bamboo\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":31}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    private static final int STUB_TOTAL_PERSONS \u003d 0;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    private static final String EXPECTED_TOTAL_PERSONS \u003d STUB_TOTAL_PERSONS + \" person(s) total\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, STUB_TOTAL_PERSONS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL, TOTAL_PERSONS_INITIAL);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"                EXPECTED_TOTAL_PERSONS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"                                        String expectedTotalPersons) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        assertEquals(expectedTotalPersons, statusBarFooterHandle.getTotalPersons());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":70,"cjianhui":10}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, \" 1\", new SelectCommand(INDEX_FIRST_PERSON, false));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":28,"cjianhui":1}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":80,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":181,"author":{"gitID":"cjianhui"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":184,"author":{"gitID":"cjianhui"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":189,"author":{"gitID":"cjianhui"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":277,"cjianhui":6}},{"path":"src/test/java/seedu/address/logic/parser/AddFavouriteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddFavouriteCommand;"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"public class AddFavouriteCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"    private AddFavouriteCommandParser parser \u003d new AddFavouriteCommandParser();"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    public void validArgsReturnsAddFavouriteCommand() {"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"        assertParseSuccess(parser, \"1\", new AddFavouriteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"    public void invalidArgsThrowsParseException() {"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"                AddFavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":9,"cjianhui":1,"nassy93":16}},{"path":"src/test/java/seedu/address/logic/parser/RemoveFavouriteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.RemoveFavouriteCommand;"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"public class RemoveFavouriteCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"    private RemoveFavouriteCommandParser parser \u003d new RemoveFavouriteCommandParser();"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    public void validArgsReturnsAddFavouriteCommand() {"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"        assertParseSuccess(parser, \"1\", new RemoveFavouriteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"    public void invalidArgsThrowsParseException() {"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"                RemoveFavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":9,"cjianhui":1,"nassy93":16}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" f/\") instanceof ListCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON, false), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":142,"cjianhui":2}},{"path":"src/test/java/seedu/address/logic/parser/ResetPictureCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"import seedu.address.logic.commands.ResetPictureCommand;"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"public class ResetPictureCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"    private ResetPictureCommandParser parser \u003d new ResetPictureCommandParser();"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    public void validArgsReturnsAddFavouriteCommand() {"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"        assertParseSuccess(parser, \"1\", new ResetPictureCommand(INDEX_FIRST_PERSON));"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"    public void invalidArgsThrowsParseException() {"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"                ResetPictureCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":9,"nassy93":17}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WHITESPACE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"public class SortCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"        //More than 1 field specified"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"        assertParseFailure(parser, WHITESPACE + CliSyntax.PREFIX_NAME"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"                         + WHITESPACE + CliSyntax.PREFIX_ADDRESS + SortCommand.REVERSE_ORDER,"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        //Invalid field specified"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        assertParseFailure(parser, WHITESPACE + \"invalid/i\","},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        //Invalid sort order specified"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        assertParseFailure(parser, WHITESPACE + CliSyntax.PREFIX_NAME + \"invalid\","},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    public void parse_optionalSortOrderArg_success() {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_NAME.toString(), new SortCommand(\"n/\", false));"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        // No arguments supplied"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, \"\", new SortCommand(\"n/\", false));"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by name in ascending order"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_NAME.toString(),"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"                new SortCommand(\"n/\", false));"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by name in descending order"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_NAME"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"                + SortCommand.REVERSE_ORDER, new SortCommand(\"n/\", true));"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by phone in ascending order"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_PHONE,"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"                new SortCommand(\"p/\", false));"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by phone in descending order"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_PHONE"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"                + SortCommand.REVERSE_ORDER, new SortCommand(\"p/\", true));"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by email in ascending order"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_EMAIL,"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"                new SortCommand(\"e/\", false));"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by email in descending order"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_EMAIL"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"                + SortCommand.REVERSE_ORDER, new SortCommand(\"e/\", true));"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by address in ascending order"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_ADDRESS,"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"                new SortCommand(\"a/\", false));"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        // Valid args to sort by address in descending order"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"        assertParseSuccess(parser, WHITESPACE + CliSyntax.PREFIX_ADDRESS"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"                + SortCommand.REVERSE_ORDER, new SortCommand(\"a/\", true));"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"}"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":""}],"authorContributionMap":{"-":5,"cjianhui":80}},{"path":"src/test/java/seedu/address/logic/commands/ResetPictureCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import static seedu.address.testutil.TypicalPersons.getAltAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"public class ResetPictureCommandTest {"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"    private Model model \u003d new ModelManager(getAltAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"    public void resetPictureSuccess() throws Exception {"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\").build();"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"        ResetPictureCommand resetPictureCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"        String expectedMessage \u003d String.format(ResetPictureCommand.MESSAGE_RESETPICTURE_PERSON_SUCCESS, editedPerson);"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"        assertCommandSuccess(resetPictureCommand, model, expectedMessage, expectedModel);"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public void invalidPersonIndexFailure() {"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"        ResetPictureCommand resetPictureCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(resetPictureCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"    public void duplicatePersonFailure() {"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"        ResetPictureCommand resetPictureCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(resetPictureCommand, model, ResetPictureCommand.MESSAGE_ALREADY_DEFAULT);"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":"     * Returns an {@code ResetPictureCommand} with parameters {@code index}"},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"     **/"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"    private ResetPictureCommand prepareCommand(Index index) {"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        ResetPictureCommand resetPictureCommand \u003d new ResetPictureCommand(index);"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":"        resetPictureCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        return resetPictureCommand;"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":20,"nassy93":40}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        listCommand \u003d new ListCommand(false);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"cjianhui":1}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.testutil.TypicalPersons.getEmptyAddressBook;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.testutil.TypicalPersons.getSortedAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.parser.CliSyntax;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"public class SortCommandTest {"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"    private Model emptyModel \u003d new ModelManager(getEmptyAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByNameInReverse \u003d new ModelManager(getSortedAddressBook(\"name\", true), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByPhone \u003d new ModelManager(getSortedAddressBook(\"phone\", false), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByPhoneInReverse \u003d new ModelManager(getSortedAddressBook(\"phone\", true), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByEmail \u003d new ModelManager(getSortedAddressBook(\"email\", false), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByEmailInReverse \u003d new ModelManager(getSortedAddressBook(\"email\", true), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByAddress \u003d new ModelManager("},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            getSortedAddressBook(\"address\", false), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    private Model modelSortedByAddressInReverse \u003d new ModelManager("},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            getSortedAddressBook(\"address\", true), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    public void constructor_nullSortOrder_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        new SortCommand(CliSyntax.PREFIX_NAME.getPrefix(), null);"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public void constructor_nullSortField_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        new SortCommand(null, true);"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    public void execute_catchNoPersonsException() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        prepareCommand(\"n/\", false, emptyModel).execute();"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByName_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"n/\", false, model);"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"name\", \"ascending\");"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, model);"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByNameInReverseOrder_success() throws Exception {"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"n/\", true, model);"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"name\", \"descending\");"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByNameInReverse);"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByPhone_success() throws Exception {"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"p/\", false, model);"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"phone\", \"ascending\");"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByPhone);"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByPhoneInReverseOrder_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"p/\", true, model);"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"phone\", \"descending\");"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByPhoneInReverse);"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByEmail_success() throws Exception {"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"e/\", false, model);"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"email\", \"ascending\");"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByEmail);"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByEmailInReverseOrder_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"e/\", true, model);"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"email\", \"descending\");"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByEmailInReverse);"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByAddress_success() throws Exception {"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"a/\", false, model);"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"address\", \"ascending\");"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByAddress);"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"    public void execute_sortByAddressInReverseOrder_success() throws Exception {"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"a/\", true, model);"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORT_PERSON_SUCCESS, \"address\", \"descending\");"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, modelSortedByAddressInReverse);"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"     * Returns a {@code sortCommand} with the parameters {@code field and @code isReverseOrder}."},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"    private SortCommand prepareCommand(String field, boolean isReverseOrder, Model model) {"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"        SortCommand sortCommand \u003d new SortCommand(field, isReverseOrder);"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"        return sortCommand;"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":14,"cjianhui":111}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"    public static final String WHITESPACE \u003d \" \";"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":128,"cjianhui":2}},{"path":"src/test/java/seedu/address/logic/commands/AddFavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import static seedu.address.testutil.TypicalPersons.getAltAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"public class AddFavouriteCommandTest {"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"    private Model model \u003d new ModelManager(getAltAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"    public void addFavouriteSuccess() throws Exception {"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d new PersonBuilder().withFavourite(true).withProfPic(\"Alice Pauline.png\")"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"                .withEmail(\"alice@example.com\").build();"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"        AddFavouriteCommand addFavouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"        String expectedMessage \u003d String.format(AddFavouriteCommand.MESSAGE_SUCCESS, editedPerson);"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"        assertCommandSuccess(addFavouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public void invalidPersonIndexFailure() {"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"        AddFavouriteCommand addFavouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(addFavouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"    public void duplicatePersonFailure() {"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"        AddFavouriteCommand addFavouriteCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(addFavouriteCommand, model, AddFavouriteCommand.MESSAGE_ALREADY_FAVOURITE);"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":"     * Returns an {@code ResetPictureCommand} with parameters {@code index}"},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"     **/"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"    private AddFavouriteCommand prepareCommand(Index index) {"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        AddFavouriteCommand addFavouriteCommand \u003d new AddFavouriteCommand(index);"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":"        addFavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        return addFavouriteCommand;"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":20,"nassy93":40}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON, false);"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON, false);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON, false);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"Procrastinatus"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that"},{"lineNumber":100,"author":{"gitID":"Procrastinatus"},"content":"     * {@code JumpToPersonListRequestEvent} is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"Procrastinatus"},"content":"        JumpToPersonListRequestEvent lastEvent \u003d"},{"lineNumber":114,"author":{"gitID":"Procrastinatus"},"content":"                (JumpToPersonListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index, false);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":5,"-":132,"cjianhui":5}},{"path":"src/test/java/seedu/address/model/group/GroupNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"content":"//@@author jianglingshuo"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"public class GroupNameTest {"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"    public void isValidName() {"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"        // invalid name"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(GroupName.isValidName(\"\")); // empty string"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(GroupName.isValidName(\" \")); // spaces only"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(GroupName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"        assertFalse(GroupName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"        // valid name"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(GroupName.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(GroupName.isValidName(\"12345\")); // numbers only"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(GroupName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(GroupName.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"        assertTrue(GroupName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"null":1,"Procrastinatus":19,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortComparator, boolean isReverseOrder)"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"                throws NoPersonsException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"        public void addGroup(ReadOnlyGroup group) throws DuplicateGroupException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"        public void deleteGroup(ReadOnlyGroup group) throws GroupNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        public void addPersonToGroup(Index targetGroup, ReadOnlyPerson toAdd)"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"                throws GroupNotFoundException, PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"        public void deletePersonFromGroup(Index targetGroup, ReadOnlyPerson toRemove)"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"                throws GroupNotFoundException, PersonNotFoundException, NoPersonsException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"Procrastinatus"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"Procrastinatus"},"content":"        public void deletePersons(ReadOnlyPerson[] targets) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"        public void updateFavouritePerson(ReadOnlyPerson target, ReadOnlyPerson favouritePerson)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"cjianhui"},"content":"        public ObservableList\u003cReadOnlyGroup\u003e getFilteredGroupList() {"},{"lineNumber":179,"author":{"gitID":"cjianhui"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":187,"author":{"gitID":"cjianhui"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"cjianhui"},"content":"        public void updateFilteredGroupList(Predicate\u003cReadOnlyGroup\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":192,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":6,"-":181,"cjianhui":38}},{"path":"src/test/java/seedu/address/logic/commands/RemoveFavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.testutil.TypicalPersons.getAltAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"public class RemoveFavouriteCommandTest {"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"    private Model model \u003d new ModelManager(getAltAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"    public void removeFavouriteSuccess() throws Exception {"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"                .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":"                .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"        RemoveFavouriteCommand removeFavouriteCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"        String expectedMessage \u003d String.format(RemoveFavouriteCommand.MESSAGE_SUCCESS, editedPerson);"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), editedPerson);"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"        assertCommandSuccess(removeFavouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"    public void invalidPersonIndexFailure() {"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"        RemoveFavouriteCommand removeFavouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(removeFavouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":"    public void duplicatePersonFailure() {"},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"        RemoveFavouriteCommand removeFavouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"        assertCommandFailure(removeFavouriteCommand, model, RemoveFavouriteCommand.MESSAGE_ALREADY_NORMAL);"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"     * Returns an {@code ResetPictureCommand} with parameters {@code index}"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"     **/"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":"    private RemoveFavouriteCommand prepareCommand(Index index) {"},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        RemoveFavouriteCommand removeFavouriteCommand \u003d new RemoveFavouriteCommand(index);"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":"        removeFavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"        return removeFavouriteCommand;"},{"lineNumber":61,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":20,"cjianhui":1,"nassy93":41}},{"path":"src/test/java/seedu/address/model/UniqueGroupListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"content":"//@@author jianglingshuo"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"public class UniqueGroupListTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    public void asObservableListModifyListThrowsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"        uniqueGroupList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"null":1,"Procrastinatus":7,"-":12}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"        private final ObservableList\u003cReadOnlyGroup\u003e groups \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":"        private final ObservableList\u003cReadOnlySchedule\u003e schedules \u003d FXCollections.observableArrayList();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"        public ObservableList\u003cReadOnlyGroup\u003e getGroupList() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return groups;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":99,"cjianhui":3}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"        //Adding withGroup(ALICE_GROUP) makes assert fail, unsure why"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":65}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(ReadOnlyPerson person) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"     * Adds a new {@code Group} to the {@code AddressBook} that we are building."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"    public AddressBookBuilder withGroup(ReadOnlyGroup group) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"            addressBook.addGroup(new Group(group));"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicateGroupException dge) {"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"            throw new IllegalArgumentException(\"group is expected to be unique.\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":61,"cjianhui":6}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"    public static final Index INDEX_FIRST_GROUP \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"    public static final Index INDEX_SECOND_GROUP \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    public static final Index INDEX_THIRD_GROUP \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress,"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"                    defaultTags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    public PersonBuilder withGroups(String ... groups) {"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"            this.person.setGroups(SampleDataUtil.getGroupSet(groups));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"            throw new IllegalArgumentException(\"groups are expected to be unique.\");"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"nassy93"},"content":"     * Sets the {@code Favourite} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"nassy93"},"content":"    public PersonBuilder withFavourite(Boolean value) {"},{"lineNumber":127,"author":{"gitID":"nassy93"},"content":"        this.person.setFavourite(new Favourite(value));"},{"lineNumber":128,"author":{"gitID":"nassy93"},"content":"        return this;"},{"lineNumber":129,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":131,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"nassy93"},"content":"     * Sets the {@code ProfPic} of the {@code Person} that we are building."},{"lineNumber":133,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"nassy93"},"content":"    public PersonBuilder withProfPic(String path) {"},{"lineNumber":135,"author":{"gitID":"nassy93"},"content":"        this.person.setProfPic(new ProfPic(path));"},{"lineNumber":136,"author":{"gitID":"nassy93"},"content":"        return this;"},{"lineNumber":137,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":112,"cjianhui":13,"nassy93":18}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"    public static final ReadOnlyPerson ALICEALT \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"            .withProfPic(\"Alice Pauline.png\")"},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"    public static final ReadOnlyPerson BENSONALT \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"            .withFavourite(true)"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":"    //@@author"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":94,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"nassy93"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":"    public static AddressBook getAltAddressBook() {"},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"        for (ReadOnlyPerson person : getAltPersons()) {"},{"lineNumber":100,"author":{"gitID":"nassy93"},"content":"            try {"},{"lineNumber":101,"author":{"gitID":"nassy93"},"content":"                ab.addPerson(person);"},{"lineNumber":102,"author":{"gitID":"nassy93"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":103,"author":{"gitID":"nassy93"},"content":"                assert false : \"not possible\";"},{"lineNumber":104,"author":{"gitID":"nassy93"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"nassy93"},"content":"        return ab;"},{"lineNumber":107,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":109,"author":{"gitID":"nassy93"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":114,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":115,"author":{"gitID":"nassy93"},"content":"    public static List\u003cReadOnlyPerson\u003e getAltPersons() {"},{"lineNumber":116,"author":{"gitID":"nassy93"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICEALT, BENSONALT, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":117,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"nassy93"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"    public static AddressBook getEmptyAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"        return ab;"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"    public static AddressBook getSortedAddressBook(String type, boolean isReverseOrder) {"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e personList;"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"        switch(type) {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"        case \"name\":"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"            break;"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        case \"phone\":"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"            personList \u003d getTypicalPersonsSortedByPhone();"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"            break;"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"        case \"email\":"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"            personList \u003d getTypicalPersonsSortedByEmail();"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":"            break;"},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"        case \"address\":"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"            personList \u003d getTypicalPersonsSortedByAddress();"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"            break;"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"        default:"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"        if (isReverseOrder) {"},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"            Collections.reverse(personList);"},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":151,"author":{"gitID":"cjianhui"},"content":"        for (ReadOnlyPerson person : personList) {"},{"lineNumber":152,"author":{"gitID":"cjianhui"},"content":"            try {"},{"lineNumber":153,"author":{"gitID":"cjianhui"},"content":"                ab.addPerson(person);"},{"lineNumber":154,"author":{"gitID":"cjianhui"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":155,"author":{"gitID":"cjianhui"},"content":"                assert false : \"not possible\";"},{"lineNumber":156,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":159,"author":{"gitID":"cjianhui"},"content":"        return ab;"},{"lineNumber":160,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":162,"author":{"gitID":"cjianhui"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersonsSortedByPhone() {"},{"lineNumber":163,"author":{"gitID":"cjianhui"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, DANIEL, ELLE, FIONA, GEORGE, CARL, BENSON));"},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersonsSortedByEmail() {"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, GEORGE, DANIEL, CARL, BENSON, FIONA, ELLE));"},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersonsSortedByAddress() {"},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DANIEL, ALICE, BENSON, GEORGE, FIONA, ELLE, CARL));"},{"lineNumber":172,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":174,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":175,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":81,"cjianhui":57,"nassy93":37}},{"path":"src/test/java/guitests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookGuiTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // return null to force test app to load data from file only"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // return a non-existent file location to force test app to load sample data"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":47,"cjianhui":3}},{"path":"src/test/java/seedu/address/testutil/GroupUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":" * A utility class for Group."},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"public class GroupUtil {"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"     * Returns an add command string for adding the {@code group}."},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"    public static String getAddCommand(ReadOnlyGroup group) {"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the part of command string for the given {@code group}\u0027s details."},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"    public static String getGroupDetails(ReadOnlyGroup group) {"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"        sb.append(PREFIX_NAME + group.getName().fullName + \" \");"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"        return sb.toString();"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":25,"-":2,"cjianhui":1}},{"path":"src/test/java/seedu/address/testutil/GroupBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.GroupName;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":" * A utility class to help with building Group objects."},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"public class GroupBuilder {"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline Group\";"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"    private Group group;"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    public GroupBuilder() {"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"            GroupName defaultName \u003d new GroupName(DEFAULT_NAME);"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"            this.group \u003d new Group(defaultName);"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"            throw new AssertionError(\"Default group\u0027s values are invalid.\");"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"     * Initializes the GroupBuilder with the data of {@code groupToCopy}."},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    public GroupBuilder(ReadOnlyGroup groupToCopy) {"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"        this.group \u003d new Group(groupToCopy);"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"     * Sets the {@code Name} of the {@code Group} that we are building."},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    public GroupBuilder withName(String name) {"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"            this.group.setGroupName(new GroupName(name));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"    public Group build() {"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"        return this.group;"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":39,"cjianhui":3,"-":8}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"    private final GroupListPanelHandle groupListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"        groupListPanel \u003d new GroupListPanelHandle(getChildNode(GroupListPanelHandle.GROUP_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    public GroupListPanelHandle getGroupListPanel() {"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"        return groupListPanel;"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":6,"-":46}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"                .stream()"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"                .map(Label.class::cast)"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"                .collect(Collectors.toList());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"        return tagLabels"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"                .stream()"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"                .map(Label::getText)"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"                .collect(Collectors.toList());"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":17,"-":31,"cjianhui":1}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    private static final String TOTAL_PERSONS_ID \u003d \"#totalPersons\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    private final StatusBar totalPersonsNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    private String lastRememberedTotalPersons;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        this.totalPersonsNode \u003d getChildNode(TOTAL_PERSONS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"     * Returns the text of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    public String getTotalPersons() {"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        return totalPersonsNode.getText();"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"     * Remembers the content of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"    public void rememberTotalPersons() {"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        lastRememberedTotalPersons \u003d getTotalPersons();"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by the most"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"     * recent {@code rememberTotalPersons()} call."},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    public boolean isTotalPersonsChanged() {"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        return !lastRememberedTotalPersons.equals(getTotalPersons());"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":72,"cjianhui":26}},{"path":"src/test/java/seedu/address/testutil/TypicalGroups.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"public class TypicalGroups {"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup ALICE_GROUP \u003d new GroupBuilder().withName(\"Alice Pauline Group\").build();"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup BENSON_GROUP \u003d new GroupBuilder().withName(\"Benson Meier Group\").build();"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup CARL_GROUP \u003d new GroupBuilder().withName(\"Carl Kurz Group\").build();"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup DANIEL_GROUP \u003d new GroupBuilder().withName(\"Daniel Meier Group\").build();"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup ELLE_GROUP \u003d new GroupBuilder().withName(\"Elle Meyer Group\").build();"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup FIONA_GROUP \u003d new GroupBuilder().withName(\"Fiona Kunz Group\").build();"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup GEORGE_GROUP \u003d new GroupBuilder().withName(\"George Best Group\").build();"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    // Manually added"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup HOON_GROUP \u003d new GroupBuilder().withName(\"Hoon Meier Group\").build();"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup IDA_GROUP \u003d new GroupBuilder().withName(\"Ida Mueller Group\").build();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup AMY_GROUP \u003d new GroupBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"    public static final ReadOnlyGroup BOB_GROUP \u003d new GroupBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier Group\"; // A keyword that matches MEIER"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    private TypicalGroups() {} // prevents instantiation"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"     * Returns an {@code AddressBook} with all the typical groups."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"        for (ReadOnlyGroup group : getTypicalGroups()) {"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"            try {"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"                ab.addGroup(group);"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"            } catch (DuplicateGroupException e) {"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"                assert false : \"not possible\";"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"        return ab;"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"    public static List\u003cReadOnlyGroup\u003e getTypicalGroups() {"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"                ALICE_GROUP, BENSON_GROUP, CARL_GROUP, DANIEL_GROUP, ELLE_GROUP, FIONA_GROUP, GEORGE_GROUP));"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"    //Methods for getEmptyAddressBook() and getSortedAddressBook() are removed unlike in TypicalPersons"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"    //as there\u0027s no equivalent usage in SortCommandTest."},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":43,"-":17,"cjianhui":2}},{"path":"src/test/java/guitests/AddressBookGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.TestName;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"import guitests.guihandles.GroupListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A GUI Test class for AddressBook."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public abstract class AddressBookGuiTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /* The TestName Rule makes the current test name available inside test methods */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public TestName name \u003d new TestName();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Stage stage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected MainWindowHandle mainWindowHandle;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void setupOnce() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void setup() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            this.stage \u003d stage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        FxToolkit.setupApplication(() -\u003e new TestApp(this::getInitialData, getDataFileLocation()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Override this in child classes to set the initial local data."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Return null to use the data in the file specified in {@link #getDataFileLocation()}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    protected CommandBoxHandle getCommandBox() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    protected PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"    protected GroupListPanelHandle getGroupListPanel() {"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"        return mainWindowHandle.getGroupListPanel();"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected MainMenuHandle getMainMenu() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected ResultDisplayHandle getResultDisplay() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Runs {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @return true if the command was executed successfully."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    protected boolean runCommand(String command) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Override this in child classes to set the data file location."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void cleanup() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":5,"-":110}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"Procrastinatus"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/UITheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":119}},{"path":"src/test/java/guitests/guihandles/GroupCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"public class GroupCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"    private static final String ID_FIELD_ID \u003d \"#groupId\";"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"    private static final String NAME_FIELD_ID \u003d \"#groupName\";"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    private final Label idLabel;"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    private final Label nameLabel;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    public GroupCardHandle(Node cardNode) {"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"        super(cardNode);"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public String getId() {"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"        return idLabel.getText();"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    public String getName() {"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"        return nameLabel.getText();"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":2,"cjianhui":26}},{"path":"src/main/java/seedu/address/ui/ScheduleListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"//import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"//import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.SchedulePanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":" * Panel containing the list of schedules."},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"public class ScheduleListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    private static final String FXML \u003d \"ScheduleListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ScheduleListPanel.class);"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"    private ListView\u003cScheduleCard\u003e scheduleListView;"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    public ScheduleListPanel() {"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"    public ScheduleListPanel(ObservableList\u003cReadOnlySchedule\u003e scheduleList) {"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"        setConnections(scheduleList);"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"    private void setConnections(ObservableList\u003cReadOnlySchedule\u003e scheduleList) {"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"        ObservableList\u003cScheduleCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"                scheduleList, (schedule) -\u003e new ScheduleCard(schedule, scheduleList.indexOf(schedule) + 1));"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"        scheduleListView.setItems(mappedList);"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"        scheduleListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"                        logger.fine(\"Selection in schedule list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"                        raise(new SchedulePanelSelectionChangedEvent(newValue));"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"                    }"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"                });"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ScheduleCard}."},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"    class ScheduleListViewCell extends ListCell\u003cScheduleCard\u003e {"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"        @Override"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"        protected void updateItem(ScheduleCard schedule, boolean empty) {"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"            super.updateItem(schedule, empty);"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"            if (empty || schedule \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"                setGraphic(null);"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":"                setText(null);"},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"            } else {"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"                setGraphic(schedule.getRoot());"},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":65,"-":12,"cjianhui":1}},{"path":"src/test/java/guitests/guihandles/GroupListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.ui.GroupCard;"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":" * Provides a handle for {@code GroupListPanel} containing the list of {@code GroupCard}."},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"public class GroupListPanelHandle extends NodeHandle\u003cListView\u003cGroupCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    public static final String GROUP_LIST_VIEW_ID \u003d \"#groupListView\";"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"    private Optional\u003cGroupCard\u003e lastRememberedSelectedGroupCard;"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    public GroupListPanelHandle(ListView\u003cGroupCard\u003e groupListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"        super(groupListPanelNode);"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"     * Returns a handle to the selected {@code GroupCardHandle}."},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    public GroupCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cGroupCard\u003e groupList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"        if (groupList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"            throw new AssertionError(\"Group list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"        return new GroupCardHandle(groupList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cGroupCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"     * Navigates the listview to display and select the group."},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"    public void navigateToCard(ReadOnlyGroup group) {"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cGroupCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"        Optional\u003cGroupCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.group.equals(group)).findFirst();"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"            throw new IllegalArgumentException(\"Group does not exist.\");"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the group card handle of a group associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"    public GroupCardHandle getGroupCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"        return getGroupCardHandle(getRootNode().getItems().get(index).group);"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":82,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the {@code GroupCardHandle} of the specified {@code group} in the list."},{"lineNumber":84,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Procrastinatus"},"content":"    public GroupCardHandle getGroupCardHandle(ReadOnlyGroup group) {"},{"lineNumber":86,"author":{"gitID":"Procrastinatus"},"content":"        Optional\u003cGroupCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"Procrastinatus"},"content":"                .filter(card -\u003e card.group.equals(group))"},{"lineNumber":88,"author":{"gitID":"Procrastinatus"},"content":"                .map(card -\u003e new GroupCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"Procrastinatus"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"Procrastinatus"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Group does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":93,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Procrastinatus"},"content":"     * Selects the {@code GroupCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"Procrastinatus"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"Procrastinatus"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":100,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Procrastinatus"},"content":"     * Remembers the selected {@code GroupCard} in the list."},{"lineNumber":102,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Procrastinatus"},"content":"    public void rememberSelectedGroupCard() {"},{"lineNumber":104,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cGroupCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":106,"author":{"gitID":"Procrastinatus"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"Procrastinatus"},"content":"            lastRememberedSelectedGroupCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"Procrastinatus"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"Procrastinatus"},"content":"            lastRememberedSelectedGroupCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":113,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Procrastinatus"},"content":"     * Returns true if the selected {@code GroupCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"Procrastinatus"},"content":"     * {@code rememberSelectedGroupCard()} call."},{"lineNumber":116,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Procrastinatus"},"content":"    public boolean isSelectedGroupCardChanged() {"},{"lineNumber":118,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cGroupCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":120,"author":{"gitID":"Procrastinatus"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"Procrastinatus"},"content":"            return lastRememberedSelectedGroupCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"Procrastinatus"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"Procrastinatus"},"content":"            return !lastRememberedSelectedGroupCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"Procrastinatus"},"content":"                    || !lastRememberedSelectedGroupCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":128,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"Procrastinatus"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"Procrastinatus"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":127,"-":6,"cjianhui":1}},{"path":"src/main/java/seedu/address/ui/GroupCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"public class GroupCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    private static final String FXML \u003d \"GroupListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    public final ReadOnlyGroup group;"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    private Label groupName;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    private Label groupId;"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    public GroupCard(ReadOnlyGroup group, int displayedIndex) {"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"        this.group \u003d group;"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"        groupId.setText(displayedIndex + \". \");"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"        bindListeners(group);"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"     * so that they will be notified of any changes."},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"    private void bindListeners(ReadOnlyGroup group) {"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"        groupName.textProperty().bind(Bindings.convert(group.nameProperty()));"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"        // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"        // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"        if (!(other instanceof GroupCard)) {"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"            return false;"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"        // state check"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"        GroupCard card \u003d (GroupCard) other;"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"        return groupId.getText().equals(card.groupId.getText())"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"                \u0026\u0026 group.equals(card.group);"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":60,"-":3,"cjianhui":1}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    public static final String TOTAL_PERSONS_INITIAL \u003d \"0 person(s) total\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    private StatusBar totalPersons;"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":80,"cjianhui":11}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    private static final String ICON \u003d \"/images/bamboo.png\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"    private StackPane groupListPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"        MainContactPanel mainContactPanel;"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        mainContactPanel \u003d new MainContactPanel();"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"        browserPlaceholder.getChildren().add(mainContactPanel.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"Procrastinatus"},"content":"        GroupListPanel groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"},{"lineNumber":139,"author":{"gitID":"Procrastinatus"},"content":"        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"},{"lineNumber":140,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"            logic.getFilteredPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":7,"-":211,"cjianhui":5}},{"path":"src/main/java/seedu/address/ui/ScheduleCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":" * An UI component that displays information of a {@code Schedule}."},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"public class ScheduleCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"    private static final String FXML \u003d \"ScheduleListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    public final ReadOnlySchedule schedule;"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    private Label scheduleName;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    private Label scheduleId;"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    private Label scheduleDuration;"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    private Label scheduleDetails;"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"    public ScheduleCard(ReadOnlySchedule schedule, int displayedIndex) {"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"        scheduleId.setText(displayedIndex + \". \");"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"        bindListeners(schedule);"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"     * Binds the individual UI elements to observe their respective {@code Schedule} properties"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"     * so that they will be notified of any changes."},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    private void bindListeners(ReadOnlySchedule schedule) {"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"        scheduleName.textProperty().bind(Bindings.convert(schedule.nameProperty()));"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"        scheduleDuration.textProperty().bind(Bindings.convert(schedule.scheduleDurationProperty()));"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"        scheduleDetails.textProperty().bind(Bindings.convert(schedule.scheduleDetailsProperty()));"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"        if (!(other instanceof ScheduleCard)) {"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"        ScheduleCard card \u003d (ScheduleCard) other;"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"        return scheduleId.getText().equals(card.scheduleId.getText())"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"                \u0026\u0026 schedule.equals(card.schedule);"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":67,"-":3}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"    private void handleJumpToPersonListRequestEvent(JumpToPersonListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":86}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    private static HashMap\u003cString, String\u003e tagColourSet \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    private ImageView favicon;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        favicon.setVisible(false);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"            tags.getChildren().clear();"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"            initTags(person);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        //@@author cjianhui"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        favicon.visibleProperty().bind(Bindings.createBooleanBinding(() -\u003e person.getFavourite().value));"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        //@@author"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"    private static String setTagColour(String tagName) {"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"        String[] colours \u003d {\"#2ecc71\", \"#3498db\", \"#9b59b6\", \"#f1c40f\", \"#E67E22\", \"#27AE60\", \"#FFC153\"};"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"        if (!tagColourSet.containsKey(tagName)) {"},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"            tagColourSet.put(tagName, colours[random.nextInt(colours.length)]);"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        return tagColourSet.get(tagName);"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":80,"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"     * Initialise every contact\u0027s tag with its randomly assigned colours"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"        person.getTags().forEach("},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"            tag -\u003e {"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"                Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"                tagLabel.setStyle(\"-fx-background-color: \" + setTagColour(tag.tagName));"},{"lineNumber":90,"author":{"gitID":"Procrastinatus"},"content":"                tags.getChildren().add(tagLabel);"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"            });"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Procrastinatus":7,"-":73,"cjianhui":31}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"    private String appTitle \u003d \"Bamboo\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_INVALID_GROUP_DISPLAYED_INDEX \u003d \"The group index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":13,"cjianhui":1}},{"path":"src/main/java/seedu/address/ui/MainContactPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":"import java.net.MalformedURLException;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"import javafx.animation.FadeTransition;"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"import javafx.animation.Interpolator;"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"import javafx.animation.ParallelTransition;"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"import javafx.animation.TranslateTransition;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"import javafx.geometry.Rectangle2D;"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.Node;"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"import javafx.scene.Scene;"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.control.Label;"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.image.Image;"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.BorderPane;"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"import javafx.util.Duration;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":" * The Browser Panel of the App."},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"public class MainContactPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"    private static final String FXML \u003d \"MainContactPanel.fxml\";"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"    private Circle contactImageCircle;"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"    private BorderPane socialIcon1Placeholder;"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"    private BorderPane socialIcon2Placeholder;"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"    private BorderPane socialIcon3Placeholder;"},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"    private BorderPane socialIcon4Placeholder;"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"    private BorderPane contactImagePlaceholder;"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"    private VBox contactDetailsVBox;"},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"    private StackPane schedulePlaceholder;"},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"    //This is needed for setting the click listener in setIcons(), if not the"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"    //circles won\u0027t be able to pass a parameter for the method it calls inside"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"    //its listener."},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":"    private ReadOnlyPerson currentPerson;"},{"lineNumber":82,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":83,"author":{"gitID":"Procrastinatus"},"content":"    private ParallelTransition pt;"},{"lineNumber":84,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":85,"author":{"gitID":"Procrastinatus"},"content":"    public MainContactPanel() {"},{"lineNumber":86,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":87,"author":{"gitID":"Procrastinatus"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":88,"author":{"gitID":"Procrastinatus"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":89,"author":{"gitID":"Procrastinatus"},"content":"        //Setup needed JFX nodes which will be updated upon selecting persons"},{"lineNumber":90,"author":{"gitID":"Procrastinatus"},"content":"        setupContactImageCircle();"},{"lineNumber":91,"author":{"gitID":"Procrastinatus"},"content":"        setupContactDetailsVBox();"},{"lineNumber":92,"author":{"gitID":"Procrastinatus"},"content":"        setupScheduleListViewPlaceholder();"},{"lineNumber":93,"author":{"gitID":"Procrastinatus"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":94,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":"    private void setContactImage(ReadOnlyPerson person) throws MalformedURLException {"},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":"        Image img;"},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"        if (\"maleIcon.png\".equals(person.getProfPic().getPath())) {"},{"lineNumber":100,"author":{"gitID":"nassy93"},"content":"            img \u003d new Image(\"images/maleIcon.png\");"},{"lineNumber":101,"author":{"gitID":"nassy93"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"nassy93"},"content":"            try {"},{"lineNumber":103,"author":{"gitID":"nassy93"},"content":"                File tmp \u003d new File(\"images/\" + person.getProfPic().getPath());"},{"lineNumber":104,"author":{"gitID":"nassy93"},"content":"                if (tmp.exists()) {"},{"lineNumber":105,"author":{"gitID":"nassy93"},"content":"                    img \u003d new Image(new File(\"images/\" + person.getProfPic().getPath()).toURI().toURL().toString());"},{"lineNumber":106,"author":{"gitID":"nassy93"},"content":"                } else { // Failsafe to set contact\u0027s image to default if set image is missing"},{"lineNumber":107,"author":{"gitID":"nassy93"},"content":"                    img \u003d new Image(\"images/maleIcon.png\");"},{"lineNumber":108,"author":{"gitID":"nassy93"},"content":"                }"},{"lineNumber":109,"author":{"gitID":"nassy93"},"content":"            } catch (MalformedURLException e) {"},{"lineNumber":110,"author":{"gitID":"nassy93"},"content":"                throw new MalformedURLException(\"URL is malformed in setContactImage()\");"},{"lineNumber":111,"author":{"gitID":"nassy93"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":114,"author":{"gitID":"nassy93"},"content":"        contactImageCircle.setVisible(true);"},{"lineNumber":115,"author":{"gitID":"nassy93"},"content":"        contactImageCircle.setFill(new ImagePattern(img));"},{"lineNumber":116,"author":{"gitID":"nassy93"},"content":"        easeIn(contactImageCircle);"},{"lineNumber":117,"author":{"gitID":"nassy93"},"content":"        currentPerson \u003d person;"},{"lineNumber":118,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":120,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":121,"author":{"gitID":"Procrastinatus"},"content":"    private void setupContactImageCircle() {"},{"lineNumber":122,"author":{"gitID":"Procrastinatus"},"content":"        contactImageCircle \u003d new Circle(250, 250, 90);"},{"lineNumber":123,"author":{"gitID":"Procrastinatus"},"content":"        contactImageCircle.setStroke(Color.valueOf(\"#3fc380\"));"},{"lineNumber":124,"author":{"gitID":"Procrastinatus"},"content":"        contactImageCircle.setStrokeWidth(5);"},{"lineNumber":125,"author":{"gitID":"Procrastinatus"},"content":"        contactImageCircle.radiusProperty().bind(Bindings.min("},{"lineNumber":126,"author":{"gitID":"Procrastinatus"},"content":"                contactImagePlaceholder.widthProperty().divide(3),"},{"lineNumber":127,"author":{"gitID":"Procrastinatus"},"content":"                contactImagePlaceholder.heightProperty().divide(3))"},{"lineNumber":128,"author":{"gitID":"Procrastinatus"},"content":"        );"},{"lineNumber":129,"author":{"gitID":"Procrastinatus"},"content":"        contactImagePlaceholder.setCenter(contactImageCircle);"},{"lineNumber":130,"author":{"gitID":"Procrastinatus"},"content":"        contactImageCircle.setVisible(false);"},{"lineNumber":131,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":133,"author":{"gitID":"Procrastinatus"},"content":"    private void setupContactDetailsVBox() {"},{"lineNumber":134,"author":{"gitID":"Procrastinatus"},"content":"        contactDetailsVBox.setSpacing(0);"},{"lineNumber":135,"author":{"gitID":"Procrastinatus"},"content":"        contactDetailsVBox.getChildren().addAll("},{"lineNumber":136,"author":{"gitID":"Procrastinatus"},"content":"                new Label(\"\"),"},{"lineNumber":137,"author":{"gitID":"Procrastinatus"},"content":"                new Label(\"\"),"},{"lineNumber":138,"author":{"gitID":"Procrastinatus"},"content":"                new Label(\"\"),"},{"lineNumber":139,"author":{"gitID":"Procrastinatus"},"content":"                new Label(\"\")"},{"lineNumber":140,"author":{"gitID":"Procrastinatus"},"content":"        );"},{"lineNumber":141,"author":{"gitID":"Procrastinatus"},"content":"        contactDetailsVBox.setStyle(\"-fx-alignment: center-left; -fx-padding: 0 0 0 10\");"},{"lineNumber":142,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":144,"author":{"gitID":"Procrastinatus"},"content":"    private void setIcons() {"},{"lineNumber":145,"author":{"gitID":"Procrastinatus"},"content":"        BorderPane[] socialIconPlaceholders \u003d {"},{"lineNumber":146,"author":{"gitID":"Procrastinatus"},"content":"            socialIcon1Placeholder,"},{"lineNumber":147,"author":{"gitID":"Procrastinatus"},"content":"            socialIcon2Placeholder,"},{"lineNumber":148,"author":{"gitID":"Procrastinatus"},"content":"            socialIcon3Placeholder,"},{"lineNumber":149,"author":{"gitID":"Procrastinatus"},"content":"            socialIcon4Placeholder"},{"lineNumber":150,"author":{"gitID":"Procrastinatus"},"content":"        };"},{"lineNumber":151,"author":{"gitID":"Procrastinatus"},"content":"        String[] imgUrls \u003d {"},{"lineNumber":152,"author":{"gitID":"Procrastinatus"},"content":"            \"images/facebook.png\","},{"lineNumber":153,"author":{"gitID":"Procrastinatus"},"content":"            \"images/twitter.png\","},{"lineNumber":154,"author":{"gitID":"Procrastinatus"},"content":"            \"images/instagram.png\","},{"lineNumber":155,"author":{"gitID":"Procrastinatus"},"content":"            \"images/googleplus.png\""},{"lineNumber":156,"author":{"gitID":"Procrastinatus"},"content":"        };"},{"lineNumber":157,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":158,"author":{"gitID":"Procrastinatus"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {"},{"lineNumber":159,"author":{"gitID":"Procrastinatus"},"content":"            Circle cir \u003d new Circle(250, 250, 30);"},{"lineNumber":160,"author":{"gitID":"Procrastinatus"},"content":"            cir.setStroke(Color.valueOf(\"#3fc380\"));"},{"lineNumber":161,"author":{"gitID":"Procrastinatus"},"content":"            cir.setStrokeWidth(5);"},{"lineNumber":162,"author":{"gitID":"Procrastinatus"},"content":"            cir.radiusProperty().bind(Bindings.min("},{"lineNumber":163,"author":{"gitID":"Procrastinatus"},"content":"                    socialIconPlaceholders[i].widthProperty().divide(3),"},{"lineNumber":164,"author":{"gitID":"Procrastinatus"},"content":"                    socialIconPlaceholders[i].heightProperty().divide(3))"},{"lineNumber":165,"author":{"gitID":"Procrastinatus"},"content":"            );"},{"lineNumber":166,"author":{"gitID":"Procrastinatus"},"content":"            /*"},{"lineNumber":167,"author":{"gitID":"Procrastinatus"},"content":"            //V2.0 FEATURE - SOCIAL MEDIA, NOT WORKING YET"},{"lineNumber":168,"author":{"gitID":"Procrastinatus"},"content":"            //Set up mouse click listeners to run method to open social pages"},{"lineNumber":169,"author":{"gitID":"Procrastinatus"},"content":"            cir.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"},{"lineNumber":170,"author":{"gitID":"Procrastinatus"},"content":"                @Override"},{"lineNumber":171,"author":{"gitID":"Procrastinatus"},"content":"                public void handle(MouseEvent event) {"},{"lineNumber":172,"author":{"gitID":"Procrastinatus"},"content":"                    openSocialIconPage(currentPerson);"},{"lineNumber":173,"author":{"gitID":"Procrastinatus"},"content":"                }"},{"lineNumber":174,"author":{"gitID":"Procrastinatus"},"content":"            });"},{"lineNumber":175,"author":{"gitID":"Procrastinatus"},"content":"            */"},{"lineNumber":176,"author":{"gitID":"Procrastinatus"},"content":"            cir.setFill(new ImagePattern(new Image(imgUrls[i])));"},{"lineNumber":177,"author":{"gitID":"Procrastinatus"},"content":"            socialIconPlaceholders[i].setCenter(cir);"},{"lineNumber":178,"author":{"gitID":"Procrastinatus"},"content":"            easeIn(cir);"},{"lineNumber":179,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":182,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"Procrastinatus"},"content":"     * NOTE: V2.0 FEATURE - SOCIAL MEDIA, NO WORKING YET"},{"lineNumber":184,"author":{"gitID":"Procrastinatus"},"content":"     * Loads the social page in a new window."},{"lineNumber":185,"author":{"gitID":"Procrastinatus"},"content":"     * There is no controller file for the social media window fxml"},{"lineNumber":186,"author":{"gitID":"Procrastinatus"},"content":"     * as it is essentially only a WebView."},{"lineNumber":187,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"Procrastinatus"},"content":"    private void openSocialIconPage(ReadOnlyPerson person) {"},{"lineNumber":189,"author":{"gitID":"Procrastinatus"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"Procrastinatus"},"content":"            //Load the component"},{"lineNumber":191,"author":{"gitID":"Procrastinatus"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":192,"author":{"gitID":"Procrastinatus"},"content":"            fxmlLoader.setLocation(getClass().getResource(\"/view/SocialMediaPageWindow.fxml\"));"},{"lineNumber":193,"author":{"gitID":"Procrastinatus"},"content":"            AnchorPane parent \u003d fxmlLoader.load();"},{"lineNumber":194,"author":{"gitID":"Procrastinatus"},"content":"            //Get the webview from the loaded component then put URL"},{"lineNumber":195,"author":{"gitID":"Procrastinatus"},"content":"            WebView socialPageView \u003d (WebView) parent.getChildren().get(0);"},{"lineNumber":196,"author":{"gitID":"Procrastinatus"},"content":"            socialPageView.getEngine().load(person.getName().fullName);"},{"lineNumber":197,"author":{"gitID":"Procrastinatus"},"content":"            //Create the scene and stage"},{"lineNumber":198,"author":{"gitID":"Procrastinatus"},"content":"            Scene scene \u003d new Scene(parent);"},{"lineNumber":199,"author":{"gitID":"Procrastinatus"},"content":"            Stage stage \u003d new Stage();"},{"lineNumber":200,"author":{"gitID":"Procrastinatus"},"content":"            //Setup window size based on the user\u0027s screen size"},{"lineNumber":201,"author":{"gitID":"Procrastinatus"},"content":"            Rectangle2D screenBounds \u003d Screen.getPrimary().getVisualBounds();"},{"lineNumber":202,"author":{"gitID":"Procrastinatus"},"content":"            stage.setWidth(screenBounds.getWidth() / 1.4);"},{"lineNumber":203,"author":{"gitID":"Procrastinatus"},"content":"            stage.setHeight(screenBounds.getHeight() / 1.2);"},{"lineNumber":204,"author":{"gitID":"Procrastinatus"},"content":"            //Set title and show the scene"},{"lineNumber":205,"author":{"gitID":"Procrastinatus"},"content":"            stage.setTitle(\"Social Media Window\");"},{"lineNumber":206,"author":{"gitID":"Procrastinatus"},"content":"            stage.setScene(scene);"},{"lineNumber":207,"author":{"gitID":"Procrastinatus"},"content":"            stage.show();"},{"lineNumber":208,"author":{"gitID":"Procrastinatus"},"content":"        } catch (IOException e) {"},{"lineNumber":209,"author":{"gitID":"Procrastinatus"},"content":"            Logger logger \u003d Logger.getLogger(getClass().getName());"},{"lineNumber":210,"author":{"gitID":"Procrastinatus"},"content":"            logger.log(Level.SEVERE, \"Failed to create new window for social media page.\", e);"},{"lineNumber":211,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":214,"author":{"gitID":"Procrastinatus"},"content":"    private void setupScheduleListViewPlaceholder() {"},{"lineNumber":215,"author":{"gitID":"Procrastinatus"},"content":"        schedulePlaceholder.setVisible(false);"},{"lineNumber":216,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":218,"author":{"gitID":"Procrastinatus"},"content":"    @Subscribe"},{"lineNumber":219,"author":{"gitID":"Procrastinatus"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event)"},{"lineNumber":220,"author":{"gitID":"Procrastinatus"},"content":"            throws MalformedURLException {"},{"lineNumber":221,"author":{"gitID":"Procrastinatus"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":222,"author":{"gitID":"Procrastinatus"},"content":"        setContactImage(event.getNewSelection().person);"},{"lineNumber":223,"author":{"gitID":"Procrastinatus"},"content":"        setContactDetails(event.getNewSelection().person);"},{"lineNumber":224,"author":{"gitID":"Procrastinatus"},"content":"        setIcons();"},{"lineNumber":225,"author":{"gitID":"Procrastinatus"},"content":"        setSchedule(event.getNewSelection().person);"},{"lineNumber":226,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":228,"author":{"gitID":"Procrastinatus"},"content":"    private void setContactDetails(ReadOnlyPerson person) {"},{"lineNumber":229,"author":{"gitID":"Procrastinatus"},"content":"        //Set up name label separately as it has no icons"},{"lineNumber":230,"author":{"gitID":"Procrastinatus"},"content":"        contactDetailsVBox.setSpacing(0);"},{"lineNumber":231,"author":{"gitID":"Procrastinatus"},"content":"        contactDetailsVBox.getChildren().addAll();"},{"lineNumber":232,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":233,"author":{"gitID":"Procrastinatus"},"content":"        Label name \u003d (Label) contactDetailsVBox.getChildren().get(0);"},{"lineNumber":234,"author":{"gitID":"Procrastinatus"},"content":"        name.setText(\"\" + person.getName());"},{"lineNumber":235,"author":{"gitID":"Procrastinatus"},"content":"        name.setStyle(\"-fx-font-size: 60;\");"},{"lineNumber":236,"author":{"gitID":"Procrastinatus"},"content":"        name.setWrapText(true);"},{"lineNumber":237,"author":{"gitID":"Procrastinatus"},"content":"        easeIn(name);"},{"lineNumber":238,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":239,"author":{"gitID":"Procrastinatus"},"content":"        //Set values of other labels"},{"lineNumber":240,"author":{"gitID":"Procrastinatus"},"content":"        Label phone \u003d (Label) contactDetailsVBox.getChildren().get(1);"},{"lineNumber":241,"author":{"gitID":"Procrastinatus"},"content":"        phone.setText(\"\" + person.getPhone());"},{"lineNumber":242,"author":{"gitID":"Procrastinatus"},"content":"        Label email \u003d (Label) contactDetailsVBox.getChildren().get(2);"},{"lineNumber":243,"author":{"gitID":"Procrastinatus"},"content":"        email.setText(\"\" + person.getEmail());"},{"lineNumber":244,"author":{"gitID":"Procrastinatus"},"content":"        Label address \u003d (Label) contactDetailsVBox.getChildren().get(3);"},{"lineNumber":245,"author":{"gitID":"Procrastinatus"},"content":"        address.setText(\"\" + person.getAddress());"},{"lineNumber":246,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":247,"author":{"gitID":"Procrastinatus"},"content":"        //Add images to these labels"},{"lineNumber":248,"author":{"gitID":"Procrastinatus"},"content":"        Label[] labels \u003d {phone, email, address};"},{"lineNumber":249,"author":{"gitID":"Procrastinatus"},"content":"        String[] iconUrls \u003d {\"images/phone.png\", \"images/mail.png\", \"images/homeBlack.png\"};"},{"lineNumber":250,"author":{"gitID":"Procrastinatus"},"content":"        for (int i \u003d 0; i \u003c labels.length; i++) {"},{"lineNumber":251,"author":{"gitID":"Procrastinatus"},"content":"            ImageView icon \u003d new ImageView(iconUrls[i]);"},{"lineNumber":252,"author":{"gitID":"Procrastinatus"},"content":"            icon.setImage(new Image(iconUrls[i]));"},{"lineNumber":253,"author":{"gitID":"Procrastinatus"},"content":"            icon.setPreserveRatio(true);"},{"lineNumber":254,"author":{"gitID":"Procrastinatus"},"content":"            icon.setFitWidth(20);"},{"lineNumber":255,"author":{"gitID":"Procrastinatus"},"content":"            labels[i].setGraphic(icon);"},{"lineNumber":256,"author":{"gitID":"Procrastinatus"},"content":"            labels[i].setWrapText(true);"},{"lineNumber":257,"author":{"gitID":"Procrastinatus"},"content":"            labels[i].setStyle(\"-fx-font-size: 17\");"},{"lineNumber":258,"author":{"gitID":"Procrastinatus"},"content":"            easeIn(labels[i]);"},{"lineNumber":259,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"Procrastinatus"},"content":"        currentPerson \u003d person;"},{"lineNumber":261,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":263,"author":{"gitID":"Procrastinatus"},"content":"    private void setSchedule(ReadOnlyPerson person) {"},{"lineNumber":264,"author":{"gitID":"Procrastinatus"},"content":"        schedulePlaceholder.setVisible(true);"},{"lineNumber":265,"author":{"gitID":"Procrastinatus"},"content":"        ScheduleListPanel scheduleList \u003d new ScheduleListPanel(person.scheduleProperty().get().asObservableList());"},{"lineNumber":266,"author":{"gitID":"Procrastinatus"},"content":"        schedulePlaceholder.getChildren().add(scheduleList.getRoot());"},{"lineNumber":267,"author":{"gitID":"Procrastinatus"},"content":"        //scheduleListView.setStyle(\"-fx-alignment: center-left; -fx-padding: 0 0 0 10;\");"},{"lineNumber":268,"author":{"gitID":"Procrastinatus"},"content":"        //easeIn(schedulePlaceholder);"},{"lineNumber":269,"author":{"gitID":"Procrastinatus"},"content":"        easeIn(schedulePlaceholder);"},{"lineNumber":270,"author":{"gitID":"Procrastinatus"},"content":"        currentPerson \u003d person;"},{"lineNumber":271,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":273,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"Procrastinatus"},"content":"     * Animates any node passed into this method with an ease-in"},{"lineNumber":275,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"Procrastinatus"},"content":"    private void easeIn(Node node) {"},{"lineNumber":277,"author":{"gitID":"Procrastinatus"},"content":"        FadeTransition ft \u003d new FadeTransition(Duration.millis(500), node);"},{"lineNumber":278,"author":{"gitID":"Procrastinatus"},"content":"        ft.setFromValue(0);"},{"lineNumber":279,"author":{"gitID":"Procrastinatus"},"content":"        ft.setToValue(1);"},{"lineNumber":280,"author":{"gitID":"Procrastinatus"},"content":"        TranslateTransition tt \u003d new TranslateTransition();"},{"lineNumber":281,"author":{"gitID":"Procrastinatus"},"content":"        tt.setNode(node);"},{"lineNumber":282,"author":{"gitID":"Procrastinatus"},"content":"        tt.setFromY(20);"},{"lineNumber":283,"author":{"gitID":"Procrastinatus"},"content":"        tt.setToY(0);"},{"lineNumber":284,"author":{"gitID":"Procrastinatus"},"content":"        tt.setDuration(Duration.millis(500));"},{"lineNumber":285,"author":{"gitID":"Procrastinatus"},"content":"        tt.setInterpolator(Interpolator.EASE_IN);"},{"lineNumber":286,"author":{"gitID":"Procrastinatus"},"content":"        ParallelTransition pt \u003d new ParallelTransition();"},{"lineNumber":287,"author":{"gitID":"Procrastinatus"},"content":"        pt.getChildren().addAll(ft, tt);"},{"lineNumber":288,"author":{"gitID":"Procrastinatus"},"content":"        pt.play();"},{"lineNumber":289,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":291,"author":{"gitID":"Procrastinatus"},"content":"    public StackPane getSchedulePlaceholder() {"},{"lineNumber":292,"author":{"gitID":"Procrastinatus"},"content":"        return schedulePlaceholder;"},{"lineNumber":293,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":249,"-":15,"cjianhui":6,"nassy93":24}},{"path":"src/main/java/seedu/address/ui/GroupListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"public class GroupListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    private static final String FXML \u003d \"GroupListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"    private ListView\u003cGroupCard\u003e groupListView;"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    public GroupListPanel(ObservableList\u003cReadOnlyGroup\u003e groupList) {"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"        setConnections(groupList);"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    private void setConnections(ObservableList\u003cReadOnlyGroup\u003e groupList) {"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"        ObservableList\u003cGroupCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"                groupList, (group) -\u003e new GroupCard(group, groupList.indexOf(group) + 1));"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"        groupListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"        setEventHandlerForGroupSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"    private void setEventHandlerForGroupSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"        groupListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"                        logger.fine(\"Selection in group list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"                        raise(new GroupPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"     * Scrolls to the {@code GroupCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"            groupListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"            groupListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"    private void handleJumpToGroupListRequestEvent(JumpToGroupListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"        /** To ensure that group at index 1 can be selected even when previous selection was its index */"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"        groupListView.getSelectionModel().clearSelection();"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code GroupCard}."},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"    class GroupListViewCell extends ListCell\u003cGroupCard\u003e {"},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"        @Override"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"        protected void updateItem(GroupCard group, boolean empty) {"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"            super.updateItem(group, empty);"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":82,"author":{"gitID":"Procrastinatus"},"content":"            if (empty || group \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"Procrastinatus"},"content":"                setGraphic(null);"},{"lineNumber":84,"author":{"gitID":"Procrastinatus"},"content":"                setText(null);"},{"lineNumber":85,"author":{"gitID":"Procrastinatus"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"Procrastinatus"},"content":"                setGraphic(group.getRoot());"},{"lineNumber":87,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":91,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":83,"-":6,"cjianhui":2}},{"path":"src/main/java/seedu/address/commons/util/ServiceHandlerUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"/** Class to make requests to API */"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"public class ServiceHandlerUtil {"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"     * Utility class to make HTTP calls"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"     * @url - url to make request"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"     * @method - http request method"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"     * */"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    public static String makeCall(String url) throws IOException {"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"        URL obj \u003d new URL(url);"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"        HttpURLConnection connection \u003d (HttpURLConnection) obj.openConnection();"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"        connection.setRequestMethod(\"GET\");"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"        return getResponseString(connection);"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    public static String getResponseString(HttpURLConnection connection) throws IOException {"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        BufferedReader in \u003d new BufferedReader("},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"                new InputStreamReader(connection.getInputStream()));"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        String inputLine;"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        StringBuffer response \u003d new StringBuffer();"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        while ((inputLine \u003d in.readLine()) !\u003d null) {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"            response.append(inputLine);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        in.close();"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        return response.toString();"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"cjianhui":42}},{"path":"src/main/java/seedu/address/commons/util/googlecalendarutil/DateParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util.googlecalendarutil;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.text.DateFormat;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"/** Helper functions to parse dateTime strings */"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"public class DateParserUtil {"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"    private static final String DAY \u003d \"Day\";"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    private static final String MONTH \u003d \"Month\";"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    private static final String DATE \u003d \"Date\";"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    private static final String TIME \u003d \"Time\";"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    private static final String YEAR \u003d \"Year\";"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    /** Convert Google\u0027s dateTime string to valid dateTime string */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    public static String convertDateTime(String dateTime) {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"        String parsedDateTime \u003d dateTime.replaceFirst(\"(.*):(..)\", \"$1$2\")"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"                .replace(\"T\", \" \");"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"        return parsedDateTime;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    /** Parse Google\u0027s dateTime and return a hashmap */"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public static HashMap\u003cString, String\u003e parseDateTime(String dateTime) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        HashMap\u003cString, String\u003e dateTimeMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        DateFormat dateInput \u003d new SimpleDateFormat(\"yyyy-MM-dd hh:mm\");"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        String [] tokens;"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            tokens \u003d dateInput.parse(dateTime).toString().split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        } catch (java.text.ParseException pe) {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(\"Error parsing datetime.\");"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        dateTimeMap.put(DAY, tokens[0]);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        dateTimeMap.put(MONTH, tokens[1]);"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        dateTimeMap.put(DATE, tokens[2]);"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        dateTimeMap.put(TIME, tokens[3].substring(0, tokens[3].length() - 3));"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        dateTimeMap.put(YEAR, tokens[5]);"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        return dateTimeMap;"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    /** Ensures event start date is before event end date"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"     * @param startDateTime"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"     * @param endDateTime*/"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    public static boolean isValidEventDuration(Date startDateTime, Date endDateTime) {"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"        if (startDateTime.compareTo(endDateTime) \u003e 0) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        return true;"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    /** Ensures event start date is after current time"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"     * @param dateTime*/"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    public static boolean isAfterCurrentTime(Date dateTime) {"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"        Date currentDateTime \u003d new Date();"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"        if (dateTime.compareTo(currentDateTime) \u003c 0) {"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        return true;"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"    /** Sanity checks date input **/"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"    public static boolean isValidTime(String dateTime) {"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd hh:mm\");"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"        sdf.setLenient(false);"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"            sdf.parse(dateTime);"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        } catch (java.text.ParseException e) {"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"        return true;"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"    /** Returns yyyy-MM-dd hh:mm representation of current time */"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"    public static String getCurrentTime() {"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        Date currentTime \u003d new Date();"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"yyyy-MM-dd hh:mm\");"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        return df.format(currentTime).toString();"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    /** Returns a Google Calendar-like representation of the duration of an event"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"     * Examples:"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"     * Events that span more than a day:"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"     * Saturday, 21 October, 10:30 -"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"     * Sunday, 22 October, 11:30"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"     * Events that finish within a day:"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"     * Sunday, 22 October"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"     * 08:30 - 12:30"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"    public static String getDurationOfEvent(String startDateTime, String endDateTime) throws ParseException {"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"        HashMap\u003cString, String\u003e sDateTimeMap \u003d parseDateTime(startDateTime);"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        HashMap\u003cString, String\u003e eDateTimeMap \u003d parseDateTime(endDateTime);"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        StringBuilder durationString \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        durationString.append(sDateTimeMap.get(DAY) + \", \");"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        durationString.append(sDateTimeMap.get(DATE) + \" \");"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        durationString.append(sDateTimeMap.get(MONTH) + \" \");"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"        durationString.append(sDateTimeMap.get(YEAR));"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        if (sDateTimeMap.get(DATE).equals(eDateTimeMap.get(DATE))"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 sDateTimeMap.get(MONTH).equals(eDateTimeMap.get(MONTH))"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 sDateTimeMap.get(YEAR).equals(eDateTimeMap.get(YEAR))) {"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"            durationString.append(\"\\n\" + sDateTimeMap.get(TIME) + \" - \" + eDateTimeMap.get(TIME));"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"            durationString.append(\", \" + sDateTimeMap.get(TIME) + \" - \\n\");"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"            durationString.append(eDateTimeMap.get(DAY) + \", \");"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"            durationString.append(eDateTimeMap.get(DATE) + \" \");"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"            durationString.append(eDateTimeMap.get(MONTH) + \" \");"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"            durationString.append(eDateTimeMap.get(YEAR) + \", \");"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"            durationString.append(eDateTimeMap.get(TIME));"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        return durationString.toString();"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":3,"cjianhui":127}},{"path":"src/main/java/seedu/address/commons/util/googlecalendarutil/EventParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util.googlecalendarutil;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import com.fasterxml.jackson.databind.JsonNode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.util.ServiceHandlerUtil;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.ScheduleDate;"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ScheduleName;"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"/** Class to query Google\u0027s calendar API to obtain events */"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"public class EventParserUtil {"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    private static final String API \u003d \"https://www.googleapis.com/calendar/v3/calendars/\";"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    /** Node names for Jackson JSON parser to traverse JSON response */"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENTS \u003d \"/items\";"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENT_NAME \u003d \"/summary\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENT_START \u003d \"/start\";"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENT_DATE_TIME \u003d \"/dateTime\";"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENT_END \u003d \"/end\";"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    private static final String EVENT_DETAILS \u003d \"/description\";"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    private static final String KEY \u003d \"AIzaSyB34cw8YT02y2qA8ElCddMLxNvS3o1_siI\";"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"    /** Get events ordered by start time */"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    private static final String QUERY \u003d \"/events?singleEvents\u003dtrue\u0026orderBy\u003dstartTime\u0026key\u003d\";"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    private static Schedule getSingleSchedule(JsonNode event) throws IllegalValueException {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"        String name \u003d event.at(EVENT_NAME).asText();"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        String details \u003d event.at(EVENT_DETAILS).asText();"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        JsonNode sDateTime \u003d event.at(EVENT_START);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"        JsonNode eDateTime \u003d event.at(EVENT_END);"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        String startDateTime \u003d DateParserUtil.convertDateTime(sDateTime.at(EVENT_DATE_TIME).asText());"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        String endDateTime \u003d DateParserUtil.convertDateTime(eDateTime.at(EVENT_DATE_TIME).asText());"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        String duration \u003d DateParserUtil.getDurationOfEvent(startDateTime, endDateTime);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        Schedule schedule \u003d new Schedule(new ScheduleName(name), new ScheduleDate(startDateTime),"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"                new ScheduleDate(endDateTime), duration, details);"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        return schedule;"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    public static UniqueScheduleList getScheduleList(String calendarId) throws IOException, IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        UniqueScheduleList scheduleList \u003d new UniqueScheduleList();"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        String apiUrl \u003d API + calendarId + QUERY + KEY;"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        String response \u003d ServiceHandlerUtil.makeCall(apiUrl);"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        ObjectMapper mapper \u003d new ObjectMapper();"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        JsonNode root \u003d mapper.readTree(response);"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        JsonNode events \u003d root.at(EVENTS);"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"        for (JsonNode event: events) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"            scheduleList.add(getSingleSchedule(event));"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        return scheduleList;"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":4,"cjianhui":55}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToGroupListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"public class JumpToGroupListRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"    public final int targetIndex;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    public JumpToGroupListRequestEvent(Index targetIndex) {"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":5,"cjianhui":18}},{"path":"src/main/java/seedu/address/commons/events/ui/SchedulePanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.ui.ScheduleCard;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"public class SchedulePanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"    private final ScheduleCard newSelection;"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"    public SchedulePanelSelectionChangedEvent(ScheduleCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"    public ScheduleCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/GroupPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.ui.GroupCard;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"public class GroupPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"    private final GroupCard newSelection;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    public GroupPanelSelectionChangedEvent(GroupCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public GroupCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":3,"cjianhui":21}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"                + \" number of groups \" + data.getGroupList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":18,"cjianhui":2}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToPersonListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"public class JumpToPersonListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"    public JumpToPersonListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":20}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    /** Returns an unmodifiable view of the filtered list of groups */"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    ObservableList\u003cReadOnlyGroup\u003e getFilteredGroupList();"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":27,"cjianhui":4}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToScheduleListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"public class JumpToScheduleListRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"    public final int targetIndex;"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"    public JumpToScheduleListRequestEvent(Index targetIndex) {"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":18,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":24,"content":"//@@author jianglingshuo"},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhoneAdd(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmailAdd(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddressAdd(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"-":63,"cjianhui":2}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"     *  Returns the size of an ArgumentMultimap instance"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"    public int size() {"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"        return argMultimap.size();"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":60,"cjianhui":7}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"            String[] arguments \u003d args.trim().split(\" \");"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"            if (arguments.length \u003d\u003d 1) {"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"                Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"                return new DeleteCommand(index);"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"            } else {"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"                Index[] indexes \u003d new Index[arguments.length];"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"                for (int i \u003d 0; i \u003c indexes.length; i++) {"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"                    indexes[i] \u003d ParserUtil.parseIndex(arguments[i]);"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"                }"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"                return new DeleteCommand(indexes);"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":21,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    private Index index;"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    private Boolean isGroup \u003d false;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"        if (!args.matches(\"^( (g/)?[\\\\d]+)$\")) {"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            if (args.trim().contains(PREFIX_GROUP.getPrefix())) {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"                isGroup \u003d true;"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            } else {"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"                index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"            return new SelectCommand(index, isGroup);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":14,"cjianhui":34}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddCalendarCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddFavouriteCommand;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddPersonToGroupCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.CreateGroupCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.RemoveFavouriteCommand;"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.RemovePersonFromGroupCommand;"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"import seedu.address.logic.commands.ResetPictureCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":"import seedu.address.logic.commands.SetPictureCommand;"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"nassy93"},"content":"        case AddCommand.COMMAND_ALT:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"        case EditCommand.COMMAND_ALT:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"        case SelectCommand.COMMAND_ALT:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":"        case DeleteCommand.COMMAND_ALT:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"        case ClearCommand.COMMAND_ALT:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"nassy93"},"content":"        case FindCommand.COMMAND_ALT:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"nassy93"},"content":"        case ListCommand.COMMAND_ALT:"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        //@@author cjianhui"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"        case SortCommand.COMMAND_ALT:"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"        case CreateGroupCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        case CreateGroupCommand.COMMAND_ALT:"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"            return new CreateGroupCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"        case DeleteGroupCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"        case DeleteGroupCommand.COMMAND_ALT:"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"            return new DeleteGroupCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"        case AddPersonToGroupCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"        case AddPersonToGroupCommand.COMMAND_ALT:"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"            return new AddPersonToGroupCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"        case RemovePersonFromGroupCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        case RemovePersonFromGroupCommand.COMMAND_ALT:"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"            return new RemovePersonFromGroupCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        //@@author"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"nassy93"},"content":"        case HistoryCommand.COMMAND_ALT:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"nassy93"},"content":"        case UndoCommand.COMMAND_ALT:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"nassy93"},"content":"        case RedoCommand.COMMAND_ALT:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":129,"author":{"gitID":"nassy93"},"content":"        //@@author nassy93"},{"lineNumber":130,"author":{"gitID":"nassy93"},"content":"        case AddFavouriteCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"nassy93"},"content":"        case AddFavouriteCommand.COMMAND_ALT:"},{"lineNumber":132,"author":{"gitID":"nassy93"},"content":"            return new AddFavouriteCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":134,"author":{"gitID":"nassy93"},"content":"        case RemoveFavouriteCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"nassy93"},"content":"        case RemoveFavouriteCommand.COMMAND_ALT:"},{"lineNumber":136,"author":{"gitID":"nassy93"},"content":"            return new RemoveFavouriteCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"        //@@author cjianhui"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"        case AddCalendarCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":"        case AddCalendarCommand.COMMAND_ALT:"},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"            return new AddScheduleCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"        case AddEventCommand.COMMAND_ALT:"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"        case DeleteEventCommand.COMMAND_ALT:"},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":150,"author":{"gitID":"nassy93"},"content":"        //@@author nassy93"},{"lineNumber":151,"author":{"gitID":"nassy93"},"content":"        case ResetPictureCommand.COMMAND_WORD:"},{"lineNumber":152,"author":{"gitID":"nassy93"},"content":"        case ResetPictureCommand.COMMAND_ALT:"},{"lineNumber":153,"author":{"gitID":"nassy93"},"content":"            return new ResetPictureCommandParser().parse(arguments);"},{"lineNumber":154,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":155,"author":{"gitID":"nassy93"},"content":"        case SetPictureCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"nassy93"},"content":"        case SetPictureCommand.COMMAND_ALT:"},{"lineNumber":157,"author":{"gitID":"nassy93"},"content":"            return new SetPictureCommandParser().parse(arguments);"},{"lineNumber":158,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":159,"author":{"gitID":"nassy93"},"content":"        default:"},{"lineNumber":160,"author":{"gitID":"nassy93"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":161,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":164,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":83,"cjianhui":46,"nassy93":35}},{"path":"src/main/java/seedu/address/logic/parser/AddFavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddFavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":" * Parses input arguments and creates a new AddFaveCommand object"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"public class AddFavouriteCommandParser implements Parser\u003cAddFavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"     * Parses the given {@code String} of arguments in the context of the AddFaveCommand"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"     * and returns an AddFaveCommand object for execution."},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"    public AddFavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"            return new AddFavouriteCommand(index);"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":1,"nassy93":21}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new DeleteGroundCommand object"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    public DeleteGroupCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"            return new DeleteGroupCommand(index);"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":7,"cjianhui":24}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonToGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddPersonToGroupCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new CreateGroupCommand object"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"public class AddPersonToGroupCommandParser implements Parser\u003cAddPersonToGroupCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    /** Parse AddPersonToGroupCommand Arguments */"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public AddPersonToGroupCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_PERSON);"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP, PREFIX_PERSON)) {"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"                    AddPersonToGroupCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"            Index groupIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"            return new AddPersonToGroupCommand(groupIndex, personIndex);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":46}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FAVOURITE;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    private Boolean isFavourite \u003d false;"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"        if (!args.matches(\"^( f/)?$\")) {"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"        if (args.trim().contains(PREFIX_FAVOURITE.getPrefix())) {"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"            isFavourite \u003d true;"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        return new ListCommand(isFavourite);"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":9,"cjianhui":25}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    public static final Prefix PREFIX_FAVOURITE \u003d new Prefix(\"f/\");"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"fp/\");"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_CALENDAR_ID \u003d new Prefix(\"i/\");"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"s/\");"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"e/\");"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_DETAILS \u003d new Prefix(\"d/\");"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    public static final Prefix PREFIX_FACEBOOK \u003d new Prefix(\"fb/\");"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"    public static final Prefix PREFIX_TWITTER \u003d new Prefix(\"tw/\");"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    public static final Prefix PREFIX_INSTAGRAM \u003d new Prefix(\"in/\");"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    public static final Prefix PREFIX_GOOGLEPLUS \u003d new Prefix(\"gp/\");"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":7,"-":13,"cjianhui":7,"nassy93":3}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.GroupName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.ScheduleDate;"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.ScheduleName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String NOT_EXISTING \u003d \"---\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"     * Parses a {@code Optional\u003cString\u003e groupName} into an {@code Optional\u003cGroupName\u003e} if {@code groupName} is present."},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"    public static Optional\u003cGroupName\u003e parseGroupName(Optional\u003cString\u003e groupName) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(groupName);"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        return groupName.isPresent() ? Optional.of(new GroupName(groupName.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"     * Parses a {@code Optional\u003cString\u003e scheduleName} into an {@code Optional\u003cGroupName\u003e}"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"     * if {@code scheduleName} is present."},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"    public static Optional\u003cScheduleName\u003e parseScheduleName(Optional\u003cString\u003e scheduleName) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(scheduleName);"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        return scheduleName.isPresent() ? Optional.of(new ScheduleName((scheduleName.get()))) : Optional.empty();"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"     * Parses a {@code Optional\u003cString\u003e scheduleDate} into an {@code Optional\u003cGroupName\u003e}"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"     * if {@code scheduleDate} is present."},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"    public static Optional\u003cScheduleDate\u003e parseDate(Optional\u003cString\u003e scheduleDate) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(scheduleDate);"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        return scheduleDate.isPresent() ? Optional.of(new ScheduleDate((scheduleDate.get()))) : Optional.empty();"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"     * Parses a {@code Optional\u003cString\u003e scheduleDetails} into an {@code Optional\u003cGroupName\u003e}"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"     * if {@code scheduleDate} is present."},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"    public static Optional\u003cString\u003e parseScheduleDetails(Optional\u003cString\u003e scheduleDetails) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(scheduleDetails);"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"        return scheduleDetails.isPresent() ? Optional.of((scheduleDetails.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Used for edit command"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"content":"    //@@author jianglingshuo"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * If {@code Optional\u003cString\u003e phone} does not exist, create an {@code Optional\u003cPhone\u003e} with empty name \"---\""},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhoneAdd(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.of(new Phone(NOT_EXISTING));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"content":"    //@@author jianglingshuo"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * If {@code Optional\u003cString\u003e address} does not exist, create an {@code Optional\u003cAddress\u003e} with empty name \"---\""},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddressAdd(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.of(new Address(NOT_EXISTING));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"content":"    //@@author"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"content":"    //@@author jianglingshuo"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * If {@code Optional\u003cString\u003e email} does not exist, create an {@code Optional\u003cEmail\u003e} with empty name \"---\""},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmailAdd(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.of(new Email(NOT_EXISTING));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":160,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"nassy93"},"content":"     * Parses a {@code Optional\u003cProfPic\u003e filePath} into an {@code Optional\u003cProfPic\u003e} if {@code filePath} is present."},{"lineNumber":162,"author":{"gitID":"nassy93"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":163,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"nassy93"},"content":"    public static Optional\u003cProfPic\u003e parseFilePath(Optional\u003cString\u003e filePath) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"nassy93"},"content":"        requireNonNull(filePath);"},{"lineNumber":166,"author":{"gitID":"nassy93"},"content":"        return filePath.isPresent() ? Optional.of(new ProfPic(filePath.get())) : Optional.empty();"},{"lineNumber":167,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":169,"author":{"gitID":"nassy93"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"content":"    //@@author jianglingshuo"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public static Set\u003cGroup\u003e parseGroups(Collection\u003cString\u003e groups) throws IllegalValueException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        requireNonNull(groups);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        for (String groupName : groups) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            groupSet.add(new Group(groupName));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return groupSet;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":6,"-":132,"cjianhui":45,"nassy93":12}},{"path":"src/main/java/seedu/address/logic/parser/CreateGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.CreateGroupCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.GroupName;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new CreateGroupCommand object"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"public class CreateGroupCommandParser implements Parser\u003cCreateGroupCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public CreateGroupCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"            GroupName name \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"            ReadOnlyGroup group \u003d new Group(name);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            return new CreateGroupCommand(group);"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":9,"cjianhui":42}},{"path":"src/main/java/seedu/address/logic/parser/AddScheduleCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_ID;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddCalendarCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new AddScheduleCommand object"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"public class AddScheduleCommandParser implements Parser\u003cAddCalendarCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the AddScheduleCommand"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"     * and returns an AddScheduleCommand object for execution."},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    /** Parse AddSchedueCommand Arguments */"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public AddCalendarCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_CALENDAR_ID);"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON, PREFIX_CALENDAR_ID)) {"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"                    AddCalendarCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            String calendarId \u003d argMultimap.getValue(PREFIX_CALENDAR_ID).get();"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"            return new AddCalendarCommand(personIndex, calendarId);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":46}},{"path":"src/main/java/seedu/address/logic/parser/RemoveFavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.RemoveFavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":" * Parses input arguments and creates a new RemoveFaveCommand object"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"public class RemoveFavouriteCommandParser implements Parser\u003cRemoveFavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveFaveCommand"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"     * and returns an RemoveFaveCommand object for execution."},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"    public RemoveFavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"            return new RemoveFavouriteCommand(index);"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":1,"nassy93":20}},{"path":"src/main/java/seedu/address/logic/parser/SetPictureCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"nassy93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"import seedu.address.logic.commands.SetPictureCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":" * Parses input arguments and creates a new SetPictureCommand object"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"public class SetPictureCommandParser {"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"     * Parses the given {@code String} of arguments in the context of the ResetPictureCommand"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"     * and returns an ResetPictureCommand object for execution."},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"    public SetPictureCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"        Index index;"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPictureCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_FILEPATH)) {"},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPictureCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"            ProfPic path \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILEPATH)).get();"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"            return new SetPictureCommand(index, path);"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":7,"cjianhui":2,"nassy93":46}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import java.util.function.Consumer;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    private String field;"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    private Boolean isReverseOrder \u003d false;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        String args2 \u003d args; // for codacy issue fix to prevent original arg overwrite"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(args2);"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"        if (!args.matches(\"^|( [npea]/(r)?)$\")) {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        if (\"\".equals(args)) {"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            args \u003d \" n/\";"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"        argMultimap.getValue(PREFIX_NAME).ifPresent(setOrder(PREFIX_NAME));"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"        argMultimap.getValue(PREFIX_PHONE).ifPresent(setOrder(PREFIX_PHONE));"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        argMultimap.getValue(PREFIX_EMAIL).ifPresent(setOrder(PREFIX_EMAIL));"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        argMultimap.getValue(PREFIX_ADDRESS).ifPresent(setOrder(PREFIX_ADDRESS));"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        return new SortCommand(field, isReverseOrder);"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    private Consumer\u003cString\u003e setOrder(Prefix prefix) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        return s -\u003e {"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"            field \u003d prefix.toString();"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"            if (s.equals(SortCommand.REVERSE_ORDER)) {"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"                isReverseOrder \u003d Boolean.TRUE;"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"                return;"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"            } else {"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"                isReverseOrder \u003d Boolean.FALSE;"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"                return;"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        };"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":10,"cjianhui":62}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":8,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"nassy93"},"content":"        private PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"nassy93"},"content":"        private int getStartPosition() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"nassy93"},"content":"        private Prefix getPrefix() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":147,"nassy93":3}},{"path":"src/main/java/seedu/address/logic/parser/RemovePersonFromGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddPersonToGroupCommand;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.RemovePersonFromGroupCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new CreateGroupCommand object"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"public class RemovePersonFromGroupCommandParser implements Parser\u003cRemovePersonFromGroupCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    /** Parse AddPersonToGroupCommand Arguments */"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    public RemovePersonFromGroupCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_PERSON);"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP, PREFIX_PERSON)) {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"                    AddPersonToGroupCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            Index groupIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"            return new RemovePersonFromGroupCommand(groupIndex, personIndex);"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":47}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"d\";"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"            + \": Deletes the person identified by the index number(s) used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"    private Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    private Index[] targetIndexes;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    public DeleteCommand(Index[] targetIndexes) {"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"        ReadOnlyPerson personToDelete \u003d null;"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":"        ReadOnlyPerson[] personsToDelete \u003d null;"},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"        if (targetIndex !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"            personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"        if (targetIndexes !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"            personsToDelete \u003d new ReadOnlyPerson[targetIndexes.length];"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"            for (int i \u003d 0; i \u003c personsToDelete.length; i++) {"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"                personsToDelete[i] \u003d lastShownList.get(targetIndexes[i].getZeroBased());"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"            if (personsToDelete \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"                model.deletePersons(personsToDelete);"},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":63,"-":16,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/parser/ResetPictureCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import seedu.address.logic.commands.ResetPictureCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":" * Parses input arguments and creates a new ResetPictureCommand object"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"public class ResetPictureCommandParser implements Parser\u003cResetPictureCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"     * Parses the given {@code String} of arguments in the context of the ResetPictureCommand"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"     * and returns an ResetPictureCommand object for execution."},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"    public ResetPictureCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"            return new ResetPictureCommand(index);"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResetPictureCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":8,"nassy93":21}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"l\";"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"            + \": Lists all persons in the address book.\\n\""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"            + \": Specify prefix f/ to list all person(s) marked as \u0027Favourite\u0027.\\n\""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: [f/]\\n\""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_LIST_FAVOURITE_SUCCESS \u003d \"Listed all \u0027favourite\u0027 persons\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    private final boolean listFavourite;"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    public ListCommand(boolean listFavourite) {"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"        this.listFavourite \u003d listFavourite;"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        if (listFavourite) {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            model.updateFilteredPersonList(isFavourite());"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(MESSAGE_LIST_FAVOURITE_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    public static Predicate\u003cReadOnlyPerson\u003e isFavourite() {"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        return p -\u003e"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"                p.getFavourite().getStatus();"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":9,"cjianhui":37,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.util.googlecalendarutil.DateParserUtil;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.ScheduleDate;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ScheduleName;"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_NAME,"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"                        PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_DETAILS);"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        String scheduleDetails;"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)) {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"            ScheduleName name \u003d ParserUtil.parseScheduleName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"            ScheduleDate sDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE)).get();"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"            ScheduleDate eDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"            scheduleDetails \u003d ParserUtil.parseScheduleDetails(argMultimap.getValue(PREFIX_DETAILS)).get();"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"            if (!DateParserUtil.isAfterCurrentTime(sDate.scheduleDate)) {"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"                throw new ParseException(String.format(AddEventCommand.MESSAGE_INVALID_START_TIME,"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"                        DateParserUtil.getCurrentTime()));"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"            if (!DateParserUtil.isValidTime(sDate.toString()) || !DateParserUtil.isValidTime(eDate.toString())) {"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"                throw new ParseException(AddEventCommand.MESSAGE_INVALID_TIME);"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"            if (!DateParserUtil.isValidEventDuration(sDate.scheduleDate, eDate.scheduleDate)) {"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"                throw new ParseException(AddEventCommand.MESSAGE_INVALID_DURATION);"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"            ReadOnlySchedule event \u003d new Schedule(name, sDate, eDate,"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"                    DateParserUtil.getDurationOfEvent(sDate.toString(), eDate.toString()), scheduleDetails);"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"            return new AddEventCommand(personIndex, event);"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":4,"-":8,"cjianhui":70}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" * Parses input arguments and creates a new DeleteEventCommand object"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"e/\");"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"     * and returns an DeleteEventCommand object for execution."},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON, PREFIX_EVENT);"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON, PREFIX_EVENT)) {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"                    DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        Index[] eventIndexes;"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON).get());"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            String[] arguments \u003d argMultimap.getValue(PREFIX_EVENT).get().trim().split(\" \");"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            eventIndexes \u003d new Index[arguments.length];"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"            for (int i \u003d 0; i \u003c eventIndexes.length; i++) {"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"                eventIndexes[i] \u003d ParserUtil.parseIndex(arguments[i]);"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"            return new DeleteEventCommand(personIndex, eventIndexes);"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":54}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":22,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" * Adds a person to the address book."},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"gdelete\";"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"gd\";"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    public DeleteGroupCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyGroup\u003e lastShownList \u003d model.getFilteredGroupList();"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyGroup groupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"            model.deleteGroup(groupToDelete);"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"            assert false : \"The target group cannot be missing\";"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof DeleteGroupCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteGroupCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":8,"cjianhui":51}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" * Sorts persons according to field specified."},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final String REVERSE_ORDER \u003d \"r\";"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SORT_PERSON_SUCCESS \u003d \"Sorted address book by %1$s in %2$s order.\";"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"No person(s) to sort.\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    private static final String PREFIX_NAME_FIELD \u003d \"n/\";"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    private static final String PREFIX_PHONE_FIELD \u003d \"p/\";"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    private static final String PREFIX_EMAIL_FIELD \u003d \"e/\";"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    private static final String PREFIX_ADDRESS_FIELD \u003d \"a/\";"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"            + \": Sorts persons either in ascending or descending order (ascending by default)\""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"            + \" according to prefix specified (name by default)\\n\""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            + \" prefix including n/, a/, e/, p/\""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: \""},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"            + \"[PREFIX/[r]]\\n\""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_EMAIL_FIELD + REVERSE_ORDER;"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    private final String field;"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    private final boolean isReverseOrder;"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    /*"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        Default values assigned to variable used in MESSAGE_SORT_PERSON_SUCCESS"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    private String sortBy \u003d \"name\";"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    private String order \u003d \"ascending\";"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"     * @param field     specify which field to sort by"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"     * @param isReverseOrder specify if sorting is to be in reverse order"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    public SortCommand(String field, Boolean isReverseOrder) {"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(field);"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(isReverseOrder);"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        this.field \u003d field;"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"        this.isReverseOrder \u003d isReverseOrder;"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"        Comparator\u003cReadOnlyPerson\u003e sortComparator \u003d getSortComparator(this.field);"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"            model.sortPerson(sortComparator, isReverseOrder);"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        } catch (NoPersonsException npe) {"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_EMPTY_LIST);"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        if (isReverseOrder) {"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"            this.order \u003d \"descending\";"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_SORT_PERSON_SUCCESS, sortBy, order));"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    private Comparator\u003cReadOnlyPerson\u003e getSortComparator(String field) {"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"        return (o1, o2) -\u003e {"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"            /** Person(s) marked as \u0027Favourite\u0027 will always remain at the top of the list **/"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"            if (o1.getFavourite().getStatus()) {"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"                if (isReverseOrder) {"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"                    /** Ensure \u0027Favourite\u0027 persons is always greater than when sorted in descending order**/"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"                    return 1;"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"                } else {"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"                    /** Ensure \u0027Favourite\u0027 persons is always smaller than when sorted in ascending order**/"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"                    return -1;"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"                }"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"            switch (field) {"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"            case PREFIX_NAME_FIELD:"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"                this.sortBy \u003d \"name\";"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"                return o1.getName().toString()"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"                        .compareToIgnoreCase(o2.getName().toString()"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"                        );"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"            case PREFIX_PHONE_FIELD:"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"                this.sortBy \u003d \"phone\";"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"                return o1.getPhone().toString()"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"                        .compareToIgnoreCase(o2.getPhone().toString()"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"                        );"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"            case PREFIX_EMAIL_FIELD:"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"                this.sortBy \u003d \"email\";"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"                return o1.getEmail().toString()"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"                        .compareToIgnoreCase(o2.getEmail().toString()"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"                        );"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"            case PREFIX_ADDRESS_FIELD:"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"                this.sortBy \u003d \"address\";"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"                return o1.getAddress().toString()"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"                        .compareToIgnoreCase(o2.getAddress().toString()"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"                        );"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"            default:"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"                this.sortBy \u003d \"name\";"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"                return o1.getName().toString()"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"                        .compareToIgnoreCase(o2.getName().toString()"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"                        );"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"        };"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 field.equals(((SortCommand) other).field)"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 REVERSE_ORDER.equals(((SortCommand) other).REVERSE_ORDER));"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"}"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":""}],"authorContributionMap":{"-":6,"cjianhui":134}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author jianglingshuo"},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_TAG + \"owesMoney \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"-":66,"cjianhui":1,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/CreateGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" * Adds a person to the address book."},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"public class CreateGroupCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"gcreate\";"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"gc\";"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a group in address book. \""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_NAME + \"GROUP NAME \""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_NAME + \"Bamboo\";"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the address book\";"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    private final Group toAdd;"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"     * Creates an CreateGroupCommand to add the specified {@code ReadOnlyGroup}"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public CreateGroupCommand(ReadOnlyGroup group) {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        toAdd \u003d new Group(group);"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            model.addGroup(toAdd);"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicateGroupException dge) {"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof CreateGroupCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 toAdd.equals(((CreateGroupCommand) other).toAdd));"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":6,"cjianhui":50}},{"path":"src/main/java/seedu/address/logic/commands/RemovePersonFromGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"public class RemovePersonFromGroupCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"gremove\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"gr\";"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a person from a group. \""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_GROUP + \"GROUP INDEX \""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"            + \"p/PERSON INDEX\""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_GROUP + \"2\" + \"p/1\";"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Removed %1$s from %2$s.\";"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"This person does not exist in the group.\";"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_EMPTY_GROUP \u003d \"The group is empty.\";"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    private final Index personIndex;"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    private final Index groupIndex;"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"     * Creates an CreateGroupCommand to add the specified {@code ReadOnlyGroup}"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    public RemovePersonFromGroupCommand(Index groupIndex, Index personIndex) {"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        this.groupIndex \u003d groupIndex;"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"        this.personIndex \u003d personIndex;"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyGroup\u003e lastShownGroupList \u003d model.getFilteredGroupList();"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        if (groupIndex.getZeroBased() \u003e\u003d lastShownGroupList.size()) {"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyGroup targetGroup \u003d lastShownGroupList.get(groupIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"        String groupName \u003d targetGroup.getName().toString();"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyPerson toAdd \u003d lastShownPersonList.get(personIndex.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        String personName \u003d toAdd.getName().toString();"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"            model.deletePersonFromGroup(groupIndex, toAdd);"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personName, groupName));"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"            assert false : \"The target group cannot be missing\";"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        } catch (NoPersonsException dpe) {"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_EMPTY_GROUP);"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personName, groupName));"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    public boolean equals (Object other) {"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof RemovePersonFromGroupCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 groupIndex.equals(((RemovePersonFromGroupCommand) other).groupIndex)"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 personIndex.equals(((RemovePersonFromGroupCommand) other).personIndex));"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":10,"cjianhui":80}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"sel\";"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"            + \": Specify prefix g/ to select a group by its index number.\\n\""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: [g/]INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SELECT_GROUP_SUCCESS \u003d \"Selected Group: %1$s\";"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"    private final boolean isGroup;"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public SelectCommand(Index targetIndex, boolean isGroup) {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        this.isGroup \u003d isGroup;"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyGroup\u003e lastShownGroupList \u003d model.getFilteredGroupList();"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"        if (isGroup) {"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownGroupList.size()) {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"            EventsCenter.getInstance().post(new JumpToGroupListRequestEvent(targetIndex));"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_SELECT_GROUP_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"            EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetIndex));"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex))"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.isGroup \u003d\u003d ((SelectCommand) other).isGroup; // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":22,"cjianhui":45}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"e\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":108,"author":{"gitID":"nassy93"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":109,"author":{"gitID":"nassy93"},"content":"        ProfPic updatedProfPic \u003d personToEdit.getProfPic();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editPersonDescriptor.getGroups().orElse(personToEdit.getGroups());"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        Set\u003cSchedule\u003e updatedSchedule \u003d  personToEdit.getSchedule();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"nassy93"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":115,"author":{"gitID":"Procrastinatus"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedSchedule);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private Set\u003cGroup\u003e groups;"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            this.groups \u003d toCopy.groups;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags, this.groups);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public void setGroups(Set\u003cGroup\u003e groups) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            this.groups \u003d groups;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cGroup\u003e\u003e getGroups() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(groups);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":233,"author":{"gitID":"cjianhui"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":224,"cjianhui":5,"nassy93":6}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.exceptions.DuplicateScheduleException;"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":" * Adds a person to the address book."},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"eadd\";"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"ea\";"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to a person\u0027s schedule. \""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            + \" \\nParameters: \""},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"            + \"p/PERSON INDEX \""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_NAME + \"EVENT NAME \""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_START_DATE + \"EVENT START DATE \""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_END_DATE + \"EVENT END DATE \""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"            + \"[\" + PREFIX_DETAILS + \"EVENT DETAILS]\\n\""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"            + \"Date Format: YYYY-MM-DD HH:MM\\n\""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" p/2 \""},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_NAME + \"CS2103 Meeting \""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_START_DATE + \"2017-11-23 10:30 \""},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_END_DATE + \"2017-11-23 11:45 \""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_DETAILS + \"Prepare for Demo\";"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added %1$s to %2$s\u0027s schedule.\";"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_FAIL \u003d \"Unable to add event to %1$s\u0027s schedule.\";"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This event already exists in %1$s\u0027s schedule.\";"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_INVALID_DURATION \u003d \"Please ensure that event \""},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"            + \"start time is before event end time.\";"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_INVALID_START_TIME \u003d \"Please enter a start time after %1$s.\";"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_INVALID_TIME \u003d \"Please enter a valid time.\";"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"    private final Index personIndex;"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"    private final ReadOnlySchedule schedule;"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"     * Creates an AddEventCommand to add the specified {@code ReadOnlySchedule}"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"    public AddEventCommand(Index personIndex, ReadOnlySchedule toAdd) {"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(personIndex);"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        this.personIndex \u003d personIndex;"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"        this.schedule \u003d toAdd;"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyPerson toEdit \u003d lastShownPersonList.get(personIndex.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        String personName \u003d toEdit.getName().toString();"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"        String scheduleName \u003d this.schedule.getName().fullName;"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        Person editedPerson;"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"            editedPerson \u003d addEventToPerson(toEdit, personName);"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"            model.updatePerson(toEdit, editedPerson);"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"        } catch (ParseException e) {"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(String.format(MESSAGE_FAIL, personName));"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot exist in address book\");"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, scheduleName, personName));"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"     * Creates and returns a {@code Person} with a schedule list."},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"    private Person addEventToPerson(ReadOnlyPerson personToEdit, String personName) throws ParseException {"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        ProfPic updatedProfPic \u003d personToEdit.getProfPic();"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"        UniqueScheduleList updatedScheduleList \u003d personToEdit.scheduleProperty().get();"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"            updatedScheduleList.add(this.schedule);"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicateScheduleException e) {"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_DUPLICATE_SCHEDULE, personName));"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"        /** Ensure scheduleList is in order **/"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        updatedScheduleList.sort();"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedScheduleList.toSet());"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 schedule.equals(((AddEventCommand) other).schedule)"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 personIndex.equals(((AddEventCommand) other).personIndex));"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":17,"cjianhui":117,"nassy93":3}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonToGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"public class AddPersonToGroupCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"gadd\";"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"ga\";"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to a group. \""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_GROUP + \"GROUP INDEX \""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"            + \"p/PERSON INDEX\""},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_GROUP + \"2\" + \"p/1\";"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added %1$s to %2$s.\";"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the group.\";"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    private final Index personIndex;"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    private final Index groupIndex;"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"     * Creates an CreateGroupCommand to add the specified {@code ReadOnlyGroup}"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    public AddPersonToGroupCommand(Index groupIndex, Index personIndex) {"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        this.groupIndex \u003d groupIndex;"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        this.personIndex \u003d personIndex;"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyGroup\u003e lastShownGroupList \u003d model.getFilteredGroupList();"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"        if (groupIndex.getZeroBased() \u003e\u003d lastShownGroupList.size()) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyGroup targetGroup \u003d lastShownGroupList.get(groupIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        String groupName \u003d targetGroup.getName().toString();"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyPerson toAdd \u003d lastShownPersonList.get(personIndex.getZeroBased());"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"        String personName \u003d toAdd.getName().toString();"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"            model.addPersonToGroup(groupIndex, toAdd);"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personName, groupName));"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"            assert false : \"The target group cannot be missing\";"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personName, groupName));"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof AddPersonToGroupCommand // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 groupIndex.equals(((AddPersonToGroupCommand) other).groupIndex)"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 personIndex.equals(((AddPersonToGroupCommand) other).personIndex));"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":11,"cjianhui":80}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"content":"//@@author jianglingshuo"},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"f\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names, address, email, \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"phone number or tag or contain (or partially) any of \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Predicate predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public FindCommand(Predicate predicate) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"-":37,"nassy93":1}},{"path":"src/main/java/seedu/address/logic/commands/SetPictureCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitID":"nassy93"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":" * Sets the profile picture for an indexed person."},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"public class SetPictureCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_WORD \u003d \"ppset\";"},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"pps\";"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"            + \": Changes the profile picture of person in given index with picture at given file path.\\n\""},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"            + \"Image file must be .png and optimal size 200 x 200.\\n\""},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"            + \"Parameters: INDEX (must be a positive integer) fp/FILEPATH\\n\""},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 fp/C:\\\\profilepic.png\";"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_SET_PICTURE_PERSON_SUCCESS \u003d \"New profile picture for %1$s has been set\";"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_INVALID_FILE \u003d \"File at given file path was not type .png\";"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_FILE_NOT_EXIST \u003d \"File does not exist at given file path\";"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"    private static String type;"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"    private final Index targetIndex;"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"    private final String filePath;"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"    public SetPictureCommand(Index index, ProfPic filePath) {"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        requireNonNull(index);"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":"        requireNonNull(filePath);"},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":"        this.filePath \u003d filePath.getPath();"},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":62,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"nassy93"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"nassy93"},"content":"        final File file \u003d new File(filePath);"},{"lineNumber":65,"author":{"gitID":"nassy93"},"content":"        System.out.println(filePath);"},{"lineNumber":66,"author":{"gitID":"nassy93"},"content":"        String fileType;"},{"lineNumber":67,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":71,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"nassy93"},"content":"            fileType \u003d Files.probeContentType(file.toPath());"},{"lineNumber":75,"author":{"gitID":"nassy93"},"content":"            if (\"image/png\".equals(fileType)) { // png verification"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":"                type \u003d \".png\";"},{"lineNumber":77,"author":{"gitID":"nassy93"},"content":"            } else if (\"image/jpeg\".equals(fileType)) { // jpg verification"},{"lineNumber":78,"author":{"gitID":"nassy93"},"content":"                type \u003d \".jpg\";"},{"lineNumber":79,"author":{"gitID":"nassy93"},"content":"            } else {"},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"                throw new CommandException(MESSAGE_INVALID_FILE);"},{"lineNumber":81,"author":{"gitID":"nassy93"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"nassy93"},"content":"        } catch (IOException ioException) {"},{"lineNumber":83,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_EXIST);"},{"lineNumber":84,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":86,"author":{"gitID":"nassy93"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":88,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":89,"author":{"gitID":"nassy93"},"content":"        // copy picture to resource/image folder and name copied file as PERSON_NAME.png"},{"lineNumber":90,"author":{"gitID":"nassy93"},"content":"        Path dest \u003d new File(\"images/\" + personToEdit.getName().toString() + type).toPath();"},{"lineNumber":91,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":92,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"nassy93"},"content":"            Files.createDirectories(Paths.get(\"images\")); // Creates missing directories if any"},{"lineNumber":94,"author":{"gitID":"nassy93"},"content":"            Files.copy(file.toPath(), dest, StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":95,"author":{"gitID":"nassy93"},"content":"        } catch (IOException ioException) {"},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"            // ???"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d setPicturePerson(personToEdit);"},{"lineNumber":100,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":101,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"nassy93"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":103,"author":{"gitID":"nassy93"},"content":"        } catch (DuplicatePersonException dpe) { // If duplicate it just means current pic is not default"},{"lineNumber":104,"author":{"gitID":"nassy93"},"content":"            return new CommandResult(String.format(MESSAGE_SET_PICTURE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":105,"author":{"gitID":"nassy93"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":106,"author":{"gitID":"nassy93"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":107,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":109,"author":{"gitID":"nassy93"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":110,"author":{"gitID":"nassy93"},"content":"        return new CommandResult(String.format(MESSAGE_SET_PICTURE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":111,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":113,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"nassy93"},"content":"     * Creates and returns a {@code Person} with the the Favourite attribute set to true."},{"lineNumber":115,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"nassy93"},"content":"    private static Person setPicturePerson(ReadOnlyPerson personToEdit) {"},{"lineNumber":117,"author":{"gitID":"nassy93"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":118,"author":{"gitID":"nassy93"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":119,"author":{"gitID":"nassy93"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":120,"author":{"gitID":"nassy93"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":121,"author":{"gitID":"nassy93"},"content":"        ProfPic updatedProfPic \u003d new ProfPic(updatedName + type);"},{"lineNumber":122,"author":{"gitID":"nassy93"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":123,"author":{"gitID":"nassy93"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":124,"author":{"gitID":"nassy93"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":125,"author":{"gitID":"nassy93"},"content":"        Set\u003cSchedule\u003e updatedSchedule \u003d personToEdit.getSchedule();"},{"lineNumber":126,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":127,"author":{"gitID":"nassy93"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":128,"author":{"gitID":"nassy93"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedSchedule);"},{"lineNumber":129,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":131,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"nassy93"},"content":"                || (other instanceof SetPictureCommand // instanceof handles nulls"},{"lineNumber":135,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.targetIndex.equals(((SetPictureCommand) other).targetIndex) // targetIndex state check"},{"lineNumber":136,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.filePath.equals(((SetPictureCommand) other).filePath)); // filePath state check"},{"lineNumber":137,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":19,"cjianhui":3,"nassy93":116}},{"path":"src/main/java/seedu/address/logic/commands/AddFavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":" * Marks an indexed person as a favourite in the address book."},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"public class AddFavouriteCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_WORD \u003d \"fadd\";"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"fa\";"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"            + \": Marks the person identified by the index number used in the last person listing as a favourite.\\n\""},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been marked as a favourite contact.\";"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_ALREADY_FAVOURITE \u003d \"This person is already marked as a favourite.\";"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"    private final Index targetIndex;"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"    public AddFavouriteCommand(Index index) {"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"        if (personToEdit.getFavourite().getStatus()) {"},{"lineNumber":61,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_ALREADY_FAVOURITE);"},{"lineNumber":62,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":64,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d createFavePerson(personToEdit);"},{"lineNumber":65,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":66,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"nassy93"},"content":"            model.updateFavouritePerson(personToEdit, editedPerson);"},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":71,"author":{"gitID":"nassy93"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":74,"author":{"gitID":"nassy93"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"nassy93"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson));"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":78,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"nassy93"},"content":"     * Creates and returns a {@code Person} with the the Favourite attribute set to true."},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":82,"author":{"gitID":"nassy93"},"content":"    private static Person createFavePerson(ReadOnlyPerson personToEdit) {"},{"lineNumber":83,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":84,"author":{"gitID":"nassy93"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":85,"author":{"gitID":"nassy93"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":86,"author":{"gitID":"nassy93"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":87,"author":{"gitID":"nassy93"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":88,"author":{"gitID":"nassy93"},"content":"        ProfPic updatedProfPic \u003d personToEdit.getProfPic();"},{"lineNumber":89,"author":{"gitID":"nassy93"},"content":"        Favourite updatedFavourite \u003d new Favourite(true);"},{"lineNumber":90,"author":{"gitID":"nassy93"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":91,"author":{"gitID":"nassy93"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":92,"author":{"gitID":"nassy93"},"content":"        Set\u003cSchedule\u003e updatedSchedule \u003d personToEdit.getSchedule();"},{"lineNumber":93,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":94,"author":{"gitID":"nassy93"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":95,"author":{"gitID":"nassy93"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedSchedule);"},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"nassy93"},"content":"                || (other instanceof AddFavouriteCommand // instanceof handles nulls"},{"lineNumber":102,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.targetIndex.equals(((AddFavouriteCommand) other).targetIndex)); // state check"},{"lineNumber":103,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":105,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":16,"cjianhui":3,"nassy93":86}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyGroup\u003e getFilteredGroupList() {"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        return model.getFilteredGroupList();"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"cjianhui":6}},{"path":"src/main/java/seedu/address/logic/commands/ResetPictureCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":" * Resets ProfPic attribute of Indexed person back to default profile picture in the address book."},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"public class ResetPictureCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_WORD \u003d \"ppreset\";"},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"ppr\";"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"            + \": Resets the profile picture of the index number used in the last person listing.\\n\""},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_RESETPICTURE_PERSON_SUCCESS \u003d \"%1$s\u0027s profile picture reset to default .\";"},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_ALREADY_DEFAULT \u003d \"This person\u0027s profile picture is already the default.\";"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"    private final Index targetIndex;"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"    public ResetPictureCommand(Index index) {"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"        requireNonNull(index);"},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":"        Person editedPerson;"},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"            editedPerson \u003d resetProfPicPerson(personToEdit);"},{"lineNumber":61,"author":{"gitID":"nassy93"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":62,"author":{"gitID":"nassy93"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":63,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_ALREADY_DEFAULT);"},{"lineNumber":64,"author":{"gitID":"nassy93"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":65,"author":{"gitID":"nassy93"},"content":"            throw new AssertionError(\"The target person must exist\");"},{"lineNumber":66,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"nassy93"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"        return new CommandResult(String.format(MESSAGE_RESETPICTURE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":71,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"     * Creates and returns a {@code Person} with the the ProfPic attribute set to the default picture\u0027s path."},{"lineNumber":73,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"nassy93"},"content":"    private static Person resetProfPicPerson(ReadOnlyPerson personToEdit) throws DuplicatePersonException {"},{"lineNumber":75,"author":{"gitID":"nassy93"},"content":"        if (\"maleIcon.png\".equals(personToEdit.getProfPic().getPath())) {"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":77,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"nassy93"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":79,"author":{"gitID":"nassy93"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":81,"author":{"gitID":"nassy93"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":82,"author":{"gitID":"nassy93"},"content":"        ProfPic updatedProfPic \u003d new ProfPic(\"maleIcon.png\");"},{"lineNumber":83,"author":{"gitID":"nassy93"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":84,"author":{"gitID":"nassy93"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":85,"author":{"gitID":"nassy93"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":86,"author":{"gitID":"nassy93"},"content":"        Set\u003cSchedule\u003e updatedSchedule \u003d personToEdit.getSchedule();"},{"lineNumber":87,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":88,"author":{"gitID":"nassy93"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":89,"author":{"gitID":"nassy93"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedSchedule);"},{"lineNumber":90,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":92,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"nassy93"},"content":"                || (other instanceof ResetPictureCommand // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.targetIndex.equals(((ResetPictureCommand) other).targetIndex)); // state check"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":16,"cjianhui":3,"nassy93":80}},{"path":"src/main/java/seedu/address/logic/commands/RemoveFavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":26,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":" * Sets Favourite attribute of Indexed person as false in the address book. (remove from favourites)"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"public class RemoveFavouriteCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":32,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_WORD \u003d \"fremove\";"},{"lineNumber":33,"author":{"gitID":"nassy93"},"content":"    public static final String COMMAND_ALT \u003d \"fr\";"},{"lineNumber":34,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":35,"author":{"gitID":"nassy93"},"content":"            + \": Removes the favourite status from the index number used in the last person listing.\\n\""},{"lineNumber":36,"author":{"gitID":"nassy93"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":37,"author":{"gitID":"nassy93"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":38,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":39,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been removed from favourites.\";"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_ALREADY_NORMAL \u003d \"This person is not a favourite.\";"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"    private final Index targetIndex;"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":45,"author":{"gitID":"nassy93"},"content":"    public RemoveFavouriteCommand(Index index) {"},{"lineNumber":46,"author":{"gitID":"nassy93"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"nassy93"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"nassy93"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"nassy93"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":54,"author":{"gitID":"nassy93"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":58,"author":{"gitID":"nassy93"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":60,"author":{"gitID":"nassy93"},"content":"        if (!personToEdit.getFavourite().getStatus()) {"},{"lineNumber":61,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_ALREADY_NORMAL);"},{"lineNumber":62,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":64,"author":{"gitID":"nassy93"},"content":"        Person editedPerson \u003d removeFavePerson(personToEdit);"},{"lineNumber":65,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":66,"author":{"gitID":"nassy93"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"nassy93"},"content":"            model.updateFavouritePerson(personToEdit, editedPerson);"},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":71,"author":{"gitID":"nassy93"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"nassy93"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"nassy93"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson));"},{"lineNumber":75,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":77,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"nassy93"},"content":"     * Creates and returns a {@code Person} with the the Favourite attribute set to true."},{"lineNumber":79,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"    private static Person removeFavePerson(ReadOnlyPerson personToEdit) {"},{"lineNumber":81,"author":{"gitID":"nassy93"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":82,"author":{"gitID":"nassy93"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":83,"author":{"gitID":"nassy93"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":84,"author":{"gitID":"nassy93"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":85,"author":{"gitID":"nassy93"},"content":"        ProfPic updatedProfPic \u003d personToEdit.getProfPic();"},{"lineNumber":86,"author":{"gitID":"nassy93"},"content":"        Favourite updatedFavourite \u003d new Favourite(false);"},{"lineNumber":87,"author":{"gitID":"nassy93"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":88,"author":{"gitID":"nassy93"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":89,"author":{"gitID":"nassy93"},"content":"        Set\u003cSchedule\u003e updatedSchedule \u003d personToEdit.getSchedule();"},{"lineNumber":90,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":91,"author":{"gitID":"nassy93"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedFavourite,"},{"lineNumber":92,"author":{"gitID":"nassy93"},"content":"                updatedProfPic, updatedTags, updatedGroups, updatedSchedule);"},{"lineNumber":93,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":95,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"nassy93"},"content":"                || (other instanceof RemoveFavouriteCommand // instanceof handles nulls"},{"lineNumber":99,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemoveFavouriteCommand) other).targetIndex)); // state check"},{"lineNumber":100,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"-":16,"cjianhui":3,"nassy93":82}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"nassy93"},"content":"    private Boolean favourite;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"    private String profPic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    private List\u003cXmlAdaptedGroup\u003e grouped \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    @XmlElement"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    private List\u003cXmlAdaptedSchedule\u003e schedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":"        favourite \u003d source.getFavourite().value;"},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":"        profPic \u003d source.getProfPic().path;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        grouped \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        for (ReadOnlyGroup group: source.getGroups()) {"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"            grouped.add(new XmlAdaptedGroup(group));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"        schedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"        for (ReadOnlySchedule event: source.getSchedule()) {"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"            schedule.add(new XmlAdaptedSchedule(event));"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final List\u003cGroup\u003e personGroups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"        for (XmlAdaptedGroup group: grouped) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            personGroups.add(group.toModelType());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"        final List\u003cSchedule\u003e personSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"        for (XmlAdaptedSchedule event: schedule) {"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"            personSchedule.add(event.toModelType());"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":112,"author":{"gitID":"nassy93"},"content":"        final Favourite favourite \u003d new Favourite(this.favourite);"},{"lineNumber":113,"author":{"gitID":"nassy93"},"content":"        final ProfPic profPic \u003d new ProfPic(this.profPic);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"        final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e(personGroups);"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"        final Set\u003cSchedule\u003e schedules \u003d new LinkedHashSet\u003c\u003e(personSchedule);"},{"lineNumber":117,"author":{"gitID":"Procrastinatus"},"content":"        return new Person(name, phone, email, address, favourite, profPic, tags, groups, schedules);"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":86,"cjianhui":23,"nassy93":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.GroupName;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"public class XmlAdaptedGroup {"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    private String groupName;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    private List\u003cXmlAdaptedPerson\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"     * Constructs an XmlAdaptedGroup."},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    public XmlAdaptedGroup() {}"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    public XmlAdaptedGroup(ReadOnlyGroup source) {"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        groupName \u003d source.getName().toString();"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        for (ReadOnlyPerson person: source.getMembers()) {"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"            members.add(new XmlAdaptedPerson(person));"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"     * Converts this jaxb-friendly adapted group object into the model\u0027s Group object."},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        for (XmlAdaptedPerson person: members) {"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"            personList.add(person.toModelType());"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        final GroupName groupName \u003d new GroupName(this.groupName);"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"        final Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e(personList);"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        return new Group(groupName, persons);"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":6,"cjianhui":56}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedGroup\u003e groups;"},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    private List\u003cXmlAdaptedSchedule\u003e schedules;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        schedules \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                return t.toModelType();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyGroup\u003e getGroupList() {"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        final ObservableList\u003cReadOnlyGroup\u003e groups \u003d this.groups.stream().map(g -\u003e {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                return g.toModelType();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(groups);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":87,"cjianhui":5}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":211,"cjianhui":1}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedSchedule.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.ScheduleDate;"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ScheduleName;"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":" * JAXB-friendly adapted version of the Schedule."},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"public class XmlAdaptedSchedule {"},{"lineNumber":16,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":17,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"    private String scheduleName;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":"    private String startDateTime;"},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"    private String endDateTime;"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"    private String scheduleDuration;"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"    private String scheduleDetails;"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"     * Constructs an XmlAdaptedSchedule."},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"    public XmlAdaptedSchedule() {}"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"     * Converts a given Schedule into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"    public XmlAdaptedSchedule(ReadOnlySchedule source) {"},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"        scheduleName \u003d source.getName().toString();"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"        startDateTime \u003d source.getStartDateTime().toString();"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"        endDateTime \u003d source.getEndDateTime().toString();"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"        scheduleDuration \u003d source.getScheduleDuration();"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"        scheduleDetails \u003d source.getScheduleDetails();"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"     * Converts this jaxb-friendly adapted schedule object into the model\u0027s Schedule object."},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":"    public Schedule toModelType() throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"        final ScheduleName scheduleName \u003d new ScheduleName(this.scheduleName);"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"        final ScheduleDate startDateTime \u003d new ScheduleDate(this.startDateTime);"},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"        final ScheduleDate endDateTime \u003d new ScheduleDate(this.endDateTime);"},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"        final String scheduleDuration \u003d this.scheduleDuration;"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":"        final String scheduleDetails \u003d this.scheduleDetails;"},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"        return new Schedule(scheduleName, startDateTime, endDateTime, scheduleDuration, scheduleDetails);"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":57,"-":3,"cjianhui":1}},{"path":"src/main/java/seedu/address/model/schedule/ScheduleDate.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" * Represents a Schedule\u0027s date string in the address book."},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" * Guarantees: immutable; Valid schedule date"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"public class ScheduleDate {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SCHEDULE_DATE_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"            \"Schedule date should be in the following format: \""},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"            + \"YYYY-MM-DD HH:MM\";"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public final String scheduleDateString;"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    public final Date scheduleDate;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     * Validates given name."},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"     * @throws ParseException if given name string is invalid."},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    public ScheduleDate(String date) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(date);"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        DateFormat dateInput \u003d new SimpleDateFormat(\"yyyy-MM-dd hh:mm\");"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"            scheduleDate \u003d dateInput.parse(date);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"        } catch (java.text.ParseException e) {"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(MESSAGE_SCHEDULE_DATE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        this.scheduleDateString \u003d date;"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        return scheduleDateString;"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    public Date getScheduleDate() {"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"        return scheduleDate; }"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof ScheduleDate // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.scheduleDate.equals(((ScheduleDate) other).scheduleDate)); // state check"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        return scheduleDate.hashCode();"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":4,"cjianhui":60}},{"path":"src/main/java/seedu/address/model/schedule/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":" * Represents a Schedule in an address book."},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"public class Schedule implements ReadOnlySchedule {"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cScheduleName\u003e scheduleName;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cScheduleDate\u003e startDateTime;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cScheduleDate\u003e endDateTime;"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    private SimpleStringProperty scheduleDuration;"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    private SimpleStringProperty scheduleDetails \u003d new SimpleStringProperty();"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    public Schedule(ScheduleName name, ScheduleDate startDateTime, ScheduleDate endDateTime,"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"                    String scheduleDuration, String scheduleDetails) {"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        this.scheduleName \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        this.startDateTime \u003d new SimpleObjectProperty\u003c\u003e(startDateTime);"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        this.endDateTime \u003d new SimpleObjectProperty\u003c\u003e(endDateTime);"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        this.scheduleDuration \u003d new SimpleStringProperty(scheduleDuration);"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        this.scheduleDetails \u003d new SimpleStringProperty(scheduleDetails);"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    public Schedule(String name) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"        this.scheduleName \u003d new SimpleObjectProperty\u003c\u003e(new ScheduleName(name));"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"     * Creates a copy of the given ReadOnlySchedule."},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    public Schedule(ReadOnlySchedule source) {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        this(source.getName(), source.getStartDateTime(), source.getEndDateTime(),"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"                source.getScheduleDuration(), source.getScheduleDetails());"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof Schedule // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.scheduleName.toString().equals(((Schedule) other).scheduleName.toString())"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.startDateTime.toString().equals(((Schedule) other).startDateTime.toString())"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.endDateTime.toString().equals(((Schedule) other).endDateTime.toString())); // state check"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        return scheduleName.hashCode();"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"     * Format state as text for viewing."},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        return getAsText();"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cScheduleName\u003e nameProperty() {"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        return scheduleName;"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"    public ScheduleName getName() {"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"        return scheduleName.get();"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cScheduleDate\u003e startDateTimeProperty() {"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"        return startDateTime;"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"    public ScheduleDate getStartDateTime() {"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        return startDateTime.get();"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cScheduleDate\u003e endDateTimeProperty() {"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"        return endDateTime;"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"    public ScheduleDate getEndDateTime() {"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"        return endDateTime.get();"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"    public void setScheduleName(ScheduleName name) {"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"        this.scheduleName.set(requireNonNull(name));"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"    public String getScheduleDuration() {"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        return scheduleDuration.get();"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"    public SimpleStringProperty scheduleDurationProperty() {"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        return scheduleDuration;"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"    public String getScheduleDetails() {"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"        return scheduleDetails.get();"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"    public SimpleStringProperty scheduleDetailsProperty() {"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"        return scheduleDetails;"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":6,"cjianhui":119}},{"path":"src/main/java/seedu/address/model/schedule/exceptions/ScheduleNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule.exceptions;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"public class ScheduleNotFoundException extends Exception {}"}],"authorContributionMap":{"Procrastinatus":7}},{"path":"src/main/java/seedu/address/model/schedule/ScheduleName.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":" * Represents a Schedule\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"public class ScheduleName {"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"    public final String fullName;"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"     * Constructs a ScheduleName object"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    public ScheduleName(String name) {"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"        return fullName;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof ScheduleName // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.fullName.equals(((ScheduleName) other).fullName)); // state check"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        return fullName.hashCode();"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":3,"cjianhui":35}},{"path":"src/main/java/seedu/address/model/schedule/exceptions/DuplicateScheduleException.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule.exceptions;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":" * Signals that the operation will result in duplicate Schedule objects."},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"public class DuplicateScheduleException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"Procrastinatus"},"content":"    public DuplicateScheduleException() {"},{"lineNumber":11,"author":{"gitID":"Procrastinatus"},"content":"        super(\"Operation would result in duplicate schedules\");"},{"lineNumber":12,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"Procrastinatus"},"content":"}"}],"authorContributionMap":{"Procrastinatus":12,"-":1}},{"path":"src/main/java/seedu/address/model/schedule/exceptions/NoSchedulesException.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule.exceptions;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":4,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":" * Signals that the operation is unable to sort due to an empty list."},{"lineNumber":6,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Procrastinatus"},"content":"public class NoSchedulesException extends Exception {}"}],"authorContributionMap":{"Procrastinatus":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.GroupName;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new Person[] {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    public static Group[] getSampleGroups() {"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"            return new Group[] {"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"                new Group(new GroupName(\"Bamboo\")),"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"                new Group(new GroupName(\"W09-B4\")),"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"                new Group(new GroupName(\"Night Owls\")),"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"                new Group(new GroupName(\"Avengers\")),"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"                new Group(new GroupName(\"Uni Friends\"))"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"            for (Group sampleGroup : getSampleGroups()) {"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"                sampleAb.addGroup(sampleGroup);"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate groups\", e);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns a group set containing the list of strings given."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Set\u003cGroup\u003e getGroupSet(String... strings) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        HashSet\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            groups.add(new Group(s));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return groups;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":85,"cjianhui":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_ID;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.googlecalendarutil.EventParserUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.exceptions.DuplicateScheduleException;"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":" * Pulls Google Calendar events of a person."},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"public class AddCalendarCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"cadd\";"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"ca\";"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds Google Calendar events or a schedule to a person.\""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"            + \"Parameters: \""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            + \"p/PERSON INDEX \""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            + PREFIX_CALENDAR_ID + \"GOOGLE_CALENDAR_ID\" + \"\\n\""},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"            + \"p/2 \" + PREFIX_CALENDAR_ID + \"xderek105243x@gmail.com\";"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_CALENDAR_PULL_SUCCESS \u003d \"Added %1$s Google Calendar Event(s) to %2$s.\";"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_INVALID_CALENDAR_ID \u003d \"Google Calendar ID is invalid.\";"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_CALENDAR_PULL_FAIL \u003d \"Unable to pull events from Google Calendar.\";"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_DATETIME_ERROR \u003d \"Error parsing datetime.\";"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_NO_UPDATE \u003d \"%1$s\u0027s schedule list is up-to-date.\";"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    private final Index personIndex;"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    private final String calendarId;"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"    private int addedEvents;"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"     * Creates an CreateGroupCommand to add the specified {@code ReadOnlyGroup}"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    public AddCalendarCommand(Index personIndex, String calendarId) {"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"        this.personIndex \u003d personIndex;"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyPerson toEdit \u003d lastShownPersonList.get(personIndex.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        String personName \u003d toEdit.getName().toString();"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        Person editedPerson;"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"            editedPerson \u003d addCalendarToPerson(toEdit);"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"        } catch (ParseException e) {"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_CALENDAR_PULL_FAIL);"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"            model.updatePerson(toEdit, editedPerson);"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot exist in address book\");"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"        if (addedEvents \u003d\u003d 0) {"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_NO_UPDATE, personName));"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"            return new CommandResult(String.format(MESSAGE_CALENDAR_PULL_SUCCESS, addedEvents, personName));"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"     * Creates and returns a {@code Person} with a schedule list."},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"    private Person addCalendarToPerson(ReadOnlyPerson personToEdit) throws ParseException, CommandException {"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        UniqueScheduleList updatedScheduleList \u003d personToEdit.scheduleProperty().get();"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"            UniqueScheduleList scheduleList \u003d EventParserUtil.getScheduleList(this.calendarId);"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"            for (Schedule s: scheduleList) {"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"                try {"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"                    updatedScheduleList.add(s);"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"                    addedEvents++;"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"                } catch (DuplicateScheduleException dse) {"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"                    continue;"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"                }"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"            if (addedEvents \u003e 0) {"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"                updatedScheduleList.sort();"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_INVALID_CALENDAR_ID);"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(MESSAGE_DATETIME_ERROR);"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"                updatedFavourite, updatedTags, updatedScheduleList.toSet());"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof AddCalendarCommand // instanceof handles nulls"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 personIndex.equals(((AddCalendarCommand) other).personIndex));"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":2,"-":19,"cjianhui":124,"nassy93":2}},{"path":"src/main/java/seedu/address/model/schedule/ReadOnlySchedule.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":3,"author":{"gitID":"Procrastinatus"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":5,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" * A read-only immutable interface for a Schedule in the addressbook."},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"public interface ReadOnlySchedule {"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cScheduleName\u003e nameProperty();"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    ScheduleName getName();"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cScheduleDate\u003e startDateTimeProperty();"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    ScheduleDate getStartDateTime();"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cScheduleDate\u003e endDateTimeProperty();"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    ScheduleDate getEndDateTime();"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    String getScheduleDuration();"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"    SimpleStringProperty scheduleDurationProperty();"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    String getScheduleDetails();"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"    SimpleStringProperty scheduleDetailsProperty();"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    default boolean isSameStateAs(ReadOnlySchedule other) {"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getName().equals(this.getName())"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getStartDateTime().equals(this.getStartDateTime())"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getEndDateTime().equals(this.getEndDateTime())"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getScheduleDuration().equals(this.getScheduleDuration())); // state checks here onwards"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"     * Formats the Schedule as text, showing schedule name."},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    default String getAsText() {"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        builder.append(getName())"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"                .append(\" Schedule Name: \")"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"                .append(getName());"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"        return builder.toString();"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":4,"cjianhui":45}},{"path":"src/main/java/seedu/address/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":" * Represents a Group in an address book."},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"public class Group implements ReadOnlyGroup {"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cGroupName\u003e groupName;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"     * A Group will have an empty persons list by default"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cUniquePersonList\u003e groupMembers \u003d"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"            new SimpleObjectProperty\u003c\u003e(new UniquePersonList());"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    public Group(GroupName name) {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        this.groupName \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    public Group(GroupName name, Set\u003cPerson\u003e groupMembers) {"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(name, groupMembers);"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"        this.groupName \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"        this.groupMembers \u003d new SimpleObjectProperty\u003c\u003e(new UniquePersonList(groupMembers));"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":"    public Group(String name) throws IllegalValueException {"},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"        this.groupName \u003d new SimpleObjectProperty\u003c\u003e(new GroupName(name));"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"     * Creates a copy of the given ReadOnlyGroup."},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    public Group(ReadOnlyGroup source) {"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"        this(source.getName(), source.getMembers());"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof Group // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.groupName.toString().equals(((Group) other).groupName.toString())); // state check"},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        return groupName.hashCode();"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     * Format state as text for viewing."},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        return getAsText();"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"    public void addMember(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        this.groupMembers.get().add(person);"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"    public void deleteMember(ReadOnlyPerson person) throws PersonNotFoundException {"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"        this.groupMembers.get().remove(person);"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cGroupName\u003e nameProperty() {"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"        return groupName;"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"    public GroupName getName() {"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        return groupName.get();"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cUniquePersonList\u003e groupMembersProperty() {"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"        return groupMembers;"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"    public void setGroupName(GroupName name) {"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"        this.groupName.set(requireNonNull(name));"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"    public Set\u003cPerson\u003e getMembers() {"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        return groupMembers.get().toSet();"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":14,"cjianhui":101}},{"path":"src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"public class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"    public DuplicateGroupException() {"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"        super(\"Operation would result in duplicate groups\");"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"cjianhui":12,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.Favourite;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"import seedu.address.model.person.ProfPic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.exceptions.ScheduleNotFoundException;"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":" * Removes an event from a person\u0027s schedule."},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"public class DeleteEventCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_WORD \u003d \"edelete\";"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    public static final String COMMAND_ALT \u003d \"ed\";"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes event(s) from a person\u0027s schedule. \""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"            + \" \\nParameters: \""},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"            + \"p/PERSON INDEX \""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"            + \"e/EVENT INDEX [EVENT INDEX...]\\n\""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"            + \"Example: \" + COMMAND_WORD + \" p/2 \""},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"            + \"e/1 2 3\";"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Removed %1$s event(s) from %2$s.\";"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_FAIL \u003d \"Unable to remove event from %1$s\u0027s schedule.\";"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_NO_EVENTS \u003d \"%1$s\u0027s schedule list is empty.\";"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_NO_SUCH_EVENT \u003d \"Event does not exist.\";"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    private final Index personIndex;"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    private Index[] eventIndexes;"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"     * Creates an AddEventCommand to add the specified {@code ReadOnlySchedule}"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    public DeleteEventCommand(Index personIndex, Index[] eventIndexes) {"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(personIndex);"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(eventIndexes);"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"        this.personIndex \u003d personIndex;"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"        this.eventIndexes \u003d eventIndexes;"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"        List\u003cReadOnlyPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"        ReadOnlyPerson toEdit \u003d lastShownPersonList.get(personIndex.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"        String personName \u003d toEdit.getName().toString();"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"        int numberOfEvents \u003d this.eventIndexes.length;"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"        Person editedPerson;"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"            editedPerson \u003d removeEventFromPerson(toEdit);"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"            model.updatePerson(toEdit, editedPerson);"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"        } catch (ParseException e) {"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"            throw new CommandException(String.format(MESSAGE_FAIL, personName));"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot exist in address book\");"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, numberOfEvents, personName));"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"     * Creates and returns a {@code Person} with a schedule list."},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    private Person removeEventFromPerson(ReadOnlyPerson personToEdit) throws ParseException {"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"        Favourite updatedFavourite \u003d personToEdit.getFavourite();"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"        ProfPic updatedProfPic \u003d personToEdit.getProfPic();"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d personToEdit.getGroups();"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"        UniqueScheduleList updatedScheduleList \u003d personToEdit.scheduleProperty().get();"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"        if (updatedScheduleList.asObservableList().isEmpty()) {"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"            throw new ParseException(String.format(MESSAGE_NO_EVENTS, updatedName.fullName));"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        ReadOnlySchedule[] schedulesToDelete \u003d new ReadOnlySchedule[eventIndexes.length];"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        for (int i \u003d 0; i \u003c eventIndexes.length; i++) {"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"            try {"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"                schedulesToDelete[i] \u003d updatedScheduleList.asObservableList().get(eventIndexes[i].getZeroBased());"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"                throw new ParseException(MESSAGE_NO_SUCH_EVENT);"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"        for (int i \u003d 0; i \u003c eventIndexes.length; i++) {"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"            try {"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"                updatedScheduleList.remove(schedulesToDelete[i]);"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"            } catch (ScheduleNotFoundException e) {"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"                throw new ParseException(MESSAGE_NO_SUCH_EVENT);"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"                updatedFavourite, updatedProfPic, updatedTags, updatedGroups,"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":"                updatedScheduleList.toSet());"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 eventIndexes.equals(((DeleteEventCommand) other).eventIndexes)"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 personIndex.equals(((DeleteEventCommand) other).personIndex));"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":17,"cjianhui":116,"nassy93":4}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"public class GroupNotFoundException extends Exception {}"}],"authorContributionMap":{"cjianhui":7}},{"path":"src/main/java/seedu/address/model/group/exceptions/NoGroupsException.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":" * Signals that the operation is unable to sort due to an empty list."},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"public class NoGroupsException extends Exception {}"}],"authorContributionMap":{"cjianhui":7}},{"path":"src/main/java/seedu/address/model/schedule/UniqueScheduleList.java","lines":[{"lineNumber":1,"author":{"gitID":"Procrastinatus"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.exceptions.DuplicateScheduleException;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.exceptions.ScheduleNotFoundException;"},{"lineNumber":20,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":21,"author":{"gitID":"Procrastinatus"},"content":"//@@author Procrastinatus"},{"lineNumber":22,"author":{"gitID":"Procrastinatus"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Procrastinatus"},"content":" * A list of schedules that enforces no nulls and uniqueness between its elements."},{"lineNumber":24,"author":{"gitID":"Procrastinatus"},"content":" *"},{"lineNumber":25,"author":{"gitID":"Procrastinatus"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":26,"author":{"gitID":"Procrastinatus"},"content":" *"},{"lineNumber":27,"author":{"gitID":"Procrastinatus"},"content":" * @see Schedule#equals(Object)"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":30,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":"public class UniqueScheduleList implements Iterable\u003cSchedule\u003e {"},{"lineNumber":32,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":33,"author":{"gitID":"Procrastinatus"},"content":"    private final ObservableList\u003cSchedule\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":34,"author":{"gitID":"Procrastinatus"},"content":"    // used by asObservableList()"},{"lineNumber":35,"author":{"gitID":"Procrastinatus"},"content":"    private final ObservableList\u003cReadOnlySchedule\u003e mappedList \u003d EasyBind.map(internalList, (schedule) -\u003e schedule);"},{"lineNumber":36,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Procrastinatus"},"content":"     * Creates a UniqueScheduleList using given Schedules."},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"     * Enforces no nulls."},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":"    public UniqueScheduleList(Set\u003cSchedule\u003e schedules) {"},{"lineNumber":42,"author":{"gitID":"Procrastinatus"},"content":"        requireAllNonNull(schedules);"},{"lineNumber":43,"author":{"gitID":"Procrastinatus"},"content":"        internalList.addAll(schedules);"},{"lineNumber":44,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":45,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":46,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":48,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Procrastinatus"},"content":"     * Constructs empty ScheduleList."},{"lineNumber":50,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Procrastinatus"},"content":"    public UniqueScheduleList() {}"},{"lineNumber":52,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Procrastinatus"},"content":"     * Returns all schedules in this list as a Set."},{"lineNumber":55,"author":{"gitID":"Procrastinatus"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":56,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":58,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Procrastinatus"},"content":"     * Returns true if the list contains an equivalent Schedule as the given argument."},{"lineNumber":60,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Procrastinatus"},"content":"    public boolean contains(ReadOnlySchedule toCheck) {"},{"lineNumber":62,"author":{"gitID":"Procrastinatus"},"content":"        requireNonNull(toCheck);"},{"lineNumber":63,"author":{"gitID":"Procrastinatus"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":64,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":66,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Procrastinatus"},"content":"     * Returns a set representation of the schedule."},{"lineNumber":68,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Procrastinatus"},"content":"    public Set\u003cSchedule\u003e toSet() {"},{"lineNumber":70,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"Procrastinatus"},"content":"        /** Used LinkedHashSet to preserve insertion order **/"},{"lineNumber":72,"author":{"gitID":"Procrastinatus"},"content":"        return new LinkedHashSet\u003c\u003e(internalList);"},{"lineNumber":73,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":75,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Procrastinatus"},"content":"     * Ensures every schedule in the argument list exists in this object."},{"lineNumber":77,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Procrastinatus"},"content":"    public void mergeFrom(UniqueScheduleList from) {"},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"        final Set\u003cSchedule\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"        from.internalList.stream()"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":"                .filter(schedule -\u003e !alreadyInside.contains(schedule))"},{"lineNumber":82,"author":{"gitID":"Procrastinatus"},"content":"                .forEach(internalList::add);"},{"lineNumber":83,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":84,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":85,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":87,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"Procrastinatus"},"content":"     * Adds a Schedule to the list."},{"lineNumber":89,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"Procrastinatus"},"content":"     * @throws seedu.address.model.schedule.exceptions.DuplicateScheduleException"},{"lineNumber":91,"author":{"gitID":"Procrastinatus"},"content":"     * if the Schedule to add is a duplicate of an existing Schedule in the list."},{"lineNumber":92,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Procrastinatus"},"content":"    public void add(ReadOnlySchedule toAdd) throws DuplicateScheduleException {"},{"lineNumber":94,"author":{"gitID":"Procrastinatus"},"content":"        requireNonNull(toAdd);"},{"lineNumber":95,"author":{"gitID":"Procrastinatus"},"content":"        if (contains(toAdd)) {"},{"lineNumber":96,"author":{"gitID":"Procrastinatus"},"content":"            throw new DuplicateScheduleException();"},{"lineNumber":97,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":99,"author":{"gitID":"Procrastinatus"},"content":"        internalList.add(new Schedule(toAdd));"},{"lineNumber":100,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":101,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":102,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":104,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Procrastinatus"},"content":"     * Removes the equivalent schedule from the list."},{"lineNumber":106,"author":{"gitID":"Procrastinatus"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"Procrastinatus"},"content":"     * @throws ScheduleNotFoundException if no such schedule could be found in the list."},{"lineNumber":108,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Procrastinatus"},"content":"    public boolean remove(ReadOnlySchedule toRemove) throws ScheduleNotFoundException {"},{"lineNumber":110,"author":{"gitID":"Procrastinatus"},"content":"        requireNonNull(toRemove);"},{"lineNumber":111,"author":{"gitID":"Procrastinatus"},"content":"        final boolean scheduleFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":112,"author":{"gitID":"Procrastinatus"},"content":"        if (!scheduleFoundAndDeleted) {"},{"lineNumber":113,"author":{"gitID":"Procrastinatus"},"content":"            throw new ScheduleNotFoundException();"},{"lineNumber":114,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Procrastinatus"},"content":"        return scheduleFoundAndDeleted;"},{"lineNumber":116,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":118,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Procrastinatus"},"content":"    public Iterator\u003cSchedule\u003e iterator() {"},{"lineNumber":120,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":121,"author":{"gitID":"Procrastinatus"},"content":"        return internalList.iterator();"},{"lineNumber":122,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":124,"author":{"gitID":"Procrastinatus"},"content":"    public void setSchedules(UniqueScheduleList replacement) {"},{"lineNumber":125,"author":{"gitID":"Procrastinatus"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":126,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":128,"author":{"gitID":"Procrastinatus"},"content":"    public void setSchedules(List\u003c? extends ReadOnlySchedule\u003e schedules) throws DuplicateScheduleException {"},{"lineNumber":129,"author":{"gitID":"Procrastinatus"},"content":"        final UniqueScheduleList replacement \u003d new UniqueScheduleList();"},{"lineNumber":130,"author":{"gitID":"Procrastinatus"},"content":"        for (final ReadOnlySchedule schedule: schedules) {"},{"lineNumber":131,"author":{"gitID":"Procrastinatus"},"content":"            replacement.add(new Schedule(schedule));"},{"lineNumber":132,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Procrastinatus"},"content":"        setSchedules(replacement);"},{"lineNumber":134,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":136,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"Procrastinatus"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":138,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"Procrastinatus"},"content":"    public ObservableList\u003cReadOnlySchedule\u003e asObservableList() {"},{"lineNumber":140,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":141,"author":{"gitID":"Procrastinatus"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":142,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":144,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"Procrastinatus"},"content":"    public boolean equals(Object other) {"},{"lineNumber":146,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":147,"author":{"gitID":"Procrastinatus"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":148,"author":{"gitID":"Procrastinatus"},"content":"                || (other instanceof seedu.address.model.schedule.UniqueScheduleList // instanceof handles nulls"},{"lineNumber":149,"author":{"gitID":"Procrastinatus"},"content":"                \u0026\u0026 this.internalList.equals(((seedu.address.model.schedule.UniqueScheduleList) other).internalList));"},{"lineNumber":150,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":152,"author":{"gitID":"Procrastinatus"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"Procrastinatus"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":154,"author":{"gitID":"Procrastinatus"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":155,"author":{"gitID":"Procrastinatus"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"Procrastinatus"},"content":"    public boolean equalsOrderInsensitive(seedu.address.model.schedule.UniqueScheduleList other) {"},{"lineNumber":157,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":158,"author":{"gitID":"Procrastinatus"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":159,"author":{"gitID":"Procrastinatus"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":160,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":162,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":163,"author":{"gitID":"cjianhui"},"content":"    /** Sorts scheduleList by schedule end dateTime **/"},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":"    public void sort() {"},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":"        Collections.sort(internalList, (s1, s2) -\u003e {"},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"            if (s1.getEndDateTime().scheduleDate.getTime() \u003c s2.getEndDateTime().scheduleDate.getTime()) {"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":"                return -1;"},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":"            } else if (s1.getEndDateTime().scheduleDate.getTime() \u003d\u003d s2.getEndDateTime().scheduleDate.getTime()) {"},{"lineNumber":169,"author":{"gitID":"cjianhui"},"content":"                return 0;"},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":"            } else {"},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"                return 1;"},{"lineNumber":172,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"cjianhui"},"content":"        });"},{"lineNumber":174,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":175,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":177,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"Procrastinatus"},"content":"}"},{"lineNumber":185,"author":{"gitID":"Procrastinatus"},"content":""}],"authorContributionMap":{"Procrastinatus":147,"-":17,"cjianhui":21}},{"path":"src/main/java/seedu/address/model/person/Favourite.java","lines":[{"lineNumber":1,"author":{"gitID":"nassy93"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":3,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":4,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"nassy93"},"content":" * Stores a person\u0027s current \"Favourite\" status"},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":" *"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":8,"author":{"gitID":"nassy93"},"content":"public class Favourite {"},{"lineNumber":9,"author":{"gitID":"nassy93"},"content":"    public final Boolean value;"},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"    public Favourite(Boolean val) {"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"        value \u003d val;"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"    public boolean getStatus() {"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"        return value;"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"                || (other instanceof Favourite // instanceof handles nulls"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.value.equals(((Favourite) other).value)); // state check"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"nassy93":25}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":8,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":9,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":27,"author":{"gitID":"nassy93"},"content":"    ObjectProperty\u003cFavourite\u003e favouriteProperty();"},{"lineNumber":28,"author":{"gitID":"nassy93"},"content":"    Favourite getFavourite();"},{"lineNumber":29,"author":{"gitID":"nassy93"},"content":"    ObjectProperty\u003cProfPic\u003e profPicProperty();"},{"lineNumber":30,"author":{"gitID":"nassy93"},"content":"    ProfPic getProfPic();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueGroupList\u003e groupProperty();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    Set\u003cGroup\u003e getGroups();"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cUniqueScheduleList\u003e scheduleProperty();"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    Set\u003cSchedule\u003e getSchedule();"},{"lineNumber":37,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":48,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":49,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 other.getFavourite().equals(this.getFavourite())"},{"lineNumber":50,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 other.getProfPic().equals(this.getProfPic()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":3,"-":58,"cjianhui":2,"nassy93":7}},{"path":"src/main/java/seedu/address/model/group/GroupName.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"public class GroupName {"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d \"Group names should contain only \""},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":"            + \"alphanumeric characters, spaces, underscores and dashes\";"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    public static final String GROUP_VALIDATION_REGEX \u003d \"^[a-zA-Z0-9]([\\\\w -]*[a-zA-Z0-9])?$\";"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"    public final String fullName;"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"     * Validates given name."},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":"    public GroupName(String name) throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(name);"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"            throw new IllegalValueException(MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"        return test.matches(GROUP_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        return fullName;"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof GroupName // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.fullName.equals(((GroupName) other).fullName)); // state check"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"        return fullName.hashCode();"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"cjianhui":59,"-":5}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":24,"author":{"gitID":"-"},"content":" *"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":26,"author":{"gitID":"-"},"content":" *"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"     * Constructs empty UniquePersonList."},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    public UniquePersonList() {}"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"     * Creates a UniquePersonList using given persons."},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"     * Enforces no nulls."},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    public UniquePersonList(Set\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(persons);"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"        internalList.addAll(persons);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     * Sorts persons in address book by field and in order specified."},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"     * @param sortComparator"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"     * @param isReverseOrder"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"     * @throws NoPersonsException"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"    public void sort(Comparator sortComparator, Boolean isReverseOrder) throws NoPersonsException {"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(sortComparator);"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(isReverseOrder);"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"        if (internalList.size() \u003c 1) {"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"            throw new NoPersonsException();"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        Collections.sort(internalList, sortComparator);"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"        if (isReverseOrder) {"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"            Collections.reverse(internalList);"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"     * Replaces the person {@code target} in the list with {@code favouritePerson}."},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"    public void setFavourite(ReadOnlyPerson target, ReadOnlyPerson favouritePerson)"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(favouritePerson);"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        if (!target.equals(favouritePerson) \u0026\u0026 internalList.contains(favouritePerson)) {"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"        int targetIndex;"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"        /** Main favourite (fadd) logic"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"         * If person is marked as favourite, remove it from its current position"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"         * Attempt to insert at the head of the list"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"         * If the person at the top is favourite"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"         * Find new position where:"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"         * It\u0027s lexicographically smaller than the person\u0027s name preceding it"},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"         * i.e If the edited person\u0027s name is Ben, it should come after Alex, if Alex is marked as favourite"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"         * Insert at the new position"},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"         */"},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":150,"author":{"gitID":"cjianhui"},"content":"        if (favouritePerson.getFavourite().getStatus()) {"},{"lineNumber":151,"author":{"gitID":"cjianhui"},"content":"            targetIndex \u003d 0;"},{"lineNumber":152,"author":{"gitID":"cjianhui"},"content":"            ReadOnlyPerson currentPerson;"},{"lineNumber":153,"author":{"gitID":"cjianhui"},"content":"            for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":154,"author":{"gitID":"cjianhui"},"content":"                currentPerson \u003d internalList.get(i);"},{"lineNumber":155,"author":{"gitID":"cjianhui"},"content":"                if (currentPerson.getFavourite().getStatus()) {"},{"lineNumber":156,"author":{"gitID":"cjianhui"},"content":"                    if (currentPerson.getName().fullName.compareTo(favouritePerson.getName().fullName) \u003c 0) {"},{"lineNumber":157,"author":{"gitID":"cjianhui"},"content":"                        targetIndex++;"},{"lineNumber":158,"author":{"gitID":"cjianhui"},"content":"                    }"},{"lineNumber":159,"author":{"gitID":"cjianhui"},"content":"                }"},{"lineNumber":160,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":162,"author":{"gitID":"cjianhui"},"content":"            internalList.remove(index);"},{"lineNumber":163,"author":{"gitID":"cjianhui"},"content":"            internalList.add(targetIndex, new Person(favouritePerson));"},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":"            /** Main favourite (fremove) logic"},{"lineNumber":169,"author":{"gitID":"cjianhui"},"content":"             * If person is unmarked as favourite, insert person at new position"},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":"             * Find new position where:"},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"             * New position should be after all the favourites"},{"lineNumber":172,"author":{"gitID":"cjianhui"},"content":"             * Insert at the new position"},{"lineNumber":173,"author":{"gitID":"cjianhui"},"content":"             */"},{"lineNumber":174,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":175,"author":{"gitID":"cjianhui"},"content":"            targetIndex \u003d index;"},{"lineNumber":176,"author":{"gitID":"cjianhui"},"content":"            for (int i \u003d index + 1; i \u003c internalList.size(); i++) {"},{"lineNumber":177,"author":{"gitID":"cjianhui"},"content":"                if (internalList.get(i).getFavourite().getStatus()) {"},{"lineNumber":178,"author":{"gitID":"cjianhui"},"content":"                    targetIndex++;"},{"lineNumber":179,"author":{"gitID":"cjianhui"},"content":"                }"},{"lineNumber":180,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":182,"author":{"gitID":"cjianhui"},"content":"            /** If there is no change in position, do not remove person"},{"lineNumber":183,"author":{"gitID":"cjianhui"},"content":"             *  Continue with normal edit logic"},{"lineNumber":184,"author":{"gitID":"cjianhui"},"content":"             */"},{"lineNumber":185,"author":{"gitID":"cjianhui"},"content":"            if (targetIndex !\u003d index) {"},{"lineNumber":186,"author":{"gitID":"cjianhui"},"content":"                internalList.remove(index);"},{"lineNumber":187,"author":{"gitID":"cjianhui"},"content":"                internalList.add(targetIndex, new Person(favouritePerson));"},{"lineNumber":188,"author":{"gitID":"cjianhui"},"content":"            } else {"},{"lineNumber":189,"author":{"gitID":"cjianhui"},"content":"                internalList.set(index, new Person(favouritePerson));"},{"lineNumber":190,"author":{"gitID":"cjianhui"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":194,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":195,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":196,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"cjianhui"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":198,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":200,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"cjianhui"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":202,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toRemove);"},{"lineNumber":203,"author":{"gitID":"cjianhui"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":204,"author":{"gitID":"cjianhui"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":205,"author":{"gitID":"cjianhui"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":206,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"cjianhui"},"content":"        return personFoundAndDeleted;"},{"lineNumber":208,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":210,"author":{"gitID":"cjianhui"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":211,"author":{"gitID":"cjianhui"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":212,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":214,"author":{"gitID":"cjianhui"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":215,"author":{"gitID":"cjianhui"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":216,"author":{"gitID":"cjianhui"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":217,"author":{"gitID":"cjianhui"},"content":"            replacement.add(new Person(person));"},{"lineNumber":218,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"cjianhui"},"content":"        setPersons(replacement);"},{"lineNumber":220,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":222,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"cjianhui"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":224,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":226,"author":{"gitID":"cjianhui"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":227,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":229,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"cjianhui"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":231,"author":{"gitID":"cjianhui"},"content":"        return internalList.iterator();"},{"lineNumber":232,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":234,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":236,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":237,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":238,"author":{"gitID":"cjianhui"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":239,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":241,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":243,"author":{"gitID":"cjianhui"},"content":"        return internalList.hashCode();"},{"lineNumber":244,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":246,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"cjianhui"},"content":"     * Returns all persons in this list as a Set."},{"lineNumber":248,"author":{"gitID":"cjianhui"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":249,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"cjianhui"},"content":"    public Set\u003cPerson\u003e toSet() {"},{"lineNumber":251,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":252,"author":{"gitID":"cjianhui"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":253,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"-":71,"cjianhui":183}},{"path":"src/main/java/seedu/address/model/group/ReadOnlyGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"cjianhui"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":" * A read-only immutable interface for a Group in the addressbook."},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"public interface ReadOnlyGroup {"},{"lineNumber":15,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cGroupName\u003e nameProperty();"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"    GroupName getName();"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"    ObjectProperty\u003cUniquePersonList\u003e groupMembersProperty();"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"    Set\u003cPerson\u003e getMembers();"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":23,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"    default boolean isSameStateAs(ReadOnlyGroup other) {"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 other.getMembers().equals(this.getMembers()));"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"     * Formats the Group as text, showing group name."},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"    default String getAsText() {"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":"        builder.append(getName())"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"                .append(\" Group Name: \")"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"                .append(getName());"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"        return builder.toString();"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"}"}],"authorContributionMap":{"cjianhui":41,"-":1}},{"path":"src/main/java/seedu/address/model/person/exceptions/NoPersonsException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":" * Signals that the operation is unable to sort due to an empty list."},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"public class NoPersonsException extends Exception {}"}],"authorContributionMap":{"-":3,"cjianhui":3}},{"path":"src/main/java/seedu/address/model/person/ProfPic.java","lines":[{"lineNumber":1,"author":{"gitID":"nassy93"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":3,"author":{"gitID":"nassy93"},"content":"//@@author nassy93"},{"lineNumber":4,"author":{"gitID":"nassy93"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"nassy93"},"content":" * Stores the filepath to a person\u0027s current profile picture"},{"lineNumber":6,"author":{"gitID":"nassy93"},"content":" *"},{"lineNumber":7,"author":{"gitID":"nassy93"},"content":" */"},{"lineNumber":8,"author":{"gitID":"nassy93"},"content":"public class ProfPic {"},{"lineNumber":9,"author":{"gitID":"nassy93"},"content":"    public final String path;"},{"lineNumber":10,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":11,"author":{"gitID":"nassy93"},"content":"    public ProfPic(String val) {"},{"lineNumber":12,"author":{"gitID":"nassy93"},"content":"        path \u003d val;"},{"lineNumber":13,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":15,"author":{"gitID":"nassy93"},"content":"    public String getPath() {"},{"lineNumber":16,"author":{"gitID":"nassy93"},"content":"        return path;"},{"lineNumber":17,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":19,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"nassy93"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"nassy93"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"nassy93"},"content":"                || (other instanceof ProfPic // instanceof handles nulls"},{"lineNumber":23,"author":{"gitID":"nassy93"},"content":"                \u0026\u0026 this.path.equals(((ProfPic) other).path)); // state check"},{"lineNumber":24,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"nassy93"},"content":"}"}],"authorContributionMap":{"nassy93":25}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":14,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":"     *  A Person will have an empty group list by default"},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cUniqueGroupList\u003e groups \u003d new SimpleObjectProperty\u003c\u003e(new UniqueGroupList());"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"     *  A Person will not be marked as favourite by default"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cFavourite\u003e favourite \u003d new SimpleObjectProperty\u003c\u003e(new Favourite(false));"},{"lineNumber":41,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"nassy93"},"content":"     *  A Person will have a generic profile picture by default. will search in /resources by default?"},{"lineNumber":43,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nassy93"},"content":"    private ObjectProperty\u003cProfPic\u003e profPic \u003d new SimpleObjectProperty\u003c\u003e(new ProfPic(\"maleIcon.png\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    *  A Person will have an empty schedule list by default"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":"    */"},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    private ObjectProperty\u003cUniqueScheduleList\u003e schedule \u003d new SimpleObjectProperty\u003c\u003e(new UniqueScheduleList());"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":53,"author":{"gitID":"Procrastinatus"},"content":"     * Standard Constructor"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"nassy93"},"content":"    //@@author nassy93"},{"lineNumber":66,"author":{"gitID":"nassy93"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"nassy93"},"content":"     * Every field must be present and not null."},{"lineNumber":68,"author":{"gitID":"nassy93"},"content":"     * Constructor for Favourite feature"},{"lineNumber":69,"author":{"gitID":"nassy93"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"nassy93"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Favourite favourite,"},{"lineNumber":71,"author":{"gitID":"nassy93"},"content":"                  ProfPic profPic, Set\u003cTag\u003e tags) {"},{"lineNumber":72,"author":{"gitID":"nassy93"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":73,"author":{"gitID":"nassy93"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":74,"author":{"gitID":"nassy93"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":75,"author":{"gitID":"nassy93"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":76,"author":{"gitID":"nassy93"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":77,"author":{"gitID":"nassy93"},"content":"        this.favourite \u003d new SimpleObjectProperty\u003c\u003e(favourite);"},{"lineNumber":78,"author":{"gitID":"nassy93"},"content":"        this.profPic \u003d new SimpleObjectProperty\u003c\u003e(profPic);"},{"lineNumber":79,"author":{"gitID":"nassy93"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":80,"author":{"gitID":"nassy93"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":81,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"     * Constructor for Schedule feature"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Favourite favourite,"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"                  Set\u003cTag\u003e tags, Set\u003cSchedule\u003e schedule) {"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(name, phone, email, address, favourite, tags, schedule);"},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"        this.favourite \u003d new SimpleObjectProperty\u003c\u003e(favourite);"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        this.schedule \u003d new SimpleObjectProperty\u003c\u003e(new UniqueScheduleList(schedule));"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"     * Every field must be present and not null."},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"     * Constructor for Group feature"},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cGroup\u003e groups) {"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(name, phone, email, address, tags, groups);"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"        // protect internal groups from changes in the arg list"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"        this.groups \u003d new SimpleObjectProperty\u003c\u003e(new UniqueGroupList(groups));"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"     * Constructor for XMLAdaptedPerson"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Favourite favourite,"},{"lineNumber":123,"author":{"gitID":"Procrastinatus"},"content":"                  ProfPic profPic, Set\u003cTag\u003e tags, Set\u003cGroup\u003e groups, Set\u003cSchedule\u003e schedule) {"},{"lineNumber":124,"author":{"gitID":"Procrastinatus"},"content":"        requireAllNonNull(name, phone, email, address, tags, groups, schedule);"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":130,"author":{"gitID":"nassy93"},"content":"        this.favourite \u003d new SimpleObjectProperty\u003c\u003e(favourite);"},{"lineNumber":131,"author":{"gitID":"nassy93"},"content":"        this.profPic \u003d new SimpleObjectProperty\u003c\u003e(profPic);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // protect internal groups from changes in the arg list"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        this.groups \u003d new SimpleObjectProperty\u003c\u003e(new UniqueGroupList(groups));"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        this.schedule \u003d new SimpleObjectProperty\u003c\u003e(new UniqueScheduleList(schedule));"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getFavourite(),"},{"lineNumber":144,"author":{"gitID":"Procrastinatus"},"content":"                source.getProfPic(), source.getTags(), source.getGroups(), source.getSchedule());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void setFavourite(Favourite fav) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        this.favourite.set(fav);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":207,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"nassy93"},"content":"    public ObjectProperty\u003cFavourite\u003e favouriteProperty() {"},{"lineNumber":209,"author":{"gitID":"nassy93"},"content":"        return favourite;"},{"lineNumber":210,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":212,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"nassy93"},"content":"    public Favourite getFavourite() {"},{"lineNumber":214,"author":{"gitID":"nassy93"},"content":"        return favourite.get();"},{"lineNumber":215,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":217,"author":{"gitID":"nassy93"},"content":"    public void setProfPic(ProfPic profPic) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        this.profPic.set(profPic);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":221,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"nassy93"},"content":"    public ObjectProperty\u003cProfPic\u003e profPicProperty() {"},{"lineNumber":223,"author":{"gitID":"nassy93"},"content":"        return profPic;"},{"lineNumber":224,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":226,"author":{"gitID":"nassy93"},"content":"    @Override"},{"lineNumber":227,"author":{"gitID":"nassy93"},"content":"    public ProfPic getProfPic() {"},{"lineNumber":228,"author":{"gitID":"nassy93"},"content":"        return profPic.get();"},{"lineNumber":229,"author":{"gitID":"nassy93"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"nassy93"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public Set\u003cGroup\u003e getGroups() {"},{"lineNumber":242,"author":{"gitID":"cjianhui"},"content":"        return groups.get().toSet();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"cjianhui"},"content":"    public Set\u003cSchedule\u003e getSchedule() {"},{"lineNumber":247,"author":{"gitID":"cjianhui"},"content":"        return Collections.unmodifiableSet(schedule.get().toSet());"},{"lineNumber":248,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueGroupList\u003e groupProperty() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return groups;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"cjianhui"},"content":"    public ObjectProperty\u003cUniqueScheduleList\u003e scheduleProperty() {"},{"lineNumber":262,"author":{"gitID":"cjianhui"},"content":"        return schedule;"},{"lineNumber":263,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s groups with the groups in the argument group set."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public void setGroups(Set\u003cGroup\u003e replacement) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        groups.set(new UniqueGroupList(replacement));"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"cjianhui"},"content":"     * Replaces this person\u0027s schedule with the schedule in the argument schedule set."},{"lineNumber":280,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"cjianhui"},"content":"    public void setSchedule(Set\u003cSchedule\u003e replacement) {"},{"lineNumber":282,"author":{"gitID":"cjianhui"},"content":"        schedule.set(new UniqueScheduleList(replacement)); }"},{"lineNumber":283,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags, groups);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":6,"-":171,"cjianhui":78,"nassy93":47}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the groups list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate groups."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":"    ObservableList\u003cReadOnlyGroup\u003e getGroupList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":1,"-":29,"cjianhui":2}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniqueGroupList groups;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        groups \u003d new UniqueGroupList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"     * Creates an AddressBook using the Persons, Tags and Groups in the {@code toBeCopied}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"    public void setGroups(List\u003c? extends ReadOnlyGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.groups.setGroups(groups);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"            setGroups(newData.getGroupList());"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"            assert false : \"AddressBooks should not have duplicate groups\";"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        syncMasterGroupListWith(persons);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        syncMasterGroupListWith(newPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        syncMasterGroupListWith(editedPerson);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // TODO: the tags master list and the groups master list will be updated even though the below line fails."},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"        // This can cause the tags master list and group master list to have additional"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        // tags or groups that are not tagged to any person"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":138,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"     * Replaces the given person {@code target} in the list with {@code editedFavouritePerson}."},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedFavouritePerson}."},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"     *      another existing person in the list."},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"cjianhui"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":151,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"cjianhui"},"content":"    public void updateFavouriteStatus(ReadOnlyPerson target, ReadOnlyPerson editedFavouritePerson)"},{"lineNumber":153,"author":{"gitID":"cjianhui"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(editedFavouritePerson);"},{"lineNumber":155,"author":{"gitID":"cjianhui"},"content":"        Person editedPerson \u003d new Person(editedFavouritePerson);"},{"lineNumber":156,"author":{"gitID":"cjianhui"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":157,"author":{"gitID":"cjianhui"},"content":"        syncMasterGroupListWith(editedPerson);"},{"lineNumber":158,"author":{"gitID":"cjianhui"},"content":"        persons.setFavourite(target, editedPerson);"},{"lineNumber":159,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":161,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":162,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"cjianhui"},"content":"     * Sorts persons in address book."},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"    public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortComparator, boolean isReverseOrder)"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":"            throws NoPersonsException {"},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":"        persons.sort(sortComparator, isReverseOrder);"},{"lineNumber":169,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"cjianhui"},"content":"     * Ensures that every group in this person:"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #groups}"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     *  - points to a Group object in the master list"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private void syncMasterGroupListWith(Person person) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        final UniqueGroupList personGroups \u003d new UniqueGroupList(person.getGroups());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        groups.mergeFrom(personGroups);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // Create map with values \u003d group object references in the master list"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // used for checking person group references"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        final Map\u003cGroup, Group\u003e masterGroupObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        groups.forEach(group -\u003e masterGroupObjects.put(group, group));"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // Rebuild the list of person groups to point to the relevant groups in the master group list."},{"lineNumber":217,"author":{"gitID":"-"},"content":"        final Set\u003cGroup\u003e correctGroupReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        personGroups.forEach(group -\u003e correctGroupReferences.add(masterGroupObjects.get(group)));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        person.setGroups(correctGroupReferences);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Ensures that every group in these persons:"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #groups}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     *  - points to a Group object in the master list"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     *  @see #syncMasterGroupListWith(Person)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void syncMasterGroupListWith(UniquePersonList persons) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterGroupListWith);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":251,"author":{"gitID":"cjianhui"},"content":"    //// group-level operations"},{"lineNumber":252,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":253,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"cjianhui"},"content":"     * Adds a group to the address book."},{"lineNumber":255,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":256,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicateGroupException if an equivalent group already exists."},{"lineNumber":257,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":259,"author":{"gitID":"cjianhui"},"content":"    public void addGroup(ReadOnlyGroup g) throws DuplicateGroupException {"},{"lineNumber":260,"author":{"gitID":"cjianhui"},"content":"        Group newGroup \u003d new Group(g);"},{"lineNumber":261,"author":{"gitID":"cjianhui"},"content":"        groups.add(newGroup);"},{"lineNumber":262,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":264,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"cjianhui"},"content":"     * Adds a person to a group in the address book."},{"lineNumber":266,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":267,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if group does not exist."},{"lineNumber":268,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if person does not exist."},{"lineNumber":269,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":270,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":271,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":273,"author":{"gitID":"cjianhui"},"content":"    public void addPersonToGroup(Index targetGroup, ReadOnlyPerson toAdd)"},{"lineNumber":274,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":275,"author":{"gitID":"cjianhui"},"content":"        groups.addPersonToGroup(targetGroup, toAdd);"},{"lineNumber":276,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":278,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"cjianhui"},"content":"     * Adds a person to a group in the address book."},{"lineNumber":280,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":281,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if group does not exist."},{"lineNumber":282,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if person does not exist."},{"lineNumber":283,"author":{"gitID":"cjianhui"},"content":"     * @throws NoPersonsException if group is empty."},{"lineNumber":284,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":285,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":287,"author":{"gitID":"cjianhui"},"content":"    public void deletePersonFromGroup(Index targetGroup, ReadOnlyPerson toAdd)"},{"lineNumber":288,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, PersonNotFoundException, NoPersonsException {"},{"lineNumber":289,"author":{"gitID":"cjianhui"},"content":"        groups.removePersonFromGroup(targetGroup, toAdd);"},{"lineNumber":290,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":292,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"cjianhui"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":294,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":295,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"cjianhui"},"content":"    public boolean removeGroup(ReadOnlyGroup key) throws GroupNotFoundException {"},{"lineNumber":297,"author":{"gitID":"cjianhui"},"content":"        if (groups.remove(key)) {"},{"lineNumber":298,"author":{"gitID":"cjianhui"},"content":"            return true;"},{"lineNumber":299,"author":{"gitID":"cjianhui"},"content":"        } else {"},{"lineNumber":300,"author":{"gitID":"cjianhui"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":301,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":304,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":308,"author":{"gitID":"cjianhui"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":309,"author":{"gitID":"cjianhui"},"content":"                + groups.asObservableList().size() + \" groups, \""},{"lineNumber":310,"author":{"gitID":"cjianhui"},"content":"                + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":311,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":326,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyGroup\u003e getGroupList() {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        return groups.asObservableList();"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":333,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":334,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":335,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":336,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.groups.equalsOrderInsensitive(((AddressBook) other).groups);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags, groups);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":235,"cjianhui":109}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":19,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":21,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    private final FilteredList\u003cReadOnlyGroup\u003e filteredGroups;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"        filteredGroups \u003d new FilteredList\u003c\u003e(this.addressBook.getGroupList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"Procrastinatus"},"content":"    //@@author Procrastinatus"},{"lineNumber":80,"author":{"gitID":"Procrastinatus"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"Procrastinatus"},"content":"    public synchronized void deletePersons(ReadOnlyPerson[] targets) throws PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"Procrastinatus"},"content":"        for (ReadOnlyPerson target : targets) {"},{"lineNumber":83,"author":{"gitID":"Procrastinatus"},"content":"            addressBook.removePerson(target);"},{"lineNumber":84,"author":{"gitID":"Procrastinatus"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Procrastinatus"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"Procrastinatus"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"Procrastinatus"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Procrastinatus"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"    public void updateFavouritePerson(ReadOnlyPerson target, ReadOnlyPerson favouritePerson)"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(target, favouritePerson);"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        addressBook.updateFavouriteStatus(target, favouritePerson);"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"        indicateAddressBookChanged();"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":"    public void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortComparator, boolean isReverseOrder)"},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"            throws NoPersonsException {"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"        addressBook.sortPerson(sortComparator, isReverseOrder);"},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"    public void addGroup(ReadOnlyGroup group) throws DuplicateGroupException {"},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"        addressBook.addGroup(group);"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"        updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"    public void deleteGroup(ReadOnlyGroup target) throws GroupNotFoundException {"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":"        addressBook.removeGroup(target);"},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"        indicateAddressBookChanged();"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"    public void addPersonToGroup(Index targetGroup, ReadOnlyPerson toAdd)"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        addressBook.addPersonToGroup(targetGroup, toAdd);"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"        indicateAddressBookChanged();"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"    public void deletePersonFromGroup(Index targetGroup, ReadOnlyPerson toRemove)"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, PersonNotFoundException, NoPersonsException {"},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"        addressBook.deletePersonFromGroup(targetGroup, toRemove);"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"        /** Update filtered list with predicate for current group members in group after removing a person */"},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"        ObservableList\u003cReadOnlyPerson\u003e personList \u003d addressBook.getGroupList()"},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"                .get(targetGroup.getZeroBased()).groupMembersProperty().get().asObservableList();"},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"        updateFilteredPersonList(getGroupMembersPredicate(personList));"},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"        indicateAddressBookChanged();"},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":150,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyGroup\u003e getFilteredGroupList() {"},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"        return FXCollections.unmodifiableObservableList(filteredGroups);"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":175,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"cjianhui"},"content":"    public void updateFilteredGroupList(Predicate\u003cReadOnlyGroup\u003e predicate) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":178,"author":{"gitID":"cjianhui"},"content":"        filteredGroups.setPredicate(predicate);"},{"lineNumber":179,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":181,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":182,"author":{"gitID":"cjianhui"},"content":"    /** Returns predicate that returns true if group member list contains a person */"},{"lineNumber":183,"author":{"gitID":"cjianhui"},"content":"    /** Used to update FilteredPersonList whenever there is a need to display group members */"},{"lineNumber":184,"author":{"gitID":"cjianhui"},"content":"    public Predicate\u003cReadOnlyPerson\u003e getGroupMembersPredicate(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":185,"author":{"gitID":"cjianhui"},"content":"        return personList::contains;"},{"lineNumber":186,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":188,"author":{"gitID":"cjianhui"},"content":"    /** Handle any GroupPanelSelectionChangedEvent raised and set predicate to show group members only */"},{"lineNumber":189,"author":{"gitID":"cjianhui"},"content":"    @Subscribe"},{"lineNumber":190,"author":{"gitID":"cjianhui"},"content":"    private void handleGroupPanelSelectionChangedEvent(GroupPanelSelectionChangedEvent event) {"},{"lineNumber":191,"author":{"gitID":"cjianhui"},"content":"        ObservableList\u003cReadOnlyPerson\u003e personList \u003d event.getNewSelection()"},{"lineNumber":192,"author":{"gitID":"cjianhui"},"content":"                .group.groupMembersProperty().get().asObservableList();"},{"lineNumber":193,"author":{"gitID":"cjianhui"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":194,"author":{"gitID":"cjianhui"},"content":"        updateFilteredPersonList(getGroupMembersPredicate(personList));"},{"lineNumber":195,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":197,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":213,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":214,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 filteredGroups.equals(other.filteredGroups);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":218,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":12,"-":117,"cjianhui":90}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.ReadOnlyGroup;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":10,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Procrastinatus"},"content":"import seedu.address.model.schedule.ReadOnlySchedule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"    Predicate\u003cReadOnlyGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":28,"author":{"gitID":"Procrastinatus"},"content":"    Predicate\u003cReadOnlySchedule\u003e PREDICATE_SHOW_ALL_SCHEDULES \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Procrastinatus"},"content":"    /** Deletes the given persons. */"},{"lineNumber":40,"author":{"gitID":"Procrastinatus"},"content":"    void deletePersons(ReadOnlyPerson[] targets) throws PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"Procrastinatus"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"    /** Sorts address book list */"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"    void sortPerson(Comparator\u003cReadOnlyPerson\u003e sortComparator, boolean isReverseOrder) throws NoPersonsException;"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"    /** Adds the given group */"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    void addGroup(ReadOnlyGroup group) throws DuplicateGroupException;"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    /** Deletes the given group */"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"    void deleteGroup(ReadOnlyGroup group) throws GroupNotFoundException;"},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    void addPersonToGroup(Index targetGroup, ReadOnlyPerson toAdd) throws"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":"            GroupNotFoundException, PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"    /** Deletes given person from given group */"},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"    void deletePersonFromGroup(Index targetGroup, ReadOnlyPerson toRemove) throws"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"            GroupNotFoundException, PersonNotFoundException, NoPersonsException;"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":"    //@@author cjianhui"},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"     * Replaces the given person {@code target} with {@code favouritePerson}."},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"     *      another existing person in the list."},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"    void updateFavouritePerson(ReadOnlyPerson target, ReadOnlyPerson favouritePerson)"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    //@@author"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"    /** Returns an unmodifiable view of the filtered group list */"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"    ObservableList\u003cReadOnlyGroup\u003e getFilteredGroupList();"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":"     * Updates the filter of the filtered group list to filter by the given {@code predicate}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":"    void updateFilteredGroupList(Predicate\u003cReadOnlyGroup\u003e predicate);"},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Procrastinatus":6,"-":52,"cjianhui":46}},{"path":"src/main/java/seedu/address/model/group/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"cjianhui"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"cjianhui"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"cjianhui"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":13,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"cjianhui"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":19,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"cjianhui"},"content":"import seedu.address.model.person.exceptions.NoPersonsException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"cjianhui"},"content":"//@@author cjianhui"},{"lineNumber":26,"author":{"gitID":"cjianhui"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"cjianhui"},"content":" * A list of groups that enforces no nulls and uniqueness between its elements."},{"lineNumber":28,"author":{"gitID":"cjianhui"},"content":" *"},{"lineNumber":29,"author":{"gitID":"cjianhui"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":30,"author":{"gitID":"cjianhui"},"content":" *"},{"lineNumber":31,"author":{"gitID":"cjianhui"},"content":" * @see Group#equals(Object)"},{"lineNumber":32,"author":{"gitID":"cjianhui"},"content":" */"},{"lineNumber":33,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":34,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":35,"author":{"gitID":"cjianhui"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":36,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":37,"author":{"gitID":"cjianhui"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":38,"author":{"gitID":"cjianhui"},"content":"    // used by asObservableList()"},{"lineNumber":39,"author":{"gitID":"cjianhui"},"content":"    private final ObservableList\u003cReadOnlyGroup\u003e mappedList \u003d EasyBind.map(internalList, (group) -\u003e group);"},{"lineNumber":40,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":41,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"cjianhui"},"content":"     * Creates a UniqueGroupList using given Groups."},{"lineNumber":43,"author":{"gitID":"cjianhui"},"content":"     * Enforces no nulls."},{"lineNumber":44,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"cjianhui"},"content":"    public UniqueGroupList(Set\u003cGroup\u003e groups) {"},{"lineNumber":46,"author":{"gitID":"cjianhui"},"content":"        requireAllNonNull(groups);"},{"lineNumber":47,"author":{"gitID":"cjianhui"},"content":"        internalList.addAll(groups);"},{"lineNumber":48,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":49,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":52,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"cjianhui"},"content":"     * Constructs empty UniqueGroupList."},{"lineNumber":54,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"cjianhui"},"content":"    public UniqueGroupList() {}"},{"lineNumber":56,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":57,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"cjianhui"},"content":"     * Returns true if the list contains an equivalent Group as the given argument."},{"lineNumber":59,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"cjianhui"},"content":"    public boolean contains(ReadOnlyGroup toCheck) {"},{"lineNumber":61,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toCheck);"},{"lineNumber":62,"author":{"gitID":"cjianhui"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":63,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":65,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"cjianhui"},"content":"     * Returns all groups in this list as a Set."},{"lineNumber":67,"author":{"gitID":"cjianhui"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":68,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"cjianhui"},"content":"    public Set\u003cGroup\u003e toSet() {"},{"lineNumber":70,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"cjianhui"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":72,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":74,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"cjianhui"},"content":"     * Ensures every group in the argument list exists in this object."},{"lineNumber":76,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"cjianhui"},"content":"    public void mergeFrom(UniqueGroupList from) {"},{"lineNumber":78,"author":{"gitID":"cjianhui"},"content":"        final Set\u003cGroup\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":79,"author":{"gitID":"cjianhui"},"content":"        from.internalList.stream()"},{"lineNumber":80,"author":{"gitID":"cjianhui"},"content":"                .filter(group -\u003e !alreadyInside.contains(group))"},{"lineNumber":81,"author":{"gitID":"cjianhui"},"content":"                .forEach(internalList::add);"},{"lineNumber":82,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":83,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":84,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":86,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"cjianhui"},"content":"     * Adds a Group to the list."},{"lineNumber":88,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"cjianhui"},"content":"     * @throws seedu.address.model.group.exceptions.DuplicateGroupException"},{"lineNumber":90,"author":{"gitID":"cjianhui"},"content":"     * if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":91,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"cjianhui"},"content":"    public void add(ReadOnlyGroup toAdd) throws DuplicateGroupException {"},{"lineNumber":93,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":94,"author":{"gitID":"cjianhui"},"content":"        if (contains(toAdd)) {"},{"lineNumber":95,"author":{"gitID":"cjianhui"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":96,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"cjianhui"},"content":"        internalList.add(new Group(toAdd));"},{"lineNumber":98,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":99,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":100,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":102,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"cjianhui"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":104,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if no such group could be found in the list."},{"lineNumber":106,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"cjianhui"},"content":"    public boolean remove(ReadOnlyGroup toRemove) throws GroupNotFoundException {"},{"lineNumber":108,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toRemove);"},{"lineNumber":109,"author":{"gitID":"cjianhui"},"content":"        final boolean groupFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":110,"author":{"gitID":"cjianhui"},"content":"        if (!groupFoundAndDeleted) {"},{"lineNumber":111,"author":{"gitID":"cjianhui"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":112,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"cjianhui"},"content":"        return groupFoundAndDeleted;"},{"lineNumber":114,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":116,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"cjianhui"},"content":"     * Adds person to specified group in the list."},{"lineNumber":118,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if no such group could be found in the list."},{"lineNumber":120,"author":{"gitID":"cjianhui"},"content":"     * @throws DuplicatePersonException if an equivalent person exists in the list."},{"lineNumber":121,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":122,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"cjianhui"},"content":"    public void addPersonToGroup(Index target, ReadOnlyPerson toAdd)"},{"lineNumber":124,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":126,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(target);"},{"lineNumber":127,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":128,"author":{"gitID":"cjianhui"},"content":"        Group targetGroup \u003d internalList.get(target.getZeroBased());"},{"lineNumber":129,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":130,"author":{"gitID":"cjianhui"},"content":"        if (isNull(targetGroup)) {"},{"lineNumber":131,"author":{"gitID":"cjianhui"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":132,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":134,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"cjianhui"},"content":"            targetGroup.addMember(toAdd);"},{"lineNumber":136,"author":{"gitID":"cjianhui"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":137,"author":{"gitID":"cjianhui"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":138,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":140,"author":{"gitID":"cjianhui"},"content":"        internalList.set(target.getZeroBased(), targetGroup);"},{"lineNumber":141,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":143,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"cjianhui"},"content":"     * Removes person from specified group in the list."},{"lineNumber":145,"author":{"gitID":"cjianhui"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"cjianhui"},"content":"     * @throws GroupNotFoundException if no such group could be found in the list."},{"lineNumber":147,"author":{"gitID":"cjianhui"},"content":"     * @throws NoPersonsException if list is empty."},{"lineNumber":148,"author":{"gitID":"cjianhui"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":149,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"cjianhui"},"content":"    public void removePersonFromGroup(Index target, ReadOnlyPerson toAdd)"},{"lineNumber":151,"author":{"gitID":"cjianhui"},"content":"            throws GroupNotFoundException, NoPersonsException, PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":153,"author":{"gitID":"cjianhui"},"content":"        requireNonNull(target);"},{"lineNumber":154,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":155,"author":{"gitID":"cjianhui"},"content":"        Group targetGroup \u003d internalList.get(target.getZeroBased());"},{"lineNumber":156,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":157,"author":{"gitID":"cjianhui"},"content":"        if (targetGroup.getMembers().size() \u003c 1) {"},{"lineNumber":158,"author":{"gitID":"cjianhui"},"content":"            throw new NoPersonsException();"},{"lineNumber":159,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":161,"author":{"gitID":"cjianhui"},"content":"        if (isNull(targetGroup)) {"},{"lineNumber":162,"author":{"gitID":"cjianhui"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":163,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":165,"author":{"gitID":"cjianhui"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"cjianhui"},"content":"            targetGroup.deleteMember(toAdd);"},{"lineNumber":167,"author":{"gitID":"cjianhui"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":168,"author":{"gitID":"cjianhui"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":169,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":171,"author":{"gitID":"cjianhui"},"content":"        internalList.set(target.getZeroBased(), targetGroup);"},{"lineNumber":172,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":174,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"cjianhui"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":176,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":177,"author":{"gitID":"cjianhui"},"content":"        return internalList.iterator();"},{"lineNumber":178,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":180,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":181,"author":{"gitID":"cjianhui"},"content":"    public void setGroups(UniqueGroupList replacement) {"},{"lineNumber":182,"author":{"gitID":"cjianhui"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":183,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":185,"author":{"gitID":"cjianhui"},"content":"    public void setGroups(List\u003c? extends ReadOnlyGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":186,"author":{"gitID":"cjianhui"},"content":"        final UniqueGroupList replacement \u003d new UniqueGroupList();"},{"lineNumber":187,"author":{"gitID":"cjianhui"},"content":"        for (final ReadOnlyGroup group : groups) {"},{"lineNumber":188,"author":{"gitID":"cjianhui"},"content":"            replacement.add(new Group(group));"},{"lineNumber":189,"author":{"gitID":"cjianhui"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"cjianhui"},"content":"        setGroups(replacement);"},{"lineNumber":191,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":193,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":194,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"cjianhui"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":196,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"cjianhui"},"content":"    public ObservableList\u003cReadOnlyGroup\u003e asObservableList() {"},{"lineNumber":198,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":199,"author":{"gitID":"cjianhui"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":200,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":202,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"cjianhui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":204,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":205,"author":{"gitID":"cjianhui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":206,"author":{"gitID":"cjianhui"},"content":"                || (other instanceof seedu.address.model.group.UniqueGroupList // instanceof handles nulls"},{"lineNumber":207,"author":{"gitID":"cjianhui"},"content":"                \u0026\u0026 this.internalList.equals(((seedu.address.model.group.UniqueGroupList) other).internalList));"},{"lineNumber":208,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":210,"author":{"gitID":"cjianhui"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"cjianhui"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":212,"author":{"gitID":"cjianhui"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":213,"author":{"gitID":"cjianhui"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"cjianhui"},"content":"    public boolean equalsOrderInsensitive(seedu.address.model.group.UniqueGroupList other) {"},{"lineNumber":215,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":216,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":217,"author":{"gitID":"cjianhui"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":218,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":220,"author":{"gitID":"cjianhui"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"cjianhui"},"content":"    public int hashCode() {"},{"lineNumber":222,"author":{"gitID":"cjianhui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":223,"author":{"gitID":"cjianhui"},"content":"        return internalList.hashCode();"},{"lineNumber":224,"author":{"gitID":"cjianhui"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"cjianhui"},"content":""},{"lineNumber":226,"author":{"gitID":"cjianhui"},"content":"}"},{"lineNumber":227,"author":{"gitID":"cjianhui"},"content":""}],"authorContributionMap":{"-":16,"cjianhui":211}}]
