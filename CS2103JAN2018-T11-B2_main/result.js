var resultJson = [{"path":"docs/team/philos22.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"\u003d Chung-Yen (Philos) Tsai - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d PROJECT: PrisonBook"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"PrisonBook is a desktop address book application used for Prison Guards/Inmates management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"* *Major enhancement*: Calendar Scheduling Feature"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"** What it does: Allows user to interact with Google Calendar through PrisonBook CLI"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"** Justification: Prisons need to follow a strict schedule and guards need to know where inmates are at all times."},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"** Highlights: TBD as I go along"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"** Credits: Google API Guide"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"* *Minor enhancement*: Enhanced the find command to be able to search by Tags in addition to Name-search"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"*** PR management and tagging up till V1.3"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"*** PR management and tagging up till v1.3"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"*** Verified and closed issues for v1.3 Milestone"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"*** Find by tags command (Pull request https://github.com/CS2103JAN2018-T11-B2/main/pull/25[#25])"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"*** View upcoming events from PrisonBook Google Calendar (Pull request https://github.com/CS2103JAN2018-T11-B2/main/pull/55[#55])"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"*** Converted initial documentation into PrisonBook format."},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"*** Fix overall typos or missed headers."},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"*** Constant updates on User Guide and Developer Guide as new features are rolled out."},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"include::../UserGuide.adoc[tag\u003dfind]"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"include::../UserGuide.adoc[tag\u003dcalendar]"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dFeatureContribution]"},{"lineNumber":59,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":60,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindbytag]"},{"lineNumber":61,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":62,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dscheduling]"},{"lineNumber":63,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":64,"author":{"gitID":"Philos22"},"content":""}],"authorContributionMap":{"Philos22":48,"sarahgoh97":1,"-":15}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"\u003d PrisonBook - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":":repoURL: https://github.com/CS2103JAN2018-T11-B2/main/"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"By: `CS2103-T11-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"PrisonBook is for those who *prefer to use a desktop app for managing their prison and accessing the database of prisoners*. More importantly, PrisonBook is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PrisonBook can help you manage your prison faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":".  Download the latest `prisonbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":".  Copy the file to the folder you want to use as the home folder for your PrisonBook."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"* For security reasons, users need to log in before having access to certain commands. Users have a `Security Level` assigned to them. All commands have a minimum `Security Level` required before the user is able to access it."},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"** Security Level 0: Most basic commands such as Login and Status."},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"** Security Level 1: Most commands that only require read access."},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"** Security Level 2: Most commands that require write access."},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"** Security Level 3: Complete access to all commands."},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"* The minimum `Security Level` to access each command is listed beside each command below in square brackets []."},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":"// tag::login[]"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Logging in: `login` [0] (v1.2)"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":72,"author":{"gitID":"Zacci"},"content":"Logs in to your account on the PrisonBook +"},{"lineNumber":73,"author":{"gitID":"Zacci"},"content":"Format: `login user/USER_NAME pw/PASSWORD`"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"Examples:"},{"lineNumber":76,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":77,"author":{"gitID":"Zacci"},"content":"* `login user/prisonwarden99 pw/password1`"},{"lineNumber":78,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":"FOR USER ACCEPTANCE TESTING PURPOSES:"},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"The following user accounts have been pre-added"},{"lineNumber":81,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":82,"author":{"gitID":"Zacci"},"content":"* Username: prisonguard | Password: password1 | Security Level: 1"},{"lineNumber":83,"author":{"gitID":"Zacci"},"content":"* Username: prisonleader | Password: password2 | Security Level: 2"},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":"* Username: prisonwarden | Password: password3 | Security Level: 3"},{"lineNumber":85,"author":{"gitID":"Zacci"},"content":"// end::login[]"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":"// tag::logout[]"},{"lineNumber":88,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Logging out: `logout` [0] (v1.3)"},{"lineNumber":89,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":90,"author":{"gitID":"Zacci"},"content":"Logs out of your account +"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":"After logging out, you will not be able to undo actions that were completed before logging out."},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":93,"author":{"gitID":"Zacci"},"content":"Format: `logout`"},{"lineNumber":94,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":95,"author":{"gitID":"Zacci"},"content":"// end::logout[]"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"// tag::status[]"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Check Log-in Status: `status` [0] (v1.4)"},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":100,"author":{"gitID":"Zacci"},"content":"Checks your current log-in status +"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":"Format: `status`"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":"// end::status[]"},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"// tag::adduser[]"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Add new user: `adduser` [3] (v1.4)"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"Adds new user to have access to the PrisonBook +"},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":"Format: `adduser user/NEW_USERNAME pw/NEW_PASSWORD sl/SECURITY_LEVEL`"},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"Higher security levels allow users to access a greater range of commands:"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"* Security Level 0: Most basic commands such as Login and Status."},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":"* Security Level 1: Most commands that only require read access."},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":"* Security Level 2: Most commands that require write access."},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":"* Security Level 3: Complete access to all commands."},{"lineNumber":116,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":117,"author":{"gitID":"Zacci"},"content":"Examples:"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"* `adduser user/newuser pw/newpassword sl/1`"},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":"// end::adduser[]"},{"lineNumber":121,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":122,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Adding a person: `add or a` [2]"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Philos22"},"content":"Adds a person to the prison book +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":133,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"sarahgoh97"},"content":"// tag::addcell[]"},{"lineNumber":136,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Adding a prisoner to a cell: `addcell or ac` [2] (v1.3)"},{"lineNumber":137,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":138,"author":{"gitID":"sarahgoh97"},"content":"Adds a person to one of the cells in the prison +"},{"lineNumber":139,"author":{"gitID":"sarahgoh97"},"content":"Format: `ac INDEX CELLADDRESS`"},{"lineNumber":140,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":141,"author":{"gitID":"sarahgoh97"},"content":"[TIP]"},{"lineNumber":142,"author":{"gitID":"sarahgoh97"},"content":"Person added must be a prisoner and not already in a cell within the prison."},{"lineNumber":143,"author":{"gitID":"sarahgoh97"},"content":"The cell must be in the map and not full."},{"lineNumber":144,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":145,"author":{"gitID":"sarahgoh97"},"content":"Examples:"},{"lineNumber":146,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":147,"author":{"gitID":"sarahgoh97"},"content":"* `addcell 1 1-1`"},{"lineNumber":148,"author":{"gitID":"sarahgoh97"},"content":"* `ac 2 2-1`"},{"lineNumber":149,"author":{"gitID":"sarahgoh97"},"content":"// end::addcell[]"},{"lineNumber":150,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":151,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Listing all persons : `list or l` [1]"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Philos22"},"content":"Shows a list of all persons in the prison book. +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"sarahgoh97"},"content":"//tag::listcell[]"},{"lineNumber":157,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d Listing prisoners in a cell : `listcell or lc` [coming in V2.0]"},{"lineNumber":158,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":159,"author":{"gitID":"Philos22"},"content":"Shows a list of all persons in a prison cell in the prison book. +"},{"lineNumber":160,"author":{"gitID":"sarahgoh97"},"content":"Format: `list CELL`"},{"lineNumber":161,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":162,"author":{"gitID":"sarahgoh97"},"content":"Examples:"},{"lineNumber":163,"author":{"gitID":"sarahgoh97"},"content":"* `listcell a1`"},{"lineNumber":164,"author":{"gitID":"sarahgoh97"},"content":"* `lc c13`"},{"lineNumber":165,"author":{"gitID":"sarahgoh97"},"content":"//end::listcell[]"},{"lineNumber":166,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":167,"author":{"gitID":"sarahgoh97"},"content":"//tag::map[]"},{"lineNumber":168,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Showing cells in the map: `map or m` [1] (v1.1)"},{"lineNumber":169,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":170,"author":{"gitID":"sarahgoh97"},"content":"Shows a table of prison cells like a map in the command display (used for debugging and checking UI). +"},{"lineNumber":171,"author":{"gitID":"sarahgoh97"},"content":"Format: `map`"},{"lineNumber":172,"author":{"gitID":"sarahgoh97"},"content":"//end::map[]"},{"lineNumber":173,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":174,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Editing a person : `edit or e` [2]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"Philos22"},"content":"Edits an existing person in the prison book. +"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"****"},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":183,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":184,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":185,"author":{"gitID":"-"},"content":"****"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"Philos22"},"content":"// tag::find[]"},{"lineNumber":195,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Locating persons by name or tags: `find or f` [1]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"Philos22"},"content":"Finds persons whose names/tags contain any of the given keywords. +"},{"lineNumber":198,"author":{"gitID":"Philos22"},"content":"Format: `find n/NAME_KEYWORD [MORE_KEYWORDS] t/TAG_KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"****"},{"lineNumber":201,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":202,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":203,"author":{"gitID":"Philos22"},"content":"* Only the name and tags are searched."},{"lineNumber":204,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":205,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"Philos22"},"content":"* `find n/John` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":212,"author":{"gitID":"Philos22"},"content":"* `find n/Betsy Tim John` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":214,"author":{"gitID":"Philos22"},"content":"* `find n/Betsy t/Friends` +"},{"lineNumber":215,"author":{"gitID":"Philos22"},"content":"Returns any person having names `Betsy` or are tagged `Friends`"},{"lineNumber":216,"author":{"gitID":"Philos22"},"content":"// end::find[]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"Philos22"},"content":"// tag::calendar[]"},{"lineNumber":219,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d View upcoming events in the calendar: `calendar or c` [1] (v1.3)"},{"lineNumber":220,"author":{"gitID":"Philos22"},"content":"Format: `calendar`"},{"lineNumber":221,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":222,"author":{"gitID":"Zacci"},"content":"For the first time that you open the calendar, you will be prompted to login to the PrisonBook Google account. The PrisonBook app will attempt to open the browser for you, alternatively you can copy the link and login with the following details:"},{"lineNumber":223,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":224,"author":{"gitID":"Zacci"},"content":"* Google Username: prisonbooksystem | Password: prisonbook2018"},{"lineNumber":225,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":226,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Add upcoming events in the calendar: `calAdd or calA` [1] (v1.3)"},{"lineNumber":227,"author":{"gitID":"Philos22"},"content":"Format: `calAdd event/EVENTNAME loc/LOCATION start/STARTDATETIME end/ENDDATETIME`"},{"lineNumber":228,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":229,"author":{"gitID":"Philos22"},"content":"Examples:"},{"lineNumber":230,"author":{"gitID":"Philos22"},"content":"* `calAdd event/Software Meeting loc/NUS Utown Green start/2018-06-06 10:00:00 end/2018-06-06 13:00:00` +"},{"lineNumber":231,"author":{"gitID":"Philos22"},"content":"Adds an event `Software Meeting` at `NUS Utown Green` from `June 6th, 2018 10am` to `June 6th, 2018 1pm`"},{"lineNumber":232,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":233,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":234,"author":{"gitID":"Philos22"},"content":"// end::calendar[]"},{"lineNumber":235,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":236,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Deleting a person : `delete or d` [2]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"Philos22"},"content":"Deletes the specified person from the prison book. +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"****"},{"lineNumber":242,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":243,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":244,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":245,"author":{"gitID":"-"},"content":"****"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":250,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":251,"author":{"gitID":"Philos22"},"content":"Deletes the 2nd person in the prison book."},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"sarahgoh97"},"content":"//tag::deletecell[]"},{"lineNumber":257,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Deleting a person from a cell : `deletecell or dc` [2] (v1.4)"},{"lineNumber":258,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":259,"author":{"gitID":"sarahgoh97"},"content":"Deletes the specified person from his/her cell in the PrisonBook. +"},{"lineNumber":260,"author":{"gitID":"sarahgoh97"},"content":"Format: `deletecell INDEX`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"****"},{"lineNumber":263,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":264,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":265,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":266,"author":{"gitID":"sarahgoh97"},"content":"* The person must be imprisoned in the prison already."},{"lineNumber":267,"author":{"gitID":"sarahgoh97"},"content":"****"},{"lineNumber":268,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":269,"author":{"gitID":"sarahgoh97"},"content":"Examples:"},{"lineNumber":270,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":271,"author":{"gitID":"sarahgoh97"},"content":"* `dc 1` +"},{"lineNumber":272,"author":{"gitID":"sarahgoh97"},"content":"Deletes the first person in the prison book if he/she is imprisoned here."},{"lineNumber":273,"author":{"gitID":"sarahgoh97"},"content":"//end::deletecell[]"},{"lineNumber":274,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":275,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Selecting a person : `select or s` [0]"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"****"},{"lineNumber":281,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":282,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":283,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":284,"author":{"gitID":"-"},"content":"****"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":290,"author":{"gitID":"Philos22"},"content":"Selects the 2nd person in the prison book."},{"lineNumber":291,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":293,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Listing entered commands : `history or h` [0]"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":302,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":306,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Undoing previous command : `undo or u` [0]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"Philos22"},"content":"Restores the prison book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":313,"author":{"gitID":"Philos22"},"content":"Undoable commands: those commands that modify the prison book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":330,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo or r` [0]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":335,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":340,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":345,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":350,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":352,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Clearing all entries : `clear or c` [3]"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"Philos22"},"content":"Clears all entries from the prison book. Clears all prison cells. +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Exiting the program : `exit` [0]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":363,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":374,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":379,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":384,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":385,"author":{"gitID":"sarahgoh97"},"content":"* *AddCell* `addcell INDEX CELLADDRESS`"},{"lineNumber":386,"author":{"gitID":"sarahgoh97"},"content":"e.g. `addcell 1 1-1`"},{"lineNumber":387,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":390,"author":{"gitID":"sarahgoh97"},"content":"* *DeleteCell* `deletecell INDEX`"},{"lineNumber":391,"author":{"gitID":"sarahgoh97"},"content":"e.g. `deletecell 2`"},{"lineNumber":392,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":394,"author":{"gitID":"Philos22"},"content":"* *Find* : `find n/NAME_KEYWORD [MORE_NAME_KEYWORDS] t/TAG_KEYWORD [MORE_TAG_KEYWORDS]` +"},{"lineNumber":395,"author":{"gitID":"Philos22"},"content":"e.g. `find n/James Jake t/boys`"},{"lineNumber":396,"author":{"gitID":"Philos22"},"content":"* *Calendar* : `calendar`"},{"lineNumber":397,"author":{"gitID":"Philos22"},"content":"* *Calendar Add Event* : `calAdd event/EVENTNAME loc/LOCATION start/STARTDATETIME end/ENDDATETIME`"},{"lineNumber":398,"author":{"gitID":"Philos22"},"content":"e.g. `calAdd event/Software Meeting loc/NUS Utown Green start/2018-06-06 10:00:00 end/2018-06-06 13:00:00`"},{"lineNumber":399,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":400,"author":{"gitID":"sarahgoh97"},"content":"* *Map* : `map`"},{"lineNumber":401,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":403,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":405,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":406,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"Philos22":39,"sarahgoh97":52,"Zacci":79,"-":236}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"PrisonBook was developed by the https://cs2103jan2018-t11-b2.github.io/docs/Team.html team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Isaac"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"image::zacci.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"{empty}[http://github.com/zacci[github]] [\u003c\u003czacci#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"Role: Team Lead + Testing IC"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"Responsibilities: Ensuring Code is tested thoroughly before merging. Maintaining Versioning."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d Sarah Goh Shi Ning"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"image::sarahgoh97.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"{empty}[http://github.com/sarahgoh97[github]] [\u003c\u003csarahgoh97#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"Role: Documentation IC +"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"Responsibilities: Assigning tasks regarding documentation and checking pull requests regarding documenation"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d Chung-Yen (Philos) Tsai"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"image::philos22.jpg[width\u003d\"250\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"{empty}[http://github.com/philos22[github]] [\u003c\u003cphilos22#, portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"Role: Code QC/QA IC +"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"Responsibilities: Checking for proper coding style and syntax in pull requests"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Philos22":10,"sarahgoh97":6,"Zacci":5,"-":18}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"\u003d PrisonBook"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"https://travis-ci.org/CS2103Jan2018-T11-B2[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"https://ci.appveyor.com/project/sarahgoh97/main[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"* This is a desktop Prison Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d Target Users"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"* Private prison owners or wardens have to keep track of what is happening in their own prisons."},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"* Guards who want to check when they are on duty"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"* The original source code of this application is from the AddressBook-Level4 project created by SE-EDU initiative."},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"sarahgoh97":10,"-":26}},{"path":"docs/team/sarahgoh97.adoc","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"\u003d Sarah Goh Shi Ning- Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d PROJECT: PrisonBook"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"Prisonbook is a desktop address book application used for Prison Guards/Inmates management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"* *Major enhancement*: Allowing guards and prison wardens to manage the prison cells."},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"** What it does: There is a cell map that has a fixed size and certain number of cells."},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"Allows guards and prison wardens to add prisoners to cells (and in future to remove them and view them in cells)"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"** Justification: This helps to keep track of prisoners."},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"* *Minor enhancement*: Changing browser panel to show map of prison cells."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"*** Managed release `v1.3` on GitHub"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"*** Status bar shows number of people in th PrisonBook"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"*** Did slight revisions to existing contents of the User Guide"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"include::../UserGuide.adoc[tag\u003daddcell]"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"include::../UserGuide.adoc[tag\u003dlistcell]"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"include::../UserGuide.adoc[tag\u003dmap]"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"include::../UserGuide.adoc[tag\u003ddeletecell]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"include::../DeveloperGuide.adoc[tag\u003dcellmap]"},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dFeatureContribution]"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dUserStories]"},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"include::../DeveloperGuide.adoc[tag\u003dUseCases]"},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":""}],"authorContributionMap":{"Philos22":19,"sarahgoh97":18,"-":21}},{"path":"docs/team/zacci.adoc","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"\u003d Isaac Gideon Tan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d PROJECT: PrisonBook"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"Prisonbook is a desktop address book application used for Prison Guards/Inmates management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"* *Major enhancement*: added *Added login and logout security system with access levels*"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"** What it does: Allows users of the PrisonBook to log in and logout with their usernames and passwords. The system also controls access levels (such as read/write permissions) based on the user rights."},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"** Justification: risonBook must have this feature to improve the security of the Prison. Not all prison guards using the PrisonBook should be able to edit and make changes to the database. They should also only be able to view information pertinent to them to avoid security breaches."},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"** Highlights: This enhancement affects the logic of the entire PrisonBook and requires thoughtful design to implement."},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"* *Minor enhancement*: added Prisoner and Guard tags to facilitate all further functionality to our PrisonBook"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"*** Code Quality Manager"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"*** Command Aliases to shorten the amount of typing that users have to do"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"*** Updated documentation accordingly"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"** Tools:"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"include::../UserGuide.adoc[tag\u003dlogin]"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"include::../UserGuide.adoc[tag\u003dlogout]"},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"include::../UserGuide.adoc[tag\u003dstatus]"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"include::../UserGuide.adoc[tag\u003dadduser]"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"include::../DeveloperGuide.adoc[tag\u003dloginsecurity]"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"---"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":""}],"authorContributionMap":{"Philos22":1,"sarahgoh97":2,"Zacci":37,"-":20}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":5,"-":91}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":171,"author":{"gitID":"sarahgoh97"},"content":"        assertStatusBarChangedExceptSaveLocation(expectedModel.getAddressBook().getPersonList().size());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":1,"-":193}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"        assertStatusBarChangedExceptSaveLocation(expectedModel.getAddressBook().getPersonList().size());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":1,"-":100}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + ROLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":90,"author":{"gitID":"Zacci"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"                .withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Zacci"},"content":"        /* Case: add a person with all fields same as another person in the address book except role -\u003e added */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":129,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + ROLE_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"Zacci"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROLE_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"Zacci"},"content":"        /* Case: missing role -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":203,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"Zacci"},"content":"        /* Case: invalid role -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"Zacci"},"content":"                + INVALID_ROLE_DESC;"},{"lineNumber":209,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(command, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"Zacci"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":213,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":265,"author":{"gitID":"sarahgoh97"},"content":"        assertStatusBarChangedExceptSaveLocation(expectedModel.getAddressBook().getPersonList().size());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":71,"sarahgoh97":1,"-":216}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":137,"author":{"gitID":"Philos22"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyword);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":178,"author":{"gitID":"sarahgoh97"},"content":"        statusBarFooterHandle.rememberNumberOfPeople();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":221,"author":{"gitID":"sarahgoh97"},"content":"        assertFalse(handle.isNumberOfPeopleChanged());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":234,"author":{"gitID":"sarahgoh97"},"content":"        assertFalse(handle.isNumberOfPeopleChanged());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":236,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":238,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"sarahgoh97"},"content":"     * Asserts that the total number of people and sync status in the status bar was changed to the timing of"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"sarahgoh97"},"content":"    protected void assertStatusBarChangedExceptSaveLocation(int expectedNumberOfPeople) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":246,"author":{"gitID":"sarahgoh97"},"content":"        String expectedNumberOfPeopleStatus \u003d expectedNumberOfPeople + \" person(s) total.\";"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":248,"author":{"gitID":"sarahgoh97"},"content":"        assertEquals(expectedNumberOfPeopleStatus, handle.getNumberOfPeopleStatus());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":262,"author":{"gitID":"sarahgoh97"},"content":"            assertEquals(testApp.getModel().getAddressBook().getPersonList().size() + \" person(s) total.\","},{"lineNumber":263,"author":{"gitID":"sarahgoh97"},"content":"                    getStatusBarFooter().getNumberOfPeopleStatus());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"sarahgoh97":12,"-":262}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"\u003d PrisonBook - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":":repoURL: https://github.com/CS2103JAN2018-T11-B2/main/"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"By: `CS2103-T11-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"sarahgoh97"},"content":"* stores the cells in the prison."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":224,"author":{"gitID":"sarahgoh97"},"content":"* can save the cell map in xml format and read it back."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":248,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":249,"author":{"gitID":"-"},"content":"----"},{"lineNumber":250,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"----"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":259,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":289,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":298,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":328,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":337,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":350,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":361,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"sarahgoh97"},"content":"//tag::loginsecurity[]"},{"lineNumber":364,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Login and Security Feature"},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":366,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d\u003d\u003d Model Aspect"},{"lineNumber":367,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":368,"author":{"gitID":"Zacci"},"content":"The implementation of the Login and Security feature is implemented by a `Session` which resides inside `Model Manager`. It supports the logging in and logging out of a user as well as support restricted access for specific commands. For example read access (list command) vs write access (add command and edit command)."},{"lineNumber":369,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":370,"author":{"gitID":"Zacci"},"content":"image::ModelClassDiagramwSession.jpg[width\u003d\"800\"]"},{"lineNumber":371,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":372,"author":{"gitID":"Zacci"},"content":"As can be seen from the diagram, a Session is initialised upon the creation of the ModelManager."},{"lineNumber":373,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":374,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d\u003d\u003d Logic Aspect"},{"lineNumber":375,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":376,"author":{"gitID":"Zacci"},"content":"The implementation of the logging-in and the security levels is implemented in the `SessionManager` which is an additional step between the `LogicManager` and the `AddressBookParser`."},{"lineNumber":377,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":378,"author":{"gitID":"Zacci"},"content":"image::LogicClassDiagramwSession.png[width\u003d\"800\"]"},{"lineNumber":379,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":380,"author":{"gitID":"Zacci"},"content":"Every user input will first go through the `SessionManager` which will check if the user is currently logged in, as well as retrieve the user\u0027s security level. It will then pass the security level to the `AddressBookParser` which will then decide whether or not to create the Command based on the required security level of the entered command."},{"lineNumber":381,"author":{"gitID":"Zacci"},"content":"//end::loginsecurity[]"},{"lineNumber":382,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":383,"author":{"gitID":"sarahgoh97"},"content":"// tag::cellmap[]"},{"lineNumber":384,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d Prison Cell Map"},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"sarahgoh97"},"content":"In a prison, it is necessary to have cells, where prisoners stay in. It is important to keep track of the prisoners in the cell"},{"lineNumber":388,"author":{"gitID":"sarahgoh97"},"content":"and whether the `Cell` is full."},{"lineNumber":389,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":390,"author":{"gitID":"sarahgoh97"},"content":"This cell system is most clearly represented using a 2-D array. Hence, this was used as the basis of the map system of the prison."},{"lineNumber":391,"author":{"gitID":"sarahgoh97"},"content":"This map is shown on the user interface on the right side area, shown in the picture below."},{"lineNumber":392,"author":{"gitID":"sarahgoh97"},"content":"Since the app is still being tested, the map command will also show in the result display box."},{"lineNumber":393,"author":{"gitID":"sarahgoh97"},"content":"This basic map shows the basic implementation of the cell system and helps keep track of what is happening in the cells."},{"lineNumber":394,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":395,"author":{"gitID":"sarahgoh97"},"content":"image::Ui.PNG[width\u003d\"600\"]"},{"lineNumber":396,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":397,"author":{"gitID":"sarahgoh97"},"content":"With this map system of cells, the cells can be viewed. Not only that, prisoners can also be added and removed from them."},{"lineNumber":398,"author":{"gitID":"sarahgoh97"},"content":"These changes can be viewed in the bigger map which displays the number of people in them (also shown in the UI mockup above,"},{"lineNumber":399,"author":{"gitID":"sarahgoh97"},"content":"represented by the square brackets) or in individual cells."},{"lineNumber":400,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":401,"author":{"gitID":"sarahgoh97"},"content":"For future implementations, we can also allow only the prison wardens/owners to redefine the maximum size of the prison as their prisons"},{"lineNumber":402,"author":{"gitID":"sarahgoh97"},"content":"may grow or shrink in the future. In this scenario, we will strive only to hit our non-functional requirements."},{"lineNumber":403,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":404,"author":{"gitID":"sarahgoh97"},"content":"Assuming the user has access to the functions to add prisoners into prison cells, they can use the `addcell` command to do so."},{"lineNumber":405,"author":{"gitID":"sarahgoh97"},"content":"Below is the sequence diagram of the logic and model components."},{"lineNumber":406,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":407,"author":{"gitID":"sarahgoh97"},"content":"image::AddCellSequenceDiagram.PNG[width\u003d\"400\"]"},{"lineNumber":408,"author":{"gitID":"sarahgoh97"},"content":"image::AddCellModelSequenceDiagram.PNG[width\u003d\"400\"]"},{"lineNumber":409,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":410,"author":{"gitID":"sarahgoh97"},"content":"Besides the cell map system being updated, we will also update the addresses of these prisoners added to the prison, since they now live in the prison, rather than in their own homes."},{"lineNumber":411,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":412,"author":{"gitID":"sarahgoh97"},"content":"Prisoners can also be removed from their cells using the `deletecell` command when they are being transferred to another cell,"},{"lineNumber":413,"author":{"gitID":"sarahgoh97"},"content":"or if they can leave prison and go back home to their loved ones."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":416,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of Cells in CellMap"},{"lineNumber":417,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":418,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 1 (current choice):** Use a 2-D array`"},{"lineNumber":419,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Easy to visualise the system."},{"lineNumber":420,"author":{"gitID":"sarahgoh97"},"content":"** Cons: Harder to do more functions that the Java API has provided. Does not fit in with the other models of Person and Tag with their UniquePersonList and UniqueTagList"},{"lineNumber":421,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 2:** Use a 2-level ArrayList`"},{"lineNumber":422,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Can use Java functions meant for Lists, can have different number of units for each block"},{"lineNumber":423,"author":{"gitID":"sarahgoh97"},"content":"** Cons: Not uniform number of units for each block will be harder to take into consideration when using the individual cells."},{"lineNumber":424,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":425,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of ShowCellsCommand (map)"},{"lineNumber":426,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":427,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 1 (current choice):** Create a new Command to show the map."},{"lineNumber":428,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Easy to implement, similar to listing. Extending the current list of commands. Only when function is called can the map be seen."},{"lineNumber":429,"author":{"gitID":"sarahgoh97"},"content":"** Cons: Easy to forget which cell in the map can add prisoners but the map is not permanently there."},{"lineNumber":430,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 2:** Keep the map always on display."},{"lineNumber":431,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Easier to see when adding prisoners to cells."},{"lineNumber":432,"author":{"gitID":"sarahgoh97"},"content":"** Cons: Risk security as access to map is not limited. Even if it is, anyone walking by can see the information easily."},{"lineNumber":433,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":434,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of AddCellCommand (addcell)"},{"lineNumber":435,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":436,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 1 (current choice):** Prisoners are added into cells in a cellMap."},{"lineNumber":437,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Cells are always there and can hold prisoners. Since these groups are still Persons with a guard role or prisoner role, not all persons may have a cell."},{"lineNumber":438,"author":{"gitID":"sarahgoh97"},"content":"** Cons: More difficult to see the individual\u0027s cell. (have not implemented updating addresses)"},{"lineNumber":439,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 2:** Not have a cell map but to add cells to prisoners."},{"lineNumber":440,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Might be more intuitive for the user, to check a prisoner\u0027s cell location."},{"lineNumber":441,"author":{"gitID":"sarahgoh97"},"content":"** Cons: Harder to manage a system of cells. Easy to accidentally overcrowd a cell."},{"lineNumber":442,"author":{"gitID":"sarahgoh97"},"content":"* **Alternative 3:** Automatically assigning cells to prisoners"},{"lineNumber":443,"author":{"gitID":"sarahgoh97"},"content":"** Pros: Removes the burden of choosing a cell for user. Fewer commands required as prisoners are automatically added."},{"lineNumber":444,"author":{"gitID":"sarahgoh97"},"content":"** Cons: More complex in automatically choosing cells for prisoners. User might want to have control on which prisoners should be in which cell."},{"lineNumber":445,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":446,"author":{"gitID":"sarahgoh97"},"content":"// end::cellmap[]"},{"lineNumber":447,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":448,"author":{"gitID":"Philos22"},"content":"//tag::findbytag[]"},{"lineNumber":449,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d Find by Tag Command"},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":451,"author":{"gitID":"Philos22"},"content":"When the Find command is called, FindCommandParser will look for the tag and/or name prefixes (t/ and n/ respectively)."},{"lineNumber":452,"author":{"gitID":"Philos22"},"content":"The arguments following each prefix will be made into a list. A mapping is then generated with the prefixes as the keys"},{"lineNumber":453,"author":{"gitID":"Philos22"},"content":" and the argument-lists as values. The name search portion will run like before, the tag search will follow a similar"},{"lineNumber":454,"author":{"gitID":"Philos22"},"content":" approach; creating a new predicate instance and return matching results if they exist."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":457,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Find Command"},{"lineNumber":458,"author":{"gitID":"Philos22"},"content":"* **Alternative 1 (current choice):** Add on to the current Find command"},{"lineNumber":459,"author":{"gitID":"Philos22"},"content":"** Pros: Allows filtering by names and/or tags"},{"lineNumber":460,"author":{"gitID":"Philos22"},"content":"** Cons: Requires user to include prefixes in the command to differentiate between name and tag arguments"},{"lineNumber":461,"author":{"gitID":"Philos22"},"content":"* **Alternative 2:** Create new command for finding tags"},{"lineNumber":462,"author":{"gitID":"Philos22"},"content":"** Pros: More convenient if user only needs to filter by tags or filter by names separately, no need for prefixes"},{"lineNumber":463,"author":{"gitID":"Philos22"},"content":"** Cons: Cannot filter by names and tags in a single command"},{"lineNumber":464,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":465,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Argument Deliminator"},{"lineNumber":466,"author":{"gitID":"Philos22"},"content":"* **Alternative 1 (current choice):** Only one prefix with all arguments coming after, delimited by space"},{"lineNumber":467,"author":{"gitID":"Philos22"},"content":"** Pros: Relatively convenient for user when they are inputting multiple arguments"},{"lineNumber":468,"author":{"gitID":"Philos22"},"content":"** Cons: Easier for users to mistakenly merge two arguments into one when forgetting a space"},{"lineNumber":469,"author":{"gitID":"Philos22"},"content":"* **Alternative 2:** One prefix required for each argument"},{"lineNumber":470,"author":{"gitID":"Philos22"},"content":"** Pros: Allows user to order name and tag arguments in any order - the tag arguments and name arguments do not"},{"lineNumber":471,"author":{"gitID":"Philos22"},"content":" have to be grouped together after a single prefix"},{"lineNumber":472,"author":{"gitID":"Philos22"},"content":"** Cons: May become tedious and redundant when inputting multiple arguments, more prone to typos and human error"},{"lineNumber":473,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":474,"author":{"gitID":"Philos22"},"content":"//end::findbytag[]"},{"lineNumber":475,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":476,"author":{"gitID":"Zacci"},"content":"//tag::scheduling[]"},{"lineNumber":477,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d Scheduling Feature"},{"lineNumber":478,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"Philos22"},"content":"The Scheduling feature can be accessed via entering the command `cal`."},{"lineNumber":481,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":482,"author":{"gitID":"Philos22"},"content":"It allows guards/wardens to interact with a Google Calendar account through the current PrisonBook GUI."},{"lineNumber":483,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":484,"author":{"gitID":"Zacci"},"content":"Calendar Commands that are supported are:"},{"lineNumber":485,"author":{"gitID":"Philos22"},"content":"* add e/eventname t/timestamp"},{"lineNumber":486,"author":{"gitID":"Philos22"},"content":"* remove [eventID]"},{"lineNumber":487,"author":{"gitID":"Philos22"},"content":"* edit [eventID] e/eventname t/timestamp"},{"lineNumber":488,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":489,"author":{"gitID":"Philos22"},"content":"The PrisonBook calendar commands will send HTTPS requests to the REST calendar API and make changes to the Google account calendar."},{"lineNumber":490,"author":{"gitID":"Philos22"},"content":"Upon confirmation of successful changes by the Google Calendar API, the change will be reflected next time any calendar commands are called."},{"lineNumber":491,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":492,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Choosing Number of Accounts to Work With"},{"lineNumber":493,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":494,"author":{"gitID":"Philos22"},"content":" * **Alternative 1 (current choice):** Using one Google account for all prison staff"},{"lineNumber":495,"author":{"gitID":"Philos22"},"content":" ** Pros: Very simple to administrate and fits the needs of the project scope."},{"lineNumber":496,"author":{"gitID":"Philos22"},"content":" ** Cons: No personalization for calendars of Warden/Guards."},{"lineNumber":497,"author":{"gitID":"Philos22"},"content":" * **Alternative 2:** Use one Google account for Warden and one for Guards"},{"lineNumber":498,"author":{"gitID":"Philos22"},"content":" ** Pros: Two accounts is still relatively simple to maintain, allows for some separation of events-scheduling."},{"lineNumber":499,"author":{"gitID":"Philos22"},"content":" ** Cons: All guards still share the same schedule, so they cannot have personal schedules."},{"lineNumber":500,"author":{"gitID":"Philos22"},"content":" * **Alternative 3:** Use one Google account for Warden and one for Guards"},{"lineNumber":501,"author":{"gitID":"Philos22"},"content":" ** Pros: Two accounts is still relatively simple to maintain, allows for some separation of events-scheduling."},{"lineNumber":502,"author":{"gitID":"Philos22"},"content":" ** Cons: All guards still share the same schedule, so they cannot have personal schedules."},{"lineNumber":503,"author":{"gitID":"Philos22"},"content":" * **Alternative 4:** Use one Google account for Warden and one for Guards"},{"lineNumber":504,"author":{"gitID":"Philos22"},"content":" ** Pros: All prison staff have their own calendar to work with, where they can have private individual events."},{"lineNumber":505,"author":{"gitID":"Philos22"},"content":" ** Cons: Hard to maintain because we have to make sure all staff have the master prison schedule of the inmates\u0027 activities non-overlapping with personal events. There will also be a lot of calendars to keep track of, depending on how many guards are hired."},{"lineNumber":506,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":507,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Choosing Number of Calendars per Person"},{"lineNumber":508,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":509,"author":{"gitID":"Philos22"},"content":"* **Alternative 1 (current choice):** Only one calendar per person"},{"lineNumber":510,"author":{"gitID":"Philos22"},"content":"** Pros: Simple to implement, administrate and satisfies users\u0027 daily tasks"},{"lineNumber":511,"author":{"gitID":"Philos22"},"content":"** Cons: Events cannot overlap, limited to fit events in separate rigid time slots."},{"lineNumber":512,"author":{"gitID":"Philos22"},"content":"* **Alternative 2:** Multiple calendars per person"},{"lineNumber":513,"author":{"gitID":"Philos22"},"content":"** Pros: Users can track multiple events happening at the same time. Different calendars can also be used to organize and group logically-related events."},{"lineNumber":514,"author":{"gitID":"Philos22"},"content":"** Cons: Complicated on the administration side and oversteps the scope of this enhancement. Not really looking to replace personal Google Calendars, this is just to allow prison staff to work with prison schedules."},{"lineNumber":515,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":516,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of editing calendar"},{"lineNumber":517,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":518,"author":{"gitID":"Philos22"},"content":"* **Alternative 1 (current choice):** Using command line to type with prefixes for event names and their timings."},{"lineNumber":519,"author":{"gitID":"Philos22"},"content":"** Pros: Ties in with users who prefer typing over mouse clicking."},{"lineNumber":520,"author":{"gitID":"Philos22"},"content":"** Cons: Not as intuitive as selecting time slots to edit. Need more prefixes for users to learn."},{"lineNumber":521,"author":{"gitID":"Philos22"},"content":"* **Alternative 2:** Have buttons for users to click to edit."},{"lineNumber":522,"author":{"gitID":"Philos22"},"content":"** Pros: More intuitive as less things to type."},{"lineNumber":523,"author":{"gitID":"Philos22"},"content":"** Cons: No longer command line based."},{"lineNumber":524,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":525,"author":{"gitID":"Zacci"},"content":"//end::scheduling"},{"lineNumber":526,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":539,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":540,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":545,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":547,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":559,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":564,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":577,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":578,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":579,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":582,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":597,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":604,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":617,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":618,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":619,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":620,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":621,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":622,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":623,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":624,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":625,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":629,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":632,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":649,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":656,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":657,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":658,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":663,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":664,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":668,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":687,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":691,"author":{"gitID":"-"},"content":"****"},{"lineNumber":692,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":693,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":694,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":696,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":697,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":698,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":699,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":700,"author":{"gitID":"-"},"content":"****"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":708,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":712,"author":{"gitID":"-"},"content":"****"},{"lineNumber":713,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":714,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":715,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":716,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":717,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":718,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":719,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":720,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":722,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":723,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":724,"author":{"gitID":"-"},"content":"****"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":732,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":736,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":737,"author":{"gitID":"-"},"content":"+"},{"lineNumber":738,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":740,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":741,"author":{"gitID":"-"},"content":"+"},{"lineNumber":742,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":744,"author":{"gitID":"-"},"content":"****"},{"lineNumber":745,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":746,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":747,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":748,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":749,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":750,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":751,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":752,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":753,"author":{"gitID":"-"},"content":"****"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":756,"author":{"gitID":"-"},"content":"+"},{"lineNumber":757,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":758,"author":{"gitID":"-"},"content":"+"},{"lineNumber":759,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":760,"author":{"gitID":"-"},"content":"+"},{"lineNumber":761,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":762,"author":{"gitID":"-"},"content":"+"},{"lineNumber":763,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":764,"author":{"gitID":"-"},"content":"+"},{"lineNumber":765,"author":{"gitID":"-"},"content":"****"},{"lineNumber":766,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":767,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":768,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":769,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":770,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":771,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":772,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":773,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":774,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":775,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":776,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":777,"author":{"gitID":"-"},"content":"****"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":780,"author":{"gitID":"-"},"content":"+"},{"lineNumber":781,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":782,"author":{"gitID":"-"},"content":"+"},{"lineNumber":783,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":784,"author":{"gitID":"-"},"content":"+"},{"lineNumber":785,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":786,"author":{"gitID":"-"},"content":"+"},{"lineNumber":787,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":789,"author":{"gitID":"-"},"content":"****"},{"lineNumber":790,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":791,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":792,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":793,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":794,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":796,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":799,"author":{"gitID":"-"},"content":"****"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":807,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":810,"author":{"gitID":"-"},"content":"+"},{"lineNumber":811,"author":{"gitID":"-"},"content":"****"},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":813,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":815,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":816,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":817,"author":{"gitID":"-"},"content":"****"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":820,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":827,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":828,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":833,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":835,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":840,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":845,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":850,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":853,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":858,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":859,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":864,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":865,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":866,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":869,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":874,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":881,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":886,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":893,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":898,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":899,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":902,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":913,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":918,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":921,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":932,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"Philos22"},"content":"* works at a prison with around 1000 inmates"},{"lineNumber":952,"author":{"gitID":"Philos22"},"content":"* has a need to keep track of prisoner locations and details"},{"lineNumber":953,"author":{"gitID":"Philos22"},"content":"* has a need to organize and direct guards efficiently"},{"lineNumber":954,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":955,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":956,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":957,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":958,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"Philos22"},"content":"// tag::FeatureContribution[]"},{"lineNumber":963,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":964,"author":{"gitID":"sarahgoh97"},"content":"*Feature Contributions*:"},{"lineNumber":965,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":966,"author":{"gitID":"sarahgoh97"},"content":"* Chung-Yen (Philos) Tsai (philos22)"},{"lineNumber":967,"author":{"gitID":"sarahgoh97"},"content":"  1. Major enhancement: +"},{"lineNumber":968,"author":{"gitID":"sarahgoh97"},"content":"  Scheduling: Keeps track of schedule of prisoners and guards."},{"lineNumber":969,"author":{"gitID":"sarahgoh97"},"content":"  2. Minor enhancement: +"},{"lineNumber":970,"author":{"gitID":"sarahgoh97"},"content":"  Find by tag: This function will allow admins to filter user list by tags. Tags may include classification of Prisoner vs. Guards, Prisoner cell blocks and cell numbers, Guards\u0027 current teams and assignments, etc..."},{"lineNumber":971,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":972,"author":{"gitID":"sarahgoh97"},"content":"* Isaac Gideon Tan (zacci)"},{"lineNumber":973,"author":{"gitID":"Zacci"},"content":"  1. Major enhancement: +"},{"lineNumber":974,"author":{"gitID":"Zacci"},"content":"  Login and Authorization Levels: Enable creation of account for guards, logging in, and authorization levels for commands that may compromise the security of the Prison data."},{"lineNumber":975,"author":{"gitID":"Zacci"},"content":"  2. Minor enhancement: +"},{"lineNumber":976,"author":{"gitID":"Zacci"},"content":"  Additional Attribute to store \u0027Role\u0027 information. To identify the person as a Prisoner or Guard"},{"lineNumber":977,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":978,"author":{"gitID":"sarahgoh97"},"content":"* Sarah Goh Shi Ning (sarahgoh97)"},{"lineNumber":979,"author":{"gitID":"sarahgoh97"},"content":"  1. Major enhancement: +"},{"lineNumber":980,"author":{"gitID":"sarahgoh97"},"content":"  Creating a cell system/map of all the prison cells in the prison."},{"lineNumber":981,"author":{"gitID":"sarahgoh97"},"content":"  This helps users add and remove prisoners to their prison and prevent users from overcrowding their prison."},{"lineNumber":982,"author":{"gitID":"sarahgoh97"},"content":"  It can also help users keep track of locations of the cells of each prisoner."},{"lineNumber":983,"author":{"gitID":"sarahgoh97"},"content":"  2. Minor enhancement: +"},{"lineNumber":984,"author":{"gitID":"sarahgoh97"},"content":"  Allow user to change between bright and dark themes."},{"lineNumber":985,"author":{"gitID":"sarahgoh97"},"content":"  This helps users to prevent people nearby from looking at the information."},{"lineNumber":986,"author":{"gitID":"sarahgoh97"},"content":"  At the same time, it also has a bright theme that helps users use the app more easily."},{"lineNumber":987,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":988,"author":{"gitID":"Philos22"},"content":"// end::FeatureContribution[]"},{"lineNumber":989,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":990,"author":{"gitID":"Philos22"},"content":"// tag::UserStories[]"},{"lineNumber":991,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":998,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":999,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |administrator |group guards together |form teams to carry out various tasks: patrol rotations, perimeter control, cell guards"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |have a track record of each prisoner’s past offences"},{"lineNumber":1002,"author":{"gitID":"sarahgoh97"},"content":"                          Type 1 – Injuring guard"},{"lineNumber":1003,"author":{"gitID":"Philos22"},"content":"                          Type 2 – Infighting with other inmates"},{"lineNumber":1004,"author":{"gitID":"Philos22"},"content":"                          Type 3 – Vandalism"},{"lineNumber":1005,"author":{"gitID":"sarahgoh97"},"content":" |use the appropriate level of precaution when dealing with unruly individuals"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |keep track of each prisoner’s holding cells |ensure that there are two prisoners per cell and that certain bad prisoner combinations are avoided"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |prison warden |assign ranks to each guard |enforce access rights to view/edit prisoner and officer data"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |check the length of imprisonment of prisoners I am in charge of |know when they are leaving"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |add prisoners to prison cells |the prisoners have a prison cell to stay in"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |check number of prison cells available |decide whether to take more prisoners in"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |delete a prisoner |add more prisoners to prison"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |check when I am on duty |see when I have to come to work"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |guard |check who are in my team |coordinate with my team"},{"lineNumber":1022,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1023,"author":{"gitID":"sarahgoh97"},"content":"|`* * *` |prison warden |add police officers |give access to new police officers"},{"lineNumber":1024,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1025,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |guard |assign prisoners to different recess blocks |separate those that start fights or cause trouble when together"},{"lineNumber":1026,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1027,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |prison warden |shuffle patrol guards around teams every day |each team is made up of different members every day, prisoners will acquaint themselves with specific guards"},{"lineNumber":1028,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1029,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |prison warden |divide cells into sections (A, B, C, D) and name each cell numerically (A1, A2, etc…) |refer to each cell easily when assigning prisoners to them"},{"lineNumber":1030,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1031,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |guard |check whether there are visitor appointments |inform prisoners and bring them to see their visitors"},{"lineNumber":1032,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1033,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |guard |edit details of prisoners |update information of prisoners"},{"lineNumber":1034,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1035,"author":{"gitID":"sarahgoh97"},"content":"|`* *` |guard |transfer people to other prisons |have more empty cells for more prisoners"},{"lineNumber":1036,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1037,"author":{"gitID":"sarahgoh97"},"content":"|`*` |prisoner |know my release date |look forward to the day I can see my family/friends again"},{"lineNumber":1038,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1039,"author":{"gitID":"sarahgoh97"},"content":"|`*` |guard |see my assigned prisoners’ social networks: friends, enemies, family, etc… |use this as reference when dealing with inmates"},{"lineNumber":1040,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1041,"author":{"gitID":"sarahgoh97"},"content":"|`*` |guard |assign prisoners to solitary confinement |punish those that have continuously committed serious offences"},{"lineNumber":1042,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1043,"author":{"gitID":"sarahgoh97"},"content":"|`*` |cook |check dietary requirements of all people in prison |cook sufficient food"},{"lineNumber":1044,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1045,"author":{"gitID":"sarahgoh97"},"content":"|`*` |counselor |check what prisoners\u0027 crimes |understand my patients better"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"Philos22"},"content":"// end::UserStories[]"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"Philos22"},"content":"// tag::UseCases[]"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1056,"author":{"gitID":"sarahgoh97"},"content":"\u003d\u003d\u003d Use case: Add a prisoner"},{"lineNumber":1057,"author":{"gitID":"sarahgoh97"},"content":"Actor: Guard (Guard)"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"sarahgoh97"},"content":"1.  Guard requests to add prisoner"},{"lineNumber":1062,"author":{"gitID":"sarahgoh97"},"content":"2.  PrisonBook adds prisoner"},{"lineNumber":1063,"author":{"gitID":"sarahgoh97"},"content":"3.  Guard requests to list cells that are empty/not filled"},{"lineNumber":1064,"author":{"gitID":"sarahgoh97"},"content":"4.  PrisonBook shows a list of empty/not filled cells"},{"lineNumber":1065,"author":{"gitID":"sarahgoh97"},"content":"5.  Guard requests to view a specific cell’s prisoner’s details"},{"lineNumber":1066,"author":{"gitID":"sarahgoh97"},"content":"6.  PrisonBook shows details of prisoner in cell"},{"lineNumber":1067,"author":{"gitID":"sarahgoh97"},"content":"7.  Guard requests to add a prisoner to a specific cell"},{"lineNumber":1068,"author":{"gitID":"sarahgoh97"},"content":"8.  PrisonBook adds prisoner to cell"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1075,"author":{"gitID":"sarahgoh97"},"content":"* 2a. There are no cells available for new prisoner."},{"lineNumber":1076,"author":{"gitID":"sarahgoh97"},"content":"+"},{"lineNumber":1077,"author":{"gitID":"sarahgoh97"},"content":"[none]"},{"lineNumber":1078,"author":{"gitID":"sarahgoh97"},"content":"** 2a1. PrisonBook shows an error message."},{"lineNumber":1079,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"sarahgoh97"},"content":"* 5a. The given index is invalid, outside range."},{"lineNumber":1083,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1085,"author":{"gitID":"sarahgoh97"},"content":"** 5a1. PrisonBook shows an error message."},{"lineNumber":1086,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1087,"author":{"gitID":"sarahgoh97"},"content":"Use case resumes at step 4."},{"lineNumber":1088,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1089,"author":{"gitID":"sarahgoh97"},"content":"* 5b. The given index of cell has no prisoners."},{"lineNumber":1090,"author":{"gitID":"sarahgoh97"},"content":"+"},{"lineNumber":1091,"author":{"gitID":"sarahgoh97"},"content":"[none]"},{"lineNumber":1092,"author":{"gitID":"sarahgoh97"},"content":"** 5b1. PrisonBook shows an error message."},{"lineNumber":1093,"author":{"gitID":"sarahgoh97"},"content":"+"},{"lineNumber":1094,"author":{"gitID":"sarahgoh97"},"content":"Use case resumes at step 4."},{"lineNumber":1095,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1096,"author":{"gitID":"sarahgoh97"},"content":"* 7a. The given index is invalid."},{"lineNumber":1097,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1099,"author":{"gitID":"sarahgoh97"},"content":"** 7a1. PrisonBook shows an error message."},{"lineNumber":1100,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1101,"author":{"gitID":"sarahgoh97"},"content":"Use case resumes at step 6."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"Philos22"},"content":"[discrete]"},{"lineNumber":1104,"author":{"gitID":"Philos22"},"content":"\u003d\u003d\u003d Use case: Assign prisoner to a cell"},{"lineNumber":1105,"author":{"gitID":"sarahgoh97"},"content":"Actor: Guard"},{"lineNumber":1106,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1107,"author":{"gitID":"Philos22"},"content":"*MSS*"},{"lineNumber":1108,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1109,"author":{"gitID":"sarahgoh97"},"content":"1.  Guard selects a prisoner"},{"lineNumber":1110,"author":{"gitID":"sarahgoh97"},"content":"2.  Guard requests a list of available cells with room available"},{"lineNumber":1111,"author":{"gitID":"sarahgoh97"},"content":"3.  PrisonBook shows a list of available cells"},{"lineNumber":1112,"author":{"gitID":"sarahgoh97"},"content":"4.  Guard requests to add prisoner to vacant cell"},{"lineNumber":1113,"author":{"gitID":"sarahgoh97"},"content":"5.  PrisonBook updates prisoner status and cell status"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1120,"author":{"gitID":"Philos22"},"content":"* 2a. The cell list is empty."},{"lineNumber":1121,"author":{"gitID":"Philos22"},"content":"+"},{"lineNumber":1122,"author":{"gitID":"Philos22"},"content":"Use case ends."},{"lineNumber":1123,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1124,"author":{"gitID":"Philos22"},"content":"* 3a. Prisoner is already assigned to a cell."},{"lineNumber":1125,"author":{"gitID":"Philos22"},"content":"+"},{"lineNumber":1126,"author":{"gitID":"Philos22"},"content":"[none]"},{"lineNumber":1127,"author":{"gitID":"sarahgoh97"},"content":"** 3a1. PrisonBook removes cell tag from prisoner status and removes prisoner from cell status"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1130,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1131,"author":{"gitID":"Zacci"},"content":"[discrete]"},{"lineNumber":1132,"author":{"gitID":"Zacci"},"content":"\u003d\u003d\u003d Use case: Get the list of prisoners in a certain cell"},{"lineNumber":1133,"author":{"gitID":"sarahgoh97"},"content":"Actor: Guard"},{"lineNumber":1134,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":1135,"author":{"gitID":"Zacci"},"content":"*MSS*"},{"lineNumber":1136,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":1137,"author":{"gitID":"sarahgoh97"},"content":"1.  Guard requests a list of cells"},{"lineNumber":1138,"author":{"gitID":"sarahgoh97"},"content":"2.  PrisonBook shows the list of cells"},{"lineNumber":1139,"author":{"gitID":"sarahgoh97"},"content":"3.  Guard requests to view the list of prisoners assigned to a specific cell"},{"lineNumber":1140,"author":{"gitID":"sarahgoh97"},"content":"4.  PrisonBook shows a list of of prisoners assigned to the cell"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1147,"author":{"gitID":"sarahgoh97"},"content":"* 3a. Guard does not have access rights to view the details of the requested cell"},{"lineNumber":1148,"author":{"gitID":"Zacci"},"content":"+"},{"lineNumber":1149,"author":{"gitID":"Zacci"},"content":"Use case ends."},{"lineNumber":1150,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":1151,"author":{"gitID":"Philos22"},"content":"// end::UseCases[]"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"Philos22"},"content":"// tag::NFR[]"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1158,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1159,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1160,"author":{"gitID":"Philos22"},"content":".  Should work for 32-bit and 64-bit environments"},{"lineNumber":1161,"author":{"gitID":"Philos22"},"content":".  System should respond within 2 seconds"},{"lineNumber":1162,"author":{"gitID":"sarahgoh97"},"content":".  Should have different levels of access for users of different ranks."},{"lineNumber":1163,"author":{"gitID":"sarahgoh97"},"content":".  Should have a backup copy at all times in case a user accidentally deletes any information."},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"Philos22"},"content":"// end::NFR[]"},{"lineNumber":1166,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"sarahgoh97"},"content":"[[prisoner]] Prisoner::"},{"lineNumber":1177,"author":{"gitID":"sarahgoh97"},"content":"A person has been imprisoned for a crime."},{"lineNumber":1178,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"Philos22"},"content":"*PrisonBook*"},{"lineNumber":1183,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":1184,"author":{"gitID":"Philos22"},"content":"Author:"},{"lineNumber":1185,"author":{"gitID":"Philos22"},"content":"Isaac"},{"lineNumber":1186,"author":{"gitID":"Philos22"},"content":"Sarah Goh Shi Ning"},{"lineNumber":1187,"author":{"gitID":"Philos22"},"content":"Philos (Chung-Yen) Tsai"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1193,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1213,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1219,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1229,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1231,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1233,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Philos22":106,"sarahgoh97":163,"Zacci":41,"-":934}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"Philos22"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":18,"-":177}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"        model.login(\"maxSecurityLevelUser\", 999);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":1,"-":157}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"    public Model getModel() {"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":"        model.login(\"maxSecurityLevelUser\", 999);"},{"lineNumber":100,"author":{"gitID":"Zacci"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":"        return copy;"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"    //@author"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"        ui.start(primaryStage);"},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"    public static void main(String[] args) {"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"        launch(args);"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":116,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Zacci"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":121,"author":{"gitID":"Zacci"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":122,"author":{"gitID":"Zacci"},"content":"        } catch (Exception e) {"},{"lineNumber":123,"author":{"gitID":"Zacci"},"content":"            throw new RuntimeException(e);"},{"lineNumber":124,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":31,"-":95}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"        String defaultConfigAsString \u003d \"App title : PrisonBook App\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"    private static final String VALID_ROLE \u003d \"p\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"Zacci"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":5,"-":143}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    private static final String NUMBER_OF_PEOPLE_POSTFIX \u003d \" person(s) total.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, EVENT_STUB.data.getPersonList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"                EVENT_STUB.data.getPersonList().size() + NUMBER_OF_PEOPLE_POSTFIX,"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"                SYNC_STATUS_INITIAL);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"                EVENT_STUB.data.getPersonList().size() + NUMBER_OF_PEOPLE_POSTFIX,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"    private void assertStatusBarContent(String expectedSaveLocation,"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"                                        String expectedNumberOfPeopleStatus, String expectedSyncStatus) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"        assertEquals(expectedNumberOfPeopleStatus, statusBarFooterHandle.getNumberOfPeopleStatus());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":8,"-":73}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"    public LogicManagerTest() {"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"        model.login(\"maxSecurityLevelUser\", 999);"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":122,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"Zacci":6,"-":122}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + ROLE_DESC_BOB + \" \""},{"lineNumber":72,"author":{"gitID":"Zacci"},"content":"                + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":135,"author":{"gitID":"Zacci"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":136,"author":{"gitID":"Zacci"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":166,"author":{"gitID":"Zacci"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":170,"author":{"gitID":"Zacci"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":174,"author":{"gitID":"Zacci"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":178,"author":{"gitID":"Zacci"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"Zacci"},"content":"        /* Case: invalid rejected -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":182,"author":{"gitID":"Zacci"},"content":"                + INVALID_ROLE_DESC, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"Zacci"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"Zacci"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":193,"author":{"gitID":"Zacci"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"Zacci"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"Zacci"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"Zacci"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":226,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":53,"-":235}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":54,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Philos22"},"content":"    //Todo : this test causing too much pain and burden, will fix later - doesn\u0027t directly affect functionality anyway"},{"lineNumber":74,"author":{"gitID":"Philos22"},"content":"    //"},{"lineNumber":75,"author":{"gitID":"Philos22"},"content":"    //    @Test"},{"lineNumber":76,"author":{"gitID":"Philos22"},"content":"    //    public void parseCommand_find() throws Exception {"},{"lineNumber":77,"author":{"gitID":"Philos22"},"content":"    //        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":78,"author":{"gitID":"Philos22"},"content":"    //        List\u003cString\u003e tagKeywords \u003d Arrays.asList(\"tag1\", \"tag2\");"},{"lineNumber":79,"author":{"gitID":"Philos22"},"content":"    //        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":80,"author":{"gitID":"Philos22"},"content":"    //                FindCommand.COMMAND_WORD + \" n/\" + nameKeywords.stream().collect(Collectors.joining(\" \"))"},{"lineNumber":81,"author":{"gitID":"Philos22"},"content":"    //                        +\" t/\"+tagKeywords.stream().collect(Collectors.joining(\" \"))"},{"lineNumber":82,"author":{"gitID":"Philos22"},"content":"    //        );"},{"lineNumber":83,"author":{"gitID":"Philos22"},"content":"    //        assertEquals(new FindCommand(new ContainsKeywordsPredicate(nameKeywords,tagKeywords)), command);"},{"lineNumber":84,"author":{"gitID":"Philos22"},"content":"    //    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":114,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":12,"-":131}},{"path":"src/test/java/seedu/address/logic/parser/AddCellCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.AddCellCommand;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"public class AddCellCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    private AddCellCommandParser parser \u003d new AddCellCommandParser();"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"    public void parse_validArgs_returnsAddCellCommand() {"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"        assertParseSuccess(parser, \"ac 1 1-1\", new AddCellCommand(INDEX_FIRST_PERSON, \"1-1\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"        assertParseFailure(parser, \"ac 1 sdf32\","},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"    public void parse_invalidCellAddress_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"        assertParseFailure(parser, \"ac 1 2\u003d1\","},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":23,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"    //Todo : this test causing too much pain and burde"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"    // n, will fix later - doesn\u0027t directly affect functionality anyway"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"    //    @Test"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    //    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"    //        // no leading and trailing whitespaces"},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    //        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"    //        nameList.add(\"Alice\");"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"    //        nameList.add(\"Bob\");"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"    //        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"    //        tagList.add(\"Tag1\");"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    //        tagList.add(\"Tag2\");"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"    //        FindCommand expectedFindCommand \u003d"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"    //                new FindCommand(new ContainsKeywordsPredicate(nameList,"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"    //                        tagList));"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"    //        System.out.println(\"test : \" + expectedFindCommand); //debug"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    //"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"    //        assertParseSuccess(parser, \"find n/Alice Bob t/Tag1 Tag2\", expectedFindCommand);"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"    //"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"    //        // multiple whitespaces between keywords"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"    //        assertParseSuccess(parser, \"find \\n n/Alice \\n \\t Bob  \\t t/Tag1 \\n Tag2\", expectedFindCommand);"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"    //    }"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":23,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"        // multiple roles - last role accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY).withTags().build();"},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB, expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB, expectedMessage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB, expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB, expectedMessage);"},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":121,"author":{"gitID":"Zacci"},"content":"        // missing role prefix"},{"lineNumber":122,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"Zacci"},"content":"                + VALID_ROLE_BOB, expectedMessage);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":126,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":127,"author":{"gitID":"Zacci"},"content":"                + VALID_ROLE_BOB, expectedMessage);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":133,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":137,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":138,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":141,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":145,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":146,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"Zacci"},"content":"        // invalid role"},{"lineNumber":149,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"Zacci"},"content":"                + INVALID_ROLE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":153,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":157,"author":{"gitID":"Zacci"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":158,"author":{"gitID":"Zacci"},"content":"                + ROLE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":162,"author":{"gitID":"Zacci"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":79,"-":86}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"    public static final String VALID_ROLE_AMY \u003d \"p\";"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"    public static final String VALID_ROLE_BOB \u003d \"g\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"s\"; // only \u0027p\u0027 or \u0027g\u0027 allowed for roles"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":107,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":11,"-":152}},{"path":"src/test/java/seedu/address/logic/commands/AddCellCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.logic.commands.AddCellCommand.MESSAGE_FULL_CELL;"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.logic.commands.AddCellCommand.MESSAGE_NOT_PRISONER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.testutil.TypicalCells.FULL_CELL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"public class AddCellCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_validIndexUnfilteredListValidCellAddress_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"        Person prisonerToAdd \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d \"2-5\";"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(INDEX_THIRD_PERSON, cellAddress);"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"        String expectedMessage \u003d String.format(AddCellCommand.MESSAGE_ADD_CELL_SUCCESS,"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"                prisonerToAdd.getName().toString(), cellAddress);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"        expectedModel.addPrisonerToCell(prisonerToAdd, cellAddress);"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandSuccess(addCellCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_inValidIndexUnfilteredListValidCellAddress_success() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d \"2-5\";"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(outOfBoundIndex, cellAddress);"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandFailure(addCellCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_validIndexUnfilteredListInvalidCellAddress_success() {"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"        Person prisonerToAdd \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d \"0-0\";"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(INDEX_THIRD_PERSON, cellAddress);"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandFailure(addCellCommand, model, String.format(AddCellCommand.MESSAGE_NON_EXISTENT_CELL,"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"                cellAddress, getMapString()));"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_fullCell_failure() {"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"        Person prisonerToAdd \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d FULL_CELL.getCellAddress();"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(INDEX_THIRD_PERSON, cellAddress);"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandFailure(addCellCommand, model,"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"                String.format(MESSAGE_FULL_CELL, cellAddress, getMapString()));"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_personNotPrisoner_failure() {"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        Person prisonerToAdd \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d \"2-5\";"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(INDEX_SECOND_PERSON, cellAddress);"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandFailure(addCellCommand, model,"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"                String.format(MESSAGE_NOT_PRISONER, prisonerToAdd.getName().toString()));"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":90,"author":{"gitID":"sarahgoh97"},"content":"    /*difficult to test, will fix later"},{"lineNumber":91,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_personInCell_failure() {"},{"lineNumber":93,"author":{"gitID":"sarahgoh97"},"content":"        Person prisonerToAdd \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d \"2-5\";"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d prepareCommand(INDEX_FIRST_PERSON, cellAddress);"},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":97,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandFailure(addCellCommand, model,"},{"lineNumber":98,"author":{"gitID":"sarahgoh97"},"content":"                String.format(MESSAGE_ALREADY_IN_CELL,"},{"lineNumber":99,"author":{"gitID":"sarahgoh97"},"content":"                        prisonerToAdd.getName().toString(), prisonerToAdd.getAddress().toString()));"},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":101,"author":{"gitID":"sarahgoh97"},"content":"    }*/"},{"lineNumber":102,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":"    private AddCellCommand prepareCommand(Index index, String cellAddress) {"},{"lineNumber":104,"author":{"gitID":"sarahgoh97"},"content":"        AddCellCommand addCellCommand \u003d new AddCellCommand(index, cellAddress);"},{"lineNumber":105,"author":{"gitID":"sarahgoh97"},"content":"        addCellCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":106,"author":{"gitID":"sarahgoh97"},"content":"        return addCellCommand;"},{"lineNumber":107,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":109,"author":{"gitID":"sarahgoh97"},"content":"    private String getMapString() {"},{"lineNumber":110,"author":{"gitID":"sarahgoh97"},"content":"        return new ShowCellsCommand().getMapString(model.getAddressBook().getCellList().toString());"},{"lineNumber":111,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":84,"-":28}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"import seedu.address.model.person.ContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"Philos22"},"content":"        FindCommand command \u003d prepareCommand(\" \", \" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"Philos22"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\", \"Tag1\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Philos22"},"content":"    //@@author philos22"},{"lineNumber":79,"author":{"gitID":"Philos22"},"content":"    private FindCommand prepareCommand(String userInput, String tagInput) {"},{"lineNumber":80,"author":{"gitID":"Philos22"},"content":"        FindCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"Philos22"},"content":"                new FindCommand(new ContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"},{"lineNumber":82,"author":{"gitID":"Philos22"},"content":"                        Arrays.asList(tagInput.split(\"\\\\s+\"))));"},{"lineNumber":83,"author":{"gitID":"Philos22"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitID":"Philos22"},"content":"        return command;"},{"lineNumber":85,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Philos22"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":12,"-":89}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedCellTest.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"public class XmlAdaptedCellTest {"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public static final String INVALID_CELL_ADDRESS \u003d \"0-0\";"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"    public void toModelType_validCell_returnsCell() {"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"        XmlAdaptedCell cell \u003d new XmlAdaptedCell();"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    public void toModelType_nullCellAddress_throwsIllegalValueException() {"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"        XmlAdaptedCell cell \u003d new XmlAdaptedCell();"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"        String expectedMessage \u003d XmlAdaptedCell.INVALID_CELL;"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cell::toModelType);"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    public void toModelType_invalidCellAddress_throwsIllegalValueException() {"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"        XmlAdaptedCell cell \u003d new XmlAdaptedCell(INVALID_CELL_ADDRESS, null);"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"        String expectedMessage \u003d XmlAdaptedCell.INVALID_CELL;"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cell::toModelType);"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":27,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.Session;"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotImprisonedException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"        public void login(String username, int securityLevel){};"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":"        public void logout(){};"},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"        public Session getSession() {"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"            return new Session();"},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":"        };"},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"Zacci"},"content":"        public String getSessionDetails() {"},{"lineNumber":117,"author":{"gitID":"Zacci"},"content":"            return \"\";"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"Zacci"},"content":"        public boolean attemptLogin(String username, String password) {"},{"lineNumber":122,"author":{"gitID":"Zacci"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":125,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"Zacci"},"content":"        public int getSecurityLevel() {"},{"lineNumber":127,"author":{"gitID":"Zacci"},"content":"            return 5;"},{"lineNumber":128,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":130,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"Zacci"},"content":"        public void addUser (User user) {};"},{"lineNumber":132,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":138,"author":{"gitID":"sarahgoh97"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"sarahgoh97"},"content":"        public void addPrisonerToCell(Person prisoner, String cellAddress) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":143,"author":{"gitID":"sarahgoh97"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"sarahgoh97"},"content":"        public void deletePrisonerFromCell(Person prisoner, String cellAddress) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":148,"author":{"gitID":"sarahgoh97"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"sarahgoh97"},"content":"        public void deletePrisonerFromCell(Person prisoner) throws PersonNotFoundException, NotImprisonedException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":32,"sarahgoh97":14,"-":174}},{"path":"src/test/java/seedu/address/logic/commands/ShowCellsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"public class ShowCellsCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    private ShowCellsCommand mapCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"        mapCommand \u003d new ShowCellsCommand();"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"        mapCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    public void execute_typicalMap() {"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"        assertCommandSuccess(mapCommand, model, String.format(mapCommand.MESSAGE_SUCCESS,"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"                new ShowCellsCommand().getMapString(model.getAddressBook().getCellList().toString())), expectedModel);"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":16,"-":19}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    private static final String INVALID_ROLE \u003d \"t\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"                VALID_ROLE, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"                VALID_ROLE, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":"                VALID_ROLE, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"                VALID_ROLE, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_ROLE, VALID_TAGS);"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"        String expectedMessage \u003d Role.MESSAGE_ROLE_CONSTRAINTS;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"Zacci"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"                VALID_TAGS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":130,"author":{"gitID":"Zacci"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ROLE, invalidTags);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":24,"-":110}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        private final ObservableList\u003cCell\u003e cells \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"        private final ObservableList\u003cUser\u003e users \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"            this.cells.setAll(cells);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":98,"author":{"gitID":"sarahgoh97"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"sarahgoh97"},"content":"        public ObservableList\u003cCell\u003e getCellList() {"},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":"            return cells;"},{"lineNumber":101,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"        public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"            return users;"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":8,"Zacci":7,"-":94}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"        assertEquals(addressBookFromFile.toString(), typicalPersonsAddressBook.toString());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"-":50}},{"path":"src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Tag1\"));"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Tag1\").build()));"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Tag1\", \"Tag2\"));"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Tag1\").build()));"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"        // Mixed-case keyword"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"tAg1\"));"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Tag1\").build()));"},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":59,"author":{"gitID":"Philos22"},"content":"        // Zero keywords"},{"lineNumber":60,"author":{"gitID":"Philos22"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":61,"author":{"gitID":"Philos22"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"Tag1\").build()));"},{"lineNumber":62,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":63,"author":{"gitID":"Philos22"},"content":"        // Non-matching keyword"},{"lineNumber":64,"author":{"gitID":"Philos22"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Tag2\"));"},{"lineNumber":65,"author":{"gitID":"Philos22"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"Tag1\").build()));"},{"lineNumber":66,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":67,"author":{"gitID":"Philos22"},"content":"        // Keywords match phone, email and address, but does not match tag"},{"lineNumber":68,"author":{"gitID":"Philos22"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\","},{"lineNumber":69,"author":{"gitID":"Philos22"},"content":"                \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":70,"author":{"gitID":"Philos22"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"Tag1\").withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":71,"author":{"gitID":"Philos22"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":72,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":73}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"        descriptor.setRole(person.getRole());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":77,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Zacci"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {"},{"lineNumber":81,"author":{"gitID":"Zacci"},"content":"        descriptor.setRole(new Role(role));"},{"lineNumber":82,"author":{"gitID":"Zacci"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":11,"-":87}},{"path":"src/test/java/seedu/address/testutil/CellBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":" * A utility class to help with building Cell objects."},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"public class CellBuilder {"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"    public static final ArrayList\u003cPerson\u003e DEFAULT_PRISONERS \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    public static final String DEFAULT_CELLADDRESS \u003d \"1-1\";"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    public static final boolean DEFAULT_IS_LAST \u003d false;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"    private ArrayList\u003cPerson\u003e prisoners;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    private String cellAddress;"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"    private boolean isLast;"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder() {"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"        prisoners \u003d new ArrayList\u003cPerson\u003e(DEFAULT_PRISONERS);"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress \u003d new String(DEFAULT_CELLADDRESS);"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"        isLast \u003d DEFAULT_IS_LAST;"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"     * Initialises the CellBuilder with data of {@code cellToCopy}"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder(Cell celltoCopy) {"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"        prisoners \u003d celltoCopy.getPrisoners();"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress \u003d celltoCopy.getCellAddress();"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"        isLast \u003d celltoCopy.getIsLast();"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"     * Sets the {@code prisoners} of the {@code Cell} that we are building."},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder withPrisoners(ArrayList\u003cPerson\u003e prisoners) {"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"        this.prisoners \u003d new ArrayList\u003cPerson\u003e(prisoners);"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"     * Sets the {@code prisoner} of the {@code Cell} that we are building."},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder withPrisoner(Person prisoner) {"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"        prisoners.add(prisoner);"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"     * Sets the {@code cellAddress} of the {@code cell} that we are building."},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder withCellAddress(String cellAddress) {"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"        this.cellAddress \u003d cellAddress;"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"     * Sets the  {@code isLast} of the {@code cell} that we are building."},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"    public CellBuilder withIsLast(boolean isLast) {"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"        this.isLast \u003d isLast;"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"    public Cell build() {"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        return new Cell(prisoners, cellAddress, isLast);"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":70,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalCells.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":" * A utility class containing a list of {@code Cell} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"public class TypicalCells {"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"    public static final Cell EMPTY_CELL \u003d new CellBuilder().build();"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    public static final Cell CELL_WITH_PRISONER \u003d new CellBuilder().withCellAddress(\"1-2\").withPrisoner(ALICE).build();"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"    public static final Cell FULL_CELL \u003d new CellBuilder().withCellAddress(\"1-3\").withPrisoner(ELLE)"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"            .withPrisoner(GEORGE).build();"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    public static final Cell LAST_CELL_OF_ROW \u003d new CellBuilder().withCellAddress(\"1-5\").withIsLast(true).build();"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"    public static List\u003cCell\u003e getTypicalCells() {"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(EMPTY_CELL, LAST_CELL_OF_ROW, CELL_WITH_PRISONER, FULL_CELL));"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":21,"-":6}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public static final String DEFAULT_ROLE \u003d \"p\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"    private Role role;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        role \u003d personToCopy.getRole();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":"    public PersonBuilder withRole(String role) {"},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":100,"author":{"gitID":"Zacci"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"    public Person build() {"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"        return new Person(name, phone, email, address, role, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":15,"-":92}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"        sb.append(PREFIX_ROLE + person.getRole().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":7,"-":33}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.testutil.TypicalCells.getTypicalCells;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"            .withPhone(\"85355255\").withRole(\"p\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withRole(\"g\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\").withRole(\"p\")"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTags(\"Tag1\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRole(\"g\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTags(\"Tag1\").withRole(\"p\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTags(\"Tag1\").withRole(\"g\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRole(\"p\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRole(\"p\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRole(\"g\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRole(VALID_ROLE_AMY)"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"        for (Cell cell: getTypicalCells()) {"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"            ab.addCell(cell);"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"Zacci":5,"sarahgoh97":14,"-":69}},{"path":"src/test/java/seedu/address/model/CellMapTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.CellMap;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class CellMapTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    public void getCellList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"        CellMap cellMap \u003d new CellMap();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"        cellMap.getCellList().remove(0);"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":9,"-":11}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"    private static final String ROLE_FIELD_ID \u003d \"#role\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    private final Label roleLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"        this.roleLabel \u003d getChildNode(ROLE_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Zacci"},"content":"    public String getRole() {"},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":"        return roleLabel.getText();"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":7,"-":71}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    private static final String NUMBER_OF_PEOPLE_STATUS_ID \u003d \"#numberOfPeopleStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    private final StatusBar numberOfPeopleNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    private String lastRememberedNumberOfPeople;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"        this.numberOfPeopleNode \u003d getChildNode(NUMBER_OF_PEOPLE_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"     * Returns the text of the \u0027number of people\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"    public String getNumberOfPeopleStatus() {"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"        return numberOfPeopleNode.getText();"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"     * Remembers the \u0027number of people\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"    public void rememberNumberOfPeople() {"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"        lastRememberedNumberOfPeople \u003d getNumberOfPeopleStatus();"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"     * Returns true if the number of people is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"    public boolean isNumberOfPeopleChanged() {"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        return !lastRememberedNumberOfPeople.equals(getNumberOfPeopleStatus());"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":24,"-":74}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"    private StatusBar numberOfPeopleStatus;"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"    public StatusBarFooter(String saveLocation, ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"        setNumberOfPeopleStatus(personList.size());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"    void setSaveLocation(String location) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"    private void setNumberOfPeopleStatus(int numberOfPeople) {"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        Platform.runLater(() -\u003e this.numberOfPeopleStatus.setText(numberOfPeople + \" person(s) total.\"));"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":90,"author":{"gitID":"sarahgoh97"},"content":"        setNumberOfPeopleStatus(abce.data.getPersonList().size());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":14,"-":78}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/prison.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        //mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":2,"-":118}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"    private Label role;"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"        role.setText(person.getRole().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":3,"-":70}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"    //private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"    private MapPanel mapPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"    //@FXML"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"    //private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    private StackPane mapPanelPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":100,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"sarahgoh97"},"content":"        mapPanel \u003d new MapPanel(logic.getCellList());"},{"lineNumber":128,"author":{"gitID":"sarahgoh97"},"content":"        mapPanelPlaceholder.getChildren().add(mapPanel.getRoot());"},{"lineNumber":129,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"sarahgoh97"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":134,"author":{"gitID":"sarahgoh97"},"content":"                logic.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":11,"-":188}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    private String appTitle \u003d \"PrisonBook App\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"    public static final String MESSAGE_TAGS_RESULT_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_INSUFFICIENT_SECURITY_CLEARANCE \u003d \"Your security level is insufficient to \""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"            + \"access this command.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"Zacci":2,"-":13}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.ShowCellsCommand;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"                + \"\\n\" + new ShowCellsCommand().getMapString(data.getCellList().toString());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":3,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    /** Returns an unmodifiable view of the celllist */"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    ObservableList\u003cCell\u003e getCellList();"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"    /** Returns an unmodifiable view of the userList */"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"    ObservableList\u003cUser\u003e getUserList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":4,"Zacci":4,"-":27}},{"path":"src/main/java/seedu/address/ui/MapPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":" * The cellMap of the App."},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"public class MapPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"    private static final String FXML \u003d \"MapPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MapPanel.class);"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress11;"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress12;"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress13;"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress14;"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress15;"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress21;"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress22;"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress23;"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress24;"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress25;"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress31;"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress32;"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress33;"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress34;"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"    private Label cellAddress35;"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"    public MapPanel(ObservableList\u003cCell\u003e cellList) {"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"        setConnections(cellList);"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"    private void setConnections(ObservableList\u003cCell\u003e cellList) {"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress11.setText(Integer.toString(cellList.get(0).getNumberOfPrisoners()));"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress12.setText(Integer.toString(cellList.get(1).getNumberOfPrisoners()));"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress13.setText(Integer.toString(cellList.get(2).getNumberOfPrisoners()));"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress14.setText(Integer.toString(cellList.get(3).getNumberOfPrisoners()));"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress15.setText(Integer.toString(cellList.get(4).getNumberOfPrisoners()));"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress21.setText(Integer.toString(cellList.get(5).getNumberOfPrisoners()));"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress22.setText(Integer.toString(cellList.get(6).getNumberOfPrisoners()));"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress23.setText(Integer.toString(cellList.get(7).getNumberOfPrisoners()));"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress24.setText(Integer.toString(cellList.get(8).getNumberOfPrisoners()));"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress25.setText(Integer.toString(cellList.get(9).getNumberOfPrisoners()));"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress31.setText(Integer.toString(cellList.get(10).getNumberOfPrisoners()));"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress32.setText(Integer.toString(cellList.get(11).getNumberOfPrisoners()));"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress33.setText(Integer.toString(cellList.get(12).getNumberOfPrisoners()));"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress34.setText(Integer.toString(cellList.get(13).getNumberOfPrisoners()));"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress35.setText(Integer.toString(cellList.get(14).getNumberOfPrisoners()));"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Changing map\"));"},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"        setConnections(abce.data.getCellList());"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":88}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"                        PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ROLE)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"            Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":"            Person person \u003d new Person(name, phone, email, address, role, tagList);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":12,"-":57}},{"path":"src/main/java/seedu/address/logic/UndoRedoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Maintains the undo-stack (the stack of commands that can be undone) and the redo-stack (the stack of"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * commands that can be undone)."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoRedoStack {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e redoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UndoRedoStack() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}. Clears the redo-stack"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * if {@code command} is not of type {@code UndoCommand} or {@code RedoCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            redoStack.clear();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoableCommand toUndo \u003d undoStack.pop();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoStack.push(toUndo);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return toUndo;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be redone in the stack."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public UndoableCommand popRedo() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UndoableCommand toRedo \u003d redoStack.pop();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        undoStack.push(toRedo);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return toRedo;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"     * Clears undo and redo stack"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"    public void clearStack() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be undone."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be redone."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean canRedo() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return !redoStack.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof UndoRedoStack)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UndoRedoStack stack \u003d (UndoRedoStack) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return undoStack.equals(stack.undoStack)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 redoStack.equals(stack.redoStack);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":4,"-":93}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.AddCellCommand;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.AddUserCommand;"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.commands.CalendarAddCommand;"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.commands.CheckStatusCommand;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.DeleteCellCommand;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.LogoutCommand;"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.ShowCellsCommand;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.ShowUsersCommand;"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"Zacci"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"Zacci"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":89,"author":{"gitID":"Philos22"},"content":"        //@@author philos22"},{"lineNumber":90,"author":{"gitID":"Philos22"},"content":"        case CalendarCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"Philos22"},"content":"        case CalendarCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"Philos22"},"content":"            return new CalendarCommand();"},{"lineNumber":93,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":94,"author":{"gitID":"Philos22"},"content":"        case CalendarAddCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"Philos22"},"content":"        case CalendarAddCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"Philos22"},"content":"            return new CalendarAddCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"Philos22"},"content":"        //@@author"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":"        //@@author zacci"},{"lineNumber":100,"author":{"gitID":"Zacci"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"            return new LogoutCommand();"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"        case CheckStatusCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"            return new CheckStatusCommand();"},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":"        case ShowUsersCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"            return new ShowUsersCommand();"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"        case AddUserCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":"            return new AddUserCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":"        //@@author"},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"Zacci"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"Zacci"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"Zacci"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"sarahgoh97"},"content":"        //@@author sarahgoh97"},{"lineNumber":135,"author":{"gitID":"sarahgoh97"},"content":"        case ShowCellsCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"sarahgoh97"},"content":"        case ShowCellsCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"sarahgoh97"},"content":"            return new ShowCellsCommand();"},{"lineNumber":138,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":139,"author":{"gitID":"sarahgoh97"},"content":"        case AddCellCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"sarahgoh97"},"content":"        case AddCellCommand.COMMAND_ALIAS:"},{"lineNumber":141,"author":{"gitID":"sarahgoh97"},"content":"            return new AddCellCommandParser().parse(arguments);"},{"lineNumber":142,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":143,"author":{"gitID":"sarahgoh97"},"content":"        case DeleteCellCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"sarahgoh97"},"content":"        case DeleteCellCommand.COMMAND_ALIAS:"},{"lineNumber":145,"author":{"gitID":"sarahgoh97"},"content":"            return new DeleteCellCommandParser().parse(arguments);"},{"lineNumber":146,"author":{"gitID":"sarahgoh97"},"content":"        //@@author"},{"lineNumber":147,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":12,"sarahgoh97":30,"Zacci":33,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    public static final Prefix PREFIX_SECURITY_LEVEL \u003d new Prefix(\"sl/\");"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"    //@@author philos22"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"event/\");"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"loc/\");"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"    public static final Prefix PREFIX_START \u003d new Prefix(\"start/\");"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"    public static final Prefix PREFIX_END \u003d new Prefix(\"end/\");"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    //@@author"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":6,"Zacci":4,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"        //@@author philos22"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME) || arePrefixesPresent(argMultimap, PREFIX_TAG)"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"                || !argMultimap.getPreamble().isEmpty())) {"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":"            String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":"            return new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":35,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"Zacci"},"content":"     * Parses a {@code String role} into an {@code role}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"Zacci"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":153,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"Zacci"},"content":"    public static Role parseRole(String role) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"Zacci"},"content":"        //requireNonNull(role); null accepted for now"},{"lineNumber":156,"author":{"gitID":"Zacci"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":157,"author":{"gitID":"Zacci"},"content":"        if (!Role.isValidRole(trimmedRole)) {"},{"lineNumber":158,"author":{"gitID":"Zacci"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"Zacci"},"content":"        return new Role(trimmedRole);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"Zacci"},"content":"    public static Optional\u003cRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"Zacci"},"content":"        //requireNonNull(role); null accepted for now"},{"lineNumber":169,"author":{"gitID":"Zacci"},"content":"        return role.isPresent() ? Optional.of(parseRole(role.get())) : Optional.empty();"},{"lineNumber":170,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":199,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"Zacci"},"content":"     * Parses a @code String username"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"Zacci"},"content":"     * @throws IllegalValueException if the given {@code password} is invalid."},{"lineNumber":204,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"Zacci"},"content":"    public static String parseUsername(String username) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"Zacci"},"content":"        requireNonNull(username);"},{"lineNumber":207,"author":{"gitID":"Zacci"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":208,"author":{"gitID":"Zacci"},"content":"        if (!trimmedUsername.matches(\"[\\\\p{Alnum}]*\")) {"},{"lineNumber":209,"author":{"gitID":"Zacci"},"content":"            throw new IllegalValueException(\"Username can only consist of alphanumeric characters\");"},{"lineNumber":210,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"Zacci"},"content":"        return trimmedUsername;"},{"lineNumber":212,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":214,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"Zacci"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cusername\u003e} if {@code username} is present."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"Zacci"},"content":"    public static String parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":219,"author":{"gitID":"Zacci"},"content":"        //requireNonNull(username); null accepted for now"},{"lineNumber":220,"author":{"gitID":"Zacci"},"content":"        return username.isPresent() ? parseUsername(username.get()) : \"\";"},{"lineNumber":221,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":223,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"Zacci"},"content":"     * Parses a @code String password"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":227,"author":{"gitID":"Zacci"},"content":"     * @throws IllegalValueException if the given {@code password} is invalid."},{"lineNumber":228,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"Zacci"},"content":"    public static String parsePassword(String password) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"Zacci"},"content":"        requireNonNull(password);"},{"lineNumber":231,"author":{"gitID":"Zacci"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":232,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":233,"author":{"gitID":"Zacci"},"content":"        if (!trimmedPassword.matches(\"[\\\\p{Alnum}]*\")) {"},{"lineNumber":234,"author":{"gitID":"Zacci"},"content":"            throw new IllegalValueException(\"Password can only consist of alphanumeric characters\");"},{"lineNumber":235,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"Zacci"},"content":"        return trimmedPassword;"},{"lineNumber":237,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":239,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"Zacci"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cpassword\u003e} if {@code password} is present."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"Zacci"},"content":"    public static String parsePassword(Optional\u003cString\u003e password) throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"Zacci"},"content":"        requireNonNull(password);"},{"lineNumber":245,"author":{"gitID":"Zacci"},"content":"        return password.isPresent() ? parsePassword(password.get()) : \"\";"},{"lineNumber":246,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":248,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"Zacci"},"content":"     * Parses a @code String securityLevel"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":252,"author":{"gitID":"Zacci"},"content":"     * @throws IllegalValueException if the given {@code securityLevel} is invalid."},{"lineNumber":253,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"Zacci"},"content":"    public static int parseSecurityLevel(String securityLevel) throws NumberFormatException, IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"Zacci"},"content":"        requireNonNull(securityLevel);"},{"lineNumber":256,"author":{"gitID":"Zacci"},"content":"        String trimmedSecurityLevel \u003d securityLevel.trim();"},{"lineNumber":257,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":258,"author":{"gitID":"Zacci"},"content":"        if (!trimmedSecurityLevel.matches(\"[123]\")) {"},{"lineNumber":259,"author":{"gitID":"Zacci"},"content":"            throw new IllegalValueException(\"Security Level can only take integer values 1, 2 or 3\");"},{"lineNumber":260,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":262,"author":{"gitID":"Zacci"},"content":"        int intSecurityLevel \u003d Integer.parseInt(trimmedSecurityLevel);"},{"lineNumber":263,"author":{"gitID":"Zacci"},"content":"        return intSecurityLevel;"},{"lineNumber":264,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":266,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"Zacci"},"content":"     * Parses a {@code Optional\u003cint\u003e securityLevel} into an {@code Optional\u003csecurityLevel\u003e}"},{"lineNumber":268,"author":{"gitID":"Zacci"},"content":"     * if {@code securityLevel} is present."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"Zacci"},"content":"    public static int parseSecurityLevel (Optional\u003cString\u003e password)"},{"lineNumber":272,"author":{"gitID":"Zacci"},"content":"            throws NumberFormatException, IllegalValueException {"},{"lineNumber":273,"author":{"gitID":"Zacci"},"content":"        requireNonNull(password);"},{"lineNumber":274,"author":{"gitID":"Zacci"},"content":"        return password.isPresent() ? parseSecurityLevel(password.get()) : -1;"},{"lineNumber":275,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":277,"author":{"gitID":"Philos22"},"content":"    //@@author philos22"},{"lineNumber":278,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"Philos22"},"content":"     * Parses a {@code Optional\u003cString\u003e DateTime} if present."},{"lineNumber":280,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"Philos22"},"content":"    public static DateTime parseDateTime(String dateTime) throws IllegalValueException {"},{"lineNumber":282,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":283,"author":{"gitID":"Philos22"},"content":"        String theDateTime \u003d dateTime.replaceAll(\"[\\\\[\\\\]]\", \"\").replaceAll(\"Optional\", \"\");"},{"lineNumber":284,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":285,"author":{"gitID":"Philos22"},"content":"        TemporalAccessor ta \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").parse(theDateTime);"},{"lineNumber":286,"author":{"gitID":"Philos22"},"content":"        String strDateTime \u003d LocalDateTime.from(ta).toString() + \":00\";"},{"lineNumber":287,"author":{"gitID":"Philos22"},"content":"        return new DateTime(strDateTime);"},{"lineNumber":288,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":290,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":19,"Zacci":84,"-":187}},{"path":"src/main/java/seedu/address/Calendar.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"import com.google.api.services.calendar.model.Events;"},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"/** The main Calendar Functionality class"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":" * Returns a list of upcoming events and times"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":" * */"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"public class Calendar {"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    /** Application name. */"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"    private static final String application_name \u003d"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"            \"Google Calendar API Java seedu.address.Calendar\";"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    private static final java.io.File data_store_dir \u003d new java.io.File("},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"    private static FileDataStoreFactory datastorefactory;"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":"    private static final JsonFactory json_factory \u003d"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"    private static HttpTransport httptransport;"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"    private static final List\u003cString\u003e scopes \u003d"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"            Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":"    static {"},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":"            httptransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":59,"author":{"gitID":"Philos22"},"content":"            datastorefactory \u003d new FileDataStoreFactory(data_store_dir);"},{"lineNumber":60,"author":{"gitID":"Philos22"},"content":"        } catch (Throwable t) {"},{"lineNumber":61,"author":{"gitID":"Philos22"},"content":"            t.printStackTrace();"},{"lineNumber":62,"author":{"gitID":"Philos22"},"content":"            System.exit(1);"},{"lineNumber":63,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":66,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Philos22"},"content":"     * Creates an authorized Credential object."},{"lineNumber":68,"author":{"gitID":"Philos22"},"content":"     * @return an authorized Credential object."},{"lineNumber":69,"author":{"gitID":"Philos22"},"content":"     * @throws IOException"},{"lineNumber":70,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"Philos22"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":72,"author":{"gitID":"Philos22"},"content":"        // Load client secrets."},{"lineNumber":73,"author":{"gitID":"Philos22"},"content":"        InputStream in \u003d"},{"lineNumber":74,"author":{"gitID":"Philos22"},"content":"                Calendar.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":75,"author":{"gitID":"Philos22"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":76,"author":{"gitID":"Philos22"},"content":"                GoogleClientSecrets.load(json_factory, new InputStreamReader(in));"},{"lineNumber":77,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":78,"author":{"gitID":"Philos22"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":79,"author":{"gitID":"Philos22"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":80,"author":{"gitID":"Philos22"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":81,"author":{"gitID":"Philos22"},"content":"                        httptransport, json_factory, clientSecrets, scopes)"},{"lineNumber":82,"author":{"gitID":"Philos22"},"content":"                        .setDataStoreFactory(datastorefactory)"},{"lineNumber":83,"author":{"gitID":"Philos22"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":84,"author":{"gitID":"Philos22"},"content":"                        .build();"},{"lineNumber":85,"author":{"gitID":"Philos22"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":86,"author":{"gitID":"Philos22"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":87,"author":{"gitID":"Philos22"},"content":"        System.out.println("},{"lineNumber":88,"author":{"gitID":"Philos22"},"content":"                \"Credentials saved to \" + data_store_dir.getAbsolutePath());"},{"lineNumber":89,"author":{"gitID":"Philos22"},"content":"        return credential;"},{"lineNumber":90,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":92,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Philos22"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":94,"author":{"gitID":"Philos22"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":95,"author":{"gitID":"Philos22"},"content":"     * @throws IOException"},{"lineNumber":96,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Philos22"},"content":"    public static com.google.api.services.calendar.Calendar"},{"lineNumber":98,"author":{"gitID":"Philos22"},"content":"        getCalendarService() throws IOException {"},{"lineNumber":99,"author":{"gitID":"Philos22"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":100,"author":{"gitID":"Philos22"},"content":"        return new com.google.api.services.calendar.Calendar.Builder("},{"lineNumber":101,"author":{"gitID":"Philos22"},"content":"                httptransport, json_factory, credential)"},{"lineNumber":102,"author":{"gitID":"Philos22"},"content":"                .setApplicationName(application_name)"},{"lineNumber":103,"author":{"gitID":"Philos22"},"content":"                .build();"},{"lineNumber":104,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":106,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Philos22"},"content":"     * iterate through events and list them out with their respective start times"},{"lineNumber":108,"author":{"gitID":"Philos22"},"content":"     * @return a list of upcoming events"},{"lineNumber":109,"author":{"gitID":"Philos22"},"content":"     * @throws IOException"},{"lineNumber":110,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Philos22"},"content":"    public static String listEvents() throws IOException {"},{"lineNumber":112,"author":{"gitID":"Philos22"},"content":"        // Build a new authorized API client service."},{"lineNumber":113,"author":{"gitID":"Philos22"},"content":"        // Note: Do not confuse this class with the"},{"lineNumber":114,"author":{"gitID":"Philos22"},"content":"        //   com.google.api.services.calendar.model.Calendar class."},{"lineNumber":115,"author":{"gitID":"Philos22"},"content":"        com.google.api.services.calendar.Calendar service \u003d"},{"lineNumber":116,"author":{"gitID":"Philos22"},"content":"                getCalendarService();"},{"lineNumber":117,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":118,"author":{"gitID":"Philos22"},"content":"        // List the next 10 events from the primary calendar."},{"lineNumber":119,"author":{"gitID":"Philos22"},"content":"        DateTime now \u003d new DateTime(System.currentTimeMillis());"},{"lineNumber":120,"author":{"gitID":"Philos22"},"content":"        Events events \u003d service.events().list(\"primary\")"},{"lineNumber":121,"author":{"gitID":"Philos22"},"content":"                .setMaxResults(10)"},{"lineNumber":122,"author":{"gitID":"Philos22"},"content":"                .setTimeMin(now)"},{"lineNumber":123,"author":{"gitID":"Philos22"},"content":"                .setOrderBy(\"startTime\")"},{"lineNumber":124,"author":{"gitID":"Philos22"},"content":"                .setSingleEvents(true)"},{"lineNumber":125,"author":{"gitID":"Philos22"},"content":"                .execute();"},{"lineNumber":126,"author":{"gitID":"Philos22"},"content":"        List\u003cEvent\u003e items \u003d events.getItems();"},{"lineNumber":127,"author":{"gitID":"Philos22"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitID":"Philos22"},"content":"        if (items.size() \u003d\u003d 0) {"},{"lineNumber":129,"author":{"gitID":"Philos22"},"content":"            result.append(\"No upcoming events found.\");"},{"lineNumber":130,"author":{"gitID":"Philos22"},"content":"        } else {"},{"lineNumber":131,"author":{"gitID":"Philos22"},"content":"            System.out.println(\"Upcoming events\");"},{"lineNumber":132,"author":{"gitID":"Philos22"},"content":"            for (Event event : items) {"},{"lineNumber":133,"author":{"gitID":"Philos22"},"content":"                DateTime start \u003d event.getStart().getDateTime();"},{"lineNumber":134,"author":{"gitID":"Philos22"},"content":"                if (start \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"Philos22"},"content":"                    start \u003d event.getStart().getDate();"},{"lineNumber":136,"author":{"gitID":"Philos22"},"content":"                }"},{"lineNumber":137,"author":{"gitID":"Philos22"},"content":"                result.append(String.format(\"%s (%s)\\n\", event.getSummary(), start));"},{"lineNumber":138,"author":{"gitID":"Philos22"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Philos22"},"content":"        return result.toString();"},{"lineNumber":141,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"Philos22"},"content":"    //@@author philos22"},{"lineNumber":143,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Philos22"},"content":"     * Adds event to the calendar - specifying Name, Location, StartTime, EndTime"},{"lineNumber":145,"author":{"gitID":"Philos22"},"content":"     * @return success code"},{"lineNumber":146,"author":{"gitID":"Philos22"},"content":"     * @throws IOException"},{"lineNumber":147,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"Philos22"},"content":"    public static String addEvent(String eventName, String eventLocation, DateTime startDateTime,"},{"lineNumber":149,"author":{"gitID":"Philos22"},"content":"                                  DateTime endDateTime) throws IOException {"},{"lineNumber":150,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":151,"author":{"gitID":"Philos22"},"content":"        String successAddedMessage \u003d \"Event added successfully\";"},{"lineNumber":152,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":153,"author":{"gitID":"Philos22"},"content":"        // Build a new authorized API client service."},{"lineNumber":154,"author":{"gitID":"Philos22"},"content":"        // Note: Do not confuse this class with the"},{"lineNumber":155,"author":{"gitID":"Philos22"},"content":"        //   com.google.api.services.calendar.model.Calendar class."},{"lineNumber":156,"author":{"gitID":"Philos22"},"content":"        com.google.api.services.calendar.Calendar service \u003d"},{"lineNumber":157,"author":{"gitID":"Philos22"},"content":"                getCalendarService();"},{"lineNumber":158,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":159,"author":{"gitID":"Philos22"},"content":"        Event event \u003d new Event()"},{"lineNumber":160,"author":{"gitID":"Philos22"},"content":"                .setSummary(eventName)"},{"lineNumber":161,"author":{"gitID":"Philos22"},"content":"                .setLocation(eventLocation);"},{"lineNumber":162,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":163,"author":{"gitID":"Philos22"},"content":"        EventDateTime start \u003d new EventDateTime()"},{"lineNumber":164,"author":{"gitID":"Philos22"},"content":"                .setDateTime(startDateTime)"},{"lineNumber":165,"author":{"gitID":"Philos22"},"content":"                .setTimeZone(\"\");"},{"lineNumber":166,"author":{"gitID":"Philos22"},"content":"        event.setStart(start);"},{"lineNumber":167,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":168,"author":{"gitID":"Philos22"},"content":"        EventDateTime end \u003d new EventDateTime()"},{"lineNumber":169,"author":{"gitID":"Philos22"},"content":"                .setDateTime(endDateTime)"},{"lineNumber":170,"author":{"gitID":"Philos22"},"content":"                .setTimeZone(\"\");"},{"lineNumber":171,"author":{"gitID":"Philos22"},"content":"        event.setEnd(end);"},{"lineNumber":172,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":173,"author":{"gitID":"Philos22"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":174,"author":{"gitID":"Philos22"},"content":"        event \u003d service.events().insert(calendarId, event).execute();"},{"lineNumber":175,"author":{"gitID":"Philos22"},"content":"        System.out.printf(\"Event created: %s\\n\", event.getHtmlLink());"},{"lineNumber":176,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":177,"author":{"gitID":"Philos22"},"content":"        return successAddedMessage;"},{"lineNumber":178,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":180,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":180}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"        String username \u003d \"\";"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"        String password \u003d \"\";"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"            username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME));"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"            password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD));"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"        return new LoginCommand(username, password);"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":9,"Zacci":32,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCellCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.DeleteCellCommand;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":" * Parses the given input and gives a new DeleteCellCommand object."},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"public class DeleteCellCommandParser implements Parser\u003cDeleteCellCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"     * Parses the given {@code String} of arguments in the context of DeleteCellCommand"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"     * and returns a DeleteCellCommand object for execution"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    public DeleteCellCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"            return new DeleteCellCommand(index);"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCellCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":30}},{"path":"src/main/java/seedu/address/logic/parser/CalendarAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.commands.CalendarAddCommand;"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":" * Parses input arguments and creates a new CalendarAddCommandParser object"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"public class CalendarAddCommandParser implements Parser\u003cCalendarAddCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"     * Parses the given {@code String} of arguments in the context of the CalendarAddCommand"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"     * and returns the message of whether execution was successful or not."},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    public CalendarAddCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT, PREFIX_LOCATION, PREFIX_START, PREFIX_END);"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT, PREFIX_LOCATION, PREFIX_START, PREFIX_END)"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarAddCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":"            String eventName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EVENT)).get().toString();"},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":"            String eventLocation \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_LOCATION)).get().toString();"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"            DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START).toString());"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"            DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END).toString());"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"            return new CalendarAddCommand(eventName, eventLocation, startDateTime, endDateTime);"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":60,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":60}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE,"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"                        PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"            ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).ifPresent(editPersonDescriptor::setRole);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":9,"-":73}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 2;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":9,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 1;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":9,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CheckStatusCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":" * Displays the status of the current session"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class CheckStatusCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_WORD \u003d \"status\";"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"     * Checks the status of current session"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"     * @return details of the status"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    public CommandResult execute() {"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"        String details \u003d (model.getSessionDetails());"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"        return new CommandResult(details);"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Philos22":4,"Zacci":15}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":" * Attempts to log in user with given Username and Password"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class LoginCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_LOGIN_FAILURE \u003d \"Login failed. Username and/or Password entered incorrectly.\";"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_LOGIN_SUCCESS \u003d \"Login Success\";"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs in with your username and password to gain \""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"            + \"access to the Prison Book.\\n\""},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"            + \"Parameters: user/YOUR_USERNAME pw/YOUR_PASSWORD...\\n\""},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"            + \"Example: \" + COMMAND_WORD + \" user/prisonwarden99 pw/password1\";"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    private final String username;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"    private final String password;"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    public LoginCommand(String username, String password) {"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"        this.username \u003d username;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"        this.password \u003d password;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"        if (!model.attemptLogin(username, password)) {"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"            return new CommandResult(MESSAGE_LOGIN_FAILURE);"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"            return new CommandResult(MESSAGE_LOGIN_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":35}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 3;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":10,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    protected static final int MIN_SECURITY_LEVEL \u003d 0;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"     * Constructs a feedback message to summarise an operation that displayed the result of a search by tag."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"     * @return summary message for tag search displayed"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"    public static String getMessageForTagShownSummary(int displaySize) {"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"        return String.format(Messages.MESSAGE_TAGS_RESULT_LISTED_OVERVIEW, displaySize);"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":8,"Zacci":12,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 2;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"            + PREFIX_ROLE + \"ROLE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"            + PREFIX_ROLE + \"g \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":18,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCellCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotImprisonedException;"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":" * Deletes a prisoner from a cell in the address book."},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"public class DeleteCellCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_WORD \u003d \"deletecell\";"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_ALIAS \u003d \"dc\";"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes prisoners in specified cell.\\n\""},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"            + \"Example: \" + COMMAND_WORD + \"1\";"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_DELETE_CELL_SUCCESS \u003d \"Prisoner %s has been released.\";"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    public final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    private Person prisonerToDelete;"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"     * Creates a deleteCellCommand object"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"     * @param targetIndex of the person being deleted"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"    public DeleteCellCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(prisonerToDelete);"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"            model.deletePrisonerFromCell(prisonerToDelete);"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(\"The target person cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"        } catch (NotImprisonedException nie) {"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(\"The target person is not imprisoned here\");"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CELL_SUCCESS, prisonerToDelete.getName().toString()));"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"        prisonerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"    public Person getPrisonerToDelete() {"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"        return prisonerToDelete;"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCellCommand) other).targetIndex) // state check"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 Objects.equals(this.prisonerToDelete, ((DeleteCellCommand) other).prisonerToDelete));"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":77}},{"path":"src/main/java/seedu/address/logic/parser/AddCellCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.AddCellCommand;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":" * Parses input arguments and creates a new AddCellCommand object"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"public class AddCellCommandParser implements Parser\u003cAddCellCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCellCommand"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"     * and returns an AddCellCommand object for execution."},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    public AddCellCommand parse (String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"            requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"            String removePrefix \u003d null;"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"            String unparsedIndex \u003d null;"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"            if (args.contains(\" \") \u0026\u0026 args.length() \u003e args.indexOf(\" \")) {"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"                removePrefix \u003d args.substring(args.indexOf(\" \") + 1);"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"                if (removePrefix.contains(\" \") \u0026\u0026 removePrefix.length() \u003e removePrefix.indexOf(\" \")) {"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"                    unparsedIndex \u003d removePrefix.substring(0, removePrefix.indexOf(\" \"));"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"                } else {"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"                            AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"                }"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"            } else {"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"                        AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"            if (removePrefix !\u003d null \u0026\u0026 removePrefix.contains(\" \") \u0026\u0026 unparsedIndex !\u003d null) {"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"                String cellAddress \u003d removePrefix.substring(removePrefix.indexOf(\" \") + 1);"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"                Index index \u003d ParserUtil.parseIndex(unparsedIndex);"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"                if (cellAddress.matches(\"\\\\d+-\\\\d+\")) {"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"                    return new AddCellCommand(index, cellAddress);"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"                } else {"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"                            AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"                }"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"            } else {"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCellCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":54}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":1,"-":38}},{"path":"src/main/java/seedu/address/logic/parser/AddUserCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SECURITY_LEVEL;"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.AddUserCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":" * Parses input arguments and creates a new AddUserCommand object"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"public class AddUserCommandParser implements Parser\u003cAddUserCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"     * Parses the given {@code String} of arguments in the context of the AddUserCommand"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"     * and returns an AddUserCommand object for execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public AddUserCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_SECURITY_LEVEL);"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_SECURITY_LEVEL)"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"        String username \u003d \"\";"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"        String password \u003d \"\";"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"        int securityLevel \u003d -1;"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"            username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME));"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"            password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD));"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"            securityLevel \u003d ParserUtil.parseSecurityLevel(argMultimap.getValue(PREFIX_SECURITY_LEVEL));"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"        return new AddUserCommand(username, password, securityLevel);"},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":9,"Zacci":35,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    protected static final int MIN_SECURITY_LEVEL \u003d 0;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":10,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/AddUserCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"//@@author zacci"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":" * Adds a new user to the PrisonBook"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"public class AddUserCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_WORD \u003d \"adduser\";"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"au\";"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 3;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new user to the PrisonBook.\\n\""},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"            + \"Parameters: user/NEW_USERNAME pw/NEW_PASSWORD sl/SECURITY_LEVEL (integer from 0 tp 3)...\\n\""},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"            + \"Example: \" + COMMAND_WORD + \" user/newuser1 pw/password1 sl/2\";"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_ADD_USER_SUCCESS \u003d \"New user %s added to PrisonBook\";"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_ALREADY_EXISTING_USER \u003d \"%s is already a user in PrisonBook\";"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    private final String username;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    private final String password;"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"    private final int securityLevel;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"    private User userToAdd;"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"     * @param username of the new user to be added to the PrisonBook"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"     * @param password of the new user to be added to the PrisonBook"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"     * @param securityLevel of the new user to be added to the PrisonBook"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"    public AddUserCommand(String username, String password, int securityLevel) {"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"        requireNonNull(username);"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"        requireNonNull(password);"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"        this.username \u003d username;"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"        this.password \u003d password;"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"        this.securityLevel \u003d securityLevel;"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"        userToAdd \u003d new User(username, password, securityLevel);"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"        requireNonNull(model);"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"        requireNonNull(userToAdd);"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"            model.addUser(userToAdd);"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"        } catch (UserAlreadyExistsException uaee) {"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"            throw new CommandException(String.format(MESSAGE_ALREADY_EXISTING_USER, username));"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_USER_SUCCESS, username));"},{"lineNumber":64,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"    public User getUserToAdd() {"},{"lineNumber":67,"author":{"gitID":"Zacci"},"content":"        return userToAdd;"},{"lineNumber":68,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Zacci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"Zacci"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"                || (other instanceof AddUserCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 Objects.equals(this.userToAdd, ((AddUserCommand) other).userToAdd));"},{"lineNumber":76,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":77}},{"path":"src/main/java/seedu/address/logic/commands/ShowCellsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.CellMap;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Shows all cells and number of prisoners in each of them to the user."},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class ShowCellsCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_WORD \u003d \"map\";"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_ALIAS \u003d \"m\";"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 1;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s\\nShown cells with number of people in them.\";"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"        String cells \u003d model.getAddressBook().getCellList().toString();"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"        String map \u003d getMapString(cells);"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, map));"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    public String getMapString(String cells) {"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"        for (int i \u003d 1; i \u003c\u003d CellMap.MAX_ROW; i++) {"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"            cells \u003d cells.replace(\", \" + i + \"-1\", i + \"-1\");"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"        cells \u003d cells.substring(1, cells.length() - 1);"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"        return cells;"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":41}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 2;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"        Role updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRole, updatedTags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":121,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":123,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":124,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":154,"author":{"gitID":"Zacci"},"content":"        private Role role;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":162,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":168,"author":{"gitID":"Zacci"},"content":"            setRole(toCopy.role);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"Zacci"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.role, this.tags);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"Zacci"},"content":"        public void setRole(Role role) {"},{"lineNumber":212,"author":{"gitID":"Zacci"},"content":"            this.role \u003d role;"},{"lineNumber":213,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":215,"author":{"gitID":"Zacci"},"content":"        public Optional\u003cRole\u003e getRole() {"},{"lineNumber":216,"author":{"gitID":"Zacci"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":217,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":222,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":229,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":230,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":231,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":255,"author":{"gitID":"Zacci"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":25,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"import java.util.function.Predicate;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":" * Keyword matching is case insensitive."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 1;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"    //@@author philos22"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names or tags contain any of \""},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"            + \"Parameters: n/NAME_KEYWORDS t/TAG_KEYWORDS...\\n\""},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice t/tag1\";"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":39,"Zacci":2,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/AddCellCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.AlreadyInCellException;"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.FullCellException;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NonExistentCellException;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotPrisonerException;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":" * Adds a prisoner to a cell in the address book."},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"public class AddCellCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_WORD \u003d \"addcell\";"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"    public static final String COMMAND_ALIAS \u003d \"ac\";"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 2;"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a prisoner to the specified cell.\""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"            + \"by the index number used in the last person listing.\\n\""},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"            + \"CELLADDRESS (block-unit)\""},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 1-1\";"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_ADD_CELL_SUCCESS \u003d \"Prisoner %s added to %s.\";"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_FULL_CELL \u003d \"Cell %s is already full. Here is the map:\\n%s\";"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_NON_EXISTENT_CELL \u003d \"This cell %s does not exist. Here is the map:\\n%s\";"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_NOT_PRISONER \u003d \"%s is not a prisoner.\";"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"    public static final String MESSAGE_ALREADY_IN_CELL \u003d \"%s is already in cell %s\";"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"    public final Index index;"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"    private Person prisonerToAdd;"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"    private String cellAddress;"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"     * @param cellAddress cell to be added to"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    public AddCellCommand(Index index, String cellAddress) {"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(index);"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(cellAddress);"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        this.index \u003d index;"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"        this.cellAddress \u003d cellAddress;"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(prisonerToAdd);"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"            model.addPrisonerToCell(prisonerToAdd, cellAddress);"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"        } catch (FullCellException fce) {"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(String.format(MESSAGE_FULL_CELL,"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"                    cellAddress, new ShowCellsCommand().getMapString("},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"                            model.getAddressBook().getCellList().toString())));"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        } catch (NonExistentCellException nece) {"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(String.format(MESSAGE_NON_EXISTENT_CELL,"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"                    cellAddress, new ShowCellsCommand().getMapString("},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"                            model.getAddressBook().getCellList().toString())));"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"        } catch (NotPrisonerException npe) {"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(String.format(MESSAGE_NOT_PRISONER, prisonerToAdd.getName()));"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"        } catch (AlreadyInCellException aice) {"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(String.format(MESSAGE_ALREADY_IN_CELL,"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"                    prisonerToAdd.getName(), prisonerToAdd.getAddress()));"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_CELL_SUCCESS, prisonerToAdd.getName(), cellAddress));"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":90,"author":{"gitID":"sarahgoh97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":93,"author":{"gitID":"sarahgoh97"},"content":"        prisonerToAdd \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":"    public Person getPrisonerToAdd() {"},{"lineNumber":97,"author":{"gitID":"sarahgoh97"},"content":"        return prisonerToAdd;"},{"lineNumber":98,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":"    public String getCellAddress() {"},{"lineNumber":101,"author":{"gitID":"sarahgoh97"},"content":"        return cellAddress;"},{"lineNumber":102,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":104,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"sarahgoh97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"sarahgoh97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitID":"sarahgoh97"},"content":"                || (other instanceof AddCellCommand // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 this.index.equals(((AddCellCommand) other).index) // state check"},{"lineNumber":109,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 Objects.equals(this.prisonerToAdd, ((AddCellCommand) other).prisonerToAdd));"},{"lineNumber":110,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":111}},{"path":"src/main/java/seedu/address/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":" * Logs the user out of the current session"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully logged out\";"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public CommandResult execute() {"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"        undoRedoStack.clearStack();"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"        model.logout();"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":18}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INSUFFICIENT_SECURITY_CLEARANCE;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"            CommandResult result \u003d restrictedExecute(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"     * Executes the received command if the logged in user\u0027s security level meets the MIN_SECURITY_LEVEL for the command"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    private CommandResult restrictedExecute (Command command) throws CommandException {"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"        logger.info(\"Command MIN_SECURITY_LEVEL: \" + command.getMinSecurityLevel());"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"        if (command.getMinSecurityLevel() \u003c\u003d model.getSecurityLevel()) {"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"            try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                CommandResult result \u003d command.execute();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                undoRedoStack.push(command);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                return result;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            } finally {"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":64,"author":{"gitID":"Zacci"},"content":"            CommandResult result \u003d new CommandResult(MESSAGE_INSUFFICIENT_SECURITY_CLEARANCE);"},{"lineNumber":65,"author":{"gitID":"Zacci"},"content":"            return result;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"    public ObservableList\u003cCell\u003e getCellList() {"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        return model.getAddressBook().getCellList();"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":85,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"    public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":"        return model.getAddressBook().getUserList();"},{"lineNumber":88,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":21,"sarahgoh97":6,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"        UndoableCommand command \u003d undoRedoStack.popUndo();"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"        if (command instanceof AddCellCommand) {"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"            String cellAddress \u003d ((AddCellCommand) command).getCellAddress();"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"            Person prisoner \u003d ((AddCellCommand) command).getPrisonerToAdd();"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"            model.deletePrisonerFromCell(prisoner, cellAddress);"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"        command.undo();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":8,"Zacci":1,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/CalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import seedu.address.Calendar;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"public class CalendarCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"    public static final String COMMAND_ALIAS \u003d \"cal\";"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"    public static final String ERROR_MESSAGE \u003d \"calendar execution failed\";"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 1;"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"            String messagesuccess \u003d new Calendar().listEvents();"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"            return new CommandResult(messagesuccess);"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"        } catch (IOException e) {"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"            e.printStackTrace();"},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        return new CommandResult(ERROR_MESSAGE);"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":37}},{"path":"src/main/java/seedu/address/logic/commands/ShowUsersCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":" * Shows all cells and number of prisoners in each of them to the user."},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class ShowUsersCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"    public static final String COMMAND_WORD \u003d \"users\";"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"    public static final int MIN_SECURITY_LEVEL \u003d 3;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s\\nShown users.\";"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"        String users \u003d model.getAddressBook().getUserList().toString();"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, users));"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"     * Returns the MIN_SECURITY_LEVEL to caller"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public int getMinSecurityLevel() {"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"        return MIN_SECURITY_LEVEL;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":23,"sarahgoh97":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"    private String role;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"    private boolean isInCell;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String role,"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"        this.role \u003d role;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"        this.isInCell \u003d false;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"        role \u003d source.getRole().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"        isInCell \u003d source.getIsInCell();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Zacci"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Zacci"},"content":"        if (!Role.isValidRole(this.role)) {"},{"lineNumber":130,"author":{"gitID":"Zacci"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Zacci"},"content":"        final Role role \u003d new Role(this.role);"},{"lineNumber":133,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":135,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":136,"author":{"gitID":"sarahgoh97"},"content":"        final boolean isInCell \u003d this.isInCell;"},{"lineNumber":137,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":138,"author":{"gitID":"sarahgoh97"},"content":"        return new Person(name, phone, email, address, role, tags, isInCell);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":156,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 Objects.equals(role, otherPerson.role)"},{"lineNumber":157,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged)"},{"lineNumber":158,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 Objects.equals(isInCell, otherPerson.isInCell);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":13,"sarahgoh97":9,"-":138}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadAddressBookDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        XmlFileStorage.saveAddressBookDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":2,"-":80}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    public static void saveAddressBookDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    public static XmlSerializableAddressBook loadAddressBookDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":2,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    private List\u003cXmlAdaptedCell\u003e cells;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    private List\u003cXmlAdaptedUser\u003e users;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"        cells \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"        users \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"        cells.addAll(src.getCellList().stream().map(XmlAdaptedCell::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"        users.addAll(src.getUserList().stream().map(XmlAdaptedUser::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"        for (XmlAdaptedCell c: cells) {"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"            addressBook.addCell(c.toModelType());"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Zacci"},"content":"        for (XmlAdaptedUser u: users) {"},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":"            addressBook.addUser(u.toModelType());"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":85,"author":{"gitID":"Zacci"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 cells.equals(otherAb.cells)"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 users.equals(otherAb.users);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":7,"Zacci":9,"-":72}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PrisonBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":"        //listOfUsers \u003d Storage.getUsers //debug_isaac"},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":"                logger.info(\"Data file not found. Will be starting with a sample PrisonBook\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty PrisonBook\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PrisonBook\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":137,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":165,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":168,"author":{"gitID":"sarahgoh97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PrisonBook\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":188,"author":{"gitID":"sarahgoh97"},"content":"        logger.info(\"Starting PrisonBook \" + MainApp.VERSION);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":194,"author":{"gitID":"sarahgoh97"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Prison Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"sarahgoh97":7,"Zacci":2,"-":204}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Role(\"p\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Role(\"g\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Role(\"p\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Role(\"g\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Role(\"p\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Role(\"g\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"    public static User[] getSampleUsers() {"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"        return new User[] {"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"            new User(\"prisonguard\", \"password1\", 1),"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"            new User(\"prisonleader\", \"password2\", 2),"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"            new User(\"prisonwarden\", \"password3\", 3)"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        };"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"            for (User sampleUser : getSampleUsers()) {"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"                sampleAb.addUser(sampleUser);"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"        } catch (UserAlreadyExistsException uaee) {"},{"lineNumber":67,"author":{"gitID":"Zacci"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate users\", uaee);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zacci":22,"-":61}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedUser.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"//@@author zacci"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"public class XmlAdaptedUser {"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    private String username;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    private String password;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    private int securityLevel;"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"     * Constructs an XmlAdaptedUser."},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public XmlAdaptedUser() {}"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"    public XmlAdaptedUser(String username, String password, int securityLevel) {"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"        this.username \u003d username;"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"        this.password \u003d password;"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"        this.securityLevel \u003d securityLevel;"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"     * Converts a given User into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedUser"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"    public XmlAdaptedUser(User source) {"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"        username \u003d source.getUsername();"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"        password \u003d source.getPassword();"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"        securityLevel \u003d source.getSecurityLevel();"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"     * Converts this jaxb-friendly adapted user object into the model\u0027s User object."},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"    public User toModelType() {"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        return new User(username, password, securityLevel);"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"        if (!(other instanceof XmlAdaptedUser)) {"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":64,"author":{"gitID":"Zacci"},"content":"        XmlAdaptedUser otherUser \u003d (XmlAdaptedUser) other;"},{"lineNumber":65,"author":{"gitID":"Zacci"},"content":"        return this.username.equals(((XmlAdaptedUser) other).username)"},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 this.password.equals(((XmlAdaptedUser) other).password)"},{"lineNumber":67,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 this.securityLevel \u003d\u003d (((XmlAdaptedUser) other).securityLevel);"},{"lineNumber":68,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":69}},{"path":"src/main/java/seedu/address/logic/commands/CalendarAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"import seedu.address.Calendar;"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":" * Adds an event to the Google Calendar."},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"public class CalendarAddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"    public static final String COMMAND_WORD \u003d \"calAdd\";"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    public static final String COMMAND_ALIAS \u003d \"calA\";"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the calendar. \\n\""},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"            + PREFIX_EVENT + \"EVENT NAME \""},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"            + PREFIX_LOCATION + \"EVENT LOCATION \""},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"            + PREFIX_START + \"EVENT_START_TIME \""},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"            + PREFIX_END + \"EVENT_END_TIME \\n\""},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"            + PREFIX_EVENT + \"Finish Software Engineering Milestone \""},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"            + PREFIX_LOCATION + \"NUS UTown Residence \""},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":"            + PREFIX_START + \"2020-04-01 15:00:00 \""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"            + PREFIX_END + \"2020-04-01 17:00:00\";"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"    private final String calEventName;"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"    private final String calEventLocation;"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"    private final DateTime calStartDateTime;"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"    private final DateTime calEndDateTime;"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":"    private final String toAdd;"},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Philos22"},"content":"     * Creates an CalendarAddCommand to add the specified {@code Event}"},{"lineNumber":46,"author":{"gitID":"Philos22"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Philos22"},"content":"    public CalendarAddCommand(String eventName, String eventLocation, DateTime startDateTime, DateTime endDateTime) {"},{"lineNumber":48,"author":{"gitID":"Philos22"},"content":"        requireNonNull(eventName);"},{"lineNumber":49,"author":{"gitID":"Philos22"},"content":"        requireNonNull(eventLocation);"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"        requireNonNull(startDateTime);"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"        requireNonNull(endDateTime);"},{"lineNumber":52,"author":{"gitID":"Philos22"},"content":"        calEventName \u003d eventName;"},{"lineNumber":53,"author":{"gitID":"Philos22"},"content":"        calEventLocation \u003d eventLocation;"},{"lineNumber":54,"author":{"gitID":"Philos22"},"content":"        calStartDateTime \u003d startDateTime;"},{"lineNumber":55,"author":{"gitID":"Philos22"},"content":"        calEndDateTime \u003d endDateTime;"},{"lineNumber":56,"author":{"gitID":"Philos22"},"content":"        toAdd \u003d calEventName + \" \" + calEventLocation + \" \" + calStartDateTime.toString() + \" \""},{"lineNumber":57,"author":{"gitID":"Philos22"},"content":"                + calEndDateTime.toString();"},{"lineNumber":58,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":60,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Philos22"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"Philos22"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"Philos22"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"Philos22"},"content":"            String successMessage \u003d new Calendar().addEvent(calEventName, calEventLocation, calStartDateTime,"},{"lineNumber":65,"author":{"gitID":"Philos22"},"content":"                    calEndDateTime);"},{"lineNumber":66,"author":{"gitID":"Philos22"},"content":"            return new CommandResult(String.format(successMessage, toAdd));"},{"lineNumber":67,"author":{"gitID":"Philos22"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitID":"Philos22"},"content":"            throw new CommandException(e.toString());"},{"lineNumber":69,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":71,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":73,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"Philos22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"Philos22"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"Philos22"},"content":"                || (other instanceof CalendarAddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 toAdd.equals(((CalendarAddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":79}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"     * Replaces the person {@code target} in the list with {@code updatedPrisoner}."},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"    public void setPrisoner(Person target, Person updatedPrisoner) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"        internalList.set(index, updatedPrisoner);"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":7,"-":121}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCell.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":" * JAXB-friendly version of the Cell."},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"public class XmlAdaptedCell {"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    public static final String INVALID_CELL \u003d \"This cell does not exist!\";"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"    private String cellAddress;"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"    private List\u003cXmlAdaptedPerson\u003e prisoners \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"     * Constructs an XmlAdaptedCell."},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"    public XmlAdaptedCell() {}"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"     * Constructs a {@code XmlAdaptedCell} with the given cell."},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    public XmlAdaptedCell(String cellAddress, List\u003cXmlAdaptedPerson\u003e prisoners) {"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"        this.cellAddress \u003d cellAddress;"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"        if (prisoners !\u003d null) {"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"            this.prisoners \u003d new ArrayList\u003c\u003e(prisoners);"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"     * Converts a given Cell into this class for JAXB use."},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"    public XmlAdaptedCell(Cell source) {"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress \u003d source.getCellAddress();"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"        for (Person person: source.getPrisoners()) {"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"            prisoners.add(new XmlAdaptedPerson(person));"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"     * Converts this jaxb-friendly adapted cell object into the model\u0027s Cell object."},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted cell"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"    public Cell toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"        if (this.cellAddress \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"            throw new IllegalValueException(INVALID_CELL);"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"        if (!Cell.isValidCellAddress(this.cellAddress)) {"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"            throw new IllegalValueException(INVALID_CELL);"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"        int row \u003d Cell.getRow(cellAddress);"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"        int col \u003d Cell.getCol(cellAddress);"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"        Cell cell \u003d new Cell(row, col);"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        for (XmlAdaptedPerson person : prisoners) {"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"            cell.addPrisoner(person.toModelType());"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        return cell;"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        if (!(other instanceof XmlAdaptedCell)) {"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"        XmlAdaptedCell otherCell \u003d (XmlAdaptedCell) other;"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"        return Objects.equals(cellAddress, otherCell.cellAddress)"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 prisoners.equals(otherCell.prisoners);"},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":89}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"        // Making a string of all tags"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"        Iterator tagIteration \u003d person.getTags().iterator();"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"        StringBuilder strBuild \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"        strBuild.append(tagIteration.next());"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        while (tagIteration.hasNext()) {"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"            strBuild.append(\" \" + tagIteration.next());"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"        String tagList \u003d strBuild.toString().replace(\"[\", \"\").replace(\"]\", \"\");"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"        return keywords.stream()"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tagList, keyword));"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":40,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":42,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":42}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"    private final Role role;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    private boolean isInCell \u003d false;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"        this.role \u003d new Role(\"p\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"    */"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"     * New Constructor for working"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Role role, Set\u003cTag\u003e tags) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"        this.role \u003d role;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"    //for storage purposes"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Role role, Set\u003cTag\u003e tags, boolean isInCell) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"        this.role \u003d role;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        this.isInCell \u003d isInCell;"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"     * Constructor for updatedPrisoner after being added to cell"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"     * @param person is prisoner being added to cell"},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"     * @param isInCell is true if adding to cell"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"     * @param cellAddress is cell prisoner is entering"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"    public Person (Person person, boolean isInCell, String cellAddress) {"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        requireAllNonNull(person, isInCell);"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"        this.name \u003d person.getName();"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        this.phone \u003d person.getPhone();"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        this.email \u003d person.getEmail();"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"        this.address \u003d new Address(cellAddress + \" [Old address: \" + person.getAddress().toString() + \"]\");"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":"        this.role \u003d person.getRole();"},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"        this.tags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"        this.isInCell \u003d isInCell;"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Zacci"},"content":"     * Constructor for freedPrisoner after being deleted from cell"},{"lineNumber":91,"author":{"gitID":"sarahgoh97"},"content":"     * @param person deleted from cell"},{"lineNumber":92,"author":{"gitID":"sarahgoh97"},"content":"     * @param isInCell is false because deleting from cell"},{"lineNumber":93,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"sarahgoh97"},"content":"    public Person (Person person, boolean isInCell) {"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(person);"},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":"        this.name \u003d person.getName();"},{"lineNumber":97,"author":{"gitID":"sarahgoh97"},"content":"        this.phone \u003d person.getPhone();"},{"lineNumber":98,"author":{"gitID":"sarahgoh97"},"content":"        this.email \u003d person.getEmail();"},{"lineNumber":99,"author":{"gitID":"sarahgoh97"},"content":"        String addressString \u003d person.getAddress().toString();"},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":"        this.address \u003d new Address(addressString.substring("},{"lineNumber":101,"author":{"gitID":"sarahgoh97"},"content":"                addressString.indexOf(\": \") + 2, addressString.indexOf(\"]\")));"},{"lineNumber":102,"author":{"gitID":"sarahgoh97"},"content":"        this.role \u003d person.getRole();"},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":"        this.tags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":104,"author":{"gitID":"sarahgoh97"},"content":"        this.isInCell \u003d isInCell;"},{"lineNumber":105,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Zacci"},"content":"    public Role getRole() {"},{"lineNumber":124,"author":{"gitID":"Zacci"},"content":"        return role;"},{"lineNumber":125,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":127,"author":{"gitID":"sarahgoh97"},"content":"    public boolean getIsInCell() {"},{"lineNumber":128,"author":{"gitID":"sarahgoh97"},"content":"        return isInCell;"},{"lineNumber":129,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":153,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":154,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 otherPerson.getRole().equals(this.getRole())"},{"lineNumber":155,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 otherPerson.getIsInCell() \u003d\u003d this.getIsInCell();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":174,"author":{"gitID":"Zacci"},"content":"                .append(\" Role: \")"},{"lineNumber":175,"author":{"gitID":"Zacci"},"content":"                .append(getRole())"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Philos22":1,"Zacci":17,"sarahgoh97":46,"-":117}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    //@@author sarahgoh97"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"     * Returns an unmodifiable view of the cells list."},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"     * This list will not contain any duplicate cells."},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"    ObservableList\u003cCell\u003e getCellList();"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"     * Returns an unmodifiable view of the users list."},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"     * This list will not contain any duplicate users."},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"    ObservableList\u003cUser\u003e getUserList();"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":9,"Zacci":9,"-":24}},{"path":"src/main/java/seedu/address/model/person/ContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"//@@author philos22"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":4,"author":{"gitID":"Philos22"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":" * Tests that a {@code Person}\u0027s fields matches any of the keywords given."},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":"public class ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"    private final Predicate\u003cPerson\u003e namePredicate;"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"    private final Predicate\u003cPerson\u003e tagPredicate;"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"    public ContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e tagKeywords) {"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"        this.namePredicate \u003d new NameContainsKeywordsPredicate(nameKeywords);"},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"        this.tagPredicate \u003d new TagContainsKeywordsPredicate(tagKeywords);"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"        return namePredicate.test(person) \u0026\u0026 tagPredicate.test(person);"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"        return other \u003d\u003d this"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"                || (other instanceof ContainsKeywordsPredicate // Used to handle Nulls"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 this.namePredicate.equals(((ContainsKeywordsPredicate) other).namePredicate)"},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 this.tagPredicate.equals(((ContainsKeywordsPredicate) other).tagPredicate)); // state check"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":33}},{"path":"src/main/java/seedu/address/model/person/Prisoner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Philos22"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":" * Prisoner class is child class of Person: but each instance has a release date"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"public class Prisoner extends Person {"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"    private final ReleaseDate releaseDate;"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    public Prisoner(Name name, Phone phone, Email email, Address address, Role role, Set\u003cTag\u003e tags,"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"                    ReleaseDate releaseDate) {"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"        super(name, phone, email, address, role, tags);"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":"        requireAllNonNull(name, phone, email, address, tags, releaseDate);"},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":"        this.releaseDate \u003d releaseDate;"},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"    public ReleaseDate getRelease_date() {"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        return releaseDate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"        if (!(other instanceof Prisoner)) {"},{"lineNumber":36,"author":{"gitID":"Philos22"},"content":"            return false;"},{"lineNumber":37,"author":{"gitID":"Philos22"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":39,"author":{"gitID":"Philos22"},"content":"        Prisoner otherPerson \u003d (Prisoner) other;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 otherPerson.getRelease_date().equals(this.getRelease_date());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":50,"author":{"gitID":"Philos22"},"content":"        return Objects.hash(this.getName(), this.getPhone(), this.getEmail(), this.getAddress(), this.getTags(),"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"                this.getRelease_date());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":66,"author":{"gitID":"Philos22"},"content":"        builder.append(\" Release Date: \").append(getRelease_date());"},{"lineNumber":67,"author":{"gitID":"Philos22"},"content":"        return builder.toString();"},{"lineNumber":68,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":32,"Zacci":3,"-":34}},{"path":"src/main/java/seedu/address/model/user/exceptions/UserAlreadyExistsException.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.model.user.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":" * Signals that the username that is being added already exists."},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"public class UserAlreadyExistsException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"    public UserAlreadyExistsException() {"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"        super(\"This username is already used\");"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":10,"-":2}},{"path":"src/main/java/seedu/address/model/person/ReleaseDate.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Philos22"},"content":" * Represents the release date of the prisoner in date time format"},{"lineNumber":8,"author":{"gitID":"Philos22"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Philos22"},"content":"public class ReleaseDate {"},{"lineNumber":10,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":11,"author":{"gitID":"Philos22"},"content":"    public static final String MESSAGE_RELEASE_DATE_CONSTRAINTS \u003d \"The date format: yyyy-MM-dd\";"},{"lineNumber":12,"author":{"gitID":"Philos22"},"content":"    //    credit of the regex goes to - Ofir Luzon - on Stack Overflow"},{"lineNumber":13,"author":{"gitID":"Philos22"},"content":"    public static final String RELEASE_DATE_VALIDATION_REGEX \u003d \"^(?:(?:31(-)(?:0?[13578]|1[02]))\\\\1|\""},{"lineNumber":14,"author":{"gitID":"Philos22"},"content":"            +"},{"lineNumber":15,"author":{"gitID":"Philos22"},"content":"            \"(?:(?:29|30)(-)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(-)0?2\\\\3\""},{"lineNumber":16,"author":{"gitID":"Philos22"},"content":"            +"},{"lineNumber":17,"author":{"gitID":"Philos22"},"content":"            \"(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))\""},{"lineNumber":18,"author":{"gitID":"Philos22"},"content":"            +"},{"lineNumber":19,"author":{"gitID":"Philos22"},"content":"            \"$|^(?:0?[1-9]|1\\\\d|2[0-8])(-)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"},{"lineNumber":20,"author":{"gitID":"Philos22"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":22,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":23,"author":{"gitID":"Philos22"},"content":"    //    Constructs valid release date with valid parameter"},{"lineNumber":24,"author":{"gitID":"Philos22"},"content":"    public ReleaseDate(String releaseDate) {"},{"lineNumber":25,"author":{"gitID":"Philos22"},"content":"        requireNonNull(releaseDate);"},{"lineNumber":26,"author":{"gitID":"Philos22"},"content":"        checkArgument(isValidReleaseDate(releaseDate), MESSAGE_RELEASE_DATE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"Philos22"},"content":"        this.value \u003d releaseDate;"},{"lineNumber":28,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":30,"author":{"gitID":"Philos22"},"content":"    //    Returns true if release date is valid"},{"lineNumber":31,"author":{"gitID":"Philos22"},"content":"    public static boolean isValidReleaseDate(String test) {"},{"lineNumber":32,"author":{"gitID":"Philos22"},"content":"        return test.matches(RELEASE_DATE_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"Philos22"},"content":"                || (other instanceof ReleaseDate // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"Philos22"},"content":"                \u0026\u0026 this.value.equals(((ReleaseDate) other).value)); // state check"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Philos22"},"content":"}"}],"authorContributionMap":{"Philos22":33,"-":18}},{"path":"src/main/java/seedu/address/model/cell/exceptions/NonExistentCellException.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell.exceptions;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Signals that the cell indicated is not within boundaries"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class NonExistentCellException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public NonExistentCellException() {"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"        super(\"No such cell exists.\");"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":13}},{"path":"src/main/java/seedu/address/model/person/Role.java","lines":[{"lineNumber":1,"author":{"gitID":"Philos22"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Philos22"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Philos22"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":" * Represents a Person\u0027s role in the address book."},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"public class Role {"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"            \"Role can only take on the values \u0027g\u0027 or \u0027p\u0027, which represents Guard or Prisoner respectively\";"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    public static final Role PRISONER \u003d new Role(\"p\");"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"    public static final Role GUARD \u003d new Role(\"g\");"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"     * Constructs a {@code Role}."},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"     * @param role \u0027g\u0027 or \u0027p\u0027 to represent Guard or Prisoner respectively."},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public Role(String role) {"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"        requireNonNull(role);"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"        checkArgument(isValidRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"        this.value \u003d role;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"        return test.equals(\"g\") || test.equals(\"p\");"},{"lineNumber":35,"author":{"gitID":"Philos22"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"                || (other instanceof Role // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 this.value.equals(((Role) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Philos22":4,"Zacci":25,"sarahgoh97":2,"-":23}},{"path":"src/main/java/seedu/address/model/cell/exceptions/AlreadyInCellException.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell.exceptions;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Signals that the prisoner being added is already in a cell in the prison."},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class AlreadyInCellException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public AlreadyInCellException() {"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"        super(\"Prisoner already in prison.\");"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":13}},{"path":"src/main/java/seedu/address/model/cell/exceptions/FullCellException.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell.exceptions;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Signals that the operation will be adding a prisoner to a full cell."},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class FullCellException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public FullCellException() {"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"        super(\"Invalid cell. Cell is already full.\");"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":13}},{"path":"src/main/java/seedu/address/model/cell/exceptions/NotPrisonerException.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell.exceptions;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Signals that the person added to a cell is not a prisoner"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class NotPrisonerException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public NotPrisonerException() {"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"        super(\"Invalid person to add, not a prisoner.\");"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":13}},{"path":"src/main/java/seedu/address/model/cell/Cell.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":" * Represents a cell in the prison."},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":" * Guarantees: cell cannot exceed maximum number of people"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"public class Cell {"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    public static final int MAX_SIZE \u003d 2;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    private final ArrayList\u003cPerson\u003e prisoners;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"    private String cellAddress;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"    private boolean isLast;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"     * Represents a cell in the Prison."},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    public Cell(int row, int column) {"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"        prisoners \u003d new ArrayList\u003cPerson\u003e(MAX_SIZE);"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"        cellAddress \u003d row + \"-\" + column;"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":"        if (column \u003d\u003d CellMap.MAX_COL) {"},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"            isLast \u003d true;"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"            isLast \u003d false;"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"     * A copied cell"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":"    public Cell(ArrayList\u003cPerson\u003e prisoners, String cellAddress, boolean isLast) {"},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"        this.prisoners \u003d new ArrayList\u003cPerson\u003e(prisoners);"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"        this.cellAddress \u003d cellAddress;"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"        this.isLast \u003d isLast;"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"    public static int getCol(String cellAddress) {"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"        return Integer.parseInt(cellAddress.substring(cellAddress.indexOf(\"-\") + 1));"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"    public static int getRow(String cellAddress) {"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"        return Integer.parseInt(cellAddress.substring(0, cellAddress.indexOf(\"-\")));"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"    public void addPrisoner(Person prisoner) {"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"        prisoners.add(prisoner);"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"    public void deletePrisoner(Person prisoner) {"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"        prisoners.remove(prisoner);"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"    public ArrayList\u003cPerson\u003e getPrisoners() {"},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"        return prisoners;"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"    public String getCellAddress() {"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"        return cellAddress;"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"    public int getNumberOfPrisoners() {"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"        return prisoners.size();"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"    public boolean getIsLast() {"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"        return isLast;"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":"     * Returns true if a given string is a valid cell."},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"    public static boolean isValidCellAddress(String test) {"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"        if (test.matches(\"\\\\d+-\\\\d+\")) {"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"            int row \u003d getRow(test);"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"            int col \u003d getCol(test);"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"            return row \u003c\u003d CellMap.MAX_ROW \u0026\u0026 row \u003e 0"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"                    \u0026\u0026 col \u003c\u003d CellMap.MAX_COL \u0026\u0026 col \u003e 0;"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":"        String string \u003d getCellAddress() + \" [\" + getNumberOfPrisoners() + \"]\";"},{"lineNumber":90,"author":{"gitID":"sarahgoh97"},"content":"        if (isLast) {"},{"lineNumber":91,"author":{"gitID":"sarahgoh97"},"content":"            return string + \"\\n\";"},{"lineNumber":92,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"sarahgoh97"},"content":"        return string;"},{"lineNumber":94,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":96}},{"path":"src/main/java/seedu/address/model/cell/exceptions/NotImprisonedException.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell.exceptions;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":" * Signals that the operation will be removing a person not in jail from the jail."},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"public class NotImprisonedException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"    public NotImprisonedException() {"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":"        super(\"This person is not imprisoned in this prison.\");"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":13}},{"path":"src/main/java/seedu/address/model/user/User.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":" * Represents a user of the PrisonBook"},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class User {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":"    private final String username;"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    private final String password;"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"    private final int securityLevel;"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    public User (String username, String password, int securityLevel) {"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"        this.username \u003d username;"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"        this.password \u003d password;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"        this.securityLevel \u003d securityLevel;"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    public String getUsername() {"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"        return username;"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    public String getPassword() {"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"        return password;"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"    public int getSecurityLevel() {"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"        return securityLevel;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"     * Returns true if a given string is a valid username."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"     * Checks if given string matches password, returns user securityLevel if password matches, else returns -1"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"    public int checkPassword(String enteredPassword) {"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"        if (enteredPassword.equals(password)) {"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"            return securityLevel;"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"            return -1;"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":"                || (other instanceof User // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 username.equals(((User) other).username));"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"        return (\"Username: \" + username + \" securityLevel: \" + securityLevel);"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":62,"author":{"gitID":"Zacci"},"content":"}"},{"lineNumber":63,"author":{"gitID":"Zacci"},"content":""}],"authorContributionMap":{"Zacci":51,"-":12}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"    private String addressBookFilePath \u003d \"data/prisonbook.xml\";"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    private String addressBookName \u003d \"MyPrisonBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":2,"-":76}},{"path":"src/main/java/seedu/address/model/user/UniqueUserMap.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":" * Contains the users of the PrisonBook"},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"public class UniqueUserMap {"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"    private HashMap\u003cString, User\u003e userMap;"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    private final User defaultUser1 \u003d new User(\"prisonguard\", \"password1\", 1);"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"    private final User defaultUser2 \u003d new User(\"prisonleader\", \"password2\", 2);"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"    private final User defaultUser3 \u003d new User(\"prisonwarden\", \"password3\", 3);"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":"    public UniqueUserMap() {"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"        resetData();"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"     * Resets the existing data of this {@code userMap}."},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"    public void resetData() {"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"        userMap \u003d new HashMap\u003cString, User\u003e();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"    public ObservableList\u003cUser\u003e asObservableList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"     * Returns user\u0027s securityLevel if username and matching password is found in database, else return -1"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":"     * @param username"},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"     * @param password"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"     * @return"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"    public int verify(String username, String password) {"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"        if (contains(username)) {"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"            return userMap.get(username).checkPassword(password);"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"            return -1;"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"    public boolean contains(String username) {"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"        return userMap.containsKey(username);"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":58,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Zacci"},"content":"     * For storage purposes"},{"lineNumber":60,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Zacci"},"content":"    public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Zacci"},"content":"     * Adds user to the userMap and the internalList"},{"lineNumber":67,"author":{"gitID":"Zacci"},"content":"     * @param user must be valid User"},{"lineNumber":68,"author":{"gitID":"Zacci"},"content":"     * @return true if added successfully and false if failed to add"},{"lineNumber":69,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"    public boolean addUser(User user) throws UserAlreadyExistsException {"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"        if (contains(user.getUsername())) {"},{"lineNumber":72,"author":{"gitID":"Zacci"},"content":"            throw new UserAlreadyExistsException();"},{"lineNumber":73,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"            userMap.put(user.getUsername(), user);"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":"            internalList.add(user);"},{"lineNumber":76,"author":{"gitID":"Zacci"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"    public void setUsers(ObservableList\u003cUser\u003e users) {"},{"lineNumber":81,"author":{"gitID":"Zacci"},"content":"        for (User u: users) {"},{"lineNumber":82,"author":{"gitID":"Zacci"},"content":"            try {"},{"lineNumber":83,"author":{"gitID":"Zacci"},"content":"                addUser(u);"},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":"            } catch (UserAlreadyExistsException e) {"},{"lineNumber":85,"author":{"gitID":"Zacci"},"content":"                int dummy \u003d 0;"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Zacci"},"content":"        internalList.clear();"},{"lineNumber":89,"author":{"gitID":"Zacci"},"content":"        internalList.setAll(users);"},{"lineNumber":90,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Zacci"},"content":"     * Checks if two UniqueUserMaps are equal"},{"lineNumber":94,"author":{"gitID":"Zacci"},"content":"     * @param obj any object"},{"lineNumber":95,"author":{"gitID":"Zacci"},"content":"     * @return return true if the userMap and internalList are equal"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"        if (!(obj instanceof UniqueUserMap)) {"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":"        // state check"},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":"        UniqueUserMap other \u003d (UniqueUserMap) obj;"},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"        return userMap.equals(other.userMap) \u0026\u0026 internalList.equals(other.internalList);"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":92,"-":20}},{"path":"src/main/java/seedu/address/model/Session.java","lines":[{"lineNumber":1,"author":{"gitID":"Zacci"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":3,"author":{"gitID":"Zacci"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Zacci"},"content":" * Represents User\u0027s Session."},{"lineNumber":5,"author":{"gitID":"Zacci"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Zacci"},"content":"public class Session {"},{"lineNumber":7,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":8,"author":{"gitID":"Zacci"},"content":"    private String username;"},{"lineNumber":9,"author":{"gitID":"Zacci"},"content":"    private int securityLevel;"},{"lineNumber":10,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":11,"author":{"gitID":"Zacci"},"content":"    public Session() {"},{"lineNumber":12,"author":{"gitID":"Zacci"},"content":"        resetSession();"},{"lineNumber":13,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Zacci"},"content":"     * Sets session details for user upon successful login"},{"lineNumber":17,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Zacci"},"content":"    public void login(String username, int securityLevel) {"},{"lineNumber":19,"author":{"gitID":"Zacci"},"content":"        this.username \u003d username;"},{"lineNumber":20,"author":{"gitID":"Zacci"},"content":"        this.securityLevel \u003d securityLevel;"},{"lineNumber":21,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"    public void logout() {"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"        resetSession();"},{"lineNumber":25,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":27,"author":{"gitID":"Zacci"},"content":"    private void resetSession() {"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"        username \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"        securityLevel \u003d 0;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"    public String getUsername() {"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":"        return username;"},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":"    public int getSecurityLevel() {"},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"        return securityLevel;"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":"        if (!(obj instanceof Session)) {"},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"        // state check"},{"lineNumber":53,"author":{"gitID":"Zacci"},"content":"        Session other \u003d (Session) obj;"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"        return username.equals(other.username)"},{"lineNumber":55,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 securityLevel \u003d\u003d other.securityLevel;"},{"lineNumber":56,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Zacci"},"content":"}"}],"authorContributionMap":{"Zacci":49,"-":8}},{"path":"src/main/java/seedu/address/model/cell/CellMap.java","lines":[{"lineNumber":1,"author":{"gitID":"sarahgoh97"},"content":"//@@author sarahgoh97"},{"lineNumber":2,"author":{"gitID":"sarahgoh97"},"content":"package seedu.address.model.cell;"},{"lineNumber":3,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":4,"author":{"gitID":"sarahgoh97"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitID":"sarahgoh97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":" * Contains the cells of the prison for the PrisonBook"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":" * Cells are not allowed to exceed the maximum fixed size of the prison"},{"lineNumber":11,"author":{"gitID":"sarahgoh97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"sarahgoh97"},"content":"public class CellMap {"},{"lineNumber":13,"author":{"gitID":"sarahgoh97"},"content":"    public static final int MAX_ROW \u003d 3;"},{"lineNumber":14,"author":{"gitID":"sarahgoh97"},"content":"    public static final int MAX_COL \u003d 5;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"    private Cell[][] cellMap;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"    private final ObservableList\u003cCell\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"     * Represents a fixed-sized map of the cells in the prison."},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"     * Initialised at start of program."},{"lineNumber":21,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"    public CellMap() {"},{"lineNumber":23,"author":{"gitID":"sarahgoh97"},"content":"        resetData();"},{"lineNumber":24,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":26,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"sarahgoh97"},"content":"     * @param cellAddress has to be within boundaries"},{"lineNumber":28,"author":{"gitID":"sarahgoh97"},"content":"     * @return Cell from cellAddress"},{"lineNumber":29,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"sarahgoh97"},"content":"    public Cell getCell(String cellAddress) {"},{"lineNumber":31,"author":{"gitID":"sarahgoh97"},"content":"        int row \u003d Cell.getRow(cellAddress) - 1;"},{"lineNumber":32,"author":{"gitID":"sarahgoh97"},"content":"        int col \u003d Cell.getCol(cellAddress) - 1;"},{"lineNumber":33,"author":{"gitID":"sarahgoh97"},"content":"        return internalList.get(row * MAX_COL + col);"},{"lineNumber":34,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":36,"author":{"gitID":"sarahgoh97"},"content":"    public void setCells(ObservableList\u003cCell\u003e cells) {"},{"lineNumber":37,"author":{"gitID":"sarahgoh97"},"content":"        for (Cell c: cells) {"},{"lineNumber":38,"author":{"gitID":"sarahgoh97"},"content":"            setCell(c, c.getCellAddress());"},{"lineNumber":39,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"        internalList.clear();"},{"lineNumber":41,"author":{"gitID":"sarahgoh97"},"content":"        internalList.setAll(cells);"},{"lineNumber":42,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":44,"author":{"gitID":"sarahgoh97"},"content":"    public void setCell(Cell cell, String cellAddress) {"},{"lineNumber":45,"author":{"gitID":"sarahgoh97"},"content":"        int row \u003d Cell.getRow(cellAddress) - 1;"},{"lineNumber":46,"author":{"gitID":"sarahgoh97"},"content":"        int col \u003d Cell.getCol(cellAddress) - 1;"},{"lineNumber":47,"author":{"gitID":"sarahgoh97"},"content":"        cellMap[row][col] \u003d cell;"},{"lineNumber":48,"author":{"gitID":"sarahgoh97"},"content":"        int num \u003d row * MAX_COL + col;"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":"        if (num \u003e\u003d internalList.size()) {"},{"lineNumber":50,"author":{"gitID":"sarahgoh97"},"content":"            internalList.add(cell);"},{"lineNumber":51,"author":{"gitID":"sarahgoh97"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"sarahgoh97"},"content":"            internalList.set(num, cell);"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":56,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"sarahgoh97"},"content":"     * Adds a prisoner to a specified cell."},{"lineNumber":58,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"    public void addPrisonerToCell(Person prisoner, String cellAddress) {"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"        int row \u003d Cell.getRow(cellAddress) - 1;"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"        int col \u003d Cell.getCol(cellAddress) - 1;"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"        addPrisonerToCell(prisoner, row, col);"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"     * private method called from public method above"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"    private void addPrisonerToCell(Person prisoner, int row, int col) {"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"        Cell cell \u003d cellMap[row][col];"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":"        cellMap[row][col].addPrisoner(prisoner);"},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"        int index \u003d (row) * MAX_COL + col;"},{"lineNumber":72,"author":{"gitID":"sarahgoh97"},"content":"        internalList.set(index, cell);"},{"lineNumber":73,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":75,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"sarahgoh97"},"content":"     * Removes a prisoner from a specified cell"},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"    public void deletePrisonerFromCell(Person prisoner, String cellAddress) {"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"        int row \u003d Cell.getRow(cellAddress) - 1;"},{"lineNumber":80,"author":{"gitID":"sarahgoh97"},"content":"        int col \u003d Cell.getCol(cellAddress) - 1;"},{"lineNumber":81,"author":{"gitID":"sarahgoh97"},"content":"        deletePrisonerFromCell(prisoner, row, col);"},{"lineNumber":82,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":84,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"sarahgoh97"},"content":"     * private method called from public method above"},{"lineNumber":86,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"sarahgoh97"},"content":"    private void deletePrisonerFromCell(Person prisoner, int row, int col) {"},{"lineNumber":88,"author":{"gitID":"sarahgoh97"},"content":"        Cell cell \u003d cellMap[row][col];"},{"lineNumber":89,"author":{"gitID":"sarahgoh97"},"content":"        cell.deletePrisoner(prisoner);"},{"lineNumber":90,"author":{"gitID":"sarahgoh97"},"content":"        int index \u003d row * MAX_COL + col;"},{"lineNumber":91,"author":{"gitID":"sarahgoh97"},"content":"        internalList.set(index, cell);"},{"lineNumber":92,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":94,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":"     * For storage purposes"},{"lineNumber":96,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"sarahgoh97"},"content":"    public ObservableList\u003cCell\u003e getCellList() {"},{"lineNumber":98,"author":{"gitID":"sarahgoh97"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":99,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":101,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"sarahgoh97"},"content":"     * Resets the existing data of this {@code CellMap}."},{"lineNumber":103,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"sarahgoh97"},"content":"    public void resetData() {"},{"lineNumber":105,"author":{"gitID":"sarahgoh97"},"content":"        cellMap \u003d new Cell[MAX_ROW][MAX_COL];"},{"lineNumber":106,"author":{"gitID":"sarahgoh97"},"content":"        internalList.clear();"},{"lineNumber":107,"author":{"gitID":"sarahgoh97"},"content":"        for (int currRow \u003d 0; currRow \u003c MAX_ROW; currRow++) {"},{"lineNumber":108,"author":{"gitID":"sarahgoh97"},"content":"            for (int currCol \u003d 0; currCol \u003c MAX_COL; currCol++) {"},{"lineNumber":109,"author":{"gitID":"sarahgoh97"},"content":"                Cell cell \u003d new Cell(currRow + 1, currCol + 1);"},{"lineNumber":110,"author":{"gitID":"sarahgoh97"},"content":"                cellMap[currRow][currCol] \u003d cell;"},{"lineNumber":111,"author":{"gitID":"sarahgoh97"},"content":"                internalList.add(cell);"},{"lineNumber":112,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":116,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"sarahgoh97"},"content":"     * Returns a map of the cells and their addresses"},{"lineNumber":118,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"sarahgoh97"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"sarahgoh97"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitID":"sarahgoh97"},"content":"        for (Cell[] cArray: cellMap) {"},{"lineNumber":123,"author":{"gitID":"sarahgoh97"},"content":"            for (Cell c: cArray) {"},{"lineNumber":124,"author":{"gitID":"sarahgoh97"},"content":"                sb.append(c.getCellAddress() + \" [\" + c.getNumberOfPrisoners() + \"] \");"},{"lineNumber":125,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"sarahgoh97"},"content":"            sb.delete(sb.length() - 1, sb.length());"},{"lineNumber":127,"author":{"gitID":"sarahgoh97"},"content":"            sb.append(\"\\n\");"},{"lineNumber":128,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"sarahgoh97"},"content":"        return sb.toString();"},{"lineNumber":130,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":132,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"sarahgoh97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"sarahgoh97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"sarahgoh97"},"content":"                || (other instanceof CellMap // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 this.toString().equals((other.toString())));"},{"lineNumber":137,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"sarahgoh97"},"content":"}"}],"authorContributionMap":{"sarahgoh97":138}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.AlreadyInCellException;"},{"lineNumber":7,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.FullCellException;"},{"lineNumber":8,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NonExistentCellException;"},{"lineNumber":9,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotImprisonedException;"},{"lineNumber":10,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotPrisonerException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":15,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":31,"author":{"gitID":"Zacci"},"content":"    /** Returns the session */"},{"lineNumber":32,"author":{"gitID":"Zacci"},"content":"    Session getSession();"},{"lineNumber":33,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":34,"author":{"gitID":"Zacci"},"content":"    /** Clears existing session*/"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"    void logout();"},{"lineNumber":36,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":37,"author":{"gitID":"Zacci"},"content":"    /** Logs in verified user and assigns security level to the session */"},{"lineNumber":38,"author":{"gitID":"Zacci"},"content":"    void login(String username, int securityLevel);"},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":40,"author":{"gitID":"Zacci"},"content":"    /** Attempts to login user with entered username and password */"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"    boolean attemptLogin(String username, String password);"},{"lineNumber":42,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":43,"author":{"gitID":"Zacci"},"content":"    /** Returns Session details to caller */"},{"lineNumber":44,"author":{"gitID":"Zacci"},"content":"    String getSessionDetails();"},{"lineNumber":45,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":46,"author":{"gitID":"Zacci"},"content":"    /** Returns Session security level to caller */"},{"lineNumber":47,"author":{"gitID":"Zacci"},"content":"    int getSecurityLevel();"},{"lineNumber":48,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":49,"author":{"gitID":"Zacci"},"content":"    /** Adds given user to the PrisonBook */"},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"    void addUser(User user) throws UserAlreadyExistsException;"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"sarahgoh97"},"content":"    //@@author sarahgoh97"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"    /** Adds given prisoner into a cell */"},{"lineNumber":61,"author":{"gitID":"sarahgoh97"},"content":"    void addPrisonerToCell(Person prisoner, String cellAddress)"},{"lineNumber":62,"author":{"gitID":"sarahgoh97"},"content":"            throws FullCellException, NonExistentCellException,"},{"lineNumber":63,"author":{"gitID":"sarahgoh97"},"content":"            NotPrisonerException, AlreadyInCellException;"},{"lineNumber":64,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":65,"author":{"gitID":"sarahgoh97"},"content":"    /** Deletes given prisoner from a cell from undo command*/"},{"lineNumber":66,"author":{"gitID":"sarahgoh97"},"content":"    void deletePrisonerFromCell(Person prisoner, String cellAddress);"},{"lineNumber":67,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":68,"author":{"gitID":"sarahgoh97"},"content":"    /**Deletes given prisoner from a cell from DeleteCellCommand */"},{"lineNumber":69,"author":{"gitID":"sarahgoh97"},"content":"    void deletePrisonerFromCell(Person prisoner) throws PersonNotFoundException, NotImprisonedException;"},{"lineNumber":70,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":71,"author":{"gitID":"sarahgoh97"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":18,"Zacci":25,"-":48}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.Cell;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.CellMap;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.AlreadyInCellException;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.FullCellException;"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NonExistentCellException;"},{"lineNumber":20,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotPrisonerException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":28,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.UniqueUserMap;"},{"lineNumber":29,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":30,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":40,"author":{"gitID":"sarahgoh97"},"content":"    private final CellMap cells;"},{"lineNumber":41,"author":{"gitID":"Zacci"},"content":"    private final UniqueUserMap users;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":53,"author":{"gitID":"sarahgoh97"},"content":"        cells \u003d new CellMap();"},{"lineNumber":54,"author":{"gitID":"Zacci"},"content":"        users \u003d new UniqueUserMap();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"sarahgoh97"},"content":"     * Creates an AddressBook using the Persons and Tags and Cells in the {@code toBeCopied}"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"sarahgoh97"},"content":"    public void setCells(ObservableList\u003cCell\u003e cells) {"},{"lineNumber":78,"author":{"gitID":"sarahgoh97"},"content":"        this.cells.setCells(cells);"},{"lineNumber":79,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"sarahgoh97"},"content":"        setCells(newData.getCellList());"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"        setUsers(newData.getUserList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":155,"author":{"gitID":"Zacci"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getRole(),"},{"lineNumber":156,"author":{"gitID":"sarahgoh97"},"content":"                correctTagReferences, person.getIsInCell());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":165,"author":{"gitID":"sarahgoh97"},"content":"            //@@author sarahgoh97"},{"lineNumber":166,"author":{"gitID":"sarahgoh97"},"content":"            if (key.getIsInCell() \u003d\u003d true) {"},{"lineNumber":167,"author":{"gitID":"sarahgoh97"},"content":"                String cellAddress \u003d key.getAddress().toString();"},{"lineNumber":168,"author":{"gitID":"sarahgoh97"},"content":"                cellAddress \u003d cellAddress.substring(0, cellAddress.length() - 13);"},{"lineNumber":169,"author":{"gitID":"sarahgoh97"},"content":"                cells.deletePrisonerFromCell(key, cellAddress);"},{"lineNumber":170,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":171,"author":{"gitID":"sarahgoh97"},"content":"            //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"sarahgoh97"},"content":"    //@@author sarahgoh97"},{"lineNumber":185,"author":{"gitID":"sarahgoh97"},"content":"    //// cell-level operations"},{"lineNumber":186,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":187,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"sarahgoh97"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"sarahgoh97"},"content":"     * @param c is the cell to add to the map"},{"lineNumber":190,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"sarahgoh97"},"content":"    public void addCell(Cell c) {"},{"lineNumber":192,"author":{"gitID":"sarahgoh97"},"content":"        String cellAddress \u003d c.getCellAddress();"},{"lineNumber":193,"author":{"gitID":"sarahgoh97"},"content":"        cells.setCell(c, cellAddress);"},{"lineNumber":194,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":196,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"sarahgoh97"},"content":"     * Adds a prisoner to a cell"},{"lineNumber":198,"author":{"gitID":"sarahgoh97"},"content":"     * @param cellAddress to get the correct cell"},{"lineNumber":199,"author":{"gitID":"sarahgoh97"},"content":"     * @param prisoner to be added into the cell"},{"lineNumber":200,"author":{"gitID":"sarahgoh97"},"content":"     * @throws FullCellException if the cell already has the maximum number of prisoners"},{"lineNumber":201,"author":{"gitID":"sarahgoh97"},"content":"     * @throws NonExistentCellException if the cell address is invalid"},{"lineNumber":202,"author":{"gitID":"sarahgoh97"},"content":"     * @throws NotPrisonerException is the cell is"},{"lineNumber":203,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"sarahgoh97"},"content":"    public void addPrisonerToCell(String cellAddress, Person prisoner) throws FullCellException,"},{"lineNumber":205,"author":{"gitID":"sarahgoh97"},"content":"            NonExistentCellException, NotPrisonerException, AlreadyInCellException {"},{"lineNumber":206,"author":{"gitID":"sarahgoh97"},"content":"        requireAllNonNull(prisoner, cellAddress);"},{"lineNumber":207,"author":{"gitID":"sarahgoh97"},"content":"        if (!Cell.isValidCellAddress(cellAddress)) {"},{"lineNumber":208,"author":{"gitID":"sarahgoh97"},"content":"            throw new NonExistentCellException();"},{"lineNumber":209,"author":{"gitID":"sarahgoh97"},"content":"        } else if (!prisoner.getRole().equals(Role.PRISONER)) {"},{"lineNumber":210,"author":{"gitID":"sarahgoh97"},"content":"            throw new NotPrisonerException();"},{"lineNumber":211,"author":{"gitID":"sarahgoh97"},"content":"        } else if (prisoner.getIsInCell()) {"},{"lineNumber":212,"author":{"gitID":"sarahgoh97"},"content":"            throw new AlreadyInCellException();"},{"lineNumber":213,"author":{"gitID":"sarahgoh97"},"content":"        } else if (cells.getCell(cellAddress).getNumberOfPrisoners() \u003e\u003d Cell.MAX_SIZE) {"},{"lineNumber":214,"author":{"gitID":"sarahgoh97"},"content":"            throw new FullCellException();"},{"lineNumber":215,"author":{"gitID":"sarahgoh97"},"content":"        } else {"},{"lineNumber":216,"author":{"gitID":"sarahgoh97"},"content":"            Person updatedPrisoner \u003d new Person(prisoner, true, cellAddress);"},{"lineNumber":217,"author":{"gitID":"sarahgoh97"},"content":"            updatePrisoner(prisoner, updatedPrisoner);"},{"lineNumber":218,"author":{"gitID":"sarahgoh97"},"content":"            cells.addPrisonerToCell(updatedPrisoner, cellAddress);"},{"lineNumber":219,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":222,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"sarahgoh97"},"content":"     * Deletes prisoner from a specified cell"},{"lineNumber":224,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"sarahgoh97"},"content":"    public void deletePrisonerFromCell(Person prisoner, String cellAddress) {"},{"lineNumber":226,"author":{"gitID":"sarahgoh97"},"content":"        cells.deletePrisonerFromCell(prisoner, cellAddress);"},{"lineNumber":227,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":229,"author":{"gitID":"sarahgoh97"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"sarahgoh97"},"content":"     * Replaces the given person {@code target} in the list with {@code updatedPrisoner}."},{"lineNumber":231,"author":{"gitID":"sarahgoh97"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"sarahgoh97"},"content":"    public void updatePrisoner(Person target, Person updatedPrisoner) {"},{"lineNumber":233,"author":{"gitID":"sarahgoh97"},"content":"        persons.setPrisoner(target, updatedPrisoner);"},{"lineNumber":234,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":236,"author":{"gitID":"sarahgoh97"},"content":"    //// util methods"},{"lineNumber":237,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":238,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"sarahgoh97"},"content":"    public String toString() {"},{"lineNumber":240,"author":{"gitID":"sarahgoh97"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\\n\""},{"lineNumber":241,"author":{"gitID":"sarahgoh97"},"content":"                + cells.getCellList() + users.getUserList();"},{"lineNumber":242,"author":{"gitID":"sarahgoh97"},"content":"        // TODO: refine later"},{"lineNumber":243,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"sarahgoh97"},"content":"    //@@author"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":247,"author":{"gitID":"Zacci"},"content":"    //// user-level operations"},{"lineNumber":248,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":249,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"Zacci"},"content":"     *"},{"lineNumber":251,"author":{"gitID":"Zacci"},"content":"     * @param u is the user to add to the HashMap"},{"lineNumber":252,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"Zacci"},"content":"    public void addUser(User u) throws UserAlreadyExistsException {"},{"lineNumber":254,"author":{"gitID":"Zacci"},"content":"        users.addUser(u);"},{"lineNumber":255,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":257,"author":{"gitID":"Zacci"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"Zacci"},"content":"     * Attempt to log in with the entered username and password"},{"lineNumber":259,"author":{"gitID":"Zacci"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"Zacci"},"content":"    public int attemptLogin(String username, String password) {"},{"lineNumber":261,"author":{"gitID":"Zacci"},"content":"        return users.verify(username, password);"},{"lineNumber":262,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":264,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":265,"author":{"gitID":"Zacci"},"content":"    public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":266,"author":{"gitID":"Zacci"},"content":"        return users.getUserList();"},{"lineNumber":267,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":269,"author":{"gitID":"Zacci"},"content":"    public void setUsers(ObservableList\u003cUser\u003e users) {"},{"lineNumber":270,"author":{"gitID":"Zacci"},"content":"        this.users.setUsers(users);"},{"lineNumber":271,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":273,"author":{"gitID":"Zacci"},"content":"    //@@author"},{"lineNumber":274,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"sarahgoh97"},"content":"    //@@author sarahgoh97"},{"lineNumber":286,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":287,"author":{"gitID":"sarahgoh97"},"content":"    public ObservableList\u003cCell\u003e getCellList() {"},{"lineNumber":288,"author":{"gitID":"sarahgoh97"},"content":"        return cells.getCellList();"},{"lineNumber":289,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"sarahgoh97"},"content":"    //@@author"},{"lineNumber":291,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":295,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":296,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":297,"author":{"gitID":"sarahgoh97"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":298,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 this.cells.equals(((AddressBook) other).cells)"},{"lineNumber":299,"author":{"gitID":"Zacci"},"content":"                \u0026\u0026 this.users.equals(((AddressBook) other).users));"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":91,"Zacci":38,"-":178}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.AlreadyInCellException;"},{"lineNumber":16,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.FullCellException;"},{"lineNumber":17,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NonExistentCellException;"},{"lineNumber":18,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotImprisonedException;"},{"lineNumber":19,"author":{"gitID":"sarahgoh97"},"content":"import seedu.address.model.cell.exceptions.NotPrisonerException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.User;"},{"lineNumber":24,"author":{"gitID":"Zacci"},"content":"import seedu.address.model.user.exceptions.UserAlreadyExistsException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":35,"author":{"gitID":"Zacci"},"content":"    private final Session session;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":39,"author":{"gitID":"Zacci"},"content":"     * Also initialises an empty cellMap and empty session"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":49,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":50,"author":{"gitID":"Zacci"},"content":"        logger.info(\"Initialising session\");"},{"lineNumber":51,"author":{"gitID":"Zacci"},"content":"        session \u003d new Session();"},{"lineNumber":52,"author":{"gitID":"Zacci"},"content":"        logger.info(\"Initialised session\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Zacci"},"content":"    //@@author zacci"},{"lineNumber":71,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Zacci"},"content":"    public Session getSession() {"},{"lineNumber":73,"author":{"gitID":"Zacci"},"content":"        return session;"},{"lineNumber":74,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":76,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"Zacci"},"content":"    public void logout() {"},{"lineNumber":78,"author":{"gitID":"Zacci"},"content":"        session.logout();"},{"lineNumber":79,"author":{"gitID":"Zacci"},"content":"        logger.info(\"User logged out\");"},{"lineNumber":80,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":82,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"Zacci"},"content":"    public void login(String username, int securityLevel) {"},{"lineNumber":84,"author":{"gitID":"Zacci"},"content":"        session.login(username, securityLevel);"},{"lineNumber":85,"author":{"gitID":"Zacci"},"content":"        logger.info(\"User logged in with: u/\" + username + \" slevel/\" + securityLevel);"},{"lineNumber":86,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":88,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"Zacci"},"content":"    public boolean attemptLogin(String username, String password) {"},{"lineNumber":90,"author":{"gitID":"Zacci"},"content":"        int securityLevel \u003d addressBook.attemptLogin(username, password);"},{"lineNumber":91,"author":{"gitID":"Zacci"},"content":"        if (securityLevel \u003c 0) {"},{"lineNumber":92,"author":{"gitID":"Zacci"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"Zacci"},"content":"        } else {"},{"lineNumber":94,"author":{"gitID":"Zacci"},"content":"            login(username, securityLevel);"},{"lineNumber":95,"author":{"gitID":"Zacci"},"content":"            return true;"},{"lineNumber":96,"author":{"gitID":"Zacci"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":99,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"Zacci"},"content":"    public String getSessionDetails() {"},{"lineNumber":101,"author":{"gitID":"Zacci"},"content":"        return (\"Username: \" + session.getUsername() + \" Security Level: \" + session.getSecurityLevel());"},{"lineNumber":102,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":104,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"Zacci"},"content":"    public int getSecurityLevel() {"},{"lineNumber":106,"author":{"gitID":"Zacci"},"content":"        return session.getSecurityLevel();"},{"lineNumber":107,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":109,"author":{"gitID":"Zacci"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Zacci"},"content":"    public void addUser(User userToAdd) throws UserAlreadyExistsException {"},{"lineNumber":111,"author":{"gitID":"Zacci"},"content":"        addressBook.addUser(userToAdd);"},{"lineNumber":112,"author":{"gitID":"Zacci"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"Zacci"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Zacci"},"content":"    //@@author"},{"lineNumber":115,"author":{"gitID":"Zacci"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"sarahgoh97"},"content":"    //@@author sarahgoh97"},{"lineNumber":144,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"sarahgoh97"},"content":"    public void addPrisonerToCell(Person prisoner, String cellAddress)"},{"lineNumber":146,"author":{"gitID":"sarahgoh97"},"content":"            throws FullCellException, NonExistentCellException,"},{"lineNumber":147,"author":{"gitID":"sarahgoh97"},"content":"            NotPrisonerException, AlreadyInCellException {"},{"lineNumber":148,"author":{"gitID":"sarahgoh97"},"content":"        requireAllNonNull(prisoner, cellAddress);"},{"lineNumber":149,"author":{"gitID":"sarahgoh97"},"content":"        addressBook.addPrisonerToCell(cellAddress, prisoner);"},{"lineNumber":150,"author":{"gitID":"sarahgoh97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":151,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":153,"author":{"gitID":"sarahgoh97"},"content":"    /* this is for undo command */"},{"lineNumber":154,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"sarahgoh97"},"content":"    public void deletePrisonerFromCell(Person prisoner, String cellAddress) {"},{"lineNumber":156,"author":{"gitID":"sarahgoh97"},"content":"        requireAllNonNull(prisoner, cellAddress);"},{"lineNumber":157,"author":{"gitID":"sarahgoh97"},"content":"        Person updatedPrisoner \u003d new Person(prisoner, true, cellAddress);"},{"lineNumber":158,"author":{"gitID":"sarahgoh97"},"content":"        addressBook.deletePrisonerFromCell(updatedPrisoner, cellAddress);"},{"lineNumber":159,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":161,"author":{"gitID":"sarahgoh97"},"content":"    /* this is for delete cell command */"},{"lineNumber":162,"author":{"gitID":"sarahgoh97"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"sarahgoh97"},"content":"    public void deletePrisonerFromCell(Person prisoner) throws PersonNotFoundException, NotImprisonedException {"},{"lineNumber":164,"author":{"gitID":"sarahgoh97"},"content":"        requireNonNull(prisoner);"},{"lineNumber":165,"author":{"gitID":"sarahgoh97"},"content":"        if (!filteredPersons.contains(prisoner)) {"},{"lineNumber":166,"author":{"gitID":"sarahgoh97"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":167,"author":{"gitID":"sarahgoh97"},"content":"        } else {"},{"lineNumber":168,"author":{"gitID":"sarahgoh97"},"content":"            String cellAddress \u003d prisoner.getAddress().toString();"},{"lineNumber":169,"author":{"gitID":"sarahgoh97"},"content":"            if (prisoner.getIsInCell()) {"},{"lineNumber":170,"author":{"gitID":"sarahgoh97"},"content":"                cellAddress \u003d cellAddress.substring(0, cellAddress.indexOf(\" \"));"},{"lineNumber":171,"author":{"gitID":"sarahgoh97"},"content":"                addressBook.deletePrisonerFromCell(prisoner, cellAddress);"},{"lineNumber":172,"author":{"gitID":"sarahgoh97"},"content":"                Person freedPrisoner \u003d new Person(prisoner, false);"},{"lineNumber":173,"author":{"gitID":"sarahgoh97"},"content":"                addressBook.updatePrisoner(prisoner, freedPrisoner);"},{"lineNumber":174,"author":{"gitID":"sarahgoh97"},"content":"            } else {"},{"lineNumber":175,"author":{"gitID":"sarahgoh97"},"content":"                throw new NotImprisonedException();"},{"lineNumber":176,"author":{"gitID":"sarahgoh97"},"content":"            }"},{"lineNumber":177,"author":{"gitID":"sarahgoh97"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"sarahgoh97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":179,"author":{"gitID":"sarahgoh97"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"sarahgoh97"},"content":"    //@@author"},{"lineNumber":181,"author":{"gitID":"sarahgoh97"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":213,"author":{"gitID":"Zacci"},"content":"        return addressBook.equals(other.addressBook) \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sarahgoh97":45,"Zacci":54,"-":117}}]
